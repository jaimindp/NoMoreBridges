"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getIsWrappedAssetAptos = exports.getIsWrappedAssetSol = exports.getIsWrappedAssetSolana = exports.getIsWrappedAssetEth = void 0;
const aptos_1 = require("aptos");
const ethers_contracts_1 = require("../ethers-contracts");
const nftBridge_1 = require("../solana/nftBridge");
/**
 * Returns whether or not an asset address on Ethereum is a wormhole wrapped asset
 * @param nftBridgeAddress
 * @param provider
 * @param assetAddress
 * @returns
 */
function getIsWrappedAssetEth(nftBridgeAddress, provider, assetAddress) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!assetAddress)
            return false;
        const tokenBridge = ethers_contracts_1.Bridge__factory.connect(nftBridgeAddress, provider);
        return yield tokenBridge.isWrappedAsset(assetAddress);
    });
}
exports.getIsWrappedAssetEth = getIsWrappedAssetEth;
/**
 * Returns whether or not an asset on Solana is a wormhole wrapped asset
 * @param connection
 * @param nftBridgeAddress
 * @param mintAddress
 * @param [commitment]
 * @returns
 */
function getIsWrappedAssetSolana(connection, nftBridgeAddress, mintAddress, commitment) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!mintAddress) {
            return false;
        }
        return nftBridge_1.getWrappedMeta(connection, nftBridgeAddress, mintAddress, commitment)
            .catch((_) => null)
            .then((meta) => meta != null);
    });
}
exports.getIsWrappedAssetSolana = getIsWrappedAssetSolana;
exports.getIsWrappedAssetSol = getIsWrappedAssetSolana;
function getIsWrappedAssetAptos(client, nftBridgeAddress, creatorAddress) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            yield client.getAccountResource(creatorAddress, `${nftBridgeAddress}::state::OriginInfo`);
            return true;
        }
        catch (e) {
            if ((e instanceof aptos_1.Types.ApiError || e.errorCode === "resource_not_found") &&
                e.status === 404) {
                return false;
            }
            throw e;
        }
    });
}
exports.getIsWrappedAssetAptos = getIsWrappedAssetAptos;
