"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.dbg = exports.parseOverrideInfoFromDeliveryEvent = exports.packOverrides = exports.redeliveryInstructionPrintable = exports.cctpKeyPrintable = exports.vaaKeyPrintable = exports.messageKeyPrintable = exports.deliveryInstructionsPrintable = exports.executionInfoToString = exports.parseWormholeRelayerResend = exports.packEVMExecutionInfoV1 = exports.parseEVMExecutionInfoV1 = exports.parseCCTPMessage = exports.packCCTPMessage = exports.packVaaKey = exports.parseVaaKey = exports.packCCTPKey = exports.parseCCTPKey = exports.packMessageKey = exports.parseMessageKey = exports.parseWormholeRelayerSend = exports.createVaaKey = exports.parseWormholeRelayerPayloadType = exports.VaaKeyType = exports.KeyType = exports.parseRefundStatus = exports.RefundStatus = exports.DeliveryStatus = exports.ExecutionInfoVersion = exports.RelayerPayloadId = void 0;
const ethers_1 = require("ethers");
var RelayerPayloadId;
(function (RelayerPayloadId) {
    RelayerPayloadId[RelayerPayloadId["Delivery"] = 1] = "Delivery";
    RelayerPayloadId[RelayerPayloadId["Redelivery"] = 2] = "Redelivery";
})(RelayerPayloadId = exports.RelayerPayloadId || (exports.RelayerPayloadId = {}));
var ExecutionInfoVersion;
(function (ExecutionInfoVersion) {
    ExecutionInfoVersion[ExecutionInfoVersion["EVM_V1"] = 0] = "EVM_V1";
})(ExecutionInfoVersion = exports.ExecutionInfoVersion || (exports.ExecutionInfoVersion = {}));
var DeliveryStatus;
(function (DeliveryStatus) {
    DeliveryStatus["WaitingForVAA"] = "Waiting for VAA";
    DeliveryStatus["PendingDelivery"] = "Pending Delivery";
    DeliveryStatus["DeliverySuccess"] = "Delivery Success";
    DeliveryStatus["ReceiverFailure"] = "Receiver Failure";
    DeliveryStatus["ThisShouldNeverHappen"] = "This should never happen. Contact Support.";
})(DeliveryStatus = exports.DeliveryStatus || (exports.DeliveryStatus = {}));
var RefundStatus;
(function (RefundStatus) {
    RefundStatus["RefundSent"] = "Refund Sent";
    RefundStatus["RefundFail"] = "Refund Fail";
    RefundStatus["CrossChainRefundSent"] = "Cross Chain Refund Sent";
    RefundStatus["CrossChainRefundFailProviderNotSupported"] = "Cross Chain Refund Fail - Provider does not support the refund chain";
    RefundStatus["CrossChainRefundFailNotEnough"] = "Cross Chain Refund Fail - Refund too low for cross chain refund";
    RefundStatus["RefundAddressNotProvided"] = "No refund address provided";
    RefundStatus["InvalidRefundStatus"] = "Invalid refund status";
})(RefundStatus = exports.RefundStatus || (exports.RefundStatus = {}));
function parseRefundStatus(index) {
    return index === 0
        ? RefundStatus.RefundSent
        : index === 1
            ? RefundStatus.RefundFail
            : index === 2
                ? RefundStatus.CrossChainRefundSent
                : index === 3
                    ? RefundStatus.CrossChainRefundFailProviderNotSupported
                    : index === 4
                        ? RefundStatus.CrossChainRefundFailNotEnough
                        : index === 5
                            ? RefundStatus.RefundAddressNotProvided
                            : RefundStatus.InvalidRefundStatus;
}
exports.parseRefundStatus = parseRefundStatus;
var KeyType;
(function (KeyType) {
    KeyType[KeyType["VAA"] = 1] = "VAA";
    KeyType[KeyType["CCTP"] = 2] = "CCTP";
})(KeyType = exports.KeyType || (exports.KeyType = {}));
var VaaKeyType;
(function (VaaKeyType) {
    VaaKeyType[VaaKeyType["EMITTER_SEQUENCE"] = 0] = "EMITTER_SEQUENCE";
    VaaKeyType[VaaKeyType["VAAHASH"] = 1] = "VAAHASH";
})(VaaKeyType = exports.VaaKeyType || (exports.VaaKeyType = {}));
function parseWormholeRelayerPayloadType(stringPayload) {
    const payload = typeof stringPayload === "string"
        ? ethers_1.ethers.utils.arrayify(stringPayload)
        : stringPayload;
    if (payload[0] != RelayerPayloadId.Delivery &&
        payload[0] != RelayerPayloadId.Redelivery) {
        throw new Error("Unrecognized payload type " + payload[0]);
    }
    return payload[0];
}
exports.parseWormholeRelayerPayloadType = parseWormholeRelayerPayloadType;
function createVaaKey(chainId, emitterAddress, sequence) {
    return {
        chainId,
        emitterAddress,
        sequence: ethers_1.ethers.BigNumber.from(sequence),
    };
}
exports.createVaaKey = createVaaKey;
function parseWormholeRelayerSend(bytes) {
    let idx = 0;
    const payloadId = bytes.readUInt8(idx);
    if (payloadId !== RelayerPayloadId.Delivery) {
        throw new Error(`Expected Delivery payload type (${RelayerPayloadId.Delivery}), found: ${payloadId}`);
    }
    idx += 1;
    const targetChainId = bytes.readUInt16BE(idx);
    idx += 2;
    const targetAddress = bytes.slice(idx, idx + 32);
    idx += 32;
    let payload;
    [payload, idx] = parsePayload(bytes, idx);
    const requestedReceiverValue = ethers_1.ethers.BigNumber.from(Uint8Array.prototype.subarray.call(bytes, idx, idx + 32));
    idx += 32;
    const extraReceiverValue = ethers_1.ethers.BigNumber.from(Uint8Array.prototype.subarray.call(bytes, idx, idx + 32));
    idx += 32;
    let encodedExecutionInfo;
    [encodedExecutionInfo, idx] = parsePayload(bytes, idx);
    const refundChainId = bytes.readUInt16BE(idx);
    idx += 2;
    const refundAddress = bytes.slice(idx, idx + 32);
    idx += 32;
    const refundDeliveryProvider = bytes.slice(idx, idx + 32);
    idx += 32;
    const sourceDeliveryProvider = bytes.slice(idx, idx + 32);
    idx += 32;
    const senderAddress = bytes.slice(idx, idx + 32);
    idx += 32;
    const numMessages = bytes.readUInt8(idx);
    idx += 1;
    let messageKeys = [];
    for (let i = 0; i < numMessages; ++i) {
        const res = parseMessageKey(bytes, idx);
        idx = res[1];
        messageKeys.push(res[0]);
    }
    return {
        targetChainId,
        targetAddress,
        payload,
        requestedReceiverValue,
        extraReceiverValue,
        encodedExecutionInfo,
        refundChainId,
        refundAddress,
        refundDeliveryProvider,
        sourceDeliveryProvider,
        senderAddress,
        messageKeys: messageKeys,
    };
}
exports.parseWormholeRelayerSend = parseWormholeRelayerSend;
function parsePayload(bytes, idx) {
    const length = bytes.readUInt32BE(idx);
    idx += 4;
    const payload = bytes.slice(idx, idx + length);
    idx += length;
    return [payload, idx];
}
function parseMessageKey(_bytes, idx) {
    const bytes = Buffer.from(ethers_1.ethers.utils.arrayify(_bytes));
    const keyType = bytes.readUInt8(idx);
    idx += 1;
    if (keyType === KeyType.VAA) {
        const vaaKeyLength = 2 + 32 + 8;
        return [
            { keyType, key: bytes.slice(idx, idx + vaaKeyLength) },
            idx + 2 + 32 + 8,
        ];
    }
    else {
        const len = bytes.readUInt32BE(idx);
        idx += 4;
        return [{ keyType, key: bytes.slice(idx, idx + len) }, idx + len];
    }
}
exports.parseMessageKey = parseMessageKey;
function packMessageKey(key) {
    const encodedKey = ethers_1.ethers.utils.arrayify(key.key);
    const bytes = Buffer.alloc(1 + 4 + encodedKey.length);
    let idx = 0;
    bytes.writeUInt8(key.keyType, idx);
    idx += 1;
    if (key.keyType === KeyType.VAA) {
        bytes.fill(encodedKey, idx);
    }
    else {
        const encodedKey = ethers_1.ethers.utils.arrayify(key.key);
        bytes.writeUInt32BE(encodedKey.length, idx);
        idx += 4;
        bytes.fill(encodedKey, idx);
    }
    return ethers_1.ethers.utils.hexlify(bytes);
}
exports.packMessageKey = packMessageKey;
function parseCCTPKey(_bytes) {
    const bytes = Buffer.from(ethers_1.ethers.utils.arrayify(_bytes));
    const domain = bytes.readUInt32BE(0);
    const nonce = ethers_1.ethers.BigNumber.from(bytes.readBigUInt64BE(4));
    return { domain, nonce };
}
exports.parseCCTPKey = parseCCTPKey;
function packCCTPKey(key) {
    const buf = Buffer.alloc(4 + 8);
    buf.writeUInt32BE(key.domain, 0);
    buf.writeBigUInt64BE(key.nonce.toBigInt(), 4);
    return ethers_1.ethers.utils.hexlify(buf);
}
exports.packCCTPKey = packCCTPKey;
function parseVaaKey(_bytes) {
    const bytes = Buffer.from(ethers_1.ethers.utils.arrayify(_bytes));
    let idx = 0;
    const chainId = bytes.readUInt16BE(idx);
    idx += 2;
    const emitterAddress = bytes.slice(idx, idx + 32);
    idx += 32;
    const sequence = ethers_1.ethers.BigNumber.from(Uint8Array.prototype.subarray.call(bytes, idx, idx + 8));
    idx += 8;
    return {
        chainId,
        emitterAddress,
        sequence,
    };
}
exports.parseVaaKey = parseVaaKey;
function packVaaKey(vaaKey) {
    const bytes = Buffer.alloc(2 + 32 + 8);
    bytes.writeUInt16BE(vaaKey.chainId, 0);
    bytes.fill(vaaKey.emitterAddress, 2, 34);
    bytes.writeBigUInt64BE(vaaKey.sequence.toBigInt(), 34);
    return ethers_1.ethers.utils.hexlify(bytes);
}
exports.packVaaKey = packVaaKey;
function packCCTPMessage(message) {
    return ethers_1.ethers.utils.defaultAbiCoder.encode(["bytes", "bytes"], [message.message, message.signature]);
}
exports.packCCTPMessage = packCCTPMessage;
function parseCCTPMessage(bytes) {
    const [message, signature] = ethers_1.ethers.utils.defaultAbiCoder.decode(["bytes", "bytes"], bytes);
    return { message, signature };
}
exports.parseCCTPMessage = parseCCTPMessage;
function parseEVMExecutionInfoV1(bytes, idx) {
    idx += 31;
    const version = bytes.readUInt8(idx);
    idx += 1;
    if (version !== ExecutionInfoVersion.EVM_V1) {
        throw new Error("Unexpected Execution Info version");
    }
    const gasLimit = ethers_1.ethers.BigNumber.from(Uint8Array.prototype.subarray.call(bytes, idx, idx + 32));
    idx += 32;
    const targetChainRefundPerGasUnused = ethers_1.ethers.BigNumber.from(Uint8Array.prototype.subarray.call(bytes, idx, idx + 32));
    idx += 32;
    return [{ gasLimit, targetChainRefundPerGasUnused }, idx];
}
exports.parseEVMExecutionInfoV1 = parseEVMExecutionInfoV1;
function packEVMExecutionInfoV1(info) {
    return ethers_1.ethers.utils.defaultAbiCoder.encode(["uint8", "uint256", "uint256"], [
        ExecutionInfoVersion.EVM_V1,
        info.gasLimit,
        info.targetChainRefundPerGasUnused,
    ]);
}
exports.packEVMExecutionInfoV1 = packEVMExecutionInfoV1;
function parseWormholeRelayerResend(bytes) {
    let idx = 0;
    const payloadId = bytes.readUInt8(idx);
    if (payloadId !== RelayerPayloadId.Redelivery) {
        throw new Error(`Expected Delivery payload type (${RelayerPayloadId.Redelivery}), found: ${payloadId}`);
    }
    idx += 1;
    let parsedMessageKey;
    [parsedMessageKey, idx] = parseMessageKey(bytes, idx);
    const key = parseVaaKey(parsedMessageKey.key);
    const targetChainId = bytes.readUInt16BE(idx);
    idx += 2;
    const newRequestedReceiverValue = ethers_1.ethers.BigNumber.from(Uint8Array.prototype.subarray.call(bytes, idx, idx + 32));
    idx += 32;
    let newEncodedExecutionInfo;
    [newEncodedExecutionInfo, idx] = parsePayload(bytes, idx);
    const newSourceDeliveryProvider = bytes.slice(idx, idx + 32);
    idx += 32;
    const newSenderAddress = bytes.slice(idx, idx + 32);
    idx += 32;
    return {
        deliveryVaaKey: key,
        targetChainId,
        newRequestedReceiverValue,
        newEncodedExecutionInfo,
        newSourceDeliveryProvider,
        newSenderAddress,
    };
}
exports.parseWormholeRelayerResend = parseWormholeRelayerResend;
function executionInfoToString(encodedExecutionInfo) {
    const [parsed] = parseEVMExecutionInfoV1(encodedExecutionInfo, 0);
    return `Gas limit: ${parsed.gasLimit}, Target chain refund per unit gas unused: ${parsed.targetChainRefundPerGasUnused}`;
}
exports.executionInfoToString = executionInfoToString;
function deliveryInstructionsPrintable(ix) {
    return {
        targetChainId: ix.targetChainId.toString(),
        targetAddress: ix.targetAddress.toString("hex"),
        payload: ix.payload.toString("base64"),
        requestedReceiverValue: ix.requestedReceiverValue.toString(),
        extraReceiverValue: ix.extraReceiverValue.toString(),
        encodedExecutionInfo: executionInfoToString(ix.encodedExecutionInfo),
        refundChainId: ix.refundChainId.toString(),
        refundAddress: ix.refundAddress.toString("hex"),
        refundDeliveryProvider: ix.refundDeliveryProvider.toString("hex"),
        sourceDeliveryProvider: ix.sourceDeliveryProvider.toString("hex"),
        senderAddress: ix.senderAddress.toString("hex"),
        messageKeys: ix.messageKeys.map(messageKeyPrintable),
    };
}
exports.deliveryInstructionsPrintable = deliveryInstructionsPrintable;
function messageKeyPrintable(ix) {
    switch (ix.keyType) {
        case KeyType.VAA:
            return Object.assign({ keyType: "VAA" }, vaaKeyPrintable(parseVaaKey(ix.key)));
        case KeyType.CCTP:
            return Object.assign({ keyType: "CCTP" }, cctpKeyPrintable(parseCCTPKey(ix.key)));
        default:
            return {
                keyType: ix.keyType.toString(),
                key: ethers_1.ethers.utils.hexlify(ix.key),
            };
    }
}
exports.messageKeyPrintable = messageKeyPrintable;
function vaaKeyPrintable(ix) {
    var _a, _b, _c;
    return {
        chainId: (_a = ix.chainId) === null || _a === void 0 ? void 0 : _a.toString(),
        emitterAddress: (_b = ix.emitterAddress) === null || _b === void 0 ? void 0 : _b.toString("hex"),
        sequence: (_c = ix.sequence) === null || _c === void 0 ? void 0 : _c.toString(),
    };
}
exports.vaaKeyPrintable = vaaKeyPrintable;
function cctpKeyPrintable(ix) {
    return {
        domain: ix.domain.toString(),
        nonce: ix.nonce.toString(),
    };
}
exports.cctpKeyPrintable = cctpKeyPrintable;
function redeliveryInstructionPrintable(ix) {
    return {
        deliveryVaaKey: vaaKeyPrintable(ix.deliveryVaaKey),
        targetChainId: ix.targetChainId.toString(),
        newRequestedReceiverValue: ix.newRequestedReceiverValue.toString(),
        newEncodedExecutionInfo: executionInfoToString(ix.newEncodedExecutionInfo),
        newSourceDeliveryProvider: ix.newSourceDeliveryProvider.toString("hex"),
        newSenderAddress: ix.newSenderAddress.toString("hex"),
    };
}
exports.redeliveryInstructionPrintable = redeliveryInstructionPrintable;
function packOverrides(overrides) {
    const packed = [
        ethers_1.ethers.utils.solidityPack(["uint8"], [1]).substring(2),
        ethers_1.ethers.utils
            .solidityPack(["uint256"], [overrides.newReceiverValue])
            .substring(2),
        ethers_1.ethers.utils
            .solidityPack(["uint32"], [overrides.newExecutionInfo.length])
            .substring(2),
        overrides.newExecutionInfo.toString("hex"),
        overrides.redeliveryHash.toString("hex"), //toString('hex') doesn't add the 0x prefix
    ].join("");
    return "0x" + packed;
}
exports.packOverrides = packOverrides;
function parseOverrideInfoFromDeliveryEvent(bytes) {
    let idx = 0;
    const version = bytes.readUInt8(idx);
    idx += 1;
    const newReceiverValue = ethers_1.ethers.BigNumber.from(Uint8Array.prototype.subarray.call(bytes, idx, idx + 32));
    idx += 32;
    let newExecutionInfo;
    [newExecutionInfo, idx] = parsePayload(bytes, idx);
    const redeliveryHash = bytes.slice(idx, idx + 32);
    idx += 32;
    return {
        newReceiverValue,
        newExecutionInfo,
        redeliveryHash,
    };
}
exports.parseOverrideInfoFromDeliveryEvent = parseOverrideInfoFromDeliveryEvent;
/*
 * Helpers
 */
function dbg(x, msg) {
    if (msg) {
        console.log("[DEBUG] " + msg);
    }
    console.log(x);
    return x;
}
exports.dbg = dbg;
