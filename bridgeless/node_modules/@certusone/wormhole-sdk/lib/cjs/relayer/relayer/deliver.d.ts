/// <reference types="node" />
import { BigNumber, ethers, ContractReceipt } from "ethers";
import { ChainName, Network } from "../../utils";
import { SignedVaa } from "../../vaa";
import { RelayerPayloadId, DeliveryInstruction, DeliveryOverrideArgs, MessageKey } from "../structs";
import { DeliveryTargetInfo } from "./helpers";
import { InfoRequestParams } from "./info";
export declare type CCTPTransferParsed = {
    amount: bigint;
    mintRecipient: string;
    destinationDomain: number;
    estimatedAttestationSeconds: number;
    attested: boolean;
};
export declare type TokenTransferParsed = {
    amount: bigint;
    originAddress: string;
    originChain: number;
    targetAddress: string;
    targetChain: number;
    fromAddress: string | undefined;
    name?: string;
    symbol?: string;
    decimals?: number;
    signedVaaTimestamp?: number;
};
export declare type AdditionalMessageParsed = CCTPTransferParsed | TokenTransferParsed | undefined;
export declare type DeliveryInfo = {
    type: RelayerPayloadId.Delivery;
    sourceChain: ChainName;
    sourceTransactionHash: string;
    sourceDeliverySequenceNumber: number;
    sourceTimestamp: number;
    signingOfVaaTimestamp: number | undefined;
    deliveryInstruction: DeliveryInstruction;
    additionalMessageInformation: AdditionalMessageParsed[];
    targetChainStatus: {
        chain: ChainName;
        events: DeliveryTargetInfo[];
    };
    stringified?: string;
};
export declare type DeliveryArguments = {
    budget: BigNumber;
    deliveryInstruction: DeliveryInstruction;
    deliveryHash: string;
};
export declare function manualDelivery(sourceChain: ChainName, sourceTransaction: string, infoRequest?: InfoRequestParams, getQuoteOnly?: boolean, overrides?: DeliveryOverrideArgs, signer?: ethers.Signer): Promise<{
    quote: BigNumber;
    targetChain: ChainName;
    txHash?: string;
}>;
export declare function deliver(deliveryVaa: SignedVaa, signer: ethers.Signer, environment?: Network, overrides?: DeliveryOverrideArgs, sourceChain?: ChainName, sourceReceipt?: ethers.providers.TransactionReceipt): Promise<ContractReceipt>;
export declare function deliveryBudget(delivery: DeliveryInstruction, overrides?: DeliveryOverrideArgs): BigNumber;
export declare function extractDeliveryArguments(vaa: SignedVaa, overrides?: DeliveryOverrideArgs): DeliveryArguments;
export declare function fetchAdditionalMessages(additionalMessageKeys: MessageKey[], environment: Network, sourceChain?: ChainName, sourceReceipt?: ethers.providers.TransactionReceipt): Promise<(Uint8Array | Buffer)[]>;
