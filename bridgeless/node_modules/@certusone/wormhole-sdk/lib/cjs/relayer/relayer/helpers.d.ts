import { ChainId, ChainName, Network } from "../../";
import { BigNumber, ContractReceipt, ethers } from "ethers";
import { RelayerPayloadId, DeliveryInstruction, DeliveryStatus, RefundStatus, VaaKey, DeliveryOverrideArgs, RedeliveryInstruction, CCTPKey } from "../structs";
import { InfoRequestParams } from "./info";
import { DeliveryProvider } from "../../ethers-contracts/";
import { VaaKeyStruct } from "../../ethers-contracts/IWormholeRelayer.sol/IWormholeRelayer";
export declare type DeliveryTargetInfo = {
    status: DeliveryStatus | string;
    transactionHash: string | null;
    vaaHash: string | null;
    sourceChain: ChainName | null;
    sourceVaaSequence: BigNumber | null;
    gasUsed: BigNumber;
    refundStatus: RefundStatus;
    timestamp?: number;
    revertString?: string;
    overrides?: DeliveryOverrideArgs;
};
export declare function parseWormholeLog(log: ethers.providers.Log): {
    type: RelayerPayloadId;
    parsed: DeliveryInstruction | RedeliveryInstruction | string;
};
export declare function printChain(chainId: number): string;
export declare function printCCTPDomain(domain: number): string;
export declare const estimatedAttestationTimeInSeconds: (sourceChain: string, environment: Network) => number;
export declare function getDefaultProvider(network: Network, chain: ChainName, ci?: boolean): ethers.providers.StaticJsonRpcProvider;
export declare function getDeliveryProvider(address: string, provider: ethers.providers.Provider): DeliveryProvider;
export declare function getWormholeRelayerInfoBySourceSequence(environment: Network, targetChain: ChainName, targetChainProvider: ethers.providers.Provider, sourceChain: ChainName | undefined, sourceVaaSequence: BigNumber | undefined, blockRange: [ethers.providers.BlockTag, ethers.providers.BlockTag] | undefined, targetWormholeRelayerAddress: string): Promise<DeliveryTargetInfo[]>;
export declare function getWormholeRelayerDeliveryEventsBySourceSequence(environment: Network, targetChain: ChainName, targetChainProvider: ethers.providers.Provider, sourceChain: ChainName | undefined, sourceVaaSequence: BigNumber | undefined, blockRange: [ethers.providers.BlockTag, ethers.providers.BlockTag] | undefined, targetWormholeRelayerAddress: string): Promise<DeliveryTargetInfo[]>;
export declare function deliveryStatus(status: number): DeliveryStatus.DeliverySuccess | DeliveryStatus.ReceiverFailure | DeliveryStatus.ThisShouldNeverHappen;
export declare function transformDeliveryLog(log: {
    args: [
        string,
        number,
        BigNumber,
        string,
        number,
        BigNumber,
        number,
        string,
        string
    ];
    transactionHash: string;
}, timestamp: number): DeliveryTargetInfo;
export declare function getWormholeLog(receipt: ContractReceipt, bridgeAddress: string, emitterAddress: string, index: number, sequence?: number): {
    log: ethers.providers.Log;
    sequence: string;
    payload: string;
};
export declare function vaaKeyToVaaKeyStruct(vaaKey: VaaKey): VaaKeyStruct;
export declare function getWormholeRelayerInfoByHash(deliveryHash: string, targetChain: ChainName, sourceChain: ChainName | undefined, sourceVaaSequence: number | undefined, infoRequest?: InfoRequestParams): Promise<DeliveryTargetInfo[]>;
export declare function getDeliveryHashFromVaaFields(sourceChain: number, emitterAddress: string, sequence: number, timestamp: number, nonce: number, consistencyLevel: number, deliveryVaaPayload: string): string;
export declare function getWormscanInfo(network: Network, sourceChain: ChainName, sequence: number, emitterAddress: string): Promise<Response>;
export declare function getWormscanRelayerInfo(sourceChain: ChainName, sequence: number, optionalParams?: {
    network?: Network;
    provider?: ethers.providers.Provider;
    wormholeRelayerAddress?: string;
}): Promise<Response>;
export declare function getRelayerTransactionHashFromWormscan(sourceChain: ChainName, sequence: number, optionalParams?: {
    network?: Network;
    provider?: ethers.providers.Provider;
    wormholeRelayerAddress?: string;
}): Promise<string>;
export declare function getDeliveryHash(rx: ethers.ContractReceipt, sourceChain: ChainName, optionalParams?: {
    network?: Network;
    provider?: ethers.providers.Provider;
    index?: number;
    wormholeRelayerAddress?: string;
}): Promise<string>;
export declare function getDeliveryHashFromLog(wormholeLog: ethers.providers.Log, sourceChain: ChainId, provider: ethers.providers.Provider, blockHash: string): Promise<string>;
export declare function getCCTPMessageLogURL(cctpKey: CCTPKey, sourceChain: ChainName, receipt: ethers.providers.TransactionReceipt, environment: Network): Promise<{
    message: any;
    cctpLog: ethers.providers.Log;
    url: string;
} | undefined>;
