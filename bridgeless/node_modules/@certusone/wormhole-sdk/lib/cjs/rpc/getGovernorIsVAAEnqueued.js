"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getGovernorIsVAAEnqueued = void 0;
const consts_1 = require("../utils/consts");
const wormhole_sdk_proto_web_1 = require("@certusone/wormhole-sdk-proto-web");
const { GrpcWebImpl, PublicRPCServiceClientImpl } = wormhole_sdk_proto_web_1.publicrpc;
function getGovernorIsVAAEnqueued(host, emitterChain, emitterAddress, sequence, extraGrpcOpts = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const rpc = new GrpcWebImpl(host, extraGrpcOpts);
        const api = new PublicRPCServiceClientImpl(rpc);
        return yield api.GovernorIsVAAEnqueued({
            messageId: {
                emitterChain: consts_1.coalesceChainId(emitterChain),
                emitterAddress,
                sequence,
            },
        });
    });
}
exports.getGovernorIsVAAEnqueued = getGovernorIsVAAEnqueued;
