"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getGovernorIsVAAEnqueuedWithRetry = void 0;
const __1 = require("..");
const utils_1 = require("../utils");
function getGovernorIsVAAEnqueuedWithRetry(hosts, emitterChain, emitterAddress, sequence, extraGrpcOpts = {}, retryTimeout = 1000, retryAttempts) {
    return __awaiter(this, void 0, void 0, function* () {
        let currentWormholeRpcHost = -1;
        const getNextRpcHost = () => ++currentWormholeRpcHost % hosts.length;
        let result;
        let attempts = 0;
        while (!result) {
            attempts++;
            yield new Promise((resolve) => setTimeout(resolve, retryTimeout));
            try {
                result = yield __1.getGovernorIsVAAEnqueued(hosts[getNextRpcHost()], utils_1.coalesceChainId(emitterChain), emitterAddress, sequence, extraGrpcOpts);
            }
            catch (e) {
                if (retryAttempts !== undefined && attempts > retryAttempts) {
                    throw e;
                }
            }
        }
        return result;
    });
}
exports.getGovernorIsVAAEnqueuedWithRetry = getGovernorIsVAAEnqueuedWithRetry;
