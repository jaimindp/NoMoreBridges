"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createPostSignedVaaTransactions = exports.postVaa = exports.postVaaWithRetry = void 0;
const web3_js_1 = require("@solana/web3.js");
const utils_1 = require("./utils");
const wormhole_1 = require("./wormhole");
const wormhole_2 = require("../vaa/wormhole");
function postVaaWithRetry(connection, signTransaction, wormholeProgramId, payer, vaa, maxRetries, commitment) {
    return __awaiter(this, void 0, void 0, function* () {
        const { unsignedTransactions, signers } = yield createPostSignedVaaTransactions(connection, wormholeProgramId, payer, vaa, commitment);
        const postVaaTransaction = unsignedTransactions.pop();
        const responses = yield utils_1.sendAndConfirmTransactionsWithRetry(connection, utils_1.modifySignTransaction(signTransaction, ...signers), payer.toString(), unsignedTransactions, maxRetries);
        //While the signature_set is used to create the final instruction, it doesn't need to sign it.
        responses.push(...(yield utils_1.sendAndConfirmTransactionsWithRetry(connection, signTransaction, payer.toString(), [postVaaTransaction], maxRetries)));
        return responses;
    });
}
exports.postVaaWithRetry = postVaaWithRetry;
function postVaa(connection, signTransaction, wormholeProgramId, payer, vaa, options, asyncVerifySignatures = true) {
    return __awaiter(this, void 0, void 0, function* () {
        const { unsignedTransactions, signers } = yield createPostSignedVaaTransactions(connection, wormholeProgramId, payer, vaa, options === null || options === void 0 ? void 0 : options.commitment);
        const postVaaTransaction = unsignedTransactions.pop();
        const verifySignatures = (transaction) => __awaiter(this, void 0, void 0, function* () {
            return utils_1.signSendAndConfirmTransaction(connection, payer, utils_1.modifySignTransaction(signTransaction, ...signers), transaction, options);
        });
        const output = [];
        if (asyncVerifySignatures) {
            const verified = yield Promise.all(unsignedTransactions.map((transaction) => __awaiter(this, void 0, void 0, function* () { return verifySignatures(transaction); })));
            output.push(...verified);
        }
        else {
            for (const transaction of unsignedTransactions) {
                output.push(yield verifySignatures(transaction));
            }
        }
        output.push(yield utils_1.signSendAndConfirmTransaction(connection, payer, signTransaction, postVaaTransaction, options));
        return output;
    });
}
exports.postVaa = postVaa;
/** Send transactions for `verify_signatures` and `post_vaa` instructions.
 *
 * Using a signed VAA, execute transactions generated by {@link verifySignatures} and
 * {@link postVaa}. At most 4 transactions are sent (up to 3 from signature verification
 * and 1 to post VAA data to an account).
 *
 * @param {Connection} connection - Solana web3 connection
 * @param {PublicKeyInitData} wormholeProgramId - wormhole program address
 * @param {web3.Keypair} payer - transaction signer address
 * @param {Buffer} signedVaa - bytes of signed VAA
 * @param {Commitment} [options] - Solana commitment
 *
 */
function createPostSignedVaaTransactions(connection, wormholeProgramId, payer, vaa, commitment) {
    return __awaiter(this, void 0, void 0, function* () {
        const parsed = wormhole_2.isBytes(vaa) ? wormhole_2.parseVaa(vaa) : vaa;
        const signatureSet = web3_js_1.Keypair.generate();
        const verifySignaturesInstructions = yield wormhole_1.createVerifySignaturesInstructions(connection, wormholeProgramId, payer, parsed, signatureSet.publicKey, commitment);
        const unsignedTransactions = [];
        for (let i = 0; i < verifySignaturesInstructions.length; i += 2) {
            unsignedTransactions.push(new web3_js_1.Transaction().add(...verifySignaturesInstructions.slice(i, i + 2)));
        }
        unsignedTransactions.push(new web3_js_1.Transaction().add(wormhole_1.createPostVaaInstruction(wormholeProgramId, payer, parsed, signatureSet.publicKey)));
        return {
            unsignedTransactions,
            signers: [signatureSet],
        };
    });
}
exports.createPostSignedVaaTransactions = createPostSignedVaaTransactions;
