"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPostedMessage = exports.getPostedVaa = exports.derivePostedVaaKey = exports.PostedVaaData = exports.PostedMessageData = void 0;
const web3_js_1 = require("@solana/web3.js");
const utils_1 = require("../../utils");
const message_1 = require("../message");
class PostedMessageData {
    constructor(message) {
        this.message = message;
    }
    static deserialize(data) {
        return new PostedMessageData(message_1.MessageData.deserialize(data.subarray(3)));
    }
}
exports.PostedMessageData = PostedMessageData;
class PostedVaaData extends PostedMessageData {
}
exports.PostedVaaData = PostedVaaData;
function derivePostedVaaKey(wormholeProgramId, hash) {
    return utils_1.deriveAddress([Buffer.from("PostedVAA"), hash], wormholeProgramId);
}
exports.derivePostedVaaKey = derivePostedVaaKey;
function getPostedVaa(connection, wormholeProgramId, hash, commitment) {
    return __awaiter(this, void 0, void 0, function* () {
        return connection
            .getAccountInfo(derivePostedVaaKey(wormholeProgramId, hash), commitment)
            .then((info) => PostedVaaData.deserialize(utils_1.getAccountData(info)));
    });
}
exports.getPostedVaa = getPostedVaa;
function getPostedMessage(connection, messageKey, commitment) {
    return __awaiter(this, void 0, void 0, function* () {
        return connection
            .getAccountInfo(new web3_js_1.PublicKey(messageKey), commitment)
            .then((info) => PostedMessageData.deserialize(utils_1.getAccountData(info)));
    });
}
exports.getPostedMessage = getPostedMessage;
