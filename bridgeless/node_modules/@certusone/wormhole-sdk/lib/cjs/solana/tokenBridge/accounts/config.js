"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TokenBridgeConfig = exports.getTokenBridgeConfig = exports.deriveTokenBridgeConfigKey = void 0;
const web3_js_1 = require("@solana/web3.js");
const utils_1 = require("../../utils");
function deriveTokenBridgeConfigKey(tokenBridgeProgramId) {
    return utils_1.deriveAddress([Buffer.from("config")], tokenBridgeProgramId);
}
exports.deriveTokenBridgeConfigKey = deriveTokenBridgeConfigKey;
function getTokenBridgeConfig(connection, tokenBridgeProgramId, commitment) {
    return __awaiter(this, void 0, void 0, function* () {
        return connection
            .getAccountInfo(deriveTokenBridgeConfigKey(tokenBridgeProgramId), commitment)
            .then((info) => TokenBridgeConfig.deserialize(utils_1.getAccountData(info)));
    });
}
exports.getTokenBridgeConfig = getTokenBridgeConfig;
class TokenBridgeConfig {
    constructor(wormholeProgramId) {
        this.wormhole = new web3_js_1.PublicKey(wormholeProgramId);
    }
    static deserialize(data) {
        if (data.length != 32) {
            throw new Error("data.length != 32");
        }
        const wormholeProgramId = data.subarray(0, 32);
        return new TokenBridgeConfig(wormholeProgramId);
    }
}
exports.TokenBridgeConfig = TokenBridgeConfig;
