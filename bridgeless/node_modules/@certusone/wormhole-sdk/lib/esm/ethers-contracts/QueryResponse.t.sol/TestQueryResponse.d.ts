import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../common";
export declare namespace StdInvariant {
    type FuzzSelectorStruct = {
        addr: PromiseOrValue<string>;
        selectors: PromiseOrValue<BytesLike>[];
    };
    type FuzzSelectorStructOutput = [string, string[]] & {
        addr: string;
        selectors: string[];
    };
}
export interface TestQueryResponseInterface extends utils.Interface {
    functions: {
        "IS_TEST()": FunctionFragment;
        "deployWormholeForTest()": FunctionFragment;
        "excludeArtifacts()": FunctionFragment;
        "excludeContracts()": FunctionFragment;
        "excludeSenders()": FunctionFragment;
        "failed()": FunctionFragment;
        "setUp()": FunctionFragment;
        "targetArtifactSelectors()": FunctionFragment;
        "targetArtifacts()": FunctionFragment;
        "targetContracts()": FunctionFragment;
        "targetSelectors()": FunctionFragment;
        "targetSenders()": FunctionFragment;
        "testFuzz_parseAndVerifyQueryResponse_fuzzChainIds(uint16,uint16,uint256)": FunctionFragment;
        "testFuzz_parseAndVerifyQueryResponse_fuzzMistmatchedRequestType(uint256,uint256)": FunctionFragment;
        "testFuzz_parseAndVerifyQueryResponse_fuzzNumPerChainQueriesAndResponses(uint8,uint8)": FunctionFragment;
        "testFuzz_parseAndVerifyQueryResponse_fuzzQueryBytesLength(uint32)": FunctionFragment;
        "testFuzz_parseAndVerifyQueryResponse_fuzzQueryRequestLen(uint32,bytes)": FunctionFragment;
        "testFuzz_parseAndVerifyQueryResponse_fuzzQueryRequestNonce(uint32)": FunctionFragment;
        "testFuzz_parseAndVerifyQueryResponse_fuzzQueryRequestVersion(uint8,uint8)": FunctionFragment;
        "testFuzz_parseAndVerifyQueryResponse_fuzzSenderChainId(uint16)": FunctionFragment;
        "testFuzz_parseAndVerifyQueryResponse_fuzzSignatureHappyCase(bytes)": FunctionFragment;
        "testFuzz_parseAndVerifyQueryResponse_fuzzSignatureUnhappyCase(bytes)": FunctionFragment;
        "testFuzz_parseAndVerifyQueryResponse_fuzzUnsupportedRequestType(uint8)": FunctionFragment;
        "testFuzz_parseAndVerifyQueryResponse_fuzzVersion(uint8)": FunctionFragment;
        "testFuzz_validateBlockNum_fail(uint64,uint256)": FunctionFragment;
        "testFuzz_validateBlockNum_success(uint64,uint256)": FunctionFragment;
        "testFuzz_validateBlockTime_fail(uint256,uint256)": FunctionFragment;
        "testFuzz_validateBlockTime_success(uint256,uint256)": FunctionFragment;
        "testFuzz_validateChainId_fail(uint16,uint16[])": FunctionFragment;
        "testFuzz_validateChainId_success(uint16,uint16[])": FunctionFragment;
        "testFuzz_validateEthCallData_failAddress(bytes,address,uint256,address[],bytes4[])": FunctionFragment;
        "testFuzz_validateEthCallData_failSignature(bytes,uint256,address[],bytes4[])": FunctionFragment;
        "testFuzz_validateEthCallData_success(bytes,uint256,uint256,address[],bytes4[])": FunctionFragment;
        "testFuzz_validateEthCallData_successZeroAddresses(address,bytes,uint256,bytes4[])": FunctionFragment;
        "testFuzz_validateEthCallData_successZeroSignatures(bytes4,bytes,uint256,address[])": FunctionFragment;
        "testFuzz_validateMultipleEthCallData_success(uint8,bytes,uint256,uint256,address[],bytes4[])": FunctionFragment;
        "testFuzz_verifyQueryResponseSignatures_invalidSignature(bytes,uint256)": FunctionFragment;
        "testFuzz_verifyQueryResponseSignatures_validSignature(bytes)": FunctionFragment;
        "testFuzz_verifyQueryResponseSignatures_validSignatureWrongPrefix(bytes)": FunctionFragment;
        "test_getResponseDigest()": FunctionFragment;
        "test_getResponseHash()": FunctionFragment;
        "test_parseAndVerifyQueryResponse()": FunctionFragment;
        "test_parseEthCallByTimestampQueryResponse()": FunctionFragment;
        "test_parseEthCallByTimestampQueryResponseRevertWrongQueryType()": FunctionFragment;
        "test_parseEthCallQueryResponse()": FunctionFragment;
        "test_parseEthCallQueryResponseComparison()": FunctionFragment;
        "test_parseEthCallQueryResponseRevertWrongQueryType()": FunctionFragment;
        "test_parseEthCallWithFinalityQueryResponse()": FunctionFragment;
        "test_parseEthCallWithFinalityQueryResponseRevertWrongQueryType()": FunctionFragment;
        "test_parseSolanaAccountQueryResponse()": FunctionFragment;
        "test_parseSolanaAccountQueryResponseExtraRequestBytesRevertInvalidPayloadLength()": FunctionFragment;
        "test_parseSolanaAccountQueryResponseExtraResponseBytesRevertInvalidPayloadLength()": FunctionFragment;
        "test_parseSolanaAccountQueryResponseRevertUnexpectedNumberOfResults()": FunctionFragment;
        "test_parseSolanaAccountQueryResponseRevertWrongQueryType()": FunctionFragment;
        "test_verifyQueryResponseSignatures()": FunctionFragment;
        "test_verifyQueryResponseSignaturesForSolana()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "IS_TEST" | "deployWormholeForTest" | "excludeArtifacts" | "excludeContracts" | "excludeSenders" | "failed" | "setUp" | "targetArtifactSelectors" | "targetArtifacts" | "targetContracts" | "targetSelectors" | "targetSenders" | "testFuzz_parseAndVerifyQueryResponse_fuzzChainIds" | "testFuzz_parseAndVerifyQueryResponse_fuzzMistmatchedRequestType" | "testFuzz_parseAndVerifyQueryResponse_fuzzNumPerChainQueriesAndResponses" | "testFuzz_parseAndVerifyQueryResponse_fuzzQueryBytesLength" | "testFuzz_parseAndVerifyQueryResponse_fuzzQueryRequestLen" | "testFuzz_parseAndVerifyQueryResponse_fuzzQueryRequestNonce" | "testFuzz_parseAndVerifyQueryResponse_fuzzQueryRequestVersion" | "testFuzz_parseAndVerifyQueryResponse_fuzzSenderChainId" | "testFuzz_parseAndVerifyQueryResponse_fuzzSignatureHappyCase" | "testFuzz_parseAndVerifyQueryResponse_fuzzSignatureUnhappyCase" | "testFuzz_parseAndVerifyQueryResponse_fuzzUnsupportedRequestType" | "testFuzz_parseAndVerifyQueryResponse_fuzzVersion" | "testFuzz_validateBlockNum_fail" | "testFuzz_validateBlockNum_success" | "testFuzz_validateBlockTime_fail" | "testFuzz_validateBlockTime_success" | "testFuzz_validateChainId_fail" | "testFuzz_validateChainId_success" | "testFuzz_validateEthCallData_failAddress" | "testFuzz_validateEthCallData_failSignature" | "testFuzz_validateEthCallData_success" | "testFuzz_validateEthCallData_successZeroAddresses" | "testFuzz_validateEthCallData_successZeroSignatures" | "testFuzz_validateMultipleEthCallData_success" | "testFuzz_verifyQueryResponseSignatures_invalidSignature" | "testFuzz_verifyQueryResponseSignatures_validSignature" | "testFuzz_verifyQueryResponseSignatures_validSignatureWrongPrefix" | "test_getResponseDigest" | "test_getResponseHash" | "test_parseAndVerifyQueryResponse" | "test_parseEthCallByTimestampQueryResponse" | "test_parseEthCallByTimestampQueryResponseRevertWrongQueryType" | "test_parseEthCallQueryResponse" | "test_parseEthCallQueryResponseComparison" | "test_parseEthCallQueryResponseRevertWrongQueryType" | "test_parseEthCallWithFinalityQueryResponse" | "test_parseEthCallWithFinalityQueryResponseRevertWrongQueryType" | "test_parseSolanaAccountQueryResponse" | "test_parseSolanaAccountQueryResponseExtraRequestBytesRevertInvalidPayloadLength" | "test_parseSolanaAccountQueryResponseExtraResponseBytesRevertInvalidPayloadLength" | "test_parseSolanaAccountQueryResponseRevertUnexpectedNumberOfResults" | "test_parseSolanaAccountQueryResponseRevertWrongQueryType" | "test_verifyQueryResponseSignatures" | "test_verifyQueryResponseSignaturesForSolana"): FunctionFragment;
    encodeFunctionData(functionFragment: "IS_TEST", values?: undefined): string;
    encodeFunctionData(functionFragment: "deployWormholeForTest", values?: undefined): string;
    encodeFunctionData(functionFragment: "excludeArtifacts", values?: undefined): string;
    encodeFunctionData(functionFragment: "excludeContracts", values?: undefined): string;
    encodeFunctionData(functionFragment: "excludeSenders", values?: undefined): string;
    encodeFunctionData(functionFragment: "failed", values?: undefined): string;
    encodeFunctionData(functionFragment: "setUp", values?: undefined): string;
    encodeFunctionData(functionFragment: "targetArtifactSelectors", values?: undefined): string;
    encodeFunctionData(functionFragment: "targetArtifacts", values?: undefined): string;
    encodeFunctionData(functionFragment: "targetContracts", values?: undefined): string;
    encodeFunctionData(functionFragment: "targetSelectors", values?: undefined): string;
    encodeFunctionData(functionFragment: "targetSenders", values?: undefined): string;
    encodeFunctionData(functionFragment: "testFuzz_parseAndVerifyQueryResponse_fuzzChainIds", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "testFuzz_parseAndVerifyQueryResponse_fuzzMistmatchedRequestType", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "testFuzz_parseAndVerifyQueryResponse_fuzzNumPerChainQueriesAndResponses", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "testFuzz_parseAndVerifyQueryResponse_fuzzQueryBytesLength", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "testFuzz_parseAndVerifyQueryResponse_fuzzQueryRequestLen", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "testFuzz_parseAndVerifyQueryResponse_fuzzQueryRequestNonce", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "testFuzz_parseAndVerifyQueryResponse_fuzzQueryRequestVersion", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "testFuzz_parseAndVerifyQueryResponse_fuzzSenderChainId", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "testFuzz_parseAndVerifyQueryResponse_fuzzSignatureHappyCase", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "testFuzz_parseAndVerifyQueryResponse_fuzzSignatureUnhappyCase", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "testFuzz_parseAndVerifyQueryResponse_fuzzUnsupportedRequestType", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "testFuzz_parseAndVerifyQueryResponse_fuzzVersion", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "testFuzz_validateBlockNum_fail", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "testFuzz_validateBlockNum_success", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "testFuzz_validateBlockTime_fail", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "testFuzz_validateBlockTime_success", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "testFuzz_validateChainId_fail", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]]): string;
    encodeFunctionData(functionFragment: "testFuzz_validateChainId_success", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]]): string;
    encodeFunctionData(functionFragment: "testFuzz_validateEthCallData_failAddress", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>[],
        PromiseOrValue<BytesLike>[]
    ]): string;
    encodeFunctionData(functionFragment: "testFuzz_validateEthCallData_failSignature", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>[],
        PromiseOrValue<BytesLike>[]
    ]): string;
    encodeFunctionData(functionFragment: "testFuzz_validateEthCallData_success", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>[],
        PromiseOrValue<BytesLike>[]
    ]): string;
    encodeFunctionData(functionFragment: "testFuzz_validateEthCallData_successZeroAddresses", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>[]
    ]): string;
    encodeFunctionData(functionFragment: "testFuzz_validateEthCallData_successZeroSignatures", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>[]
    ]): string;
    encodeFunctionData(functionFragment: "testFuzz_validateMultipleEthCallData_success", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>[],
        PromiseOrValue<BytesLike>[]
    ]): string;
    encodeFunctionData(functionFragment: "testFuzz_verifyQueryResponseSignatures_invalidSignature", values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "testFuzz_verifyQueryResponseSignatures_validSignature", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "testFuzz_verifyQueryResponseSignatures_validSignatureWrongPrefix", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "test_getResponseDigest", values?: undefined): string;
    encodeFunctionData(functionFragment: "test_getResponseHash", values?: undefined): string;
    encodeFunctionData(functionFragment: "test_parseAndVerifyQueryResponse", values?: undefined): string;
    encodeFunctionData(functionFragment: "test_parseEthCallByTimestampQueryResponse", values?: undefined): string;
    encodeFunctionData(functionFragment: "test_parseEthCallByTimestampQueryResponseRevertWrongQueryType", values?: undefined): string;
    encodeFunctionData(functionFragment: "test_parseEthCallQueryResponse", values?: undefined): string;
    encodeFunctionData(functionFragment: "test_parseEthCallQueryResponseComparison", values?: undefined): string;
    encodeFunctionData(functionFragment: "test_parseEthCallQueryResponseRevertWrongQueryType", values?: undefined): string;
    encodeFunctionData(functionFragment: "test_parseEthCallWithFinalityQueryResponse", values?: undefined): string;
    encodeFunctionData(functionFragment: "test_parseEthCallWithFinalityQueryResponseRevertWrongQueryType", values?: undefined): string;
    encodeFunctionData(functionFragment: "test_parseSolanaAccountQueryResponse", values?: undefined): string;
    encodeFunctionData(functionFragment: "test_parseSolanaAccountQueryResponseExtraRequestBytesRevertInvalidPayloadLength", values?: undefined): string;
    encodeFunctionData(functionFragment: "test_parseSolanaAccountQueryResponseExtraResponseBytesRevertInvalidPayloadLength", values?: undefined): string;
    encodeFunctionData(functionFragment: "test_parseSolanaAccountQueryResponseRevertUnexpectedNumberOfResults", values?: undefined): string;
    encodeFunctionData(functionFragment: "test_parseSolanaAccountQueryResponseRevertWrongQueryType", values?: undefined): string;
    encodeFunctionData(functionFragment: "test_verifyQueryResponseSignatures", values?: undefined): string;
    encodeFunctionData(functionFragment: "test_verifyQueryResponseSignaturesForSolana", values?: undefined): string;
    decodeFunctionResult(functionFragment: "IS_TEST", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deployWormholeForTest", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "excludeArtifacts", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "excludeContracts", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "excludeSenders", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "failed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setUp", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "targetArtifactSelectors", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "targetArtifacts", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "targetContracts", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "targetSelectors", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "targetSenders", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testFuzz_parseAndVerifyQueryResponse_fuzzChainIds", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testFuzz_parseAndVerifyQueryResponse_fuzzMistmatchedRequestType", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testFuzz_parseAndVerifyQueryResponse_fuzzNumPerChainQueriesAndResponses", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testFuzz_parseAndVerifyQueryResponse_fuzzQueryBytesLength", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testFuzz_parseAndVerifyQueryResponse_fuzzQueryRequestLen", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testFuzz_parseAndVerifyQueryResponse_fuzzQueryRequestNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testFuzz_parseAndVerifyQueryResponse_fuzzQueryRequestVersion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testFuzz_parseAndVerifyQueryResponse_fuzzSenderChainId", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testFuzz_parseAndVerifyQueryResponse_fuzzSignatureHappyCase", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testFuzz_parseAndVerifyQueryResponse_fuzzSignatureUnhappyCase", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testFuzz_parseAndVerifyQueryResponse_fuzzUnsupportedRequestType", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testFuzz_parseAndVerifyQueryResponse_fuzzVersion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testFuzz_validateBlockNum_fail", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testFuzz_validateBlockNum_success", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testFuzz_validateBlockTime_fail", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testFuzz_validateBlockTime_success", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testFuzz_validateChainId_fail", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testFuzz_validateChainId_success", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testFuzz_validateEthCallData_failAddress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testFuzz_validateEthCallData_failSignature", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testFuzz_validateEthCallData_success", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testFuzz_validateEthCallData_successZeroAddresses", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testFuzz_validateEthCallData_successZeroSignatures", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testFuzz_validateMultipleEthCallData_success", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testFuzz_verifyQueryResponseSignatures_invalidSignature", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testFuzz_verifyQueryResponseSignatures_validSignature", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testFuzz_verifyQueryResponseSignatures_validSignatureWrongPrefix", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "test_getResponseDigest", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "test_getResponseHash", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "test_parseAndVerifyQueryResponse", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "test_parseEthCallByTimestampQueryResponse", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "test_parseEthCallByTimestampQueryResponseRevertWrongQueryType", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "test_parseEthCallQueryResponse", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "test_parseEthCallQueryResponseComparison", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "test_parseEthCallQueryResponseRevertWrongQueryType", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "test_parseEthCallWithFinalityQueryResponse", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "test_parseEthCallWithFinalityQueryResponseRevertWrongQueryType", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "test_parseSolanaAccountQueryResponse", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "test_parseSolanaAccountQueryResponseExtraRequestBytesRevertInvalidPayloadLength", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "test_parseSolanaAccountQueryResponseExtraResponseBytesRevertInvalidPayloadLength", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "test_parseSolanaAccountQueryResponseRevertUnexpectedNumberOfResults", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "test_parseSolanaAccountQueryResponseRevertWrongQueryType", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "test_verifyQueryResponseSignatures", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "test_verifyQueryResponseSignaturesForSolana", data: BytesLike): Result;
    events: {
        "log(string)": EventFragment;
        "log_address(address)": EventFragment;
        "log_array(uint256[])": EventFragment;
        "log_array(int256[])": EventFragment;
        "log_array(address[])": EventFragment;
        "log_bytes(bytes)": EventFragment;
        "log_bytes32(bytes32)": EventFragment;
        "log_int(int256)": EventFragment;
        "log_named_address(string,address)": EventFragment;
        "log_named_array(string,uint256[])": EventFragment;
        "log_named_array(string,int256[])": EventFragment;
        "log_named_array(string,address[])": EventFragment;
        "log_named_bytes(string,bytes)": EventFragment;
        "log_named_bytes32(string,bytes32)": EventFragment;
        "log_named_decimal_int(string,int256,uint256)": EventFragment;
        "log_named_decimal_uint(string,uint256,uint256)": EventFragment;
        "log_named_int(string,int256)": EventFragment;
        "log_named_string(string,string)": EventFragment;
        "log_named_uint(string,uint256)": EventFragment;
        "log_string(string)": EventFragment;
        "log_uint(uint256)": EventFragment;
        "logs(bytes)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "log"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "log_address"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "log_array(uint256[])"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "log_array(int256[])"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "log_array(address[])"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "log_bytes"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "log_bytes32"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "log_int"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "log_named_address"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "log_named_array(string,uint256[])"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "log_named_array(string,int256[])"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "log_named_array(string,address[])"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "log_named_bytes"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "log_named_bytes32"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "log_named_decimal_int"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "log_named_decimal_uint"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "log_named_int"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "log_named_string"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "log_named_uint"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "log_string"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "log_uint"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "logs"): EventFragment;
}
export interface logEventObject {
    arg0: string;
}
export declare type logEvent = TypedEvent<[string], logEventObject>;
export declare type logEventFilter = TypedEventFilter<logEvent>;
export interface log_addressEventObject {
    arg0: string;
}
export declare type log_addressEvent = TypedEvent<[string], log_addressEventObject>;
export declare type log_addressEventFilter = TypedEventFilter<log_addressEvent>;
export interface log_array_uint256_array_EventObject {
    val: BigNumber[];
}
export declare type log_array_uint256_array_Event = TypedEvent<[
    BigNumber[]
], log_array_uint256_array_EventObject>;
export declare type log_array_uint256_array_EventFilter = TypedEventFilter<log_array_uint256_array_Event>;
export interface log_array_int256_array_EventObject {
    val: BigNumber[];
}
export declare type log_array_int256_array_Event = TypedEvent<[
    BigNumber[]
], log_array_int256_array_EventObject>;
export declare type log_array_int256_array_EventFilter = TypedEventFilter<log_array_int256_array_Event>;
export interface log_array_address_array_EventObject {
    val: string[];
}
export declare type log_array_address_array_Event = TypedEvent<[
    string[]
], log_array_address_array_EventObject>;
export declare type log_array_address_array_EventFilter = TypedEventFilter<log_array_address_array_Event>;
export interface log_bytesEventObject {
    arg0: string;
}
export declare type log_bytesEvent = TypedEvent<[string], log_bytesEventObject>;
export declare type log_bytesEventFilter = TypedEventFilter<log_bytesEvent>;
export interface log_bytes32EventObject {
    arg0: string;
}
export declare type log_bytes32Event = TypedEvent<[string], log_bytes32EventObject>;
export declare type log_bytes32EventFilter = TypedEventFilter<log_bytes32Event>;
export interface log_intEventObject {
    arg0: BigNumber;
}
export declare type log_intEvent = TypedEvent<[BigNumber], log_intEventObject>;
export declare type log_intEventFilter = TypedEventFilter<log_intEvent>;
export interface log_named_addressEventObject {
    key: string;
    val: string;
}
export declare type log_named_addressEvent = TypedEvent<[
    string,
    string
], log_named_addressEventObject>;
export declare type log_named_addressEventFilter = TypedEventFilter<log_named_addressEvent>;
export interface log_named_array_string_uint256_array_EventObject {
    key: string;
    val: BigNumber[];
}
export declare type log_named_array_string_uint256_array_Event = TypedEvent<[
    string,
    BigNumber[]
], log_named_array_string_uint256_array_EventObject>;
export declare type log_named_array_string_uint256_array_EventFilter = TypedEventFilter<log_named_array_string_uint256_array_Event>;
export interface log_named_array_string_int256_array_EventObject {
    key: string;
    val: BigNumber[];
}
export declare type log_named_array_string_int256_array_Event = TypedEvent<[
    string,
    BigNumber[]
], log_named_array_string_int256_array_EventObject>;
export declare type log_named_array_string_int256_array_EventFilter = TypedEventFilter<log_named_array_string_int256_array_Event>;
export interface log_named_array_string_address_array_EventObject {
    key: string;
    val: string[];
}
export declare type log_named_array_string_address_array_Event = TypedEvent<[
    string,
    string[]
], log_named_array_string_address_array_EventObject>;
export declare type log_named_array_string_address_array_EventFilter = TypedEventFilter<log_named_array_string_address_array_Event>;
export interface log_named_bytesEventObject {
    key: string;
    val: string;
}
export declare type log_named_bytesEvent = TypedEvent<[
    string,
    string
], log_named_bytesEventObject>;
export declare type log_named_bytesEventFilter = TypedEventFilter<log_named_bytesEvent>;
export interface log_named_bytes32EventObject {
    key: string;
    val: string;
}
export declare type log_named_bytes32Event = TypedEvent<[
    string,
    string
], log_named_bytes32EventObject>;
export declare type log_named_bytes32EventFilter = TypedEventFilter<log_named_bytes32Event>;
export interface log_named_decimal_intEventObject {
    key: string;
    val: BigNumber;
    decimals: BigNumber;
}
export declare type log_named_decimal_intEvent = TypedEvent<[
    string,
    BigNumber,
    BigNumber
], log_named_decimal_intEventObject>;
export declare type log_named_decimal_intEventFilter = TypedEventFilter<log_named_decimal_intEvent>;
export interface log_named_decimal_uintEventObject {
    key: string;
    val: BigNumber;
    decimals: BigNumber;
}
export declare type log_named_decimal_uintEvent = TypedEvent<[
    string,
    BigNumber,
    BigNumber
], log_named_decimal_uintEventObject>;
export declare type log_named_decimal_uintEventFilter = TypedEventFilter<log_named_decimal_uintEvent>;
export interface log_named_intEventObject {
    key: string;
    val: BigNumber;
}
export declare type log_named_intEvent = TypedEvent<[
    string,
    BigNumber
], log_named_intEventObject>;
export declare type log_named_intEventFilter = TypedEventFilter<log_named_intEvent>;
export interface log_named_stringEventObject {
    key: string;
    val: string;
}
export declare type log_named_stringEvent = TypedEvent<[
    string,
    string
], log_named_stringEventObject>;
export declare type log_named_stringEventFilter = TypedEventFilter<log_named_stringEvent>;
export interface log_named_uintEventObject {
    key: string;
    val: BigNumber;
}
export declare type log_named_uintEvent = TypedEvent<[
    string,
    BigNumber
], log_named_uintEventObject>;
export declare type log_named_uintEventFilter = TypedEventFilter<log_named_uintEvent>;
export interface log_stringEventObject {
    arg0: string;
}
export declare type log_stringEvent = TypedEvent<[string], log_stringEventObject>;
export declare type log_stringEventFilter = TypedEventFilter<log_stringEvent>;
export interface log_uintEventObject {
    arg0: BigNumber;
}
export declare type log_uintEvent = TypedEvent<[BigNumber], log_uintEventObject>;
export declare type log_uintEventFilter = TypedEventFilter<log_uintEvent>;
export interface logsEventObject {
    arg0: string;
}
export declare type logsEvent = TypedEvent<[string], logsEventObject>;
export declare type logsEventFilter = TypedEventFilter<logsEvent>;
export interface TestQueryResponse extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: TestQueryResponseInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        IS_TEST(overrides?: CallOverrides): Promise<[boolean]>;
        deployWormholeForTest(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        excludeArtifacts(overrides?: CallOverrides): Promise<[string[]] & {
            excludedArtifacts_: string[];
        }>;
        excludeContracts(overrides?: CallOverrides): Promise<[string[]] & {
            excludedContracts_: string[];
        }>;
        excludeSenders(overrides?: CallOverrides): Promise<[string[]] & {
            excludedSenders_: string[];
        }>;
        failed(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setUp(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        targetArtifactSelectors(overrides?: CallOverrides): Promise<[
            StdInvariant.FuzzSelectorStructOutput[]
        ] & {
            targetedArtifactSelectors_: StdInvariant.FuzzSelectorStructOutput[];
        }>;
        targetArtifacts(overrides?: CallOverrides): Promise<[string[]] & {
            targetedArtifacts_: string[];
        }>;
        targetContracts(overrides?: CallOverrides): Promise<[string[]] & {
            targetedContracts_: string[];
        }>;
        targetSelectors(overrides?: CallOverrides): Promise<[
            StdInvariant.FuzzSelectorStructOutput[]
        ] & {
            targetedSelectors_: StdInvariant.FuzzSelectorStructOutput[];
        }>;
        targetSenders(overrides?: CallOverrides): Promise<[string[]] & {
            targetedSenders_: string[];
        }>;
        testFuzz_parseAndVerifyQueryResponse_fuzzChainIds(_requestChainId: PromiseOrValue<BigNumberish>, _responseChainId: PromiseOrValue<BigNumberish>, _requestQueryType: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testFuzz_parseAndVerifyQueryResponse_fuzzMistmatchedRequestType(_requestQueryType: PromiseOrValue<BigNumberish>, _responseQueryType: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testFuzz_parseAndVerifyQueryResponse_fuzzNumPerChainQueriesAndResponses(_numPerChainQueries: PromiseOrValue<BigNumberish>, _numPerChainResponses: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testFuzz_parseAndVerifyQueryResponse_fuzzQueryBytesLength(_queryLength: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testFuzz_parseAndVerifyQueryResponse_fuzzQueryRequestLen(_queryRequestLen: PromiseOrValue<BigNumberish>, _perChainQueries: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testFuzz_parseAndVerifyQueryResponse_fuzzQueryRequestNonce(_queryRequestNonce: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testFuzz_parseAndVerifyQueryResponse_fuzzQueryRequestVersion(_version: PromiseOrValue<BigNumberish>, _queryRequestVersion: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testFuzz_parseAndVerifyQueryResponse_fuzzSenderChainId(_senderChainId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testFuzz_parseAndVerifyQueryResponse_fuzzSignatureHappyCase(_signature: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testFuzz_parseAndVerifyQueryResponse_fuzzSignatureUnhappyCase(_signature: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testFuzz_parseAndVerifyQueryResponse_fuzzUnsupportedRequestType(_requestQueryType: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testFuzz_parseAndVerifyQueryResponse_fuzzVersion(_version: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testFuzz_validateBlockNum_fail(_blockNum: PromiseOrValue<BigNumberish>, _minBlockNum: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testFuzz_validateBlockNum_success(_blockNum: PromiseOrValue<BigNumberish>, _minBlockNum: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[void]>;
        testFuzz_validateBlockTime_fail(_blockTime: PromiseOrValue<BigNumberish>, _minBlockTime: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testFuzz_validateBlockTime_success(_blockTime: PromiseOrValue<BigNumberish>, _minBlockTime: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[void]>;
        testFuzz_validateChainId_fail(_chainId: PromiseOrValue<BigNumberish>, _validChainIds: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testFuzz_validateChainId_success(_validChainIndex: PromiseOrValue<BigNumberish>, _validChainIds: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<[void]>;
        testFuzz_validateEthCallData_failAddress(randomBytes: PromiseOrValue<BytesLike>, randomAddress: PromiseOrValue<string>, _functionSignatureIndex: PromiseOrValue<BigNumberish>, _expectedContractAddresses: PromiseOrValue<string>[], _expectedFunctionSignatures: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testFuzz_validateEthCallData_failSignature(randomBytes: PromiseOrValue<BytesLike>, _contractAddressIndex: PromiseOrValue<BigNumberish>, _expectedContractAddresses: PromiseOrValue<string>[], _expectedFunctionSignatures: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testFuzz_validateEthCallData_success(randomBytes: PromiseOrValue<BytesLike>, _contractAddressIndex: PromiseOrValue<BigNumberish>, _functionSignatureIndex: PromiseOrValue<BigNumberish>, _expectedContractAddresses: PromiseOrValue<string>[], _expectedFunctionSignatures: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<[void]>;
        testFuzz_validateEthCallData_successZeroAddresses(randomAddress: PromiseOrValue<string>, randomBytes: PromiseOrValue<BytesLike>, _functionSignatureIndex: PromiseOrValue<BigNumberish>, _expectedFunctionSignatures: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<[void]>;
        testFuzz_validateEthCallData_successZeroSignatures(randomSignature: PromiseOrValue<BytesLike>, randomBytes: PromiseOrValue<BytesLike>, _contractAddressIndex: PromiseOrValue<BigNumberish>, _expectedContractAddresses: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<[void]>;
        testFuzz_validateMultipleEthCallData_success(numInputs: PromiseOrValue<BigNumberish>, randomBytes: PromiseOrValue<BytesLike>, _contractAddressIndex: PromiseOrValue<BigNumberish>, _functionSignatureIndex: PromiseOrValue<BigNumberish>, _expectedContractAddresses: PromiseOrValue<string>[], _expectedFunctionSignatures: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<[void]>;
        testFuzz_verifyQueryResponseSignatures_invalidSignature(resp: PromiseOrValue<BytesLike>, privateKey: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testFuzz_verifyQueryResponseSignatures_validSignature(resp: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[void]>;
        testFuzz_verifyQueryResponseSignatures_validSignatureWrongPrefix(responsePrefix: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        test_getResponseDigest(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        test_getResponseHash(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        test_parseAndVerifyQueryResponse(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        test_parseEthCallByTimestampQueryResponse(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        test_parseEthCallByTimestampQueryResponseRevertWrongQueryType(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        test_parseEthCallQueryResponse(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        test_parseEthCallQueryResponseComparison(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        test_parseEthCallQueryResponseRevertWrongQueryType(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        test_parseEthCallWithFinalityQueryResponse(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        test_parseEthCallWithFinalityQueryResponseRevertWrongQueryType(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        test_parseSolanaAccountQueryResponse(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        test_parseSolanaAccountQueryResponseExtraRequestBytesRevertInvalidPayloadLength(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        test_parseSolanaAccountQueryResponseExtraResponseBytesRevertInvalidPayloadLength(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        test_parseSolanaAccountQueryResponseRevertUnexpectedNumberOfResults(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        test_parseSolanaAccountQueryResponseRevertWrongQueryType(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        test_verifyQueryResponseSignatures(overrides?: CallOverrides): Promise<[void]>;
        test_verifyQueryResponseSignaturesForSolana(overrides?: CallOverrides): Promise<[void]>;
    };
    IS_TEST(overrides?: CallOverrides): Promise<boolean>;
    deployWormholeForTest(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    excludeArtifacts(overrides?: CallOverrides): Promise<string[]>;
    excludeContracts(overrides?: CallOverrides): Promise<string[]>;
    excludeSenders(overrides?: CallOverrides): Promise<string[]>;
    failed(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setUp(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    targetArtifactSelectors(overrides?: CallOverrides): Promise<StdInvariant.FuzzSelectorStructOutput[]>;
    targetArtifacts(overrides?: CallOverrides): Promise<string[]>;
    targetContracts(overrides?: CallOverrides): Promise<string[]>;
    targetSelectors(overrides?: CallOverrides): Promise<StdInvariant.FuzzSelectorStructOutput[]>;
    targetSenders(overrides?: CallOverrides): Promise<string[]>;
    testFuzz_parseAndVerifyQueryResponse_fuzzChainIds(_requestChainId: PromiseOrValue<BigNumberish>, _responseChainId: PromiseOrValue<BigNumberish>, _requestQueryType: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testFuzz_parseAndVerifyQueryResponse_fuzzMistmatchedRequestType(_requestQueryType: PromiseOrValue<BigNumberish>, _responseQueryType: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testFuzz_parseAndVerifyQueryResponse_fuzzNumPerChainQueriesAndResponses(_numPerChainQueries: PromiseOrValue<BigNumberish>, _numPerChainResponses: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testFuzz_parseAndVerifyQueryResponse_fuzzQueryBytesLength(_queryLength: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testFuzz_parseAndVerifyQueryResponse_fuzzQueryRequestLen(_queryRequestLen: PromiseOrValue<BigNumberish>, _perChainQueries: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testFuzz_parseAndVerifyQueryResponse_fuzzQueryRequestNonce(_queryRequestNonce: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testFuzz_parseAndVerifyQueryResponse_fuzzQueryRequestVersion(_version: PromiseOrValue<BigNumberish>, _queryRequestVersion: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testFuzz_parseAndVerifyQueryResponse_fuzzSenderChainId(_senderChainId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testFuzz_parseAndVerifyQueryResponse_fuzzSignatureHappyCase(_signature: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testFuzz_parseAndVerifyQueryResponse_fuzzSignatureUnhappyCase(_signature: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testFuzz_parseAndVerifyQueryResponse_fuzzUnsupportedRequestType(_requestQueryType: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testFuzz_parseAndVerifyQueryResponse_fuzzVersion(_version: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testFuzz_validateBlockNum_fail(_blockNum: PromiseOrValue<BigNumberish>, _minBlockNum: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testFuzz_validateBlockNum_success(_blockNum: PromiseOrValue<BigNumberish>, _minBlockNum: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
    testFuzz_validateBlockTime_fail(_blockTime: PromiseOrValue<BigNumberish>, _minBlockTime: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testFuzz_validateBlockTime_success(_blockTime: PromiseOrValue<BigNumberish>, _minBlockTime: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
    testFuzz_validateChainId_fail(_chainId: PromiseOrValue<BigNumberish>, _validChainIds: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testFuzz_validateChainId_success(_validChainIndex: PromiseOrValue<BigNumberish>, _validChainIds: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<void>;
    testFuzz_validateEthCallData_failAddress(randomBytes: PromiseOrValue<BytesLike>, randomAddress: PromiseOrValue<string>, _functionSignatureIndex: PromiseOrValue<BigNumberish>, _expectedContractAddresses: PromiseOrValue<string>[], _expectedFunctionSignatures: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testFuzz_validateEthCallData_failSignature(randomBytes: PromiseOrValue<BytesLike>, _contractAddressIndex: PromiseOrValue<BigNumberish>, _expectedContractAddresses: PromiseOrValue<string>[], _expectedFunctionSignatures: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testFuzz_validateEthCallData_success(randomBytes: PromiseOrValue<BytesLike>, _contractAddressIndex: PromiseOrValue<BigNumberish>, _functionSignatureIndex: PromiseOrValue<BigNumberish>, _expectedContractAddresses: PromiseOrValue<string>[], _expectedFunctionSignatures: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<void>;
    testFuzz_validateEthCallData_successZeroAddresses(randomAddress: PromiseOrValue<string>, randomBytes: PromiseOrValue<BytesLike>, _functionSignatureIndex: PromiseOrValue<BigNumberish>, _expectedFunctionSignatures: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<void>;
    testFuzz_validateEthCallData_successZeroSignatures(randomSignature: PromiseOrValue<BytesLike>, randomBytes: PromiseOrValue<BytesLike>, _contractAddressIndex: PromiseOrValue<BigNumberish>, _expectedContractAddresses: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<void>;
    testFuzz_validateMultipleEthCallData_success(numInputs: PromiseOrValue<BigNumberish>, randomBytes: PromiseOrValue<BytesLike>, _contractAddressIndex: PromiseOrValue<BigNumberish>, _functionSignatureIndex: PromiseOrValue<BigNumberish>, _expectedContractAddresses: PromiseOrValue<string>[], _expectedFunctionSignatures: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<void>;
    testFuzz_verifyQueryResponseSignatures_invalidSignature(resp: PromiseOrValue<BytesLike>, privateKey: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testFuzz_verifyQueryResponseSignatures_validSignature(resp: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
    testFuzz_verifyQueryResponseSignatures_validSignatureWrongPrefix(responsePrefix: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    test_getResponseDigest(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    test_getResponseHash(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    test_parseAndVerifyQueryResponse(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    test_parseEthCallByTimestampQueryResponse(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    test_parseEthCallByTimestampQueryResponseRevertWrongQueryType(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    test_parseEthCallQueryResponse(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    test_parseEthCallQueryResponseComparison(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    test_parseEthCallQueryResponseRevertWrongQueryType(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    test_parseEthCallWithFinalityQueryResponse(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    test_parseEthCallWithFinalityQueryResponseRevertWrongQueryType(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    test_parseSolanaAccountQueryResponse(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    test_parseSolanaAccountQueryResponseExtraRequestBytesRevertInvalidPayloadLength(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    test_parseSolanaAccountQueryResponseExtraResponseBytesRevertInvalidPayloadLength(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    test_parseSolanaAccountQueryResponseRevertUnexpectedNumberOfResults(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    test_parseSolanaAccountQueryResponseRevertWrongQueryType(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    test_verifyQueryResponseSignatures(overrides?: CallOverrides): Promise<void>;
    test_verifyQueryResponseSignaturesForSolana(overrides?: CallOverrides): Promise<void>;
    callStatic: {
        IS_TEST(overrides?: CallOverrides): Promise<boolean>;
        deployWormholeForTest(overrides?: CallOverrides): Promise<string>;
        excludeArtifacts(overrides?: CallOverrides): Promise<string[]>;
        excludeContracts(overrides?: CallOverrides): Promise<string[]>;
        excludeSenders(overrides?: CallOverrides): Promise<string[]>;
        failed(overrides?: CallOverrides): Promise<boolean>;
        setUp(overrides?: CallOverrides): Promise<void>;
        targetArtifactSelectors(overrides?: CallOverrides): Promise<StdInvariant.FuzzSelectorStructOutput[]>;
        targetArtifacts(overrides?: CallOverrides): Promise<string[]>;
        targetContracts(overrides?: CallOverrides): Promise<string[]>;
        targetSelectors(overrides?: CallOverrides): Promise<StdInvariant.FuzzSelectorStructOutput[]>;
        targetSenders(overrides?: CallOverrides): Promise<string[]>;
        testFuzz_parseAndVerifyQueryResponse_fuzzChainIds(_requestChainId: PromiseOrValue<BigNumberish>, _responseChainId: PromiseOrValue<BigNumberish>, _requestQueryType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        testFuzz_parseAndVerifyQueryResponse_fuzzMistmatchedRequestType(_requestQueryType: PromiseOrValue<BigNumberish>, _responseQueryType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        testFuzz_parseAndVerifyQueryResponse_fuzzNumPerChainQueriesAndResponses(_numPerChainQueries: PromiseOrValue<BigNumberish>, _numPerChainResponses: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        testFuzz_parseAndVerifyQueryResponse_fuzzQueryBytesLength(_queryLength: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        testFuzz_parseAndVerifyQueryResponse_fuzzQueryRequestLen(_queryRequestLen: PromiseOrValue<BigNumberish>, _perChainQueries: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        testFuzz_parseAndVerifyQueryResponse_fuzzQueryRequestNonce(_queryRequestNonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        testFuzz_parseAndVerifyQueryResponse_fuzzQueryRequestVersion(_version: PromiseOrValue<BigNumberish>, _queryRequestVersion: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        testFuzz_parseAndVerifyQueryResponse_fuzzSenderChainId(_senderChainId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        testFuzz_parseAndVerifyQueryResponse_fuzzSignatureHappyCase(_signature: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        testFuzz_parseAndVerifyQueryResponse_fuzzSignatureUnhappyCase(_signature: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        testFuzz_parseAndVerifyQueryResponse_fuzzUnsupportedRequestType(_requestQueryType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        testFuzz_parseAndVerifyQueryResponse_fuzzVersion(_version: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        testFuzz_validateBlockNum_fail(_blockNum: PromiseOrValue<BigNumberish>, _minBlockNum: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        testFuzz_validateBlockNum_success(_blockNum: PromiseOrValue<BigNumberish>, _minBlockNum: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        testFuzz_validateBlockTime_fail(_blockTime: PromiseOrValue<BigNumberish>, _minBlockTime: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        testFuzz_validateBlockTime_success(_blockTime: PromiseOrValue<BigNumberish>, _minBlockTime: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        testFuzz_validateChainId_fail(_chainId: PromiseOrValue<BigNumberish>, _validChainIds: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<void>;
        testFuzz_validateChainId_success(_validChainIndex: PromiseOrValue<BigNumberish>, _validChainIds: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<void>;
        testFuzz_validateEthCallData_failAddress(randomBytes: PromiseOrValue<BytesLike>, randomAddress: PromiseOrValue<string>, _functionSignatureIndex: PromiseOrValue<BigNumberish>, _expectedContractAddresses: PromiseOrValue<string>[], _expectedFunctionSignatures: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<void>;
        testFuzz_validateEthCallData_failSignature(randomBytes: PromiseOrValue<BytesLike>, _contractAddressIndex: PromiseOrValue<BigNumberish>, _expectedContractAddresses: PromiseOrValue<string>[], _expectedFunctionSignatures: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<void>;
        testFuzz_validateEthCallData_success(randomBytes: PromiseOrValue<BytesLike>, _contractAddressIndex: PromiseOrValue<BigNumberish>, _functionSignatureIndex: PromiseOrValue<BigNumberish>, _expectedContractAddresses: PromiseOrValue<string>[], _expectedFunctionSignatures: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<void>;
        testFuzz_validateEthCallData_successZeroAddresses(randomAddress: PromiseOrValue<string>, randomBytes: PromiseOrValue<BytesLike>, _functionSignatureIndex: PromiseOrValue<BigNumberish>, _expectedFunctionSignatures: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<void>;
        testFuzz_validateEthCallData_successZeroSignatures(randomSignature: PromiseOrValue<BytesLike>, randomBytes: PromiseOrValue<BytesLike>, _contractAddressIndex: PromiseOrValue<BigNumberish>, _expectedContractAddresses: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<void>;
        testFuzz_validateMultipleEthCallData_success(numInputs: PromiseOrValue<BigNumberish>, randomBytes: PromiseOrValue<BytesLike>, _contractAddressIndex: PromiseOrValue<BigNumberish>, _functionSignatureIndex: PromiseOrValue<BigNumberish>, _expectedContractAddresses: PromiseOrValue<string>[], _expectedFunctionSignatures: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<void>;
        testFuzz_verifyQueryResponseSignatures_invalidSignature(resp: PromiseOrValue<BytesLike>, privateKey: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        testFuzz_verifyQueryResponseSignatures_validSignature(resp: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        testFuzz_verifyQueryResponseSignatures_validSignatureWrongPrefix(responsePrefix: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        test_getResponseDigest(overrides?: CallOverrides): Promise<void>;
        test_getResponseHash(overrides?: CallOverrides): Promise<void>;
        test_parseAndVerifyQueryResponse(overrides?: CallOverrides): Promise<void>;
        test_parseEthCallByTimestampQueryResponse(overrides?: CallOverrides): Promise<void>;
        test_parseEthCallByTimestampQueryResponseRevertWrongQueryType(overrides?: CallOverrides): Promise<void>;
        test_parseEthCallQueryResponse(overrides?: CallOverrides): Promise<void>;
        test_parseEthCallQueryResponseComparison(overrides?: CallOverrides): Promise<void>;
        test_parseEthCallQueryResponseRevertWrongQueryType(overrides?: CallOverrides): Promise<void>;
        test_parseEthCallWithFinalityQueryResponse(overrides?: CallOverrides): Promise<void>;
        test_parseEthCallWithFinalityQueryResponseRevertWrongQueryType(overrides?: CallOverrides): Promise<void>;
        test_parseSolanaAccountQueryResponse(overrides?: CallOverrides): Promise<void>;
        test_parseSolanaAccountQueryResponseExtraRequestBytesRevertInvalidPayloadLength(overrides?: CallOverrides): Promise<void>;
        test_parseSolanaAccountQueryResponseExtraResponseBytesRevertInvalidPayloadLength(overrides?: CallOverrides): Promise<void>;
        test_parseSolanaAccountQueryResponseRevertUnexpectedNumberOfResults(overrides?: CallOverrides): Promise<void>;
        test_parseSolanaAccountQueryResponseRevertWrongQueryType(overrides?: CallOverrides): Promise<void>;
        test_verifyQueryResponseSignatures(overrides?: CallOverrides): Promise<void>;
        test_verifyQueryResponseSignaturesForSolana(overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "log(string)"(arg0?: null): logEventFilter;
        log(arg0?: null): logEventFilter;
        "log_address(address)"(arg0?: null): log_addressEventFilter;
        log_address(arg0?: null): log_addressEventFilter;
        "log_array(uint256[])"(val?: null): log_array_uint256_array_EventFilter;
        "log_array(int256[])"(val?: null): log_array_int256_array_EventFilter;
        "log_array(address[])"(val?: null): log_array_address_array_EventFilter;
        "log_bytes(bytes)"(arg0?: null): log_bytesEventFilter;
        log_bytes(arg0?: null): log_bytesEventFilter;
        "log_bytes32(bytes32)"(arg0?: null): log_bytes32EventFilter;
        log_bytes32(arg0?: null): log_bytes32EventFilter;
        "log_int(int256)"(arg0?: null): log_intEventFilter;
        log_int(arg0?: null): log_intEventFilter;
        "log_named_address(string,address)"(key?: null, val?: null): log_named_addressEventFilter;
        log_named_address(key?: null, val?: null): log_named_addressEventFilter;
        "log_named_array(string,uint256[])"(key?: null, val?: null): log_named_array_string_uint256_array_EventFilter;
        "log_named_array(string,int256[])"(key?: null, val?: null): log_named_array_string_int256_array_EventFilter;
        "log_named_array(string,address[])"(key?: null, val?: null): log_named_array_string_address_array_EventFilter;
        "log_named_bytes(string,bytes)"(key?: null, val?: null): log_named_bytesEventFilter;
        log_named_bytes(key?: null, val?: null): log_named_bytesEventFilter;
        "log_named_bytes32(string,bytes32)"(key?: null, val?: null): log_named_bytes32EventFilter;
        log_named_bytes32(key?: null, val?: null): log_named_bytes32EventFilter;
        "log_named_decimal_int(string,int256,uint256)"(key?: null, val?: null, decimals?: null): log_named_decimal_intEventFilter;
        log_named_decimal_int(key?: null, val?: null, decimals?: null): log_named_decimal_intEventFilter;
        "log_named_decimal_uint(string,uint256,uint256)"(key?: null, val?: null, decimals?: null): log_named_decimal_uintEventFilter;
        log_named_decimal_uint(key?: null, val?: null, decimals?: null): log_named_decimal_uintEventFilter;
        "log_named_int(string,int256)"(key?: null, val?: null): log_named_intEventFilter;
        log_named_int(key?: null, val?: null): log_named_intEventFilter;
        "log_named_string(string,string)"(key?: null, val?: null): log_named_stringEventFilter;
        log_named_string(key?: null, val?: null): log_named_stringEventFilter;
        "log_named_uint(string,uint256)"(key?: null, val?: null): log_named_uintEventFilter;
        log_named_uint(key?: null, val?: null): log_named_uintEventFilter;
        "log_string(string)"(arg0?: null): log_stringEventFilter;
        log_string(arg0?: null): log_stringEventFilter;
        "log_uint(uint256)"(arg0?: null): log_uintEventFilter;
        log_uint(arg0?: null): log_uintEventFilter;
        "logs(bytes)"(arg0?: null): logsEventFilter;
        logs(arg0?: null): logsEventFilter;
    };
    estimateGas: {
        IS_TEST(overrides?: CallOverrides): Promise<BigNumber>;
        deployWormholeForTest(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        excludeArtifacts(overrides?: CallOverrides): Promise<BigNumber>;
        excludeContracts(overrides?: CallOverrides): Promise<BigNumber>;
        excludeSenders(overrides?: CallOverrides): Promise<BigNumber>;
        failed(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setUp(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        targetArtifactSelectors(overrides?: CallOverrides): Promise<BigNumber>;
        targetArtifacts(overrides?: CallOverrides): Promise<BigNumber>;
        targetContracts(overrides?: CallOverrides): Promise<BigNumber>;
        targetSelectors(overrides?: CallOverrides): Promise<BigNumber>;
        targetSenders(overrides?: CallOverrides): Promise<BigNumber>;
        testFuzz_parseAndVerifyQueryResponse_fuzzChainIds(_requestChainId: PromiseOrValue<BigNumberish>, _responseChainId: PromiseOrValue<BigNumberish>, _requestQueryType: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testFuzz_parseAndVerifyQueryResponse_fuzzMistmatchedRequestType(_requestQueryType: PromiseOrValue<BigNumberish>, _responseQueryType: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testFuzz_parseAndVerifyQueryResponse_fuzzNumPerChainQueriesAndResponses(_numPerChainQueries: PromiseOrValue<BigNumberish>, _numPerChainResponses: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testFuzz_parseAndVerifyQueryResponse_fuzzQueryBytesLength(_queryLength: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testFuzz_parseAndVerifyQueryResponse_fuzzQueryRequestLen(_queryRequestLen: PromiseOrValue<BigNumberish>, _perChainQueries: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testFuzz_parseAndVerifyQueryResponse_fuzzQueryRequestNonce(_queryRequestNonce: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testFuzz_parseAndVerifyQueryResponse_fuzzQueryRequestVersion(_version: PromiseOrValue<BigNumberish>, _queryRequestVersion: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testFuzz_parseAndVerifyQueryResponse_fuzzSenderChainId(_senderChainId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testFuzz_parseAndVerifyQueryResponse_fuzzSignatureHappyCase(_signature: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testFuzz_parseAndVerifyQueryResponse_fuzzSignatureUnhappyCase(_signature: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testFuzz_parseAndVerifyQueryResponse_fuzzUnsupportedRequestType(_requestQueryType: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testFuzz_parseAndVerifyQueryResponse_fuzzVersion(_version: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testFuzz_validateBlockNum_fail(_blockNum: PromiseOrValue<BigNumberish>, _minBlockNum: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testFuzz_validateBlockNum_success(_blockNum: PromiseOrValue<BigNumberish>, _minBlockNum: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        testFuzz_validateBlockTime_fail(_blockTime: PromiseOrValue<BigNumberish>, _minBlockTime: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testFuzz_validateBlockTime_success(_blockTime: PromiseOrValue<BigNumberish>, _minBlockTime: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        testFuzz_validateChainId_fail(_chainId: PromiseOrValue<BigNumberish>, _validChainIds: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testFuzz_validateChainId_success(_validChainIndex: PromiseOrValue<BigNumberish>, _validChainIds: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<BigNumber>;
        testFuzz_validateEthCallData_failAddress(randomBytes: PromiseOrValue<BytesLike>, randomAddress: PromiseOrValue<string>, _functionSignatureIndex: PromiseOrValue<BigNumberish>, _expectedContractAddresses: PromiseOrValue<string>[], _expectedFunctionSignatures: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testFuzz_validateEthCallData_failSignature(randomBytes: PromiseOrValue<BytesLike>, _contractAddressIndex: PromiseOrValue<BigNumberish>, _expectedContractAddresses: PromiseOrValue<string>[], _expectedFunctionSignatures: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testFuzz_validateEthCallData_success(randomBytes: PromiseOrValue<BytesLike>, _contractAddressIndex: PromiseOrValue<BigNumberish>, _functionSignatureIndex: PromiseOrValue<BigNumberish>, _expectedContractAddresses: PromiseOrValue<string>[], _expectedFunctionSignatures: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<BigNumber>;
        testFuzz_validateEthCallData_successZeroAddresses(randomAddress: PromiseOrValue<string>, randomBytes: PromiseOrValue<BytesLike>, _functionSignatureIndex: PromiseOrValue<BigNumberish>, _expectedFunctionSignatures: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<BigNumber>;
        testFuzz_validateEthCallData_successZeroSignatures(randomSignature: PromiseOrValue<BytesLike>, randomBytes: PromiseOrValue<BytesLike>, _contractAddressIndex: PromiseOrValue<BigNumberish>, _expectedContractAddresses: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<BigNumber>;
        testFuzz_validateMultipleEthCallData_success(numInputs: PromiseOrValue<BigNumberish>, randomBytes: PromiseOrValue<BytesLike>, _contractAddressIndex: PromiseOrValue<BigNumberish>, _functionSignatureIndex: PromiseOrValue<BigNumberish>, _expectedContractAddresses: PromiseOrValue<string>[], _expectedFunctionSignatures: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<BigNumber>;
        testFuzz_verifyQueryResponseSignatures_invalidSignature(resp: PromiseOrValue<BytesLike>, privateKey: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testFuzz_verifyQueryResponseSignatures_validSignature(resp: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        testFuzz_verifyQueryResponseSignatures_validSignatureWrongPrefix(responsePrefix: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        test_getResponseDigest(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        test_getResponseHash(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        test_parseAndVerifyQueryResponse(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        test_parseEthCallByTimestampQueryResponse(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        test_parseEthCallByTimestampQueryResponseRevertWrongQueryType(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        test_parseEthCallQueryResponse(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        test_parseEthCallQueryResponseComparison(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        test_parseEthCallQueryResponseRevertWrongQueryType(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        test_parseEthCallWithFinalityQueryResponse(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        test_parseEthCallWithFinalityQueryResponseRevertWrongQueryType(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        test_parseSolanaAccountQueryResponse(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        test_parseSolanaAccountQueryResponseExtraRequestBytesRevertInvalidPayloadLength(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        test_parseSolanaAccountQueryResponseExtraResponseBytesRevertInvalidPayloadLength(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        test_parseSolanaAccountQueryResponseRevertUnexpectedNumberOfResults(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        test_parseSolanaAccountQueryResponseRevertWrongQueryType(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        test_verifyQueryResponseSignatures(overrides?: CallOverrides): Promise<BigNumber>;
        test_verifyQueryResponseSignaturesForSolana(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        IS_TEST(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        deployWormholeForTest(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        excludeArtifacts(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        excludeContracts(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        excludeSenders(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        failed(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setUp(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        targetArtifactSelectors(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        targetArtifacts(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        targetContracts(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        targetSelectors(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        targetSenders(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        testFuzz_parseAndVerifyQueryResponse_fuzzChainIds(_requestChainId: PromiseOrValue<BigNumberish>, _responseChainId: PromiseOrValue<BigNumberish>, _requestQueryType: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testFuzz_parseAndVerifyQueryResponse_fuzzMistmatchedRequestType(_requestQueryType: PromiseOrValue<BigNumberish>, _responseQueryType: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testFuzz_parseAndVerifyQueryResponse_fuzzNumPerChainQueriesAndResponses(_numPerChainQueries: PromiseOrValue<BigNumberish>, _numPerChainResponses: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testFuzz_parseAndVerifyQueryResponse_fuzzQueryBytesLength(_queryLength: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testFuzz_parseAndVerifyQueryResponse_fuzzQueryRequestLen(_queryRequestLen: PromiseOrValue<BigNumberish>, _perChainQueries: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testFuzz_parseAndVerifyQueryResponse_fuzzQueryRequestNonce(_queryRequestNonce: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testFuzz_parseAndVerifyQueryResponse_fuzzQueryRequestVersion(_version: PromiseOrValue<BigNumberish>, _queryRequestVersion: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testFuzz_parseAndVerifyQueryResponse_fuzzSenderChainId(_senderChainId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testFuzz_parseAndVerifyQueryResponse_fuzzSignatureHappyCase(_signature: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testFuzz_parseAndVerifyQueryResponse_fuzzSignatureUnhappyCase(_signature: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testFuzz_parseAndVerifyQueryResponse_fuzzUnsupportedRequestType(_requestQueryType: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testFuzz_parseAndVerifyQueryResponse_fuzzVersion(_version: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testFuzz_validateBlockNum_fail(_blockNum: PromiseOrValue<BigNumberish>, _minBlockNum: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testFuzz_validateBlockNum_success(_blockNum: PromiseOrValue<BigNumberish>, _minBlockNum: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        testFuzz_validateBlockTime_fail(_blockTime: PromiseOrValue<BigNumberish>, _minBlockTime: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testFuzz_validateBlockTime_success(_blockTime: PromiseOrValue<BigNumberish>, _minBlockTime: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        testFuzz_validateChainId_fail(_chainId: PromiseOrValue<BigNumberish>, _validChainIds: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testFuzz_validateChainId_success(_validChainIndex: PromiseOrValue<BigNumberish>, _validChainIds: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<PopulatedTransaction>;
        testFuzz_validateEthCallData_failAddress(randomBytes: PromiseOrValue<BytesLike>, randomAddress: PromiseOrValue<string>, _functionSignatureIndex: PromiseOrValue<BigNumberish>, _expectedContractAddresses: PromiseOrValue<string>[], _expectedFunctionSignatures: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testFuzz_validateEthCallData_failSignature(randomBytes: PromiseOrValue<BytesLike>, _contractAddressIndex: PromiseOrValue<BigNumberish>, _expectedContractAddresses: PromiseOrValue<string>[], _expectedFunctionSignatures: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testFuzz_validateEthCallData_success(randomBytes: PromiseOrValue<BytesLike>, _contractAddressIndex: PromiseOrValue<BigNumberish>, _functionSignatureIndex: PromiseOrValue<BigNumberish>, _expectedContractAddresses: PromiseOrValue<string>[], _expectedFunctionSignatures: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<PopulatedTransaction>;
        testFuzz_validateEthCallData_successZeroAddresses(randomAddress: PromiseOrValue<string>, randomBytes: PromiseOrValue<BytesLike>, _functionSignatureIndex: PromiseOrValue<BigNumberish>, _expectedFunctionSignatures: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<PopulatedTransaction>;
        testFuzz_validateEthCallData_successZeroSignatures(randomSignature: PromiseOrValue<BytesLike>, randomBytes: PromiseOrValue<BytesLike>, _contractAddressIndex: PromiseOrValue<BigNumberish>, _expectedContractAddresses: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<PopulatedTransaction>;
        testFuzz_validateMultipleEthCallData_success(numInputs: PromiseOrValue<BigNumberish>, randomBytes: PromiseOrValue<BytesLike>, _contractAddressIndex: PromiseOrValue<BigNumberish>, _functionSignatureIndex: PromiseOrValue<BigNumberish>, _expectedContractAddresses: PromiseOrValue<string>[], _expectedFunctionSignatures: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<PopulatedTransaction>;
        testFuzz_verifyQueryResponseSignatures_invalidSignature(resp: PromiseOrValue<BytesLike>, privateKey: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testFuzz_verifyQueryResponseSignatures_validSignature(resp: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        testFuzz_verifyQueryResponseSignatures_validSignatureWrongPrefix(responsePrefix: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        test_getResponseDigest(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        test_getResponseHash(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        test_parseAndVerifyQueryResponse(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        test_parseEthCallByTimestampQueryResponse(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        test_parseEthCallByTimestampQueryResponseRevertWrongQueryType(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        test_parseEthCallQueryResponse(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        test_parseEthCallQueryResponseComparison(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        test_parseEthCallQueryResponseRevertWrongQueryType(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        test_parseEthCallWithFinalityQueryResponse(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        test_parseEthCallWithFinalityQueryResponseRevertWrongQueryType(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        test_parseSolanaAccountQueryResponse(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        test_parseSolanaAccountQueryResponseExtraRequestBytesRevertInvalidPayloadLength(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        test_parseSolanaAccountQueryResponseExtraResponseBytesRevertInvalidPayloadLength(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        test_parseSolanaAccountQueryResponseRevertUnexpectedNumberOfResults(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        test_parseSolanaAccountQueryResponseRevertWrongQueryType(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        test_verifyQueryResponseSignatures(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        test_verifyQueryResponseSignaturesForSolana(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
