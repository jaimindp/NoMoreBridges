/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { utils, Contract, ContractFactory } from "ethers";
const _abi = [
    {
        inputs: [
            {
                internalType: "uint16",
                name: "chainId_",
                type: "uint16",
            },
        ],
        name: "bridgeContracts",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "chainId",
        outputs: [
            {
                internalType: "uint16",
                name: "",
                type: "uint16",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "evmChainId",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "finality",
        outputs: [
            {
                internalType: "uint8",
                name: "",
                type: "uint8",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "hash",
                type: "bytes32",
            },
        ],
        name: "governanceActionIsConsumed",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "governanceChainId",
        outputs: [
            {
                internalType: "uint16",
                name: "",
                type: "uint16",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "governanceContract",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "isFork",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "impl",
                type: "address",
            },
        ],
        name: "isInitialized",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "hash",
                type: "bytes32",
            },
        ],
        name: "isTransferCompleted",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "token",
                type: "address",
            },
        ],
        name: "isWrappedAsset",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "tokenId",
                type: "uint256",
            },
        ],
        name: "splCache",
        outputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "name",
                        type: "bytes32",
                    },
                    {
                        internalType: "bytes32",
                        name: "symbol",
                        type: "bytes32",
                    },
                ],
                internalType: "struct NFTBridgeStorage.SPLCache",
                name: "",
                type: "tuple",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "tokenImplementation",
        outputs: [
            {
                internalType: "address",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "wormhole",
        outputs: [
            {
                internalType: "contract IWormhole",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint16",
                name: "tokenChainId",
                type: "uint16",
            },
            {
                internalType: "bytes32",
                name: "tokenAddress",
                type: "bytes32",
            },
        ],
        name: "wrappedAsset",
        outputs: [
            {
                internalType: "address",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
];
const _bytecode = "0x6080806040523461001657610413908161001c8239f35b600080fdfe608060408181526004918236101561001657600080fd5b600092833560e01c9182631a2be4da14610351575081631ff1e2861461030b5781632c3c02a4146102df5781632f3a3d5d146102b65781633ca648261461026157816364d42b1714610242578163739fc8d11461021f57816384acd1bb146101f75781639a8a0592146101d4578163aa4efa5b146101a7578163ad66a5f114610175578163b172b22214610156578163d60b347f1461011357508063e039f224146100f25763fbe3c2cd146100ca57600080fd5b346100ee57816003193601126100ee5760209061ffff60025460101c169051908152f35b5080fd5b50346100ee57816003193601126100ee57602090600b549051904614158152f35b90503461015257602036600319011261015257356001600160a01b0381169081900361015257818360ff92602095526006855220541690519015158152f35b8280fd5b5050346100ee57816003193601126100ee576020906003549051908152f35b5050346100ee5760203660031901126100ee578060209261ffff610197610391565b1681526009845220549051908152f35b905034610152576020366003190112610152578160209360ff923581526005855220541690519015158152f35b5050346100ee57816003193601126100ee5760209061ffff600254169051908152f35b5050346100ee57816003193601126100ee57905490516001600160a01b039091168152602090f35b5050346100ee57816003193601126100ee576002549051602091821c60ff168152f35b5050346100ee57816003193601126100ee57602090600b549051908152f35b905034610152576020366003190112610152579181928160206102826103a7565b8281520152358152600a602052206102986103a7565b60206001835493848452015491019081528251918252516020820152f35b5050346100ee57816003193601126100ee5760015490516001600160a01b039091168152602090f35b90503461015257602036600319011261015257816020938260ff93358252855220541690519015158152f35b5050346100ee57806003193601126100ee5760209161ffff61032b610391565b16815260078352818120602435825283528190205490516001600160a01b039091168152f35b9291503461038d57602036600319011261038d57356001600160a01b0381169081900361038d5783526008602090815292205460ff1615158152f35b8380fd5b6004359061ffff821682036103a257565b600080fd5b604051906040820182811067ffffffffffffffff8211176103c757604052565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220c8c67c44643d13f427fd63810335d1f1f91d520aa92116e0fcf29525530787b864736f6c63430008130033";
const isSuperArgs = (xs) => xs.length > 1;
export class NFTBridgeGetters__factory extends ContractFactory {
    constructor(...args) {
        if (isSuperArgs(args)) {
            super(...args);
        }
        else {
            super(_abi, _bytecode, args[0]);
        }
    }
    deploy(overrides) {
        return super.deploy(overrides || {});
    }
    getDeployTransaction(overrides) {
        return super.getDeployTransaction(overrides || {});
    }
    attach(address) {
        return super.attach(address);
    }
    connect(signer) {
        return super.connect(signer);
    }
    static createInterface() {
        return new utils.Interface(_abi);
    }
    static connect(address, signerOrProvider) {
        return new Contract(address, _abi, signerOrProvider);
    }
}
NFTBridgeGetters__factory.bytecode = _bytecode;
NFTBridgeGetters__factory.abi = _abi;
