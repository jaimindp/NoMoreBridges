/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { utils, Contract, ContractFactory } from "ethers";
const _abi = [
    {
        inputs: [],
        name: "WETH",
        outputs: [
            {
                internalType: "contract IWETH",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint16",
                name: "chainId_",
                type: "uint16",
            },
        ],
        name: "bridgeContracts",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "chainId",
        outputs: [
            {
                internalType: "uint16",
                name: "",
                type: "uint16",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "evmChainId",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "finality",
        outputs: [
            {
                internalType: "uint8",
                name: "",
                type: "uint8",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "hash",
                type: "bytes32",
            },
        ],
        name: "governanceActionIsConsumed",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "governanceChainId",
        outputs: [
            {
                internalType: "uint16",
                name: "",
                type: "uint16",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "governanceContract",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "isFork",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "impl",
                type: "address",
            },
        ],
        name: "isInitialized",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "hash",
                type: "bytes32",
            },
        ],
        name: "isTransferCompleted",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "token",
                type: "address",
            },
        ],
        name: "isWrappedAsset",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "token",
                type: "address",
            },
        ],
        name: "outstandingBridged",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "tokenImplementation",
        outputs: [
            {
                internalType: "address",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "wormhole",
        outputs: [
            {
                internalType: "contract IWormhole",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint16",
                name: "tokenChainId",
                type: "uint16",
            },
            {
                internalType: "bytes32",
                name: "tokenAddress",
                type: "bytes32",
            },
        ],
        name: "wrappedAsset",
        outputs: [
            {
                internalType: "address",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
];
const _bytecode = "0x60808060405234610016576103f6908161001c8239f35b600080fdfe608060408181526004918236101561001657600080fd5b600092833560e01c9182631a2be4da1461036a575081631ff1e286146103245781632c3c02a4146102f75781632f3a3d5d146102ce57816364d42b17146102af578163739fc8d11461028c57816384acd1bb146102645781639a8a059214610241578163aa4efa5b14610214578163ad5c4648146101ec578163ad66a5f1146101ba578163b172b2221461019b578163b96c7e4d14610161578163d60b347f1461011e57508063e039f224146100fd5763fbe3c2cd146100d557600080fd5b346100f957816003193601126100f95760209061ffff60025460101c169051908152f35b5080fd5b50346100f957816003193601126100f957602090600c549051904614158152f35b90503461015d57602036600319011261015d57356001600160a01b0381169081900361015d57818360ff92602095526007855220541690519015158152f35b8280fd5b90503461015d57602036600319011261015d57356001600160a01b0381169081900361015d5782829160209452600a845220549051908152f35b5050346100f957816003193601126100f9576020906003549051908152f35b5050346100f95760203660031901126100f9578060209261ffff6101dc6103aa565b168152600b845220549051908152f35b90503461015d578260031936011261015d575490516001600160a01b03909116815260209150f35b90503461015d57602036600319011261015d578160209360ff923581526006855220541690519015158152f35b5050346100f957816003193601126100f95760209061ffff600254169051908152f35b5050346100f957816003193601126100f957905490516001600160a01b039091168152602090f35b5050346100f957816003193601126100f9576002549051602091821c60ff168152f35b5050346100f957816003193601126100f957602090600c549051908152f35b5050346100f957816003193601126100f95760015490516001600160a01b039091168152602090f35b90503461015d57602036600319011261015d578160209360ff923581526005855220541690519015158152f35b5050346100f957806003193601126100f95760209161ffff6103446103aa565b16815260088352818120602435825283528190205490516001600160a01b039091168152f35b929150346103a65760203660031901126103a657356001600160a01b038116908190036103a65783526009602090815292205460ff1615158152f35b8380fd5b6004359061ffff821682036103bb57565b600080fdfea26469706673582212200d00c682ce7ec8894004600ceab7d5f12943ab942ec27c4e175a005db476453b64736f6c63430008130033";
const isSuperArgs = (xs) => xs.length > 1;
export class BridgeGetters__factory extends ContractFactory {
    constructor(...args) {
        if (isSuperArgs(args)) {
            super(...args);
        }
        else {
            super(_abi, _bytecode, args[0]);
        }
    }
    deploy(overrides) {
        return super.deploy(overrides || {});
    }
    getDeployTransaction(overrides) {
        return super.getDeployTransaction(overrides || {});
    }
    attach(address) {
        return super.attach(address);
    }
    connect(signer) {
        return super.connect(signer);
    }
    static createInterface() {
        return new utils.Interface(_abi);
    }
    static connect(address, signerOrProvider) {
        return new Contract(address, _abi, signerOrProvider);
    }
}
BridgeGetters__factory.bytecode = _bytecode;
BridgeGetters__factory.abi = _abi;
