/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { utils, Contract, ContractFactory } from "ethers";
const _abi = [
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "address",
                name: "who",
                type: "address",
            },
            {
                indexed: false,
                internalType: "bytes4",
                name: "fsig",
                type: "bytes4",
            },
            {
                indexed: false,
                internalType: "bytes32",
                name: "keysHash",
                type: "bytes32",
            },
            {
                indexed: false,
                internalType: "uint256",
                name: "slot",
                type: "uint256",
            },
        ],
        name: "SlotFound",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "address",
                name: "who",
                type: "address",
            },
            {
                indexed: false,
                internalType: "uint256",
                name: "slot",
                type: "uint256",
            },
        ],
        name: "WARNING_UninitedSlot",
        type: "event",
    },
];
const _bytecode = "0x60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220f35dabdae307840da873431b0101de65906178c6bec9fd28a6c1ea04e23d543e64736f6c63430008130033";
const isSuperArgs = (xs) => xs.length > 1;
export class StdStorageSafe__factory extends ContractFactory {
    constructor(...args) {
        if (isSuperArgs(args)) {
            super(...args);
        }
        else {
            super(_abi, _bytecode, args[0]);
        }
    }
    deploy(overrides) {
        return super.deploy(overrides || {});
    }
    getDeployTransaction(overrides) {
        return super.getDeployTransaction(overrides || {});
    }
    attach(address) {
        return super.attach(address);
    }
    connect(signer) {
        return super.connect(signer);
    }
    static createInterface() {
        return new utils.Interface(_abi);
    }
    static connect(address, signerOrProvider) {
        return new Contract(address, _abi, signerOrProvider);
    }
}
StdStorageSafe__factory.bytecode = _bytecode;
StdStorageSafe__factory.abi = _abi;
