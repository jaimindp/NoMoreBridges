var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { BN } from "@project-serum/anchor";
import { CHAIN_ID_SOLANA, tryNativeToUint8Array, } from "../../../utils";
import { deriveAddress, getAccountData } from "../../utils";
import { deriveWrappedMetaKey } from "../../tokenBridge";
export { deriveWrappedMetaKey } from "../../tokenBridge";
export function deriveWrappedMintKey(tokenBridgeProgramId, tokenChain, tokenAddress, tokenId) {
    if (tokenChain == CHAIN_ID_SOLANA) {
        throw new Error("tokenChain == CHAIN_ID_SOLANA does not have wrapped mint key");
    }
    if (typeof tokenAddress == "string") {
        tokenAddress = tryNativeToUint8Array(tokenAddress, tokenChain);
    }
    return deriveAddress([
        Buffer.from("wrapped"),
        (() => {
            const buf = Buffer.alloc(2);
            buf.writeUInt16BE(tokenChain);
            return buf;
        })(),
        tokenAddress,
        new BN(tokenId.toString()).toArrayLike(Buffer, "be", 32),
    ], tokenBridgeProgramId);
}
export function getWrappedMeta(connection, tokenBridgeProgramId, mint, commitment) {
    return __awaiter(this, void 0, void 0, function* () {
        return connection
            .getAccountInfo(deriveWrappedMetaKey(tokenBridgeProgramId, mint), commitment)
            .then((info) => WrappedMeta.deserialize(getAccountData(info)));
    });
}
export class WrappedMeta {
    constructor(chain, tokenAddress, tokenId) {
        this.chain = chain;
        this.tokenAddress = tokenAddress;
        this.tokenId = tokenId;
    }
    static deserialize(data) {
        if (data.length != 66) {
            throw new Error("data.length != 66");
        }
        const chain = data.readUInt16LE(0);
        const tokenAddress = data.subarray(2, 34);
        const tokenId = BigInt(new BN(data.subarray(34, 66), undefined, "le").toString());
        return new WrappedMeta(chain, tokenAddress, tokenId);
    }
}
