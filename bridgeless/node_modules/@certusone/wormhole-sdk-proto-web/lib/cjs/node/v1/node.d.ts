import { grpc } from "@improbable-eng/grpc-web";
import _m0 from "protobufjs/minimal";
import { ObservationRequest } from "../../gossip/v1/gossip";
export declare const protobufPackage = "node.v1";
export declare enum ModificationKind {
    MODIFICATION_KIND_UNSPECIFIED = 0,
    MODIFICATION_KIND_ADD = 1,
    MODIFICATION_KIND_SUBTRACT = 2,
    UNRECOGNIZED = -1
}
export declare function modificationKindFromJSON(object: any): ModificationKind;
export declare function modificationKindToJSON(object: ModificationKind): string;
export declare enum WormchainWasmInstantiateAllowlistAction {
    WORMCHAIN_WASM_INSTANTIATE_ALLOWLIST_ACTION_UNSPECIFIED = 0,
    WORMCHAIN_WASM_INSTANTIATE_ALLOWLIST_ACTION_ADD = 1,
    WORMCHAIN_WASM_INSTANTIATE_ALLOWLIST_ACTION_DELETE = 2,
    UNRECOGNIZED = -1
}
export declare function wormchainWasmInstantiateAllowlistActionFromJSON(object: any): WormchainWasmInstantiateAllowlistAction;
export declare function wormchainWasmInstantiateAllowlistActionToJSON(object: WormchainWasmInstantiateAllowlistAction): string;
export declare enum IbcUpdateChannelChainModule {
    IBC_UPDATE_CHANNEL_CHAIN_MODULE_UNSPECIFIED = 0,
    IBC_UPDATE_CHANNEL_CHAIN_MODULE_RECEIVER = 1,
    IBC_UPDATE_CHANNEL_CHAIN_MODULE_TRANSLATOR = 2,
    UNRECOGNIZED = -1
}
export declare function ibcUpdateChannelChainModuleFromJSON(object: any): IbcUpdateChannelChainModule;
export declare function ibcUpdateChannelChainModuleToJSON(object: IbcUpdateChannelChainModule): string;
export interface InjectGovernanceVAARequest {
    /** Index of the current guardian set. */
    currentSetIndex: number;
    /** List of governance VAA messages to inject. */
    messages: GovernanceMessage[];
    /** UNIX wall time in seconds */
    timestamp: number;
}
export interface GovernanceMessage {
    /**
     * Sequence number. This is critical for replay protection - make sure the sequence number
     * is unique for every new manually injected governance VAA. Sequences are tracked
     * by emitter, and manually injected VAAs all use a single hardcoded emitter.
     *
     * We use random sequence numbers for the manual emitter.
     */
    sequence: string;
    /** Random nonce for disambiguation. Must be identical across all nodes. */
    nonce: number;
    guardianSet: GuardianSetUpdate | undefined;
    contractUpgrade: ContractUpgrade | undefined;
    bridgeRegisterChain: BridgeRegisterChain | undefined;
    bridgeContractUpgrade: BridgeUpgradeContract | undefined;
    wormchainStoreCode: WormchainStoreCode | undefined;
    wormchainInstantiateContract: WormchainInstantiateContract | undefined;
    wormchainMigrateContract: WormchainMigrateContract | undefined;
    wormchainWasmInstantiateAllowlist: WormchainWasmInstantiateAllowlist | undefined;
    /** Gateway */
    gatewayScheduleUpgrade: GatewayScheduleUpgrade | undefined;
    gatewayCancelUpgrade: GatewayCancelUpgrade | undefined;
    gatewayIbcComposabilityMwSetContract: GatewayIbcComposabilityMwSetContract | undefined;
    /** Global Accountant */
    accountantModifyBalance: AccountantModifyBalance | undefined;
    /** Circle Integration */
    circleIntegrationUpdateWormholeFinality: CircleIntegrationUpdateWormholeFinality | undefined;
    circleIntegrationRegisterEmitterAndDomain: CircleIntegrationRegisterEmitterAndDomain | undefined;
    circleIntegrationUpgradeContractImplementation: CircleIntegrationUpgradeContractImplementation | undefined;
    /** IBC Receiver Integration */
    ibcUpdateChannelChain: IbcUpdateChannelChain | undefined;
    /** Wormhole Relayer module */
    wormholeRelayerSetDefaultDeliveryProvider: WormholeRelayerSetDefaultDeliveryProvider | undefined;
}
export interface InjectGovernanceVAAResponse {
    /** Canonical digests of the submitted VAAs. */
    digests: Uint8Array[];
}
/**
 * GuardianSet represents a new guardian set to be submitted to and signed by the node.
 * During the genesis procedure, this data structure will be assembled using off-chain collaborative tooling
 * like GitHub using a human-readable encoding, so readability is a concern.
 */
export interface GuardianSetUpdate {
    guardians: GuardianSetUpdate_Guardian[];
}
/** List of guardian set members. */
export interface GuardianSetUpdate_Guardian {
    /**
     * Guardian key pubkey. Stored as hex string with 0x prefix for human readability -
     * this is the canonical Ethereum representation.
     */
    pubkey: string;
    /** Optional descriptive name. Not stored on any chain, purely informational. */
    name: string;
}
/** GuardianKey specifies the on-disk format for a node's guardian key. */
export interface GuardianKey {
    /** data is the binary representation of the secp256k1 private key. */
    data: Uint8Array;
    /** Whether this key is deterministically generated and unsuitable for production mode. */
    unsafeDeterministicKey: boolean;
}
export interface BridgeRegisterChain {
    /** Module identifier of the token or NFT bridge (typically "TokenBridge" or "NFTBridge") */
    module: string;
    /** ID of the chain to be registered. */
    chainId: number;
    /** Hex-encoded emitter address to be registered (without leading 0x). */
    emitterAddress: string;
}
export interface AccountantModifyBalance {
    /** Module identifier of the accountant "GlobalAccountant" */
    module: string;
    /** ID of the chain to receive this modify. */
    targetChainId: number;
    /**
     * The sequence number of this modification.  Each modification must be
     * uniquely identifiable just by its sequnce number.
     */
    sequence: string;
    /** U16 chain id of the account to be modified. */
    chainId: number;
    /** U16 the chain id of the native chain for the token. */
    tokenChain: number;
    /** The address of the token on its native chain, hex string encoded. */
    tokenAddress: string;
    /** The kind of modification to be made. */
    kind: ModificationKind;
    /**
     * The amount to be modified.  This should be a decimal formatted string indicating the
     * "raw" amount, not adjusted by the decimals of the token.
     */
    amount: string;
    /** A human-readable reason for the modification (max 32 bytes). */
    reason: string;
}
/** ContractUpgrade represents a Wormhole contract update to be submitted to and signed by the node. */
export interface ContractUpgrade {
    /** ID of the chain where the Wormhole contract should be updated (uint8). */
    chainId: number;
    /** Hex-encoded address (without leading 0x) address of the new program/contract. */
    newContract: string;
}
export interface BridgeUpgradeContract {
    /** Module identifier of the token or NFT bridge (typically "TokenBridge" or "NFTBridge"). */
    module: string;
    /** ID of the chain where the bridge contract should be updated (uint16). */
    targetChainId: number;
    /** Hex-encoded address (without leading 0x) of the new program/contract. */
    newContract: string;
}
export interface WormchainStoreCode {
    /** payload is the hex string of the sha3 256 hash of the wasm binary being uploaded */
    wasmHash: string;
}
export interface WormchainInstantiateContract {
    /** CodeID is the reference to the stored WASM code */
    codeId: string;
    /** Label is optional metadata to be stored with a contract instance. */
    label: string;
    /** Json encoded message to be passed to the contract on instantiation */
    instantiationMsg: string;
}
export interface WormchainMigrateContract {
    /** CodeID is the reference to the stored WASM code that the contract should migrate to. */
    codeId: string;
    /** The address of the contract being migrated. */
    contract: string;
    /** Msg json encoded message to be passed to the contract on migration */
    instantiationMsg: string;
}
export interface WormchainWasmInstantiateAllowlist {
    /** CodeID is the reference to the stored WASM code. */
    codeId: string;
    /** The address of the contract that is allowlisted to call wasm instantiate without a VAA. */
    contract: string;
    /** Specifying whether to add or delete the allowlist entry */
    action: WormchainWasmInstantiateAllowlistAction;
}
export interface GatewayIbcComposabilityMwSetContract {
    /** The address of the contract that is set in the ibc composability middleware. */
    contract: string;
}
export interface GatewayScheduleUpgrade {
    /** Name of the upgrade */
    name: string;
    /** Height of the upgrade halt */
    height: string;
}
export interface GatewayCancelUpgrade {
}
export interface CircleIntegrationUpdateWormholeFinality {
    finality: number;
    targetChainId: number;
}
export interface CircleIntegrationRegisterEmitterAndDomain {
    foreignEmitterChainId: number;
    foreignEmitterAddress: string;
    circleDomain: number;
    targetChainId: number;
}
export interface CircleIntegrationUpgradeContractImplementation {
    newImplementationAddress: string;
    targetChainId: number;
}
export interface IbcUpdateChannelChain {
    /** Chain ID that this governance VAA should be redeemed on */
    targetChainId: number;
    /** IBC channel ID */
    channelId: string;
    /** ChainID corresponding to the IBC channel */
    chainId: number;
    /** Specifying which governance module this message is for */
    module: IbcUpdateChannelChainModule;
}
export interface WormholeRelayerSetDefaultDeliveryProvider {
    /** ID of the chain of the Wormhole Relayer contract where the default delivery provider should be updated (uint16). */
    chainId: number;
    /** Hex-encoded address (without leading 0x) of the new default delivery provider contract address. */
    newDefaultDeliveryProviderAddress: string;
}
export interface FindMissingMessagesRequest {
    /** Emitter chain ID to iterate. */
    emitterChain: number;
    /** Hex-encoded (without leading 0x) emitter address to iterate. */
    emitterAddress: string;
    /** Whether to attempt to backfill missing messages from a list of remote nodes. */
    rpcBackfill: boolean;
    /** List of remote nodes to backfill from. */
    backfillNodes: string[];
}
export interface FindMissingMessagesResponse {
    /** List of missing sequence numbers. */
    missingMessages: string[];
    /** Range processed */
    firstSequence: string;
    lastSequence: string;
}
export interface SendObservationRequestRequest {
    observationRequest: ObservationRequest | undefined;
}
export interface SendObservationRequestResponse {
}
export interface ChainGovernorStatusRequest {
}
export interface ChainGovernorStatusResponse {
    response: string;
}
export interface ChainGovernorReloadRequest {
}
export interface ChainGovernorReloadResponse {
    response: string;
}
export interface ChainGovernorDropPendingVAARequest {
    vaaId: string;
}
export interface ChainGovernorDropPendingVAAResponse {
    response: string;
}
export interface ChainGovernorReleasePendingVAARequest {
    vaaId: string;
}
export interface ChainGovernorReleasePendingVAAResponse {
    response: string;
}
export interface ChainGovernorResetReleaseTimerRequest {
    vaaId: string;
}
export interface ChainGovernorResetReleaseTimerResponse {
    response: string;
}
export interface PurgePythNetVaasRequest {
    daysOld: string;
    logOnly: boolean;
}
export interface PurgePythNetVaasResponse {
    response: string;
}
export interface SignExistingVAARequest {
    vaa: Uint8Array;
    newGuardianAddrs: string[];
    newGuardianSetIndex: number;
}
export interface SignExistingVAAResponse {
    vaa: Uint8Array;
}
export interface DumpRPCsRequest {
}
export interface DumpRPCsResponse {
    response: {
        [key: string]: string;
    };
}
export interface DumpRPCsResponse_ResponseEntry {
    key: string;
    value: string;
}
export interface GetAndObserveMissingVAAsRequest {
    url: string;
    apiKey: string;
}
export interface GetAndObserveMissingVAAsResponse {
    response: string;
}
export declare const InjectGovernanceVAARequest: {
    encode(message: InjectGovernanceVAARequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): InjectGovernanceVAARequest;
    fromJSON(object: any): InjectGovernanceVAARequest;
    toJSON(message: InjectGovernanceVAARequest): unknown;
    fromPartial(object: DeepPartial<InjectGovernanceVAARequest>): InjectGovernanceVAARequest;
};
export declare const GovernanceMessage: {
    encode(message: GovernanceMessage, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GovernanceMessage;
    fromJSON(object: any): GovernanceMessage;
    toJSON(message: GovernanceMessage): unknown;
    fromPartial(object: DeepPartial<GovernanceMessage>): GovernanceMessage;
};
export declare const InjectGovernanceVAAResponse: {
    encode(message: InjectGovernanceVAAResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): InjectGovernanceVAAResponse;
    fromJSON(object: any): InjectGovernanceVAAResponse;
    toJSON(message: InjectGovernanceVAAResponse): unknown;
    fromPartial(object: DeepPartial<InjectGovernanceVAAResponse>): InjectGovernanceVAAResponse;
};
export declare const GuardianSetUpdate: {
    encode(message: GuardianSetUpdate, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GuardianSetUpdate;
    fromJSON(object: any): GuardianSetUpdate;
    toJSON(message: GuardianSetUpdate): unknown;
    fromPartial(object: DeepPartial<GuardianSetUpdate>): GuardianSetUpdate;
};
export declare const GuardianSetUpdate_Guardian: {
    encode(message: GuardianSetUpdate_Guardian, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GuardianSetUpdate_Guardian;
    fromJSON(object: any): GuardianSetUpdate_Guardian;
    toJSON(message: GuardianSetUpdate_Guardian): unknown;
    fromPartial(object: DeepPartial<GuardianSetUpdate_Guardian>): GuardianSetUpdate_Guardian;
};
export declare const GuardianKey: {
    encode(message: GuardianKey, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GuardianKey;
    fromJSON(object: any): GuardianKey;
    toJSON(message: GuardianKey): unknown;
    fromPartial(object: DeepPartial<GuardianKey>): GuardianKey;
};
export declare const BridgeRegisterChain: {
    encode(message: BridgeRegisterChain, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BridgeRegisterChain;
    fromJSON(object: any): BridgeRegisterChain;
    toJSON(message: BridgeRegisterChain): unknown;
    fromPartial(object: DeepPartial<BridgeRegisterChain>): BridgeRegisterChain;
};
export declare const AccountantModifyBalance: {
    encode(message: AccountantModifyBalance, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AccountantModifyBalance;
    fromJSON(object: any): AccountantModifyBalance;
    toJSON(message: AccountantModifyBalance): unknown;
    fromPartial(object: DeepPartial<AccountantModifyBalance>): AccountantModifyBalance;
};
export declare const ContractUpgrade: {
    encode(message: ContractUpgrade, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ContractUpgrade;
    fromJSON(object: any): ContractUpgrade;
    toJSON(message: ContractUpgrade): unknown;
    fromPartial(object: DeepPartial<ContractUpgrade>): ContractUpgrade;
};
export declare const BridgeUpgradeContract: {
    encode(message: BridgeUpgradeContract, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BridgeUpgradeContract;
    fromJSON(object: any): BridgeUpgradeContract;
    toJSON(message: BridgeUpgradeContract): unknown;
    fromPartial(object: DeepPartial<BridgeUpgradeContract>): BridgeUpgradeContract;
};
export declare const WormchainStoreCode: {
    encode(message: WormchainStoreCode, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): WormchainStoreCode;
    fromJSON(object: any): WormchainStoreCode;
    toJSON(message: WormchainStoreCode): unknown;
    fromPartial(object: DeepPartial<WormchainStoreCode>): WormchainStoreCode;
};
export declare const WormchainInstantiateContract: {
    encode(message: WormchainInstantiateContract, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): WormchainInstantiateContract;
    fromJSON(object: any): WormchainInstantiateContract;
    toJSON(message: WormchainInstantiateContract): unknown;
    fromPartial(object: DeepPartial<WormchainInstantiateContract>): WormchainInstantiateContract;
};
export declare const WormchainMigrateContract: {
    encode(message: WormchainMigrateContract, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): WormchainMigrateContract;
    fromJSON(object: any): WormchainMigrateContract;
    toJSON(message: WormchainMigrateContract): unknown;
    fromPartial(object: DeepPartial<WormchainMigrateContract>): WormchainMigrateContract;
};
export declare const WormchainWasmInstantiateAllowlist: {
    encode(message: WormchainWasmInstantiateAllowlist, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): WormchainWasmInstantiateAllowlist;
    fromJSON(object: any): WormchainWasmInstantiateAllowlist;
    toJSON(message: WormchainWasmInstantiateAllowlist): unknown;
    fromPartial(object: DeepPartial<WormchainWasmInstantiateAllowlist>): WormchainWasmInstantiateAllowlist;
};
export declare const GatewayIbcComposabilityMwSetContract: {
    encode(message: GatewayIbcComposabilityMwSetContract, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GatewayIbcComposabilityMwSetContract;
    fromJSON(object: any): GatewayIbcComposabilityMwSetContract;
    toJSON(message: GatewayIbcComposabilityMwSetContract): unknown;
    fromPartial(object: DeepPartial<GatewayIbcComposabilityMwSetContract>): GatewayIbcComposabilityMwSetContract;
};
export declare const GatewayScheduleUpgrade: {
    encode(message: GatewayScheduleUpgrade, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GatewayScheduleUpgrade;
    fromJSON(object: any): GatewayScheduleUpgrade;
    toJSON(message: GatewayScheduleUpgrade): unknown;
    fromPartial(object: DeepPartial<GatewayScheduleUpgrade>): GatewayScheduleUpgrade;
};
export declare const GatewayCancelUpgrade: {
    encode(_: GatewayCancelUpgrade, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GatewayCancelUpgrade;
    fromJSON(_: any): GatewayCancelUpgrade;
    toJSON(_: GatewayCancelUpgrade): unknown;
    fromPartial(_: DeepPartial<GatewayCancelUpgrade>): GatewayCancelUpgrade;
};
export declare const CircleIntegrationUpdateWormholeFinality: {
    encode(message: CircleIntegrationUpdateWormholeFinality, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CircleIntegrationUpdateWormholeFinality;
    fromJSON(object: any): CircleIntegrationUpdateWormholeFinality;
    toJSON(message: CircleIntegrationUpdateWormholeFinality): unknown;
    fromPartial(object: DeepPartial<CircleIntegrationUpdateWormholeFinality>): CircleIntegrationUpdateWormholeFinality;
};
export declare const CircleIntegrationRegisterEmitterAndDomain: {
    encode(message: CircleIntegrationRegisterEmitterAndDomain, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CircleIntegrationRegisterEmitterAndDomain;
    fromJSON(object: any): CircleIntegrationRegisterEmitterAndDomain;
    toJSON(message: CircleIntegrationRegisterEmitterAndDomain): unknown;
    fromPartial(object: DeepPartial<CircleIntegrationRegisterEmitterAndDomain>): CircleIntegrationRegisterEmitterAndDomain;
};
export declare const CircleIntegrationUpgradeContractImplementation: {
    encode(message: CircleIntegrationUpgradeContractImplementation, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CircleIntegrationUpgradeContractImplementation;
    fromJSON(object: any): CircleIntegrationUpgradeContractImplementation;
    toJSON(message: CircleIntegrationUpgradeContractImplementation): unknown;
    fromPartial(object: DeepPartial<CircleIntegrationUpgradeContractImplementation>): CircleIntegrationUpgradeContractImplementation;
};
export declare const IbcUpdateChannelChain: {
    encode(message: IbcUpdateChannelChain, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): IbcUpdateChannelChain;
    fromJSON(object: any): IbcUpdateChannelChain;
    toJSON(message: IbcUpdateChannelChain): unknown;
    fromPartial(object: DeepPartial<IbcUpdateChannelChain>): IbcUpdateChannelChain;
};
export declare const WormholeRelayerSetDefaultDeliveryProvider: {
    encode(message: WormholeRelayerSetDefaultDeliveryProvider, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): WormholeRelayerSetDefaultDeliveryProvider;
    fromJSON(object: any): WormholeRelayerSetDefaultDeliveryProvider;
    toJSON(message: WormholeRelayerSetDefaultDeliveryProvider): unknown;
    fromPartial(object: DeepPartial<WormholeRelayerSetDefaultDeliveryProvider>): WormholeRelayerSetDefaultDeliveryProvider;
};
export declare const FindMissingMessagesRequest: {
    encode(message: FindMissingMessagesRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FindMissingMessagesRequest;
    fromJSON(object: any): FindMissingMessagesRequest;
    toJSON(message: FindMissingMessagesRequest): unknown;
    fromPartial(object: DeepPartial<FindMissingMessagesRequest>): FindMissingMessagesRequest;
};
export declare const FindMissingMessagesResponse: {
    encode(message: FindMissingMessagesResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FindMissingMessagesResponse;
    fromJSON(object: any): FindMissingMessagesResponse;
    toJSON(message: FindMissingMessagesResponse): unknown;
    fromPartial(object: DeepPartial<FindMissingMessagesResponse>): FindMissingMessagesResponse;
};
export declare const SendObservationRequestRequest: {
    encode(message: SendObservationRequestRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SendObservationRequestRequest;
    fromJSON(object: any): SendObservationRequestRequest;
    toJSON(message: SendObservationRequestRequest): unknown;
    fromPartial(object: DeepPartial<SendObservationRequestRequest>): SendObservationRequestRequest;
};
export declare const SendObservationRequestResponse: {
    encode(_: SendObservationRequestResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SendObservationRequestResponse;
    fromJSON(_: any): SendObservationRequestResponse;
    toJSON(_: SendObservationRequestResponse): unknown;
    fromPartial(_: DeepPartial<SendObservationRequestResponse>): SendObservationRequestResponse;
};
export declare const ChainGovernorStatusRequest: {
    encode(_: ChainGovernorStatusRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ChainGovernorStatusRequest;
    fromJSON(_: any): ChainGovernorStatusRequest;
    toJSON(_: ChainGovernorStatusRequest): unknown;
    fromPartial(_: DeepPartial<ChainGovernorStatusRequest>): ChainGovernorStatusRequest;
};
export declare const ChainGovernorStatusResponse: {
    encode(message: ChainGovernorStatusResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ChainGovernorStatusResponse;
    fromJSON(object: any): ChainGovernorStatusResponse;
    toJSON(message: ChainGovernorStatusResponse): unknown;
    fromPartial(object: DeepPartial<ChainGovernorStatusResponse>): ChainGovernorStatusResponse;
};
export declare const ChainGovernorReloadRequest: {
    encode(_: ChainGovernorReloadRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ChainGovernorReloadRequest;
    fromJSON(_: any): ChainGovernorReloadRequest;
    toJSON(_: ChainGovernorReloadRequest): unknown;
    fromPartial(_: DeepPartial<ChainGovernorReloadRequest>): ChainGovernorReloadRequest;
};
export declare const ChainGovernorReloadResponse: {
    encode(message: ChainGovernorReloadResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ChainGovernorReloadResponse;
    fromJSON(object: any): ChainGovernorReloadResponse;
    toJSON(message: ChainGovernorReloadResponse): unknown;
    fromPartial(object: DeepPartial<ChainGovernorReloadResponse>): ChainGovernorReloadResponse;
};
export declare const ChainGovernorDropPendingVAARequest: {
    encode(message: ChainGovernorDropPendingVAARequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ChainGovernorDropPendingVAARequest;
    fromJSON(object: any): ChainGovernorDropPendingVAARequest;
    toJSON(message: ChainGovernorDropPendingVAARequest): unknown;
    fromPartial(object: DeepPartial<ChainGovernorDropPendingVAARequest>): ChainGovernorDropPendingVAARequest;
};
export declare const ChainGovernorDropPendingVAAResponse: {
    encode(message: ChainGovernorDropPendingVAAResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ChainGovernorDropPendingVAAResponse;
    fromJSON(object: any): ChainGovernorDropPendingVAAResponse;
    toJSON(message: ChainGovernorDropPendingVAAResponse): unknown;
    fromPartial(object: DeepPartial<ChainGovernorDropPendingVAAResponse>): ChainGovernorDropPendingVAAResponse;
};
export declare const ChainGovernorReleasePendingVAARequest: {
    encode(message: ChainGovernorReleasePendingVAARequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ChainGovernorReleasePendingVAARequest;
    fromJSON(object: any): ChainGovernorReleasePendingVAARequest;
    toJSON(message: ChainGovernorReleasePendingVAARequest): unknown;
    fromPartial(object: DeepPartial<ChainGovernorReleasePendingVAARequest>): ChainGovernorReleasePendingVAARequest;
};
export declare const ChainGovernorReleasePendingVAAResponse: {
    encode(message: ChainGovernorReleasePendingVAAResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ChainGovernorReleasePendingVAAResponse;
    fromJSON(object: any): ChainGovernorReleasePendingVAAResponse;
    toJSON(message: ChainGovernorReleasePendingVAAResponse): unknown;
    fromPartial(object: DeepPartial<ChainGovernorReleasePendingVAAResponse>): ChainGovernorReleasePendingVAAResponse;
};
export declare const ChainGovernorResetReleaseTimerRequest: {
    encode(message: ChainGovernorResetReleaseTimerRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ChainGovernorResetReleaseTimerRequest;
    fromJSON(object: any): ChainGovernorResetReleaseTimerRequest;
    toJSON(message: ChainGovernorResetReleaseTimerRequest): unknown;
    fromPartial(object: DeepPartial<ChainGovernorResetReleaseTimerRequest>): ChainGovernorResetReleaseTimerRequest;
};
export declare const ChainGovernorResetReleaseTimerResponse: {
    encode(message: ChainGovernorResetReleaseTimerResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ChainGovernorResetReleaseTimerResponse;
    fromJSON(object: any): ChainGovernorResetReleaseTimerResponse;
    toJSON(message: ChainGovernorResetReleaseTimerResponse): unknown;
    fromPartial(object: DeepPartial<ChainGovernorResetReleaseTimerResponse>): ChainGovernorResetReleaseTimerResponse;
};
export declare const PurgePythNetVaasRequest: {
    encode(message: PurgePythNetVaasRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PurgePythNetVaasRequest;
    fromJSON(object: any): PurgePythNetVaasRequest;
    toJSON(message: PurgePythNetVaasRequest): unknown;
    fromPartial(object: DeepPartial<PurgePythNetVaasRequest>): PurgePythNetVaasRequest;
};
export declare const PurgePythNetVaasResponse: {
    encode(message: PurgePythNetVaasResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PurgePythNetVaasResponse;
    fromJSON(object: any): PurgePythNetVaasResponse;
    toJSON(message: PurgePythNetVaasResponse): unknown;
    fromPartial(object: DeepPartial<PurgePythNetVaasResponse>): PurgePythNetVaasResponse;
};
export declare const SignExistingVAARequest: {
    encode(message: SignExistingVAARequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SignExistingVAARequest;
    fromJSON(object: any): SignExistingVAARequest;
    toJSON(message: SignExistingVAARequest): unknown;
    fromPartial(object: DeepPartial<SignExistingVAARequest>): SignExistingVAARequest;
};
export declare const SignExistingVAAResponse: {
    encode(message: SignExistingVAAResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SignExistingVAAResponse;
    fromJSON(object: any): SignExistingVAAResponse;
    toJSON(message: SignExistingVAAResponse): unknown;
    fromPartial(object: DeepPartial<SignExistingVAAResponse>): SignExistingVAAResponse;
};
export declare const DumpRPCsRequest: {
    encode(_: DumpRPCsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DumpRPCsRequest;
    fromJSON(_: any): DumpRPCsRequest;
    toJSON(_: DumpRPCsRequest): unknown;
    fromPartial(_: DeepPartial<DumpRPCsRequest>): DumpRPCsRequest;
};
export declare const DumpRPCsResponse: {
    encode(message: DumpRPCsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DumpRPCsResponse;
    fromJSON(object: any): DumpRPCsResponse;
    toJSON(message: DumpRPCsResponse): unknown;
    fromPartial(object: DeepPartial<DumpRPCsResponse>): DumpRPCsResponse;
};
export declare const DumpRPCsResponse_ResponseEntry: {
    encode(message: DumpRPCsResponse_ResponseEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DumpRPCsResponse_ResponseEntry;
    fromJSON(object: any): DumpRPCsResponse_ResponseEntry;
    toJSON(message: DumpRPCsResponse_ResponseEntry): unknown;
    fromPartial(object: DeepPartial<DumpRPCsResponse_ResponseEntry>): DumpRPCsResponse_ResponseEntry;
};
export declare const GetAndObserveMissingVAAsRequest: {
    encode(message: GetAndObserveMissingVAAsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetAndObserveMissingVAAsRequest;
    fromJSON(object: any): GetAndObserveMissingVAAsRequest;
    toJSON(message: GetAndObserveMissingVAAsRequest): unknown;
    fromPartial(object: DeepPartial<GetAndObserveMissingVAAsRequest>): GetAndObserveMissingVAAsRequest;
};
export declare const GetAndObserveMissingVAAsResponse: {
    encode(message: GetAndObserveMissingVAAsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetAndObserveMissingVAAsResponse;
    fromJSON(object: any): GetAndObserveMissingVAAsResponse;
    toJSON(message: GetAndObserveMissingVAAsResponse): unknown;
    fromPartial(object: DeepPartial<GetAndObserveMissingVAAsResponse>): GetAndObserveMissingVAAsResponse;
};
/**
 * NodePrivilegedService exposes an administrative API. It runs on a UNIX socket and is authenticated
 * using Linux filesystem permissions.
 */
export interface NodePrivilegedService {
    /**
     * InjectGovernanceVAA injects a governance VAA into the guardian node.
     * The node will inject the VAA into the aggregator and sign/broadcast the VAA signature.
     *
     * A consensus majority of nodes on the network will have to inject the VAA within the
     * VAA timeout window for it to reach consensus.
     */
    InjectGovernanceVAA(request: DeepPartial<InjectGovernanceVAARequest>, metadata?: grpc.Metadata): Promise<InjectGovernanceVAAResponse>;
    /**
     * FindMissingMessages will detect message sequence gaps in the local VAA store for a
     * specific emitter chain and address. Start and end slots are the lowest and highest
     * sequence numbers available in the local store, respectively.
     *
     * An error is returned if more than 1000 gaps are found.
     */
    FindMissingMessages(request: DeepPartial<FindMissingMessagesRequest>, metadata?: grpc.Metadata): Promise<FindMissingMessagesResponse>;
    /**
     * SendObservationRequest broadcasts a signed observation request to the gossip network
     * using the node's guardian key. The network rate limits these requests to one per second.
     * Requests at higher rates will fail silently.
     */
    SendObservationRequest(request: DeepPartial<SendObservationRequestRequest>, metadata?: grpc.Metadata): Promise<SendObservationRequestResponse>;
    /** ChainGovernorStatus displays the status of the chain governor. */
    ChainGovernorStatus(request: DeepPartial<ChainGovernorStatusRequest>, metadata?: grpc.Metadata): Promise<ChainGovernorStatusResponse>;
    /** ChainGovernorReload clears the chain governor history and reloads it from the database. */
    ChainGovernorReload(request: DeepPartial<ChainGovernorReloadRequest>, metadata?: grpc.Metadata): Promise<ChainGovernorReloadResponse>;
    /** ChainGovernorDropPendingVAA drops a VAA from the chain governor pending list. */
    ChainGovernorDropPendingVAA(request: DeepPartial<ChainGovernorDropPendingVAARequest>, metadata?: grpc.Metadata): Promise<ChainGovernorDropPendingVAAResponse>;
    /** ChainGovernorReleasePendingVAA release a VAA from the chain governor pending list, publishing it immediately. */
    ChainGovernorReleasePendingVAA(request: DeepPartial<ChainGovernorReleasePendingVAARequest>, metadata?: grpc.Metadata): Promise<ChainGovernorReleasePendingVAAResponse>;
    /** ChainGovernorResetReleaseTimer resets the release timer for a chain governor pending VAA to the configured maximum. */
    ChainGovernorResetReleaseTimer(request: DeepPartial<ChainGovernorResetReleaseTimerRequest>, metadata?: grpc.Metadata): Promise<ChainGovernorResetReleaseTimerResponse>;
    /** PurgePythNetVaas deletes PythNet VAAs from the database that are more than the specified number of days old. */
    PurgePythNetVaas(request: DeepPartial<PurgePythNetVaasRequest>, metadata?: grpc.Metadata): Promise<PurgePythNetVaasResponse>;
    /** SignExistingVAA signs an existing VAA for a new guardian set using the local guardian key. */
    SignExistingVAA(request: DeepPartial<SignExistingVAARequest>, metadata?: grpc.Metadata): Promise<SignExistingVAAResponse>;
    /** DumpRPCs returns the RPCs being used by the guardian */
    DumpRPCs(request: DeepPartial<DumpRPCsRequest>, metadata?: grpc.Metadata): Promise<DumpRPCsResponse>;
    /** GetMissingVAAs returns the VAAs from a cloud function that need to be reobserved. */
    GetAndObserveMissingVAAs(request: DeepPartial<GetAndObserveMissingVAAsRequest>, metadata?: grpc.Metadata): Promise<GetAndObserveMissingVAAsResponse>;
}
export declare class NodePrivilegedServiceClientImpl implements NodePrivilegedService {
    private readonly rpc;
    constructor(rpc: Rpc);
    InjectGovernanceVAA(request: DeepPartial<InjectGovernanceVAARequest>, metadata?: grpc.Metadata): Promise<InjectGovernanceVAAResponse>;
    FindMissingMessages(request: DeepPartial<FindMissingMessagesRequest>, metadata?: grpc.Metadata): Promise<FindMissingMessagesResponse>;
    SendObservationRequest(request: DeepPartial<SendObservationRequestRequest>, metadata?: grpc.Metadata): Promise<SendObservationRequestResponse>;
    ChainGovernorStatus(request: DeepPartial<ChainGovernorStatusRequest>, metadata?: grpc.Metadata): Promise<ChainGovernorStatusResponse>;
    ChainGovernorReload(request: DeepPartial<ChainGovernorReloadRequest>, metadata?: grpc.Metadata): Promise<ChainGovernorReloadResponse>;
    ChainGovernorDropPendingVAA(request: DeepPartial<ChainGovernorDropPendingVAARequest>, metadata?: grpc.Metadata): Promise<ChainGovernorDropPendingVAAResponse>;
    ChainGovernorReleasePendingVAA(request: DeepPartial<ChainGovernorReleasePendingVAARequest>, metadata?: grpc.Metadata): Promise<ChainGovernorReleasePendingVAAResponse>;
    ChainGovernorResetReleaseTimer(request: DeepPartial<ChainGovernorResetReleaseTimerRequest>, metadata?: grpc.Metadata): Promise<ChainGovernorResetReleaseTimerResponse>;
    PurgePythNetVaas(request: DeepPartial<PurgePythNetVaasRequest>, metadata?: grpc.Metadata): Promise<PurgePythNetVaasResponse>;
    SignExistingVAA(request: DeepPartial<SignExistingVAARequest>, metadata?: grpc.Metadata): Promise<SignExistingVAAResponse>;
    DumpRPCs(request: DeepPartial<DumpRPCsRequest>, metadata?: grpc.Metadata): Promise<DumpRPCsResponse>;
    GetAndObserveMissingVAAs(request: DeepPartial<GetAndObserveMissingVAAsRequest>, metadata?: grpc.Metadata): Promise<GetAndObserveMissingVAAsResponse>;
}
export declare const NodePrivilegedServiceDesc: {
    serviceName: string;
};
export declare const NodePrivilegedServiceInjectGovernanceVAADesc: UnaryMethodDefinitionish;
export declare const NodePrivilegedServiceFindMissingMessagesDesc: UnaryMethodDefinitionish;
export declare const NodePrivilegedServiceSendObservationRequestDesc: UnaryMethodDefinitionish;
export declare const NodePrivilegedServiceChainGovernorStatusDesc: UnaryMethodDefinitionish;
export declare const NodePrivilegedServiceChainGovernorReloadDesc: UnaryMethodDefinitionish;
export declare const NodePrivilegedServiceChainGovernorDropPendingVAADesc: UnaryMethodDefinitionish;
export declare const NodePrivilegedServiceChainGovernorReleasePendingVAADesc: UnaryMethodDefinitionish;
export declare const NodePrivilegedServiceChainGovernorResetReleaseTimerDesc: UnaryMethodDefinitionish;
export declare const NodePrivilegedServicePurgePythNetVaasDesc: UnaryMethodDefinitionish;
export declare const NodePrivilegedServiceSignExistingVAADesc: UnaryMethodDefinitionish;
export declare const NodePrivilegedServiceDumpRPCsDesc: UnaryMethodDefinitionish;
export declare const NodePrivilegedServiceGetAndObserveMissingVAAsDesc: UnaryMethodDefinitionish;
interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
    requestStream: any;
    responseStream: any;
}
declare type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;
interface Rpc {
    unary<T extends UnaryMethodDefinitionish>(methodDesc: T, request: any, metadata: grpc.Metadata | undefined): Promise<any>;
}
export declare class GrpcWebImpl {
    private host;
    private options;
    constructor(host: string, options: {
        transport?: grpc.TransportFactory;
        debug?: boolean;
        metadata?: grpc.Metadata;
    });
    unary<T extends UnaryMethodDefinitionish>(methodDesc: T, _request: any, metadata: grpc.Metadata | undefined): Promise<any>;
}
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
