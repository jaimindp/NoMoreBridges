/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface FixedSlashSlashingLibraryInterface extends ethers.utils.Interface {
  functions: {
    "baseSlashAmount()": FunctionFragment;
    "calcNoVoteSlashPerToken(uint256,uint256,uint256,uint256)": FunctionFragment;
    "calcSlashing(uint256,uint256,uint256,uint256,bool)": FunctionFragment;
    "calcWrongVoteSlashPerToken(uint256,uint256,uint256,uint256)": FunctionFragment;
    "calcWrongVoteSlashPerTokenGovernance(uint256,uint256,uint256,uint256)": FunctionFragment;
    "governanceSlashAmount()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "baseSlashAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calcNoVoteSlashPerToken",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcSlashing",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "calcWrongVoteSlashPerToken",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcWrongVoteSlashPerTokenGovernance",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "governanceSlashAmount",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "baseSlashAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcNoVoteSlashPerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcSlashing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcWrongVoteSlashPerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcWrongVoteSlashPerTokenGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "governanceSlashAmount",
    data: BytesLike
  ): Result;

  events: {};
}

export class FixedSlashSlashingLibrary extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: FixedSlashSlashingLibraryInterface;

  functions: {
    baseSlashAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    calcNoVoteSlashPerToken(
      totalStaked: BigNumberish,
      totalVotes: BigNumberish,
      totalCorrectVotes: BigNumberish,
      priceRequestIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcSlashing(
      totalStaked: BigNumberish,
      totalVotes: BigNumberish,
      totalCorrectVotes: BigNumberish,
      priceRequestIndex: BigNumberish,
      isGovernance: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        wrongVoteSlashPerToken: BigNumber;
        noVoteSlashPerToken: BigNumber;
      }
    >;

    calcWrongVoteSlashPerToken(
      totalStaked: BigNumberish,
      totalVotes: BigNumberish,
      totalCorrectVotes: BigNumberish,
      priceRequestIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcWrongVoteSlashPerTokenGovernance(
      totalStaked: BigNumberish,
      totalVotes: BigNumberish,
      totalCorrectVotes: BigNumberish,
      priceRequestIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    governanceSlashAmount(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  baseSlashAmount(overrides?: CallOverrides): Promise<BigNumber>;

  calcNoVoteSlashPerToken(
    totalStaked: BigNumberish,
    totalVotes: BigNumberish,
    totalCorrectVotes: BigNumberish,
    priceRequestIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcSlashing(
    totalStaked: BigNumberish,
    totalVotes: BigNumberish,
    totalCorrectVotes: BigNumberish,
    priceRequestIndex: BigNumberish,
    isGovernance: boolean,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      wrongVoteSlashPerToken: BigNumber;
      noVoteSlashPerToken: BigNumber;
    }
  >;

  calcWrongVoteSlashPerToken(
    totalStaked: BigNumberish,
    totalVotes: BigNumberish,
    totalCorrectVotes: BigNumberish,
    priceRequestIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcWrongVoteSlashPerTokenGovernance(
    totalStaked: BigNumberish,
    totalVotes: BigNumberish,
    totalCorrectVotes: BigNumberish,
    priceRequestIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  governanceSlashAmount(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    baseSlashAmount(overrides?: CallOverrides): Promise<BigNumber>;

    calcNoVoteSlashPerToken(
      totalStaked: BigNumberish,
      totalVotes: BigNumberish,
      totalCorrectVotes: BigNumberish,
      priceRequestIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcSlashing(
      totalStaked: BigNumberish,
      totalVotes: BigNumberish,
      totalCorrectVotes: BigNumberish,
      priceRequestIndex: BigNumberish,
      isGovernance: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        wrongVoteSlashPerToken: BigNumber;
        noVoteSlashPerToken: BigNumber;
      }
    >;

    calcWrongVoteSlashPerToken(
      totalStaked: BigNumberish,
      totalVotes: BigNumberish,
      totalCorrectVotes: BigNumberish,
      priceRequestIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcWrongVoteSlashPerTokenGovernance(
      totalStaked: BigNumberish,
      totalVotes: BigNumberish,
      totalCorrectVotes: BigNumberish,
      priceRequestIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governanceSlashAmount(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    baseSlashAmount(overrides?: CallOverrides): Promise<BigNumber>;

    calcNoVoteSlashPerToken(
      totalStaked: BigNumberish,
      totalVotes: BigNumberish,
      totalCorrectVotes: BigNumberish,
      priceRequestIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcSlashing(
      totalStaked: BigNumberish,
      totalVotes: BigNumberish,
      totalCorrectVotes: BigNumberish,
      priceRequestIndex: BigNumberish,
      isGovernance: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcWrongVoteSlashPerToken(
      totalStaked: BigNumberish,
      totalVotes: BigNumberish,
      totalCorrectVotes: BigNumberish,
      priceRequestIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcWrongVoteSlashPerTokenGovernance(
      totalStaked: BigNumberish,
      totalVotes: BigNumberish,
      totalCorrectVotes: BigNumberish,
      priceRequestIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governanceSlashAmount(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    baseSlashAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calcNoVoteSlashPerToken(
      totalStaked: BigNumberish,
      totalVotes: BigNumberish,
      totalCorrectVotes: BigNumberish,
      priceRequestIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcSlashing(
      totalStaked: BigNumberish,
      totalVotes: BigNumberish,
      totalCorrectVotes: BigNumberish,
      priceRequestIndex: BigNumberish,
      isGovernance: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcWrongVoteSlashPerToken(
      totalStaked: BigNumberish,
      totalVotes: BigNumberish,
      totalCorrectVotes: BigNumberish,
      priceRequestIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcWrongVoteSlashPerTokenGovernance(
      totalStaked: BigNumberish,
      totalVotes: BigNumberish,
      totalCorrectVotes: BigNumberish,
      priceRequestIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governanceSlashAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
