/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface OptimisticRewarderCreatorInterface extends ethers.utils.Interface {
  functions: {
    "createOptimisticRewarder(string,string,string,uint256,address,uint256,bytes32,bytes)": FunctionFragment;
    "createOptimisticRewarderNoToken(address,uint256,address,uint256,bytes32,bytes)": FunctionFragment;
    "finder()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createOptimisticRewarder",
    values: [
      string,
      string,
      string,
      BigNumberish,
      string,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createOptimisticRewarderNoToken",
    values: [string, BigNumberish, string, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "finder", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "createOptimisticRewarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createOptimisticRewarderNoToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "finder", data: BytesLike): Result;

  events: {
    "CreatedOptimisticRewarder(address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CreatedOptimisticRewarder"): EventFragment;
}

export type CreatedOptimisticRewarderEvent = TypedEvent<
  [string, boolean] & { optimisticRewarder: string; includesToken: boolean }
>;

export class OptimisticRewarderCreator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: OptimisticRewarderCreatorInterface;

  functions: {
    createOptimisticRewarder(
      _name: string,
      _symbol: string,
      _baseUri: string,
      _liveness: BigNumberish,
      _bondToken: string,
      _bond: BigNumberish,
      _identifier: BytesLike,
      _customAncillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createOptimisticRewarderNoToken(
      _token: string,
      _liveness: BigNumberish,
      _bondToken: string,
      _bond: BigNumberish,
      _identifier: BytesLike,
      _customAncillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    finder(overrides?: CallOverrides): Promise<[string]>;
  };

  createOptimisticRewarder(
    _name: string,
    _symbol: string,
    _baseUri: string,
    _liveness: BigNumberish,
    _bondToken: string,
    _bond: BigNumberish,
    _identifier: BytesLike,
    _customAncillaryData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createOptimisticRewarderNoToken(
    _token: string,
    _liveness: BigNumberish,
    _bondToken: string,
    _bond: BigNumberish,
    _identifier: BytesLike,
    _customAncillaryData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  finder(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    createOptimisticRewarder(
      _name: string,
      _symbol: string,
      _baseUri: string,
      _liveness: BigNumberish,
      _bondToken: string,
      _bond: BigNumberish,
      _identifier: BytesLike,
      _customAncillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    createOptimisticRewarderNoToken(
      _token: string,
      _liveness: BigNumberish,
      _bondToken: string,
      _bond: BigNumberish,
      _identifier: BytesLike,
      _customAncillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    finder(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "CreatedOptimisticRewarder(address,bool)"(
      optimisticRewarder?: string | null,
      includesToken?: null
    ): TypedEventFilter<
      [string, boolean],
      { optimisticRewarder: string; includesToken: boolean }
    >;

    CreatedOptimisticRewarder(
      optimisticRewarder?: string | null,
      includesToken?: null
    ): TypedEventFilter<
      [string, boolean],
      { optimisticRewarder: string; includesToken: boolean }
    >;
  };

  estimateGas: {
    createOptimisticRewarder(
      _name: string,
      _symbol: string,
      _baseUri: string,
      _liveness: BigNumberish,
      _bondToken: string,
      _bond: BigNumberish,
      _identifier: BytesLike,
      _customAncillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createOptimisticRewarderNoToken(
      _token: string,
      _liveness: BigNumberish,
      _bondToken: string,
      _bond: BigNumberish,
      _identifier: BytesLike,
      _customAncillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    finder(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    createOptimisticRewarder(
      _name: string,
      _symbol: string,
      _baseUri: string,
      _liveness: BigNumberish,
      _bondToken: string,
      _bond: BigNumberish,
      _identifier: BytesLike,
      _customAncillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createOptimisticRewarderNoToken(
      _token: string,
      _liveness: BigNumberish,
      _bondToken: string,
      _bond: BigNumberish,
      _identifier: BytesLike,
      _customAncillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    finder(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
