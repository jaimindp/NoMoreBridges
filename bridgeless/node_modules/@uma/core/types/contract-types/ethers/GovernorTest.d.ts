/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface GovernorTestInterface extends ethers.utils.Interface {
  functions: {
    "addMember(uint256,address)": FunctionFragment;
    "addPrefix(bytes32,bytes32,uint256)": FunctionFragment;
    "constructIdentifier(uint256)": FunctionFragment;
    "executeProposal(uint256,uint256)": FunctionFragment;
    "getCurrentTime()": FunctionFragment;
    "getMember(uint256)": FunctionFragment;
    "getProposal(uint256)": FunctionFragment;
    "holdsRole(uint256,address)": FunctionFragment;
    "numProposals()": FunctionFragment;
    "proposals(uint256)": FunctionFragment;
    "propose(tuple[])": FunctionFragment;
    "removeMember(uint256,address)": FunctionFragment;
    "renounceMembership(uint256)": FunctionFragment;
    "resetMember(uint256,address)": FunctionFragment;
    "setCurrentTime(uint256)": FunctionFragment;
    "timerAddress()": FunctionFragment;
    "uintToUtf8(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addMember",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addPrefix",
    values: [BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "constructIdentifier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeProposal",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMember",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "holdsRole",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "numProposals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "propose",
    values: [{ to: string; value: BigNumberish; data: BytesLike }[]]
  ): string;
  encodeFunctionData(
    functionFragment: "removeMember",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceMembership",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "resetMember",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setCurrentTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "timerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uintToUtf8",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addMember", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addPrefix", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "constructIdentifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMember", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "holdsRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "propose", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceMembership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCurrentTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uintToUtf8", data: BytesLike): Result;

  events: {
    "AddedSharedMember(uint256,address,address)": EventFragment;
    "NewProposal(uint256,tuple[])": EventFragment;
    "ProposalExecuted(uint256,uint256)": EventFragment;
    "RemovedSharedMember(uint256,address,address)": EventFragment;
    "ResetExclusiveMember(uint256,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddedSharedMember"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewProposal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemovedSharedMember"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ResetExclusiveMember"): EventFragment;
}

export type AddedSharedMemberEvent = TypedEvent<
  [BigNumber, string, string] & {
    roleId: BigNumber;
    newMember: string;
    manager: string;
  }
>;

export type NewProposalEvent = TypedEvent<
  [
    BigNumber,
    ([string, BigNumber, string] & {
      to: string;
      value: BigNumber;
      data: string;
    })[]
  ] & {
    id: BigNumber;
    transactions: ([string, BigNumber, string] & {
      to: string;
      value: BigNumber;
      data: string;
    })[];
  }
>;

export type ProposalExecutedEvent = TypedEvent<
  [BigNumber, BigNumber] & { id: BigNumber; transactionIndex: BigNumber }
>;

export type RemovedSharedMemberEvent = TypedEvent<
  [BigNumber, string, string] & {
    roleId: BigNumber;
    oldMember: string;
    manager: string;
  }
>;

export type ResetExclusiveMemberEvent = TypedEvent<
  [BigNumber, string, string] & {
    roleId: BigNumber;
    newMember: string;
    manager: string;
  }
>;

export class GovernorTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: GovernorTestInterface;

  functions: {
    addMember(
      roleId: BigNumberish,
      newMember: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addPrefix(
      input: BytesLike,
      prefix: BytesLike,
      prefixLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    constructIdentifier(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { identifier: string }>;

    executeProposal(
      id: BigNumberish,
      transactionIndex: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCurrentTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMember(
      roleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getProposal(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          ([string, BigNumber, string] & {
            to: string;
            value: BigNumber;
            data: string;
          })[],
          BigNumber
        ] & {
          transactions: ([string, BigNumber, string] & {
            to: string;
            value: BigNumber;
            data: string;
          })[];
          requestTime: BigNumber;
        }
      ]
    >;

    holdsRole(
      roleId: BigNumberish,
      memberToCheck: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    numProposals(overrides?: CallOverrides): Promise<[BigNumber]>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { requestTime: BigNumber }>;

    propose(
      transactions: { to: string; value: BigNumberish; data: BytesLike }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeMember(
      roleId: BigNumberish,
      memberToRemove: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceMembership(
      roleId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    resetMember(
      roleId: BigNumberish,
      newMember: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCurrentTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    timerAddress(overrides?: CallOverrides): Promise<[string]>;

    uintToUtf8(
      v: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { ret: string }>;
  };

  addMember(
    roleId: BigNumberish,
    newMember: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addPrefix(
    input: BytesLike,
    prefix: BytesLike,
    prefixLength: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  constructIdentifier(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  executeProposal(
    id: BigNumberish,
    transactionIndex: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

  getMember(roleId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getProposal(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      ([string, BigNumber, string] & {
        to: string;
        value: BigNumber;
        data: string;
      })[],
      BigNumber
    ] & {
      transactions: ([string, BigNumber, string] & {
        to: string;
        value: BigNumber;
        data: string;
      })[];
      requestTime: BigNumber;
    }
  >;

  holdsRole(
    roleId: BigNumberish,
    memberToCheck: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  numProposals(overrides?: CallOverrides): Promise<BigNumber>;

  proposals(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  propose(
    transactions: { to: string; value: BigNumberish; data: BytesLike }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeMember(
    roleId: BigNumberish,
    memberToRemove: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceMembership(
    roleId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  resetMember(
    roleId: BigNumberish,
    newMember: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCurrentTime(
    time: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  timerAddress(overrides?: CallOverrides): Promise<string>;

  uintToUtf8(v: BigNumberish, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addMember(
      roleId: BigNumberish,
      newMember: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addPrefix(
      input: BytesLike,
      prefix: BytesLike,
      prefixLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    constructIdentifier(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    executeProposal(
      id: BigNumberish,
      transactionIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

    getMember(roleId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    getProposal(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, BigNumber, string] & {
          to: string;
          value: BigNumber;
          data: string;
        })[],
        BigNumber
      ] & {
        transactions: ([string, BigNumber, string] & {
          to: string;
          value: BigNumber;
          data: string;
        })[];
        requestTime: BigNumber;
      }
    >;

    holdsRole(
      roleId: BigNumberish,
      memberToCheck: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    numProposals(overrides?: CallOverrides): Promise<BigNumber>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    propose(
      transactions: { to: string; value: BigNumberish; data: BytesLike }[],
      overrides?: CallOverrides
    ): Promise<void>;

    removeMember(
      roleId: BigNumberish,
      memberToRemove: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceMembership(
      roleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    resetMember(
      roleId: BigNumberish,
      newMember: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setCurrentTime(
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    timerAddress(overrides?: CallOverrides): Promise<string>;

    uintToUtf8(v: BigNumberish, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AddedSharedMember(uint256,address,address)"(
      roleId?: BigNumberish | null,
      newMember?: string | null,
      manager?: string | null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { roleId: BigNumber; newMember: string; manager: string }
    >;

    AddedSharedMember(
      roleId?: BigNumberish | null,
      newMember?: string | null,
      manager?: string | null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { roleId: BigNumber; newMember: string; manager: string }
    >;

    "NewProposal(uint256,tuple[])"(
      id?: BigNumberish | null,
      transactions?: null
    ): TypedEventFilter<
      [
        BigNumber,
        ([string, BigNumber, string] & {
          to: string;
          value: BigNumber;
          data: string;
        })[]
      ],
      {
        id: BigNumber;
        transactions: ([string, BigNumber, string] & {
          to: string;
          value: BigNumber;
          data: string;
        })[];
      }
    >;

    NewProposal(
      id?: BigNumberish | null,
      transactions?: null
    ): TypedEventFilter<
      [
        BigNumber,
        ([string, BigNumber, string] & {
          to: string;
          value: BigNumber;
          data: string;
        })[]
      ],
      {
        id: BigNumber;
        transactions: ([string, BigNumber, string] & {
          to: string;
          value: BigNumber;
          data: string;
        })[];
      }
    >;

    "ProposalExecuted(uint256,uint256)"(
      id?: BigNumberish | null,
      transactionIndex?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { id: BigNumber; transactionIndex: BigNumber }
    >;

    ProposalExecuted(
      id?: BigNumberish | null,
      transactionIndex?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { id: BigNumber; transactionIndex: BigNumber }
    >;

    "RemovedSharedMember(uint256,address,address)"(
      roleId?: BigNumberish | null,
      oldMember?: string | null,
      manager?: string | null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { roleId: BigNumber; oldMember: string; manager: string }
    >;

    RemovedSharedMember(
      roleId?: BigNumberish | null,
      oldMember?: string | null,
      manager?: string | null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { roleId: BigNumber; oldMember: string; manager: string }
    >;

    "ResetExclusiveMember(uint256,address,address)"(
      roleId?: BigNumberish | null,
      newMember?: string | null,
      manager?: string | null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { roleId: BigNumber; newMember: string; manager: string }
    >;

    ResetExclusiveMember(
      roleId?: BigNumberish | null,
      newMember?: string | null,
      manager?: string | null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { roleId: BigNumber; newMember: string; manager: string }
    >;
  };

  estimateGas: {
    addMember(
      roleId: BigNumberish,
      newMember: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addPrefix(
      input: BytesLike,
      prefix: BytesLike,
      prefixLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    constructIdentifier(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeProposal(
      id: BigNumberish,
      transactionIndex: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

    getMember(
      roleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposal(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    holdsRole(
      roleId: BigNumberish,
      memberToCheck: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numProposals(overrides?: CallOverrides): Promise<BigNumber>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    propose(
      transactions: { to: string; value: BigNumberish; data: BytesLike }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeMember(
      roleId: BigNumberish,
      memberToRemove: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceMembership(
      roleId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    resetMember(
      roleId: BigNumberish,
      newMember: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCurrentTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    timerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    uintToUtf8(v: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addMember(
      roleId: BigNumberish,
      newMember: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addPrefix(
      input: BytesLike,
      prefix: BytesLike,
      prefixLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    constructIdentifier(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executeProposal(
      id: BigNumberish,
      transactionIndex: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCurrentTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMember(
      roleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposal(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    holdsRole(
      roleId: BigNumberish,
      memberToCheck: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numProposals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    propose(
      transactions: { to: string; value: BigNumberish; data: BytesLike }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeMember(
      roleId: BigNumberish,
      memberToRemove: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceMembership(
      roleId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    resetMember(
      roleId: BigNumberish,
      newMember: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCurrentTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    timerAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uintToUtf8(
      v: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
