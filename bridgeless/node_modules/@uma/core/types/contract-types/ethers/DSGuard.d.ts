/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface DSGuardInterface extends ethers.utils.Interface {
  functions: {
    "ANY()": FunctionFragment;
    "authority()": FunctionFragment;
    "canCall(address,address,bytes4)": FunctionFragment;
    "forbid(address,address,bytes32)": FunctionFragment;
    "owner()": FunctionFragment;
    "permit(address,address,bytes32)": FunctionFragment;
    "setAuthority(address)": FunctionFragment;
    "setOwner(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "ANY", values?: undefined): string;
  encodeFunctionData(functionFragment: "authority", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "canCall",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "forbid",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuthority",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;

  decodeFunctionResult(functionFragment: "ANY", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "authority", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "canCall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "forbid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;

  events: {
    "LogForbid(bytes32,bytes32,bytes32)": EventFragment;
    "LogPermit(bytes32,bytes32,bytes32)": EventFragment;
    "LogSetAuthority(address)": EventFragment;
    "LogSetOwner(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogForbid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogPermit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSetAuthority"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSetOwner"): EventFragment;
}

export type LogForbidEvent = TypedEvent<
  [string, string, string] & { src: string; dst: string; sig: string }
>;

export type LogPermitEvent = TypedEvent<
  [string, string, string] & { src: string; dst: string; sig: string }
>;

export type LogSetAuthorityEvent = TypedEvent<[string] & { authority: string }>;

export type LogSetOwnerEvent = TypedEvent<[string] & { owner: string }>;

export class DSGuard extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DSGuardInterface;

  functions: {
    ANY(overrides?: CallOverrides): Promise<[string]>;

    authority(overrides?: CallOverrides): Promise<[string]>;

    canCall(
      src_: string,
      dst_: string,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "forbid(address,address,bytes32)"(
      src: string,
      dst: string,
      sig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "forbid(bytes32,bytes32,bytes32)"(
      src: BytesLike,
      dst: BytesLike,
      sig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "permit(address,address,bytes32)"(
      src: string,
      dst: string,
      sig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "permit(bytes32,bytes32,bytes32)"(
      src: BytesLike,
      dst: BytesLike,
      sig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAuthority(
      authority_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOwner(
      owner_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  ANY(overrides?: CallOverrides): Promise<string>;

  authority(overrides?: CallOverrides): Promise<string>;

  canCall(
    src_: string,
    dst_: string,
    sig: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "forbid(address,address,bytes32)"(
    src: string,
    dst: string,
    sig: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "forbid(bytes32,bytes32,bytes32)"(
    src: BytesLike,
    dst: BytesLike,
    sig: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "permit(address,address,bytes32)"(
    src: string,
    dst: string,
    sig: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "permit(bytes32,bytes32,bytes32)"(
    src: BytesLike,
    dst: BytesLike,
    sig: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAuthority(
    authority_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOwner(
    owner_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ANY(overrides?: CallOverrides): Promise<string>;

    authority(overrides?: CallOverrides): Promise<string>;

    canCall(
      src_: string,
      dst_: string,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "forbid(address,address,bytes32)"(
      src: string,
      dst: string,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "forbid(bytes32,bytes32,bytes32)"(
      src: BytesLike,
      dst: BytesLike,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "permit(address,address,bytes32)"(
      src: string,
      dst: string,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "permit(bytes32,bytes32,bytes32)"(
      src: BytesLike,
      dst: BytesLike,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setAuthority(authority_: string, overrides?: CallOverrides): Promise<void>;

    setOwner(owner_: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "LogForbid(bytes32,bytes32,bytes32)"(
      src?: BytesLike | null,
      dst?: BytesLike | null,
      sig?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { src: string; dst: string; sig: string }
    >;

    LogForbid(
      src?: BytesLike | null,
      dst?: BytesLike | null,
      sig?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { src: string; dst: string; sig: string }
    >;

    "LogPermit(bytes32,bytes32,bytes32)"(
      src?: BytesLike | null,
      dst?: BytesLike | null,
      sig?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { src: string; dst: string; sig: string }
    >;

    LogPermit(
      src?: BytesLike | null,
      dst?: BytesLike | null,
      sig?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { src: string; dst: string; sig: string }
    >;

    "LogSetAuthority(address)"(
      authority?: string | null
    ): TypedEventFilter<[string], { authority: string }>;

    LogSetAuthority(
      authority?: string | null
    ): TypedEventFilter<[string], { authority: string }>;

    "LogSetOwner(address)"(
      owner?: string | null
    ): TypedEventFilter<[string], { owner: string }>;

    LogSetOwner(
      owner?: string | null
    ): TypedEventFilter<[string], { owner: string }>;
  };

  estimateGas: {
    ANY(overrides?: CallOverrides): Promise<BigNumber>;

    authority(overrides?: CallOverrides): Promise<BigNumber>;

    canCall(
      src_: string,
      dst_: string,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "forbid(address,address,bytes32)"(
      src: string,
      dst: string,
      sig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "forbid(bytes32,bytes32,bytes32)"(
      src: BytesLike,
      dst: BytesLike,
      sig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "permit(address,address,bytes32)"(
      src: string,
      dst: string,
      sig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "permit(bytes32,bytes32,bytes32)"(
      src: BytesLike,
      dst: BytesLike,
      sig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAuthority(
      authority_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOwner(
      owner_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ANY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    authority(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    canCall(
      src_: string,
      dst_: string,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "forbid(address,address,bytes32)"(
      src: string,
      dst: string,
      sig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "forbid(bytes32,bytes32,bytes32)"(
      src: BytesLike,
      dst: BytesLike,
      sig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "permit(address,address,bytes32)"(
      src: string,
      dst: string,
      sig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "permit(bytes32,bytes32,bytes32)"(
      src: BytesLike,
      dst: BytesLike,
      sig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAuthority(
      authority_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOwner(
      owner_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
