/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface OptimisticRewarderBaseInterface extends ethers.utils.Interface {
  functions: {
    "bond()": FunctionFragment;
    "bondToken()": FunctionFragment;
    "customAncillaryData()": FunctionFragment;
    "depositRewards(address,uint256)": FunctionFragment;
    "dispute(uint256,tuple[])": FunctionFragment;
    "finalFee()": FunctionFragment;
    "finder()": FunctionFragment;
    "getCurrentTime()": FunctionFragment;
    "getRedemptionId(uint256,tuple[])": FunctionFragment;
    "identifier()": FunctionFragment;
    "liveness()": FunctionFragment;
    "mint(address,bytes)": FunctionFragment;
    "mintNextToken(address)": FunctionFragment;
    "multicall(bytes[])": FunctionFragment;
    "optimisticOracle()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "redeem(uint256,tuple[])": FunctionFragment;
    "redeemedAmounts(uint256,address)": FunctionFragment;
    "redemptions(bytes32)": FunctionFragment;
    "requestRedemption(uint256,tuple[])": FunctionFragment;
    "store()": FunctionFragment;
    "sync()": FunctionFragment;
    "updateToken(uint256,bytes)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "bond", values?: undefined): string;
  encodeFunctionData(functionFragment: "bondToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "customAncillaryData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositRewards",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dispute",
    values: [BigNumberish, { amount: BigNumberish; token: string }[]]
  ): string;
  encodeFunctionData(functionFragment: "finalFee", values?: undefined): string;
  encodeFunctionData(functionFragment: "finder", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCurrentTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRedemptionId",
    values: [BigNumberish, { amount: BigNumberish; token: string }[]]
  ): string;
  encodeFunctionData(
    functionFragment: "identifier",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "liveness", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mintNextToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "optimisticOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish, { amount: BigNumberish; token: string }[]]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemedAmounts",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "redemptions",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestRedemption",
    values: [BigNumberish, { amount: BigNumberish; token: string }[]]
  ): string;
  encodeFunctionData(functionFragment: "store", values?: undefined): string;
  encodeFunctionData(functionFragment: "sync", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateToken",
    values: [BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "bond", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bondToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "customAncillaryData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dispute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "finalFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "finder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRedemptionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "identifier", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liveness", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintNextToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "optimisticOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemedAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redemptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestRedemption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "store", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sync", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateToken",
    data: BytesLike
  ): Result;

  events: {
    "Canceled(uint256,bytes32,uint256)": EventFragment;
    "Deposited(address,address,uint256)": EventFragment;
    "Disputed(uint256,bytes32,uint256)": EventFragment;
    "Redeemed(uint256,bytes32,uint256)": EventFragment;
    "Requested(uint256,bytes32,tuple[],uint256)": EventFragment;
    "UpdateToken(uint256,address,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Canceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Disputed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redeemed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Requested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateToken"): EventFragment;
}

export type CanceledEvent = TypedEvent<
  [BigNumber, string, BigNumber] & {
    tokenId: BigNumber;
    redemptionId: string;
    expiryTime: BigNumber;
  }
>;

export type DepositedEvent = TypedEvent<
  [string, string, BigNumber] & {
    depositor: string;
    token: string;
    amount: BigNumber;
  }
>;

export type DisputedEvent = TypedEvent<
  [BigNumber, string, BigNumber] & {
    tokenId: BigNumber;
    redemptionId: string;
    expiryTime: BigNumber;
  }
>;

export type RedeemedEvent = TypedEvent<
  [BigNumber, string, BigNumber] & {
    tokenId: BigNumber;
    redemptionId: string;
    expiryTime: BigNumber;
  }
>;

export type RequestedEvent = TypedEvent<
  [
    BigNumber,
    string,
    ([BigNumber, string] & { amount: BigNumber; token: string })[],
    BigNumber
  ] & {
    tokenId: BigNumber;
    redemptionId: string;
    cumulativeRedemptions: ([BigNumber, string] & {
      amount: BigNumber;
      token: string;
    })[];
    expiryTime: BigNumber;
  }
>;

export type UpdateTokenEvent = TypedEvent<
  [BigNumber, string, string] & {
    tokenId: BigNumber;
    caller: string;
    data: string;
  }
>;

export class OptimisticRewarderBase extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: OptimisticRewarderBaseInterface;

  functions: {
    bond(overrides?: CallOverrides): Promise<[BigNumber]>;

    bondToken(overrides?: CallOverrides): Promise<[string]>;

    customAncillaryData(overrides?: CallOverrides): Promise<[string]>;

    depositRewards(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dispute(
      tokenId: BigNumberish,
      cumulativeRedemptions: { amount: BigNumberish; token: string }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    finalFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    finder(overrides?: CallOverrides): Promise<[string]>;

    getCurrentTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRedemptionId(
      tokenId: BigNumberish,
      cumulativeRedemptions: { amount: BigNumberish; token: string }[],
      overrides?: CallOverrides
    ): Promise<[string]>;

    identifier(overrides?: CallOverrides): Promise<[string]>;

    liveness(overrides?: CallOverrides): Promise<[BigNumber]>;

    mint(
      receiver: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintNextToken(
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    optimisticOracle(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    redeem(
      tokenId: BigNumberish,
      cumulativeRedemptions: { amount: BigNumberish; token: string }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemedAmounts(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    redemptions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { finalFee: BigNumber; expiryTime: BigNumber }
    >;

    requestRedemption(
      tokenId: BigNumberish,
      cumulativeRedemptions: { amount: BigNumberish; token: string }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    store(overrides?: CallOverrides): Promise<[string]>;

    sync(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateToken(
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  bond(overrides?: CallOverrides): Promise<BigNumber>;

  bondToken(overrides?: CallOverrides): Promise<string>;

  customAncillaryData(overrides?: CallOverrides): Promise<string>;

  depositRewards(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dispute(
    tokenId: BigNumberish,
    cumulativeRedemptions: { amount: BigNumberish; token: string }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  finalFee(overrides?: CallOverrides): Promise<BigNumber>;

  finder(overrides?: CallOverrides): Promise<string>;

  getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

  getRedemptionId(
    tokenId: BigNumberish,
    cumulativeRedemptions: { amount: BigNumberish; token: string }[],
    overrides?: CallOverrides
  ): Promise<string>;

  identifier(overrides?: CallOverrides): Promise<string>;

  liveness(overrides?: CallOverrides): Promise<BigNumber>;

  mint(
    receiver: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintNextToken(
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  multicall(
    data: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  optimisticOracle(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  redeem(
    tokenId: BigNumberish,
    cumulativeRedemptions: { amount: BigNumberish; token: string }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemedAmounts(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  redemptions(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { finalFee: BigNumber; expiryTime: BigNumber }
  >;

  requestRedemption(
    tokenId: BigNumberish,
    cumulativeRedemptions: { amount: BigNumberish; token: string }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  store(overrides?: CallOverrides): Promise<string>;

  sync(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateToken(
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    bond(overrides?: CallOverrides): Promise<BigNumber>;

    bondToken(overrides?: CallOverrides): Promise<string>;

    customAncillaryData(overrides?: CallOverrides): Promise<string>;

    depositRewards(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    dispute(
      tokenId: BigNumberish,
      cumulativeRedemptions: { amount: BigNumberish; token: string }[],
      overrides?: CallOverrides
    ): Promise<void>;

    finalFee(overrides?: CallOverrides): Promise<BigNumber>;

    finder(overrides?: CallOverrides): Promise<string>;

    getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

    getRedemptionId(
      tokenId: BigNumberish,
      cumulativeRedemptions: { amount: BigNumberish; token: string }[],
      overrides?: CallOverrides
    ): Promise<string>;

    identifier(overrides?: CallOverrides): Promise<string>;

    liveness(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      receiver: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintNextToken(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multicall(data: BytesLike[], overrides?: CallOverrides): Promise<string[]>;

    optimisticOracle(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    redeem(
      tokenId: BigNumberish,
      cumulativeRedemptions: { amount: BigNumberish; token: string }[],
      overrides?: CallOverrides
    ): Promise<void>;

    redeemedAmounts(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redemptions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { finalFee: BigNumber; expiryTime: BigNumber }
    >;

    requestRedemption(
      tokenId: BigNumberish,
      cumulativeRedemptions: { amount: BigNumberish; token: string }[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    store(overrides?: CallOverrides): Promise<string>;

    sync(overrides?: CallOverrides): Promise<void>;

    updateToken(
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Canceled(uint256,bytes32,uint256)"(
      tokenId?: BigNumberish | null,
      redemptionId?: BytesLike | null,
      expiryTime?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { tokenId: BigNumber; redemptionId: string; expiryTime: BigNumber }
    >;

    Canceled(
      tokenId?: BigNumberish | null,
      redemptionId?: BytesLike | null,
      expiryTime?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { tokenId: BigNumber; redemptionId: string; expiryTime: BigNumber }
    >;

    "Deposited(address,address,uint256)"(
      depositor?: string | null,
      token?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { depositor: string; token: string; amount: BigNumber }
    >;

    Deposited(
      depositor?: string | null,
      token?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { depositor: string; token: string; amount: BigNumber }
    >;

    "Disputed(uint256,bytes32,uint256)"(
      tokenId?: BigNumberish | null,
      redemptionId?: BytesLike | null,
      expiryTime?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { tokenId: BigNumber; redemptionId: string; expiryTime: BigNumber }
    >;

    Disputed(
      tokenId?: BigNumberish | null,
      redemptionId?: BytesLike | null,
      expiryTime?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { tokenId: BigNumber; redemptionId: string; expiryTime: BigNumber }
    >;

    "Redeemed(uint256,bytes32,uint256)"(
      tokenId?: BigNumberish | null,
      redemptionId?: BytesLike | null,
      expiryTime?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { tokenId: BigNumber; redemptionId: string; expiryTime: BigNumber }
    >;

    Redeemed(
      tokenId?: BigNumberish | null,
      redemptionId?: BytesLike | null,
      expiryTime?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { tokenId: BigNumber; redemptionId: string; expiryTime: BigNumber }
    >;

    "Requested(uint256,bytes32,tuple[],uint256)"(
      tokenId?: BigNumberish | null,
      redemptionId?: BytesLike | null,
      cumulativeRedemptions?: null,
      expiryTime?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        ([BigNumber, string] & { amount: BigNumber; token: string })[],
        BigNumber
      ],
      {
        tokenId: BigNumber;
        redemptionId: string;
        cumulativeRedemptions: ([BigNumber, string] & {
          amount: BigNumber;
          token: string;
        })[];
        expiryTime: BigNumber;
      }
    >;

    Requested(
      tokenId?: BigNumberish | null,
      redemptionId?: BytesLike | null,
      cumulativeRedemptions?: null,
      expiryTime?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        ([BigNumber, string] & { amount: BigNumber; token: string })[],
        BigNumber
      ],
      {
        tokenId: BigNumber;
        redemptionId: string;
        cumulativeRedemptions: ([BigNumber, string] & {
          amount: BigNumber;
          token: string;
        })[];
        expiryTime: BigNumber;
      }
    >;

    "UpdateToken(uint256,address,bytes)"(
      tokenId?: BigNumberish | null,
      caller?: string | null,
      data?: null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { tokenId: BigNumber; caller: string; data: string }
    >;

    UpdateToken(
      tokenId?: BigNumberish | null,
      caller?: string | null,
      data?: null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { tokenId: BigNumber; caller: string; data: string }
    >;
  };

  estimateGas: {
    bond(overrides?: CallOverrides): Promise<BigNumber>;

    bondToken(overrides?: CallOverrides): Promise<BigNumber>;

    customAncillaryData(overrides?: CallOverrides): Promise<BigNumber>;

    depositRewards(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dispute(
      tokenId: BigNumberish,
      cumulativeRedemptions: { amount: BigNumberish; token: string }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    finalFee(overrides?: CallOverrides): Promise<BigNumber>;

    finder(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

    getRedemptionId(
      tokenId: BigNumberish,
      cumulativeRedemptions: { amount: BigNumberish; token: string }[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    identifier(overrides?: CallOverrides): Promise<BigNumber>;

    liveness(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      receiver: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintNextToken(
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    optimisticOracle(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeem(
      tokenId: BigNumberish,
      cumulativeRedemptions: { amount: BigNumberish; token: string }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemedAmounts(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redemptions(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    requestRedemption(
      tokenId: BigNumberish,
      cumulativeRedemptions: { amount: BigNumberish; token: string }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    store(overrides?: CallOverrides): Promise<BigNumber>;

    sync(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateToken(
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bond(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bondToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    customAncillaryData(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositRewards(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dispute(
      tokenId: BigNumberish,
      cumulativeRedemptions: { amount: BigNumberish; token: string }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    finalFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    finder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRedemptionId(
      tokenId: BigNumberish,
      cumulativeRedemptions: { amount: BigNumberish; token: string }[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    identifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liveness(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      receiver: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintNextToken(
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    optimisticOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeem(
      tokenId: BigNumberish,
      cumulativeRedemptions: { amount: BigNumberish; token: string }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemedAmounts(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redemptions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requestRedemption(
      tokenId: BigNumberish,
      cumulativeRedemptions: { amount: BigNumberish; token: string }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    store(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sync(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateToken(
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
