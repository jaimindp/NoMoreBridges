/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface VotingAncillaryInterfaceInterface extends ethers.utils.Interface {
  functions: {
    "batchCommit(tuple[])": FunctionFragment;
    "batchReveal(tuple[])": FunctionFragment;
    "commitAndEmitEncryptedVote(bytes32,uint256,bytes,bytes32,bytes)": FunctionFragment;
    "commitVote(bytes32,uint256,bytes,bytes32)": FunctionFragment;
    "getCurrentRoundId()": FunctionFragment;
    "getPendingRequests()": FunctionFragment;
    "getVotePhase()": FunctionFragment;
    "retrieveRewards(address,uint256,tuple[])": FunctionFragment;
    "revealVote(bytes32,uint256,int256,bytes,int256)": FunctionFragment;
    "setGatPercentage((uint256))": FunctionFragment;
    "setInflationRate((uint256))": FunctionFragment;
    "setMigrated(address)": FunctionFragment;
    "setRewardsExpirationTimeout(uint256)": FunctionFragment;
    "snapshotCurrentRound(bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "batchCommit",
    values: [
      {
        identifier: BytesLike;
        time: BigNumberish;
        ancillaryData: BytesLike;
        hash: BytesLike;
        encryptedVote: BytesLike;
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "batchReveal",
    values: [
      {
        identifier: BytesLike;
        time: BigNumberish;
        price: BigNumberish;
        ancillaryData: BytesLike;
        salt: BigNumberish;
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "commitAndEmitEncryptedVote",
    values: [BytesLike, BigNumberish, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "commitVote",
    values: [BytesLike, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentRoundId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingRequests",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVotePhase",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "retrieveRewards",
    values: [
      string,
      BigNumberish,
      { identifier: BytesLike; time: BigNumberish; ancillaryData: BytesLike }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "revealVote",
    values: [BytesLike, BigNumberish, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setGatPercentage",
    values: [{ rawValue: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "setInflationRate",
    values: [{ rawValue: BigNumberish }]
  ): string;
  encodeFunctionData(functionFragment: "setMigrated", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setRewardsExpirationTimeout",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "snapshotCurrentRound",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "batchCommit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchReveal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitAndEmitEncryptedVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "commitVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentRoundId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVotePhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retrieveRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revealVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setGatPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInflationRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMigrated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardsExpirationTimeout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "snapshotCurrentRound",
    data: BytesLike
  ): Result;

  events: {};
}

export class VotingAncillaryInterface extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: VotingAncillaryInterfaceInterface;

  functions: {
    batchCommit(
      commits: {
        identifier: BytesLike;
        time: BigNumberish;
        ancillaryData: BytesLike;
        hash: BytesLike;
        encryptedVote: BytesLike;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchReveal(
      reveals: {
        identifier: BytesLike;
        time: BigNumberish;
        price: BigNumberish;
        ancillaryData: BytesLike;
        salt: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    commitAndEmitEncryptedVote(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      hash: BytesLike,
      encryptedVote: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    commitVote(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      hash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCurrentRoundId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPendingRequests(
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, BigNumber, string] & {
          identifier: string;
          time: BigNumber;
          ancillaryData: string;
        })[]
      ]
    >;

    getVotePhase(overrides?: CallOverrides): Promise<[number]>;

    retrieveRewards(
      voterAddress: string,
      roundId: BigNumberish,
      toRetrieve: {
        identifier: BytesLike;
        time: BigNumberish;
        ancillaryData: BytesLike;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revealVote(
      identifier: BytesLike,
      time: BigNumberish,
      price: BigNumberish,
      ancillaryData: BytesLike,
      salt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGatPercentage(
      newGatPercentage: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setInflationRate(
      newInflationRate: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMigrated(
      newVotingAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRewardsExpirationTimeout(
      NewRewardsExpirationTimeout: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    snapshotCurrentRound(
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  batchCommit(
    commits: {
      identifier: BytesLike;
      time: BigNumberish;
      ancillaryData: BytesLike;
      hash: BytesLike;
      encryptedVote: BytesLike;
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchReveal(
    reveals: {
      identifier: BytesLike;
      time: BigNumberish;
      price: BigNumberish;
      ancillaryData: BytesLike;
      salt: BigNumberish;
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  commitAndEmitEncryptedVote(
    identifier: BytesLike,
    time: BigNumberish,
    ancillaryData: BytesLike,
    hash: BytesLike,
    encryptedVote: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  commitVote(
    identifier: BytesLike,
    time: BigNumberish,
    ancillaryData: BytesLike,
    hash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCurrentRoundId(overrides?: CallOverrides): Promise<BigNumber>;

  getPendingRequests(
    overrides?: CallOverrides
  ): Promise<
    ([string, BigNumber, string] & {
      identifier: string;
      time: BigNumber;
      ancillaryData: string;
    })[]
  >;

  getVotePhase(overrides?: CallOverrides): Promise<number>;

  retrieveRewards(
    voterAddress: string,
    roundId: BigNumberish,
    toRetrieve: {
      identifier: BytesLike;
      time: BigNumberish;
      ancillaryData: BytesLike;
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revealVote(
    identifier: BytesLike,
    time: BigNumberish,
    price: BigNumberish,
    ancillaryData: BytesLike,
    salt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGatPercentage(
    newGatPercentage: { rawValue: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setInflationRate(
    newInflationRate: { rawValue: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMigrated(
    newVotingAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRewardsExpirationTimeout(
    NewRewardsExpirationTimeout: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  snapshotCurrentRound(
    signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    batchCommit(
      commits: {
        identifier: BytesLike;
        time: BigNumberish;
        ancillaryData: BytesLike;
        hash: BytesLike;
        encryptedVote: BytesLike;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    batchReveal(
      reveals: {
        identifier: BytesLike;
        time: BigNumberish;
        price: BigNumberish;
        ancillaryData: BytesLike;
        salt: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    commitAndEmitEncryptedVote(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      hash: BytesLike,
      encryptedVote: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    commitVote(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getCurrentRoundId(overrides?: CallOverrides): Promise<BigNumber>;

    getPendingRequests(
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber, string] & {
        identifier: string;
        time: BigNumber;
        ancillaryData: string;
      })[]
    >;

    getVotePhase(overrides?: CallOverrides): Promise<number>;

    retrieveRewards(
      voterAddress: string,
      roundId: BigNumberish,
      toRetrieve: {
        identifier: BytesLike;
        time: BigNumberish;
        ancillaryData: BytesLike;
      }[],
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    revealVote(
      identifier: BytesLike,
      time: BigNumberish,
      price: BigNumberish,
      ancillaryData: BytesLike,
      salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setGatPercentage(
      newGatPercentage: { rawValue: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    setInflationRate(
      newInflationRate: { rawValue: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    setMigrated(
      newVotingAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardsExpirationTimeout(
      NewRewardsExpirationTimeout: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    snapshotCurrentRound(
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    batchCommit(
      commits: {
        identifier: BytesLike;
        time: BigNumberish;
        ancillaryData: BytesLike;
        hash: BytesLike;
        encryptedVote: BytesLike;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchReveal(
      reveals: {
        identifier: BytesLike;
        time: BigNumberish;
        price: BigNumberish;
        ancillaryData: BytesLike;
        salt: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    commitAndEmitEncryptedVote(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      hash: BytesLike,
      encryptedVote: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    commitVote(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      hash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCurrentRoundId(overrides?: CallOverrides): Promise<BigNumber>;

    getPendingRequests(overrides?: CallOverrides): Promise<BigNumber>;

    getVotePhase(overrides?: CallOverrides): Promise<BigNumber>;

    retrieveRewards(
      voterAddress: string,
      roundId: BigNumberish,
      toRetrieve: {
        identifier: BytesLike;
        time: BigNumberish;
        ancillaryData: BytesLike;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revealVote(
      identifier: BytesLike,
      time: BigNumberish,
      price: BigNumberish,
      ancillaryData: BytesLike,
      salt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGatPercentage(
      newGatPercentage: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setInflationRate(
      newInflationRate: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMigrated(
      newVotingAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRewardsExpirationTimeout(
      NewRewardsExpirationTimeout: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    snapshotCurrentRound(
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    batchCommit(
      commits: {
        identifier: BytesLike;
        time: BigNumberish;
        ancillaryData: BytesLike;
        hash: BytesLike;
        encryptedVote: BytesLike;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchReveal(
      reveals: {
        identifier: BytesLike;
        time: BigNumberish;
        price: BigNumberish;
        ancillaryData: BytesLike;
        salt: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    commitAndEmitEncryptedVote(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      hash: BytesLike,
      encryptedVote: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    commitVote(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      hash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCurrentRoundId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPendingRequests(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVotePhase(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    retrieveRewards(
      voterAddress: string,
      roundId: BigNumberish,
      toRetrieve: {
        identifier: BytesLike;
        time: BigNumberish;
        ancillaryData: BytesLike;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revealVote(
      identifier: BytesLike,
      time: BigNumberish,
      price: BigNumberish,
      ancillaryData: BytesLike,
      salt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGatPercentage(
      newGatPercentage: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setInflationRate(
      newInflationRate: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMigrated(
      newVotingAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRewardsExpirationTimeout(
      NewRewardsExpirationTimeout: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    snapshotCurrentRound(
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
