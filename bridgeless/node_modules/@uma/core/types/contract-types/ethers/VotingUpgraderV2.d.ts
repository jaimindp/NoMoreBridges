/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface VotingUpgraderV2Interface extends ethers.utils.Interface {
  functions: {
    "canRun()": FunctionFragment;
    "existingGovernor()": FunctionFragment;
    "existingProposer()": FunctionFragment;
    "existingVoting()": FunctionFragment;
    "finder()": FunctionFragment;
    "multiroleContracts()": FunctionFragment;
    "newGovernor()": FunctionFragment;
    "newVoting()": FunctionFragment;
    "ownableContracts()": FunctionFragment;
    "upgrade()": FunctionFragment;
    "upgrader()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "canRun", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "existingGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "existingProposer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "existingVoting",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "finder", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "multiroleContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "newGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "newVoting", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownableContracts",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "upgrade", values?: undefined): string;
  encodeFunctionData(functionFragment: "upgrader", values?: undefined): string;

  decodeFunctionResult(functionFragment: "canRun", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "existingGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "existingProposer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "existingVoting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "finder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "multiroleContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "newVoting", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownableContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgrade", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgrader", data: BytesLike): Result;

  events: {};
}

export class VotingUpgraderV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: VotingUpgraderV2Interface;

  functions: {
    canRun(overrides?: CallOverrides): Promise<[void]>;

    existingGovernor(overrides?: CallOverrides): Promise<[string]>;

    existingProposer(overrides?: CallOverrides): Promise<[string]>;

    existingVoting(overrides?: CallOverrides): Promise<[string]>;

    finder(overrides?: CallOverrides): Promise<[string]>;

    multiroleContracts(
      overrides?: CallOverrides
    ): Promise<[string, string] & { registry: string; store: string }>;

    newGovernor(overrides?: CallOverrides): Promise<[string]>;

    newVoting(overrides?: CallOverrides): Promise<[string]>;

    ownableContracts(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string
      ] & {
        identifierWhitelist: string;
        financialContractsAdmin: string;
        addressWhitelist: string;
        governorRootTunnel: string;
        arbitrumParentMessenger: string;
        oracleHub: string;
        governorHub: string;
        bobaParentMessenger: string;
        optimismParentMessenger: string;
        optimisticOracleV3: string;
      }
    >;

    upgrade(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgrader(overrides?: CallOverrides): Promise<[string]>;
  };

  canRun(overrides?: CallOverrides): Promise<void>;

  existingGovernor(overrides?: CallOverrides): Promise<string>;

  existingProposer(overrides?: CallOverrides): Promise<string>;

  existingVoting(overrides?: CallOverrides): Promise<string>;

  finder(overrides?: CallOverrides): Promise<string>;

  multiroleContracts(
    overrides?: CallOverrides
  ): Promise<[string, string] & { registry: string; store: string }>;

  newGovernor(overrides?: CallOverrides): Promise<string>;

  newVoting(overrides?: CallOverrides): Promise<string>;

  ownableContracts(
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string
    ] & {
      identifierWhitelist: string;
      financialContractsAdmin: string;
      addressWhitelist: string;
      governorRootTunnel: string;
      arbitrumParentMessenger: string;
      oracleHub: string;
      governorHub: string;
      bobaParentMessenger: string;
      optimismParentMessenger: string;
      optimisticOracleV3: string;
    }
  >;

  upgrade(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgrader(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    canRun(overrides?: CallOverrides): Promise<void>;

    existingGovernor(overrides?: CallOverrides): Promise<string>;

    existingProposer(overrides?: CallOverrides): Promise<string>;

    existingVoting(overrides?: CallOverrides): Promise<string>;

    finder(overrides?: CallOverrides): Promise<string>;

    multiroleContracts(
      overrides?: CallOverrides
    ): Promise<[string, string] & { registry: string; store: string }>;

    newGovernor(overrides?: CallOverrides): Promise<string>;

    newVoting(overrides?: CallOverrides): Promise<string>;

    ownableContracts(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string
      ] & {
        identifierWhitelist: string;
        financialContractsAdmin: string;
        addressWhitelist: string;
        governorRootTunnel: string;
        arbitrumParentMessenger: string;
        oracleHub: string;
        governorHub: string;
        bobaParentMessenger: string;
        optimismParentMessenger: string;
        optimisticOracleV3: string;
      }
    >;

    upgrade(overrides?: CallOverrides): Promise<void>;

    upgrader(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    canRun(overrides?: CallOverrides): Promise<BigNumber>;

    existingGovernor(overrides?: CallOverrides): Promise<BigNumber>;

    existingProposer(overrides?: CallOverrides): Promise<BigNumber>;

    existingVoting(overrides?: CallOverrides): Promise<BigNumber>;

    finder(overrides?: CallOverrides): Promise<BigNumber>;

    multiroleContracts(overrides?: CallOverrides): Promise<BigNumber>;

    newGovernor(overrides?: CallOverrides): Promise<BigNumber>;

    newVoting(overrides?: CallOverrides): Promise<BigNumber>;

    ownableContracts(overrides?: CallOverrides): Promise<BigNumber>;

    upgrade(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgrader(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    canRun(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    existingGovernor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    existingProposer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    existingVoting(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    finder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    multiroleContracts(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    newGovernor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    newVoting(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownableContracts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    upgrade(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgrader(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
