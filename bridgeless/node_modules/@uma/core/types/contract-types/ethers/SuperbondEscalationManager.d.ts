/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface SuperbondEscalationManagerInterface extends ethers.utils.Interface {
  functions: {
    "assertionDisputedCallback(bytes32)": FunctionFragment;
    "assertionResolvedCallback(bytes32,bool)": FunctionFragment;
    "getAssertionPolicy(bytes32)": FunctionFragment;
    "getPrice(bytes32,uint256,bytes)": FunctionFragment;
    "isDisputeAllowed(bytes32,address)": FunctionFragment;
    "optimisticOracleV3()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "requestPrice(bytes32,uint256,bytes)": FunctionFragment;
    "setSuperbond(uint256)": FunctionFragment;
    "setSuperbondCurrency(address)": FunctionFragment;
    "superbond()": FunctionFragment;
    "superbondCurrency()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "assertionDisputedCallback",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "assertionResolvedCallback",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getAssertionPolicy",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isDisputeAllowed",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "optimisticOracleV3",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestPrice",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSuperbond",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSuperbondCurrency",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "superbond", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "superbondCurrency",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "assertionDisputedCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assertionResolvedCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssertionPolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isDisputeAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "optimisticOracleV3",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSuperbond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSuperbondCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "superbond", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "superbondCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "PriceRequestAdded(bytes32,uint256,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceRequestAdded"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PriceRequestAddedEvent = TypedEvent<
  [string, BigNumber, string] & {
    identifier: string;
    time: BigNumber;
    ancillaryData: string;
  }
>;

export class SuperbondEscalationManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SuperbondEscalationManagerInterface;

  functions: {
    assertionDisputedCallback(
      assertionId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    assertionResolvedCallback(
      assertionId: BytesLike,
      assertedTruthfully: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAssertionPolicy(
      assertionId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [boolean, boolean, boolean, boolean] & {
          blockAssertion: boolean;
          arbitrateViaEscalationManager: boolean;
          discardOracle: boolean;
          validateDisputers: boolean;
        }
      ]
    >;

    getPrice(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isDisputeAllowed(
      assertionId: BytesLike,
      disputeCaller: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    optimisticOracleV3(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestPrice(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSuperbond(
      newSuperbond: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSuperbondCurrency(
      newSuperbondCurrency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    superbond(overrides?: CallOverrides): Promise<[BigNumber]>;

    superbondCurrency(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  assertionDisputedCallback(
    assertionId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  assertionResolvedCallback(
    assertionId: BytesLike,
    assertedTruthfully: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAssertionPolicy(
    assertionId: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean, boolean, boolean] & {
      blockAssertion: boolean;
      arbitrateViaEscalationManager: boolean;
      discardOracle: boolean;
      validateDisputers: boolean;
    }
  >;

  getPrice(
    identifier: BytesLike,
    time: BigNumberish,
    ancillaryData: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isDisputeAllowed(
    assertionId: BytesLike,
    disputeCaller: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  optimisticOracleV3(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestPrice(
    identifier: BytesLike,
    time: BigNumberish,
    ancillaryData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSuperbond(
    newSuperbond: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSuperbondCurrency(
    newSuperbondCurrency: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  superbond(overrides?: CallOverrides): Promise<BigNumber>;

  superbondCurrency(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    assertionDisputedCallback(
      assertionId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    assertionResolvedCallback(
      assertionId: BytesLike,
      assertedTruthfully: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    getAssertionPolicy(
      assertionId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, boolean, boolean] & {
        blockAssertion: boolean;
        arbitrateViaEscalationManager: boolean;
        discardOracle: boolean;
        validateDisputers: boolean;
      }
    >;

    getPrice(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isDisputeAllowed(
      assertionId: BytesLike,
      disputeCaller: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    optimisticOracleV3(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    requestPrice(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setSuperbond(
      newSuperbond: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSuperbondCurrency(
      newSuperbondCurrency: string,
      overrides?: CallOverrides
    ): Promise<void>;

    superbond(overrides?: CallOverrides): Promise<BigNumber>;

    superbondCurrency(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "PriceRequestAdded(bytes32,uint256,bytes)"(
      identifier?: BytesLike | null,
      time?: null,
      ancillaryData?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { identifier: string; time: BigNumber; ancillaryData: string }
    >;

    PriceRequestAdded(
      identifier?: BytesLike | null,
      time?: null,
      ancillaryData?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { identifier: string; time: BigNumber; ancillaryData: string }
    >;
  };

  estimateGas: {
    assertionDisputedCallback(
      assertionId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    assertionResolvedCallback(
      assertionId: BytesLike,
      assertedTruthfully: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAssertionPolicy(
      assertionId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrice(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isDisputeAllowed(
      assertionId: BytesLike,
      disputeCaller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    optimisticOracleV3(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestPrice(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSuperbond(
      newSuperbond: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSuperbondCurrency(
      newSuperbondCurrency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    superbond(overrides?: CallOverrides): Promise<BigNumber>;

    superbondCurrency(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    assertionDisputedCallback(
      assertionId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    assertionResolvedCallback(
      assertionId: BytesLike,
      assertedTruthfully: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAssertionPolicy(
      assertionId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrice(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isDisputeAllowed(
      assertionId: BytesLike,
      disputeCaller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    optimisticOracleV3(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestPrice(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSuperbond(
      newSuperbond: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSuperbondCurrency(
      newSuperbondCurrency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    superbond(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    superbondCurrency(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
