/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface Umip3UpgraderInterface extends ethers.utils.Interface {
  functions: {
    "existingGovernor()": FunctionFragment;
    "existingVoting()": FunctionFragment;
    "financialContractsAdmin()": FunctionFragment;
    "finder()": FunctionFragment;
    "identifierWhitelist()": FunctionFragment;
    "newGovernor()": FunctionFragment;
    "registry()": FunctionFragment;
    "store()": FunctionFragment;
    "upgrade()": FunctionFragment;
    "voting()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "existingGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "existingVoting",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "financialContractsAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "finder", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "identifierWhitelist",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "newGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(functionFragment: "store", values?: undefined): string;
  encodeFunctionData(functionFragment: "upgrade", values?: undefined): string;
  encodeFunctionData(functionFragment: "voting", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "existingGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "existingVoting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "financialContractsAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "finder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "identifierWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "store", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgrade", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "voting", data: BytesLike): Result;

  events: {};
}

export class Umip3Upgrader extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: Umip3UpgraderInterface;

  functions: {
    existingGovernor(overrides?: CallOverrides): Promise<[string]>;

    existingVoting(overrides?: CallOverrides): Promise<[string]>;

    financialContractsAdmin(overrides?: CallOverrides): Promise<[string]>;

    finder(overrides?: CallOverrides): Promise<[string]>;

    identifierWhitelist(overrides?: CallOverrides): Promise<[string]>;

    newGovernor(overrides?: CallOverrides): Promise<[string]>;

    registry(overrides?: CallOverrides): Promise<[string]>;

    store(overrides?: CallOverrides): Promise<[string]>;

    upgrade(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    voting(overrides?: CallOverrides): Promise<[string]>;
  };

  existingGovernor(overrides?: CallOverrides): Promise<string>;

  existingVoting(overrides?: CallOverrides): Promise<string>;

  financialContractsAdmin(overrides?: CallOverrides): Promise<string>;

  finder(overrides?: CallOverrides): Promise<string>;

  identifierWhitelist(overrides?: CallOverrides): Promise<string>;

  newGovernor(overrides?: CallOverrides): Promise<string>;

  registry(overrides?: CallOverrides): Promise<string>;

  store(overrides?: CallOverrides): Promise<string>;

  upgrade(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  voting(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    existingGovernor(overrides?: CallOverrides): Promise<string>;

    existingVoting(overrides?: CallOverrides): Promise<string>;

    financialContractsAdmin(overrides?: CallOverrides): Promise<string>;

    finder(overrides?: CallOverrides): Promise<string>;

    identifierWhitelist(overrides?: CallOverrides): Promise<string>;

    newGovernor(overrides?: CallOverrides): Promise<string>;

    registry(overrides?: CallOverrides): Promise<string>;

    store(overrides?: CallOverrides): Promise<string>;

    upgrade(overrides?: CallOverrides): Promise<void>;

    voting(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    existingGovernor(overrides?: CallOverrides): Promise<BigNumber>;

    existingVoting(overrides?: CallOverrides): Promise<BigNumber>;

    financialContractsAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    finder(overrides?: CallOverrides): Promise<BigNumber>;

    identifierWhitelist(overrides?: CallOverrides): Promise<BigNumber>;

    newGovernor(overrides?: CallOverrides): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    store(overrides?: CallOverrides): Promise<BigNumber>;

    upgrade(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    voting(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    existingGovernor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    existingVoting(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    financialContractsAdmin(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    finder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    identifierWhitelist(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    newGovernor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    store(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    upgrade(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    voting(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
