/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface PerpetualMockInterface extends ethers.utils.Interface {
  functions: {
    "applyFundingRate()": FunctionFragment;
    "collateralRequirement()": FunctionFragment;
    "cumulativeFeeMultiplier()": FunctionFragment;
    "fundingRate()": FunctionFragment;
    "getCurrentTime()": FunctionFragment;
    "liquidationLiveness()": FunctionFragment;
    "liquidations(address)": FunctionFragment;
    "positions(address)": FunctionFragment;
    "setFundingRate(((int256),bytes32,(uint256),uint256,uint256,uint256))": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "applyFundingRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralRequirement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cumulativeFeeMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fundingRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationLiveness",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidations",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "positions", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setFundingRate",
    values: [
      {
        rate: { rawValue: BigNumberish };
        identifier: BytesLike;
        cumulativeMultiplier: { rawValue: BigNumberish };
        updateTime: BigNumberish;
        applicationTime: BigNumberish;
        proposalTime: BigNumberish;
      }
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "applyFundingRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralRequirement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cumulativeFeeMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundingRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationLiveness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "positions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFundingRate",
    data: BytesLike
  ): Result;

  events: {
    "EndedSponsorPosition()": EventFragment;
    "LiquidationCreated()": EventFragment;
    "NewSponsor(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EndedSponsorPosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidationCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewSponsor"): EventFragment;
}

export type EndedSponsorPositionEvent = TypedEvent<[] & {}>;

export type LiquidationCreatedEvent = TypedEvent<[] & {}>;

export type NewSponsorEvent = TypedEvent<[string] & { sponsor: string }>;

export class PerpetualMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PerpetualMockInterface;

  functions: {
    applyFundingRate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collateralRequirement(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    cumulativeFeeMultiplier(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    fundingRate(
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber] & { rawValue: BigNumber },
        string,
        [BigNumber] & { rawValue: BigNumber },
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        rate: [BigNumber] & { rawValue: BigNumber };
        identifier: string;
        cumulativeMultiplier: [BigNumber] & { rawValue: BigNumber };
        updateTime: BigNumber;
        applicationTime: BigNumber;
        proposalTime: BigNumber;
      }
    >;

    getCurrentTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidationLiveness(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidations(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    positions(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    setFundingRate(
      _fundingRate: {
        rate: { rawValue: BigNumberish };
        identifier: BytesLike;
        cumulativeMultiplier: { rawValue: BigNumberish };
        updateTime: BigNumberish;
        applicationTime: BigNumberish;
        proposalTime: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  applyFundingRate(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collateralRequirement(overrides?: CallOverrides): Promise<BigNumber>;

  cumulativeFeeMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  fundingRate(
    overrides?: CallOverrides
  ): Promise<
    [
      [BigNumber] & { rawValue: BigNumber },
      string,
      [BigNumber] & { rawValue: BigNumber },
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      rate: [BigNumber] & { rawValue: BigNumber };
      identifier: string;
      cumulativeMultiplier: [BigNumber] & { rawValue: BigNumber };
      updateTime: BigNumber;
      applicationTime: BigNumber;
      proposalTime: BigNumber;
    }
  >;

  getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

  liquidationLiveness(overrides?: CallOverrides): Promise<BigNumber>;

  liquidations(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  positions(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  setFundingRate(
    _fundingRate: {
      rate: { rawValue: BigNumberish };
      identifier: BytesLike;
      cumulativeMultiplier: { rawValue: BigNumberish };
      updateTime: BigNumberish;
      applicationTime: BigNumberish;
      proposalTime: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    applyFundingRate(overrides?: CallOverrides): Promise<void>;

    collateralRequirement(overrides?: CallOverrides): Promise<BigNumber>;

    cumulativeFeeMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    fundingRate(
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber] & { rawValue: BigNumber },
        string,
        [BigNumber] & { rawValue: BigNumber },
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        rate: [BigNumber] & { rawValue: BigNumber };
        identifier: string;
        cumulativeMultiplier: [BigNumber] & { rawValue: BigNumber };
        updateTime: BigNumber;
        applicationTime: BigNumber;
        proposalTime: BigNumber;
      }
    >;

    getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

    liquidationLiveness(overrides?: CallOverrides): Promise<BigNumber>;

    liquidations(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    positions(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    setFundingRate(
      _fundingRate: {
        rate: { rawValue: BigNumberish };
        identifier: BytesLike;
        cumulativeMultiplier: { rawValue: BigNumberish };
        updateTime: BigNumberish;
        applicationTime: BigNumberish;
        proposalTime: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "EndedSponsorPosition()"(): TypedEventFilter<[], {}>;

    EndedSponsorPosition(): TypedEventFilter<[], {}>;

    "LiquidationCreated()"(): TypedEventFilter<[], {}>;

    LiquidationCreated(): TypedEventFilter<[], {}>;

    "NewSponsor(address)"(
      sponsor?: string | null
    ): TypedEventFilter<[string], { sponsor: string }>;

    NewSponsor(
      sponsor?: string | null
    ): TypedEventFilter<[string], { sponsor: string }>;
  };

  estimateGas: {
    applyFundingRate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collateralRequirement(overrides?: CallOverrides): Promise<BigNumber>;

    cumulativeFeeMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    fundingRate(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

    liquidationLiveness(overrides?: CallOverrides): Promise<BigNumber>;

    liquidations(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    positions(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    setFundingRate(
      _fundingRate: {
        rate: { rawValue: BigNumberish };
        identifier: BytesLike;
        cumulativeMultiplier: { rawValue: BigNumberish };
        updateTime: BigNumberish;
        applicationTime: BigNumberish;
        proposalTime: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    applyFundingRate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collateralRequirement(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cumulativeFeeMultiplier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fundingRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidationLiveness(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidations(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    positions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setFundingRate(
      _fundingRate: {
        rate: { rawValue: BigNumberish };
        identifier: BytesLike;
        cumulativeMultiplier: { rawValue: BigNumberish };
        updateTime: BigNumberish;
        applicationTime: BigNumberish;
        proposalTime: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
