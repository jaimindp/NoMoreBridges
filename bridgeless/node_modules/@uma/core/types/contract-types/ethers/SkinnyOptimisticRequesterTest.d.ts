/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface SkinnyOptimisticRequesterTestInterface
  extends ethers.utils.Interface {
  functions: {
    "ancillaryData()": FunctionFragment;
    "expirationTimestamp()": FunctionFragment;
    "finder()": FunctionFragment;
    "identifier()": FunctionFragment;
    "priceDisputed(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
    "priceProposed(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
    "priceSettled(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
    "request()": FunctionFragment;
    "requestAndProposePriceFor(bytes32,uint32,bytes,address,uint256,uint256,uint256,address,int256)": FunctionFragment;
    "requestPrice(bytes32,uint32,bytes,address,uint256,uint256,uint256)": FunctionFragment;
    "setExpirationTimestamp(uint256)": FunctionFragment;
    "setRevert(bool)": FunctionFragment;
    "shouldRevert()": FunctionFragment;
    "timestamp()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ancillaryData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "expirationTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "finder", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "identifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceDisputed",
    values: [
      BytesLike,
      BigNumberish,
      BytesLike,
      {
        proposer: string;
        disputer: string;
        currency: string;
        settled: boolean;
        proposedPrice: BigNumberish;
        resolvedPrice: BigNumberish;
        expirationTime: BigNumberish;
        reward: BigNumberish;
        finalFee: BigNumberish;
        bond: BigNumberish;
        customLiveness: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "priceProposed",
    values: [
      BytesLike,
      BigNumberish,
      BytesLike,
      {
        proposer: string;
        disputer: string;
        currency: string;
        settled: boolean;
        proposedPrice: BigNumberish;
        resolvedPrice: BigNumberish;
        expirationTime: BigNumberish;
        reward: BigNumberish;
        finalFee: BigNumberish;
        bond: BigNumberish;
        customLiveness: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "priceSettled",
    values: [
      BytesLike,
      BigNumberish,
      BytesLike,
      {
        proposer: string;
        disputer: string;
        currency: string;
        settled: boolean;
        proposedPrice: BigNumberish;
        resolvedPrice: BigNumberish;
        expirationTime: BigNumberish;
        reward: BigNumberish;
        finalFee: BigNumberish;
        bond: BigNumberish;
        customLiveness: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "request", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "requestAndProposePriceFor",
    values: [
      BytesLike,
      BigNumberish,
      BytesLike,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "requestPrice",
    values: [
      BytesLike,
      BigNumberish,
      BytesLike,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setExpirationTimestamp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setRevert", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "shouldRevert",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "timestamp", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "ancillaryData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "expirationTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "finder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "identifier", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceDisputed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceProposed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceSettled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "request", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestAndProposePriceFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExpirationTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRevert", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "shouldRevert",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "timestamp", data: BytesLike): Result;

  events: {};
}

export class SkinnyOptimisticRequesterTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SkinnyOptimisticRequesterTestInterface;

  functions: {
    ancillaryData(overrides?: CallOverrides): Promise<[string]>;

    expirationTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    finder(overrides?: CallOverrides): Promise<[string]>;

    identifier(overrides?: CallOverrides): Promise<[string]>;

    priceDisputed(
      _identifier: BytesLike,
      _timestamp: BigNumberish,
      _ancillaryData: BytesLike,
      _request: {
        proposer: string;
        disputer: string;
        currency: string;
        settled: boolean;
        proposedPrice: BigNumberish;
        resolvedPrice: BigNumberish;
        expirationTime: BigNumberish;
        reward: BigNumberish;
        finalFee: BigNumberish;
        bond: BigNumberish;
        customLiveness: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    priceProposed(
      _identifier: BytesLike,
      _timestamp: BigNumberish,
      _ancillaryData: BytesLike,
      _request: {
        proposer: string;
        disputer: string;
        currency: string;
        settled: boolean;
        proposedPrice: BigNumberish;
        resolvedPrice: BigNumberish;
        expirationTime: BigNumberish;
        reward: BigNumberish;
        finalFee: BigNumberish;
        bond: BigNumberish;
        customLiveness: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    priceSettled(
      _identifier: BytesLike,
      _timestamp: BigNumberish,
      _ancillaryData: BytesLike,
      _request: {
        proposer: string;
        disputer: string;
        currency: string;
        settled: boolean;
        proposedPrice: BigNumberish;
        resolvedPrice: BigNumberish;
        expirationTime: BigNumberish;
        reward: BigNumberish;
        finalFee: BigNumberish;
        bond: BigNumberish;
        customLiveness: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    request(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        proposer: string;
        disputer: string;
        currency: string;
        settled: boolean;
        proposedPrice: BigNumber;
        resolvedPrice: BigNumber;
        expirationTime: BigNumber;
        reward: BigNumber;
        finalFee: BigNumber;
        bond: BigNumber;
        customLiveness: BigNumber;
      }
    >;

    requestAndProposePriceFor(
      _identifier: BytesLike,
      _timestamp: BigNumberish,
      _ancillaryData: BytesLike,
      currency: string,
      reward: BigNumberish,
      bond: BigNumberish,
      customLiveness: BigNumberish,
      proposer: string,
      proposedPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestPrice(
      _identifier: BytesLike,
      _timestamp: BigNumberish,
      _ancillaryData: BytesLike,
      currency: string,
      reward: BigNumberish,
      bond: BigNumberish,
      customLiveness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setExpirationTimestamp(
      _expirationTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRevert(
      _shouldRevert: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    shouldRevert(overrides?: CallOverrides): Promise<[boolean]>;

    timestamp(overrides?: CallOverrides): Promise<[number]>;
  };

  ancillaryData(overrides?: CallOverrides): Promise<string>;

  expirationTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  finder(overrides?: CallOverrides): Promise<string>;

  identifier(overrides?: CallOverrides): Promise<string>;

  priceDisputed(
    _identifier: BytesLike,
    _timestamp: BigNumberish,
    _ancillaryData: BytesLike,
    _request: {
      proposer: string;
      disputer: string;
      currency: string;
      settled: boolean;
      proposedPrice: BigNumberish;
      resolvedPrice: BigNumberish;
      expirationTime: BigNumberish;
      reward: BigNumberish;
      finalFee: BigNumberish;
      bond: BigNumberish;
      customLiveness: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  priceProposed(
    _identifier: BytesLike,
    _timestamp: BigNumberish,
    _ancillaryData: BytesLike,
    _request: {
      proposer: string;
      disputer: string;
      currency: string;
      settled: boolean;
      proposedPrice: BigNumberish;
      resolvedPrice: BigNumberish;
      expirationTime: BigNumberish;
      reward: BigNumberish;
      finalFee: BigNumberish;
      bond: BigNumberish;
      customLiveness: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  priceSettled(
    _identifier: BytesLike,
    _timestamp: BigNumberish,
    _ancillaryData: BytesLike,
    _request: {
      proposer: string;
      disputer: string;
      currency: string;
      settled: boolean;
      proposedPrice: BigNumberish;
      resolvedPrice: BigNumberish;
      expirationTime: BigNumberish;
      reward: BigNumberish;
      finalFee: BigNumberish;
      bond: BigNumberish;
      customLiveness: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  request(
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      proposer: string;
      disputer: string;
      currency: string;
      settled: boolean;
      proposedPrice: BigNumber;
      resolvedPrice: BigNumber;
      expirationTime: BigNumber;
      reward: BigNumber;
      finalFee: BigNumber;
      bond: BigNumber;
      customLiveness: BigNumber;
    }
  >;

  requestAndProposePriceFor(
    _identifier: BytesLike,
    _timestamp: BigNumberish,
    _ancillaryData: BytesLike,
    currency: string,
    reward: BigNumberish,
    bond: BigNumberish,
    customLiveness: BigNumberish,
    proposer: string,
    proposedPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestPrice(
    _identifier: BytesLike,
    _timestamp: BigNumberish,
    _ancillaryData: BytesLike,
    currency: string,
    reward: BigNumberish,
    bond: BigNumberish,
    customLiveness: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setExpirationTimestamp(
    _expirationTimestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRevert(
    _shouldRevert: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  shouldRevert(overrides?: CallOverrides): Promise<boolean>;

  timestamp(overrides?: CallOverrides): Promise<number>;

  callStatic: {
    ancillaryData(overrides?: CallOverrides): Promise<string>;

    expirationTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    finder(overrides?: CallOverrides): Promise<string>;

    identifier(overrides?: CallOverrides): Promise<string>;

    priceDisputed(
      _identifier: BytesLike,
      _timestamp: BigNumberish,
      _ancillaryData: BytesLike,
      _request: {
        proposer: string;
        disputer: string;
        currency: string;
        settled: boolean;
        proposedPrice: BigNumberish;
        resolvedPrice: BigNumberish;
        expirationTime: BigNumberish;
        reward: BigNumberish;
        finalFee: BigNumberish;
        bond: BigNumberish;
        customLiveness: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    priceProposed(
      _identifier: BytesLike,
      _timestamp: BigNumberish,
      _ancillaryData: BytesLike,
      _request: {
        proposer: string;
        disputer: string;
        currency: string;
        settled: boolean;
        proposedPrice: BigNumberish;
        resolvedPrice: BigNumberish;
        expirationTime: BigNumberish;
        reward: BigNumberish;
        finalFee: BigNumberish;
        bond: BigNumberish;
        customLiveness: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    priceSettled(
      _identifier: BytesLike,
      _timestamp: BigNumberish,
      _ancillaryData: BytesLike,
      _request: {
        proposer: string;
        disputer: string;
        currency: string;
        settled: boolean;
        proposedPrice: BigNumberish;
        resolvedPrice: BigNumberish;
        expirationTime: BigNumberish;
        reward: BigNumberish;
        finalFee: BigNumberish;
        bond: BigNumberish;
        customLiveness: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    request(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        proposer: string;
        disputer: string;
        currency: string;
        settled: boolean;
        proposedPrice: BigNumber;
        resolvedPrice: BigNumber;
        expirationTime: BigNumber;
        reward: BigNumber;
        finalFee: BigNumber;
        bond: BigNumber;
        customLiveness: BigNumber;
      }
    >;

    requestAndProposePriceFor(
      _identifier: BytesLike,
      _timestamp: BigNumberish,
      _ancillaryData: BytesLike,
      currency: string,
      reward: BigNumberish,
      bond: BigNumberish,
      customLiveness: BigNumberish,
      proposer: string,
      proposedPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    requestPrice(
      _identifier: BytesLike,
      _timestamp: BigNumberish,
      _ancillaryData: BytesLike,
      currency: string,
      reward: BigNumberish,
      bond: BigNumberish,
      customLiveness: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setExpirationTimestamp(
      _expirationTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRevert(_shouldRevert: boolean, overrides?: CallOverrides): Promise<void>;

    shouldRevert(overrides?: CallOverrides): Promise<boolean>;

    timestamp(overrides?: CallOverrides): Promise<number>;
  };

  filters: {};

  estimateGas: {
    ancillaryData(overrides?: CallOverrides): Promise<BigNumber>;

    expirationTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    finder(overrides?: CallOverrides): Promise<BigNumber>;

    identifier(overrides?: CallOverrides): Promise<BigNumber>;

    priceDisputed(
      _identifier: BytesLike,
      _timestamp: BigNumberish,
      _ancillaryData: BytesLike,
      _request: {
        proposer: string;
        disputer: string;
        currency: string;
        settled: boolean;
        proposedPrice: BigNumberish;
        resolvedPrice: BigNumberish;
        expirationTime: BigNumberish;
        reward: BigNumberish;
        finalFee: BigNumberish;
        bond: BigNumberish;
        customLiveness: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    priceProposed(
      _identifier: BytesLike,
      _timestamp: BigNumberish,
      _ancillaryData: BytesLike,
      _request: {
        proposer: string;
        disputer: string;
        currency: string;
        settled: boolean;
        proposedPrice: BigNumberish;
        resolvedPrice: BigNumberish;
        expirationTime: BigNumberish;
        reward: BigNumberish;
        finalFee: BigNumberish;
        bond: BigNumberish;
        customLiveness: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    priceSettled(
      _identifier: BytesLike,
      _timestamp: BigNumberish,
      _ancillaryData: BytesLike,
      _request: {
        proposer: string;
        disputer: string;
        currency: string;
        settled: boolean;
        proposedPrice: BigNumberish;
        resolvedPrice: BigNumberish;
        expirationTime: BigNumberish;
        reward: BigNumberish;
        finalFee: BigNumberish;
        bond: BigNumberish;
        customLiveness: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    request(overrides?: CallOverrides): Promise<BigNumber>;

    requestAndProposePriceFor(
      _identifier: BytesLike,
      _timestamp: BigNumberish,
      _ancillaryData: BytesLike,
      currency: string,
      reward: BigNumberish,
      bond: BigNumberish,
      customLiveness: BigNumberish,
      proposer: string,
      proposedPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestPrice(
      _identifier: BytesLike,
      _timestamp: BigNumberish,
      _ancillaryData: BytesLike,
      currency: string,
      reward: BigNumberish,
      bond: BigNumberish,
      customLiveness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setExpirationTimestamp(
      _expirationTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRevert(
      _shouldRevert: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    shouldRevert(overrides?: CallOverrides): Promise<BigNumber>;

    timestamp(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ancillaryData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    expirationTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    finder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    identifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceDisputed(
      _identifier: BytesLike,
      _timestamp: BigNumberish,
      _ancillaryData: BytesLike,
      _request: {
        proposer: string;
        disputer: string;
        currency: string;
        settled: boolean;
        proposedPrice: BigNumberish;
        resolvedPrice: BigNumberish;
        expirationTime: BigNumberish;
        reward: BigNumberish;
        finalFee: BigNumberish;
        bond: BigNumberish;
        customLiveness: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    priceProposed(
      _identifier: BytesLike,
      _timestamp: BigNumberish,
      _ancillaryData: BytesLike,
      _request: {
        proposer: string;
        disputer: string;
        currency: string;
        settled: boolean;
        proposedPrice: BigNumberish;
        resolvedPrice: BigNumberish;
        expirationTime: BigNumberish;
        reward: BigNumberish;
        finalFee: BigNumberish;
        bond: BigNumberish;
        customLiveness: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    priceSettled(
      _identifier: BytesLike,
      _timestamp: BigNumberish,
      _ancillaryData: BytesLike,
      _request: {
        proposer: string;
        disputer: string;
        currency: string;
        settled: boolean;
        proposedPrice: BigNumberish;
        resolvedPrice: BigNumberish;
        expirationTime: BigNumberish;
        reward: BigNumberish;
        finalFee: BigNumberish;
        bond: BigNumberish;
        customLiveness: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    request(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    requestAndProposePriceFor(
      _identifier: BytesLike,
      _timestamp: BigNumberish,
      _ancillaryData: BytesLike,
      currency: string,
      reward: BigNumberish,
      bond: BigNumberish,
      customLiveness: BigNumberish,
      proposer: string,
      proposedPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestPrice(
      _identifier: BytesLike,
      _timestamp: BigNumberish,
      _ancillaryData: BytesLike,
      currency: string,
      reward: BigNumberish,
      bond: BigNumberish,
      customLiveness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setExpirationTimestamp(
      _expirationTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRevert(
      _shouldRevert: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    shouldRevert(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
