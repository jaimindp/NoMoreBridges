/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface VotingV2ControllableTimingInterface extends ethers.utils.Interface {
  functions: {
    "ANCILLARY_BYTES_LIMIT()": FunctionFragment;
    "UINT64_MAX()": FunctionFragment;
    "commitAndEmitEncryptedVote(bytes32,uint256,bytes,bytes32,bytes)": FunctionFragment;
    "commitVote(bytes32,uint256,bytes,bytes32)": FunctionFragment;
    "cumulativeStake()": FunctionFragment;
    "currentActiveRequests()": FunctionFragment;
    "delegateToStaker(address)": FunctionFragment;
    "emissionRate()": FunctionFragment;
    "executeUnstake()": FunctionFragment;
    "finder()": FunctionFragment;
    "gat()": FunctionFragment;
    "getCurrentRoundId()": FunctionFragment;
    "getCurrentTime()": FunctionFragment;
    "getNumberOfPriceRequests()": FunctionFragment;
    "getNumberOfPriceRequestsPostUpdate()": FunctionFragment;
    "getPendingPriceRequestsArray()": FunctionFragment;
    "getPendingRequests()": FunctionFragment;
    "getPrice(bytes32,uint256,bytes)": FunctionFragment;
    "getPriceRequestStatuses(tuple[])": FunctionFragment;
    "getRoundEndTime(uint256)": FunctionFragment;
    "getRoundIdToVoteOnRequest(uint32)": FunctionFragment;
    "getVotePhase()": FunctionFragment;
    "getVoterFromDelegate(address)": FunctionFragment;
    "getVoterParticipation(uint256,uint32,address)": FunctionFragment;
    "getVoterPendingStake(address,uint32)": FunctionFragment;
    "getVoterStakePostUpdate(address)": FunctionFragment;
    "hasPrice(bytes32,uint256)": FunctionFragment;
    "lastRoundIdProcessed()": FunctionFragment;
    "lastUpdateTime()": FunctionFragment;
    "maxRequestsPerRound()": FunctionFragment;
    "maxRolls()": FunctionFragment;
    "migratedAddress()": FunctionFragment;
    "multicall(bytes[])": FunctionFragment;
    "nextPendingIndexToProcess()": FunctionFragment;
    "outstandingRewards(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingPriceRequestsIds(uint256)": FunctionFragment;
    "previousVotingContract()": FunctionFragment;
    "priceRequests(bytes32)": FunctionFragment;
    "processResolvablePriceRequests()": FunctionFragment;
    "processResolvablePriceRequestsRange(uint64)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "requestGovernanceAction(bytes32,uint256,bytes)": FunctionFragment;
    "requestPrice(bytes32,uint256,bytes)": FunctionFragment;
    "requestSlashingTrackers(uint256)": FunctionFragment;
    "requestUnstake(uint128)": FunctionFragment;
    "resolvedPriceRequestIds(uint256)": FunctionFragment;
    "retrieveRewardsOnMigratedVotingContract(address,uint256,tuple[])": FunctionFragment;
    "revealVote(bytes32,uint256,int256,int256)": FunctionFragment;
    "rewardPerToken()": FunctionFragment;
    "rewardPerTokenStored()": FunctionFragment;
    "rounds(uint256)": FunctionFragment;
    "setCurrentTime(uint256)": FunctionFragment;
    "setDelegate(address)": FunctionFragment;
    "setDelegator(address)": FunctionFragment;
    "setEmissionRate(uint128)": FunctionFragment;
    "setGatAndSpat(uint128,uint64)": FunctionFragment;
    "setMaxRequestPerRound(uint32)": FunctionFragment;
    "setMaxRolls(uint32)": FunctionFragment;
    "setMigrated(address)": FunctionFragment;
    "setSlashingLibrary(address)": FunctionFragment;
    "setUnstakeCoolDown(uint64)": FunctionFragment;
    "slashingLibrary()": FunctionFragment;
    "spat()": FunctionFragment;
    "stake(uint128)": FunctionFragment;
    "stakeTo(address,uint128)": FunctionFragment;
    "timerAddress()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unstakeCoolDown()": FunctionFragment;
    "updateTrackers(address)": FunctionFragment;
    "updateTrackersRange(address,uint64)": FunctionFragment;
    "voteTiming()": FunctionFragment;
    "voterStakes(address)": FunctionFragment;
    "votingToken()": FunctionFragment;
    "withdrawAndRestake()": FunctionFragment;
    "withdrawRewards()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ANCILLARY_BYTES_LIMIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UINT64_MAX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "commitAndEmitEncryptedVote",
    values: [BytesLike, BigNumberish, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "commitVote",
    values: [BytesLike, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cumulativeStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentActiveRequests",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "delegateToStaker",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "emissionRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeUnstake",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "finder", values?: undefined): string;
  encodeFunctionData(functionFragment: "gat", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCurrentRoundId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfPriceRequests",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfPriceRequestsPostUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingPriceRequestsArray",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingRequests",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceRequestStatuses",
    values: [
      { identifier: BytesLike; time: BigNumberish; ancillaryData: BytesLike }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoundEndTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoundIdToVoteOnRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotePhase",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVoterFromDelegate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoterParticipation",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoterPendingStake",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoterStakePostUpdate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasPrice",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastRoundIdProcessed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastUpdateTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxRequestsPerRound",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxRolls", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "migratedAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "nextPendingIndexToProcess",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "outstandingRewards",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingPriceRequestsIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "previousVotingContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceRequests",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "processResolvablePriceRequests",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "processResolvablePriceRequestsRange",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestGovernanceAction",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestPrice",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestSlashingTrackers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestUnstake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "resolvedPriceRequestIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "retrieveRewardsOnMigratedVotingContract",
    values: [
      string,
      BigNumberish,
      { identifier: BytesLike; time: BigNumberish; ancillaryData: BytesLike }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "revealVote",
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPerToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPerTokenStored",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rounds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCurrentTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setDelegate", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setDelegator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setEmissionRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setGatAndSpat",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxRequestPerRound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxRolls",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setMigrated", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setSlashingLibrary",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setUnstakeCoolDown",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "slashingLibrary",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "spat", values?: undefined): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "stakeTo",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "timerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unstakeCoolDown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateTrackers",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTrackersRange",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "voteTiming",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "voterStakes", values: [string]): string;
  encodeFunctionData(
    functionFragment: "votingToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAndRestake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawRewards",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "ANCILLARY_BYTES_LIMIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "UINT64_MAX", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "commitAndEmitEncryptedVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "commitVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cumulativeStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentActiveRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegateToStaker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emissionRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeUnstake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "finder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gat", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentRoundId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfPriceRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfPriceRequestsPostUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingPriceRequestsArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPriceRequestStatuses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoundEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoundIdToVoteOnRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVotePhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoterFromDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoterParticipation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoterPendingStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoterStakePostUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastRoundIdProcessed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastUpdateTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxRequestsPerRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxRolls", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "migratedAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextPendingIndexToProcess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "outstandingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingPriceRequestsIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previousVotingContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processResolvablePriceRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processResolvablePriceRequestsRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestGovernanceAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestSlashingTrackers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestUnstake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolvedPriceRequestIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retrieveRewardsOnMigratedVotingContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revealVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerTokenStored",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rounds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCurrentTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDelegator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEmissionRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGatAndSpat",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxRequestPerRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxRolls",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMigrated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSlashingLibrary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUnstakeCoolDown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "slashingLibrary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "spat", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "timerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unstakeCoolDown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTrackers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTrackersRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "voteTiming", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "voterStakes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAndRestake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRewards",
    data: BytesLike
  ): Result;

  events: {
    "DelegateSet(address,address)": EventFragment;
    "DelegatorSet(address,address)": EventFragment;
    "EncryptedVote(address,uint32,bytes32,uint256,bytes,bytes)": EventFragment;
    "ExecutedUnstake(address,uint128,uint128)": EventFragment;
    "GatAndSpatChanged(uint128,uint64)": EventFragment;
    "MaxRequestsPerRoundChanged(uint32)": EventFragment;
    "MaxRollsChanged(uint32)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RequestAdded(address,uint32,bytes32,uint256,bytes,bool)": EventFragment;
    "RequestDeleted(bytes32,uint256,bytes,uint32)": EventFragment;
    "RequestResolved(uint32,uint256,bytes32,uint256,bytes,int256)": EventFragment;
    "RequestRolled(bytes32,uint256,bytes,uint32)": EventFragment;
    "RequestedUnstake(address,uint128,uint64,uint128)": EventFragment;
    "SetNewEmissionRate(uint128)": EventFragment;
    "SetNewUnstakeCoolDown(uint64)": EventFragment;
    "SlashingLibraryChanged(address)": EventFragment;
    "Staked(address,address,uint128,uint128,uint128,uint128)": EventFragment;
    "UpdatedReward(address,uint128,uint64)": EventFragment;
    "VoteCommitted(address,address,uint32,bytes32,uint256,bytes)": EventFragment;
    "VoteRevealed(address,address,uint32,bytes32,uint256,bytes,int256,uint128)": EventFragment;
    "VoterSlashApplied(address,int128,uint128)": EventFragment;
    "VoterSlashed(address,uint256,int128)": EventFragment;
    "VotingContractMigrated(address)": EventFragment;
    "WithdrawnRewards(address,address,uint128)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DelegateSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DelegatorSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EncryptedVote"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecutedUnstake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GatAndSpatChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxRequestsPerRoundChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxRollsChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestDeleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestResolved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestRolled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestedUnstake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetNewEmissionRate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetNewUnstakeCoolDown"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SlashingLibraryChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoteCommitted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoteRevealed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoterSlashApplied"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoterSlashed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VotingContractMigrated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawnRewards"): EventFragment;
}

export type DelegateSetEvent = TypedEvent<
  [string, string] & { delegator: string; delegate: string }
>;

export type DelegatorSetEvent = TypedEvent<
  [string, string] & { delegate: string; delegator: string }
>;

export type EncryptedVoteEvent = TypedEvent<
  [string, number, string, BigNumber, string, string] & {
    caller: string;
    roundId: number;
    identifier: string;
    time: BigNumber;
    ancillaryData: string;
    encryptedVote: string;
  }
>;

export type ExecutedUnstakeEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    voter: string;
    tokensSent: BigNumber;
    voterStake: BigNumber;
  }
>;

export type GatAndSpatChangedEvent = TypedEvent<
  [BigNumber, BigNumber] & { newGat: BigNumber; newSpat: BigNumber }
>;

export type MaxRequestsPerRoundChangedEvent = TypedEvent<
  [number] & { newMaxRequestsPerRound: number }
>;

export type MaxRollsChangedEvent = TypedEvent<
  [number] & { newMaxRolls: number }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type RequestAddedEvent = TypedEvent<
  [string, number, string, BigNumber, string, boolean] & {
    requester: string;
    roundId: number;
    identifier: string;
    time: BigNumber;
    ancillaryData: string;
    isGovernance: boolean;
  }
>;

export type RequestDeletedEvent = TypedEvent<
  [string, BigNumber, string, number] & {
    identifier: string;
    time: BigNumber;
    ancillaryData: string;
    rollCount: number;
  }
>;

export type RequestResolvedEvent = TypedEvent<
  [number, BigNumber, string, BigNumber, string, BigNumber] & {
    roundId: number;
    resolvedPriceRequestIndex: BigNumber;
    identifier: string;
    time: BigNumber;
    ancillaryData: string;
    price: BigNumber;
  }
>;

export type RequestRolledEvent = TypedEvent<
  [string, BigNumber, string, number] & {
    identifier: string;
    time: BigNumber;
    ancillaryData: string;
    rollCount: number;
  }
>;

export type RequestedUnstakeEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber] & {
    voter: string;
    amount: BigNumber;
    unstakeTime: BigNumber;
    voterStake: BigNumber;
  }
>;

export type SetNewEmissionRateEvent = TypedEvent<
  [BigNumber] & { newEmissionRate: BigNumber }
>;

export type SetNewUnstakeCoolDownEvent = TypedEvent<
  [BigNumber] & { newUnstakeCoolDown: BigNumber }
>;

export type SlashingLibraryChangedEvent = TypedEvent<
  [string] & { newAddress: string }
>;

export type StakedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
    voter: string;
    from: string;
    amount: BigNumber;
    voterStake: BigNumber;
    voterPendingUnstake: BigNumber;
    cumulativeStake: BigNumber;
  }
>;

export type UpdatedRewardEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    voter: string;
    newReward: BigNumber;
    lastUpdateTime: BigNumber;
  }
>;

export type VoteCommittedEvent = TypedEvent<
  [string, string, number, string, BigNumber, string] & {
    voter: string;
    caller: string;
    roundId: number;
    identifier: string;
    time: BigNumber;
    ancillaryData: string;
  }
>;

export type VoteRevealedEvent = TypedEvent<
  [string, string, number, string, BigNumber, string, BigNumber, BigNumber] & {
    voter: string;
    caller: string;
    roundId: number;
    identifier: string;
    time: BigNumber;
    ancillaryData: string;
    price: BigNumber;
    numTokens: BigNumber;
  }
>;

export type VoterSlashAppliedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    voter: string;
    slashedTokens: BigNumber;
    postStake: BigNumber;
  }
>;

export type VoterSlashedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    voter: string;
    requestIndex: BigNumber;
    slashedTokens: BigNumber;
  }
>;

export type VotingContractMigratedEvent = TypedEvent<
  [string] & { newAddress: string }
>;

export type WithdrawnRewardsEvent = TypedEvent<
  [string, string, BigNumber] & {
    voter: string;
    delegate: string;
    tokensWithdrawn: BigNumber;
  }
>;

export class VotingV2ControllableTiming extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: VotingV2ControllableTimingInterface;

  functions: {
    ANCILLARY_BYTES_LIMIT(overrides?: CallOverrides): Promise<[BigNumber]>;

    UINT64_MAX(overrides?: CallOverrides): Promise<[BigNumber]>;

    "commitAndEmitEncryptedVote(bytes32,uint256,bytes,bytes32,bytes)"(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      hash: BytesLike,
      encryptedVote: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "commitAndEmitEncryptedVote(bytes32,uint256,bytes32,bytes)"(
      identifier: BytesLike,
      time: BigNumberish,
      hash: BytesLike,
      encryptedVote: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "commitVote(bytes32,uint256,bytes,bytes32)"(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      hash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "commitVote(bytes32,uint256,bytes32)"(
      identifier: BytesLike,
      time: BigNumberish,
      hash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cumulativeStake(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentActiveRequests(overrides?: CallOverrides): Promise<[boolean]>;

    delegateToStaker(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    emissionRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    executeUnstake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    finder(overrides?: CallOverrides): Promise<[string]>;

    gat(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCurrentRoundId(overrides?: CallOverrides): Promise<[number]>;

    getCurrentTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNumberOfPriceRequests(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        numberPendingPriceRequests: BigNumber;
        numberResolvedPriceRequests: BigNumber;
      }
    >;

    getNumberOfPriceRequestsPostUpdate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getPendingPriceRequestsArray(
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getPendingRequests(
      overrides?: CallOverrides
    ): Promise<
      [
        ([number, boolean, BigNumber, number, string, string] & {
          lastVotingRound: number;
          isGovernance: boolean;
          time: BigNumber;
          rollCount: number;
          identifier: string;
          ancillaryData: string;
        })[]
      ]
    >;

    "getPrice(bytes32,uint256,bytes)"(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getPrice(bytes32,uint256)"(
      identifier: BytesLike,
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getPriceRequestStatuses(tuple[])"(
      requests: {
        identifier: BytesLike;
        time: BigNumberish;
        ancillaryData: BytesLike;
      }[],
      overrides?: CallOverrides
    ): Promise<
      [([number, number] & { status: number; lastVotingRound: number })[]]
    >;

    "getPriceRequestStatuses(tuple[])"(
      requests: { identifier: BytesLike; time: BigNumberish }[],
      overrides?: CallOverrides
    ): Promise<
      [([number, number] & { status: number; lastVotingRound: number })[]]
    >;

    getRoundEndTime(
      roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRoundIdToVoteOnRequest(
      targetRoundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getVotePhase(overrides?: CallOverrides): Promise<[number]>;

    getVoterFromDelegate(
      caller: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getVoterParticipation(
      requestIndex: BigNumberish,
      lastVotingRound: BigNumberish,
      voter: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getVoterPendingStake(
      voter: string,
      roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getVoterStakePostUpdate(
      voter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "hasPrice(bytes32,uint256)"(
      identifier: BytesLike,
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasPrice(bytes32,uint256,bytes)"(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lastRoundIdProcessed(overrides?: CallOverrides): Promise<[number]>;

    lastUpdateTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxRequestsPerRound(overrides?: CallOverrides): Promise<[number]>;

    maxRolls(overrides?: CallOverrides): Promise<[number]>;

    migratedAddress(overrides?: CallOverrides): Promise<[string]>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nextPendingIndexToProcess(overrides?: CallOverrides): Promise<[BigNumber]>;

    outstandingRewards(
      voter: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingPriceRequestsIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    previousVotingContract(overrides?: CallOverrides): Promise<[string]>;

    priceRequests(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [number, boolean, BigNumber, number, string, string] & {
        lastVotingRound: number;
        isGovernance: boolean;
        time: BigNumber;
        rollCount: number;
        identifier: string;
        ancillaryData: string;
      }
    >;

    processResolvablePriceRequests(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    processResolvablePriceRequestsRange(
      maxTraversals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestGovernanceAction(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "requestPrice(bytes32,uint256,bytes)"(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "requestPrice(bytes32,uint256)"(
      identifier: BytesLike,
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestSlashingTrackers(
      requestIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber, number] & {
          wrongVoteSlashPerToken: BigNumber;
          noVoteSlashPerToken: BigNumber;
          totalSlashed: BigNumber;
          totalCorrectVotes: BigNumber;
          lastVotingRound: number;
        }
      ]
    >;

    requestUnstake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    resolvedPriceRequestIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    retrieveRewardsOnMigratedVotingContract(
      voter: string,
      roundId: BigNumberish,
      toRetrieve: {
        identifier: BytesLike;
        time: BigNumberish;
        ancillaryData: BytesLike;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "revealVote(bytes32,uint256,int256,int256)"(
      identifier: BytesLike,
      time: BigNumberish,
      price: BigNumberish,
      salt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "revealVote(bytes32,uint256,int256,bytes,int256)"(
      identifier: BytesLike,
      time: BigNumberish,
      price: BigNumberish,
      ancillaryData: BytesLike,
      salt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardPerToken(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardPerTokenStored(overrides?: CallOverrides): Promise<[BigNumber]>;

    rounds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, number] & {
        slashingLibrary: string;
        minParticipationRequirement: BigNumber;
        minAgreementRequirement: BigNumber;
        cumulativeStakeAtRound: BigNumber;
        numberOfRequestsToVote: number;
      }
    >;

    setCurrentTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDelegate(
      delegate: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDelegator(
      delegator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEmissionRate(
      newEmissionRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGatAndSpat(
      newGat: BigNumberish,
      newSpat: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxRequestPerRound(
      newMaxRequestsPerRound: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxRolls(
      newMaxRolls: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMigrated(
      newVotingAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSlashingLibrary(
      _newSlashingLibrary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUnstakeCoolDown(
      newUnstakeCoolDown: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    slashingLibrary(overrides?: CallOverrides): Promise<[string]>;

    spat(overrides?: CallOverrides): Promise<[BigNumber]>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakeTo(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    timerAddress(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unstakeCoolDown(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateTrackers(
      voter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateTrackersRange(
      voter: string,
      maxTraversals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    voteTiming(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { phaseLength: BigNumber }>;

    voterStakes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        stake: BigNumber;
        pendingUnstake: BigNumber;
        rewardsPaidPerToken: BigNumber;
        outstandingRewards: BigNumber;
        unappliedSlash: BigNumber;
        nextIndexToProcess: BigNumber;
        unstakeTime: BigNumber;
        delegate: string;
      }
    >;

    votingToken(overrides?: CallOverrides): Promise<[string]>;

    withdrawAndRestake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  ANCILLARY_BYTES_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

  UINT64_MAX(overrides?: CallOverrides): Promise<BigNumber>;

  "commitAndEmitEncryptedVote(bytes32,uint256,bytes,bytes32,bytes)"(
    identifier: BytesLike,
    time: BigNumberish,
    ancillaryData: BytesLike,
    hash: BytesLike,
    encryptedVote: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "commitAndEmitEncryptedVote(bytes32,uint256,bytes32,bytes)"(
    identifier: BytesLike,
    time: BigNumberish,
    hash: BytesLike,
    encryptedVote: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "commitVote(bytes32,uint256,bytes,bytes32)"(
    identifier: BytesLike,
    time: BigNumberish,
    ancillaryData: BytesLike,
    hash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "commitVote(bytes32,uint256,bytes32)"(
    identifier: BytesLike,
    time: BigNumberish,
    hash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cumulativeStake(overrides?: CallOverrides): Promise<BigNumber>;

  currentActiveRequests(overrides?: CallOverrides): Promise<boolean>;

  delegateToStaker(arg0: string, overrides?: CallOverrides): Promise<string>;

  emissionRate(overrides?: CallOverrides): Promise<BigNumber>;

  executeUnstake(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  finder(overrides?: CallOverrides): Promise<string>;

  gat(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentRoundId(overrides?: CallOverrides): Promise<number>;

  getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

  getNumberOfPriceRequests(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      numberPendingPriceRequests: BigNumber;
      numberResolvedPriceRequests: BigNumber;
    }
  >;

  getNumberOfPriceRequestsPostUpdate(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getPendingPriceRequestsArray(overrides?: CallOverrides): Promise<string[]>;

  getPendingRequests(
    overrides?: CallOverrides
  ): Promise<
    ([number, boolean, BigNumber, number, string, string] & {
      lastVotingRound: number;
      isGovernance: boolean;
      time: BigNumber;
      rollCount: number;
      identifier: string;
      ancillaryData: string;
    })[]
  >;

  "getPrice(bytes32,uint256,bytes)"(
    identifier: BytesLike,
    time: BigNumberish,
    ancillaryData: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getPrice(bytes32,uint256)"(
    identifier: BytesLike,
    time: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getPriceRequestStatuses(tuple[])"(
    requests: {
      identifier: BytesLike;
      time: BigNumberish;
      ancillaryData: BytesLike;
    }[],
    overrides?: CallOverrides
  ): Promise<
    ([number, number] & { status: number; lastVotingRound: number })[]
  >;

  "getPriceRequestStatuses(tuple[])"(
    requests: { identifier: BytesLike; time: BigNumberish }[],
    overrides?: CallOverrides
  ): Promise<
    ([number, number] & { status: number; lastVotingRound: number })[]
  >;

  getRoundEndTime(
    roundId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRoundIdToVoteOnRequest(
    targetRoundId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  getVotePhase(overrides?: CallOverrides): Promise<number>;

  getVoterFromDelegate(
    caller: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getVoterParticipation(
    requestIndex: BigNumberish,
    lastVotingRound: BigNumberish,
    voter: string,
    overrides?: CallOverrides
  ): Promise<number>;

  getVoterPendingStake(
    voter: string,
    roundId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVoterStakePostUpdate(
    voter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "hasPrice(bytes32,uint256)"(
    identifier: BytesLike,
    time: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasPrice(bytes32,uint256,bytes)"(
    identifier: BytesLike,
    time: BigNumberish,
    ancillaryData: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lastRoundIdProcessed(overrides?: CallOverrides): Promise<number>;

  lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

  maxRequestsPerRound(overrides?: CallOverrides): Promise<number>;

  maxRolls(overrides?: CallOverrides): Promise<number>;

  migratedAddress(overrides?: CallOverrides): Promise<string>;

  multicall(
    data: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nextPendingIndexToProcess(overrides?: CallOverrides): Promise<BigNumber>;

  outstandingRewards(
    voter: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingPriceRequestsIds(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  previousVotingContract(overrides?: CallOverrides): Promise<string>;

  priceRequests(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [number, boolean, BigNumber, number, string, string] & {
      lastVotingRound: number;
      isGovernance: boolean;
      time: BigNumber;
      rollCount: number;
      identifier: string;
      ancillaryData: string;
    }
  >;

  processResolvablePriceRequests(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  processResolvablePriceRequestsRange(
    maxTraversals: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestGovernanceAction(
    identifier: BytesLike,
    time: BigNumberish,
    ancillaryData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "requestPrice(bytes32,uint256,bytes)"(
    identifier: BytesLike,
    time: BigNumberish,
    ancillaryData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "requestPrice(bytes32,uint256)"(
    identifier: BytesLike,
    time: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestSlashingTrackers(
    requestIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, number] & {
      wrongVoteSlashPerToken: BigNumber;
      noVoteSlashPerToken: BigNumber;
      totalSlashed: BigNumber;
      totalCorrectVotes: BigNumber;
      lastVotingRound: number;
    }
  >;

  requestUnstake(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  resolvedPriceRequestIds(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  retrieveRewardsOnMigratedVotingContract(
    voter: string,
    roundId: BigNumberish,
    toRetrieve: {
      identifier: BytesLike;
      time: BigNumberish;
      ancillaryData: BytesLike;
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "revealVote(bytes32,uint256,int256,int256)"(
    identifier: BytesLike,
    time: BigNumberish,
    price: BigNumberish,
    salt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "revealVote(bytes32,uint256,int256,bytes,int256)"(
    identifier: BytesLike,
    time: BigNumberish,
    price: BigNumberish,
    ancillaryData: BytesLike,
    salt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardPerToken(overrides?: CallOverrides): Promise<BigNumber>;

  rewardPerTokenStored(overrides?: CallOverrides): Promise<BigNumber>;

  rounds(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, number] & {
      slashingLibrary: string;
      minParticipationRequirement: BigNumber;
      minAgreementRequirement: BigNumber;
      cumulativeStakeAtRound: BigNumber;
      numberOfRequestsToVote: number;
    }
  >;

  setCurrentTime(
    time: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDelegate(
    delegate: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDelegator(
    delegator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEmissionRate(
    newEmissionRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGatAndSpat(
    newGat: BigNumberish,
    newSpat: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxRequestPerRound(
    newMaxRequestsPerRound: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxRolls(
    newMaxRolls: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMigrated(
    newVotingAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSlashingLibrary(
    _newSlashingLibrary: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUnstakeCoolDown(
    newUnstakeCoolDown: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  slashingLibrary(overrides?: CallOverrides): Promise<string>;

  spat(overrides?: CallOverrides): Promise<BigNumber>;

  stake(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakeTo(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  timerAddress(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unstakeCoolDown(overrides?: CallOverrides): Promise<BigNumber>;

  updateTrackers(
    voter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateTrackersRange(
    voter: string,
    maxTraversals: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  voteTiming(overrides?: CallOverrides): Promise<BigNumber>;

  voterStakes(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string
    ] & {
      stake: BigNumber;
      pendingUnstake: BigNumber;
      rewardsPaidPerToken: BigNumber;
      outstandingRewards: BigNumber;
      unappliedSlash: BigNumber;
      nextIndexToProcess: BigNumber;
      unstakeTime: BigNumber;
      delegate: string;
    }
  >;

  votingToken(overrides?: CallOverrides): Promise<string>;

  withdrawAndRestake(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawRewards(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ANCILLARY_BYTES_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    UINT64_MAX(overrides?: CallOverrides): Promise<BigNumber>;

    "commitAndEmitEncryptedVote(bytes32,uint256,bytes,bytes32,bytes)"(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      hash: BytesLike,
      encryptedVote: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "commitAndEmitEncryptedVote(bytes32,uint256,bytes32,bytes)"(
      identifier: BytesLike,
      time: BigNumberish,
      hash: BytesLike,
      encryptedVote: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "commitVote(bytes32,uint256,bytes,bytes32)"(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "commitVote(bytes32,uint256,bytes32)"(
      identifier: BytesLike,
      time: BigNumberish,
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    cumulativeStake(overrides?: CallOverrides): Promise<BigNumber>;

    currentActiveRequests(overrides?: CallOverrides): Promise<boolean>;

    delegateToStaker(arg0: string, overrides?: CallOverrides): Promise<string>;

    emissionRate(overrides?: CallOverrides): Promise<BigNumber>;

    executeUnstake(overrides?: CallOverrides): Promise<void>;

    finder(overrides?: CallOverrides): Promise<string>;

    gat(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentRoundId(overrides?: CallOverrides): Promise<number>;

    getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

    getNumberOfPriceRequests(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        numberPendingPriceRequests: BigNumber;
        numberResolvedPriceRequests: BigNumber;
      }
    >;

    getNumberOfPriceRequestsPostUpdate(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        numberPendingPriceRequests: BigNumber;
        numberResolvedPriceRequests: BigNumber;
      }
    >;

    getPendingPriceRequestsArray(overrides?: CallOverrides): Promise<string[]>;

    getPendingRequests(
      overrides?: CallOverrides
    ): Promise<
      ([number, boolean, BigNumber, number, string, string] & {
        lastVotingRound: number;
        isGovernance: boolean;
        time: BigNumber;
        rollCount: number;
        identifier: string;
        ancillaryData: string;
      })[]
    >;

    "getPrice(bytes32,uint256,bytes)"(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPrice(bytes32,uint256)"(
      identifier: BytesLike,
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPriceRequestStatuses(tuple[])"(
      requests: {
        identifier: BytesLike;
        time: BigNumberish;
        ancillaryData: BytesLike;
      }[],
      overrides?: CallOverrides
    ): Promise<
      ([number, number] & { status: number; lastVotingRound: number })[]
    >;

    "getPriceRequestStatuses(tuple[])"(
      requests: { identifier: BytesLike; time: BigNumberish }[],
      overrides?: CallOverrides
    ): Promise<
      ([number, number] & { status: number; lastVotingRound: number })[]
    >;

    getRoundEndTime(
      roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoundIdToVoteOnRequest(
      targetRoundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    getVotePhase(overrides?: CallOverrides): Promise<number>;

    getVoterFromDelegate(
      caller: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getVoterParticipation(
      requestIndex: BigNumberish,
      lastVotingRound: BigNumberish,
      voter: string,
      overrides?: CallOverrides
    ): Promise<number>;

    getVoterPendingStake(
      voter: string,
      roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoterStakePostUpdate(
      voter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasPrice(bytes32,uint256)"(
      identifier: BytesLike,
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasPrice(bytes32,uint256,bytes)"(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastRoundIdProcessed(overrides?: CallOverrides): Promise<number>;

    lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

    maxRequestsPerRound(overrides?: CallOverrides): Promise<number>;

    maxRolls(overrides?: CallOverrides): Promise<number>;

    migratedAddress(overrides?: CallOverrides): Promise<string>;

    multicall(data: BytesLike[], overrides?: CallOverrides): Promise<string[]>;

    nextPendingIndexToProcess(overrides?: CallOverrides): Promise<BigNumber>;

    outstandingRewards(
      voter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingPriceRequestsIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    previousVotingContract(overrides?: CallOverrides): Promise<string>;

    priceRequests(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [number, boolean, BigNumber, number, string, string] & {
        lastVotingRound: number;
        isGovernance: boolean;
        time: BigNumber;
        rollCount: number;
        identifier: string;
        ancillaryData: string;
      }
    >;

    processResolvablePriceRequests(overrides?: CallOverrides): Promise<void>;

    processResolvablePriceRequestsRange(
      maxTraversals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    requestGovernanceAction(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "requestPrice(bytes32,uint256,bytes)"(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "requestPrice(bytes32,uint256)"(
      identifier: BytesLike,
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    requestSlashingTrackers(
      requestIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, number] & {
        wrongVoteSlashPerToken: BigNumber;
        noVoteSlashPerToken: BigNumber;
        totalSlashed: BigNumber;
        totalCorrectVotes: BigNumber;
        lastVotingRound: number;
      }
    >;

    requestUnstake(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    resolvedPriceRequestIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    retrieveRewardsOnMigratedVotingContract(
      voter: string,
      roundId: BigNumberish,
      toRetrieve: {
        identifier: BytesLike;
        time: BigNumberish;
        ancillaryData: BytesLike;
      }[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "revealVote(bytes32,uint256,int256,int256)"(
      identifier: BytesLike,
      time: BigNumberish,
      price: BigNumberish,
      salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "revealVote(bytes32,uint256,int256,bytes,int256)"(
      identifier: BytesLike,
      time: BigNumberish,
      price: BigNumberish,
      ancillaryData: BytesLike,
      salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    rewardPerToken(overrides?: CallOverrides): Promise<BigNumber>;

    rewardPerTokenStored(overrides?: CallOverrides): Promise<BigNumber>;

    rounds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, number] & {
        slashingLibrary: string;
        minParticipationRequirement: BigNumber;
        minAgreementRequirement: BigNumber;
        cumulativeStakeAtRound: BigNumber;
        numberOfRequestsToVote: number;
      }
    >;

    setCurrentTime(
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDelegate(delegate: string, overrides?: CallOverrides): Promise<void>;

    setDelegator(delegator: string, overrides?: CallOverrides): Promise<void>;

    setEmissionRate(
      newEmissionRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setGatAndSpat(
      newGat: BigNumberish,
      newSpat: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxRequestPerRound(
      newMaxRequestsPerRound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxRolls(
      newMaxRolls: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMigrated(
      newVotingAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setSlashingLibrary(
      _newSlashingLibrary: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setUnstakeCoolDown(
      newUnstakeCoolDown: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    slashingLibrary(overrides?: CallOverrides): Promise<string>;

    spat(overrides?: CallOverrides): Promise<BigNumber>;

    stake(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    stakeTo(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    timerAddress(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unstakeCoolDown(overrides?: CallOverrides): Promise<BigNumber>;

    updateTrackers(voter: string, overrides?: CallOverrides): Promise<void>;

    updateTrackersRange(
      voter: string,
      maxTraversals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    voteTiming(overrides?: CallOverrides): Promise<BigNumber>;

    voterStakes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        stake: BigNumber;
        pendingUnstake: BigNumber;
        rewardsPaidPerToken: BigNumber;
        outstandingRewards: BigNumber;
        unappliedSlash: BigNumber;
        nextIndexToProcess: BigNumber;
        unstakeTime: BigNumber;
        delegate: string;
      }
    >;

    votingToken(overrides?: CallOverrides): Promise<string>;

    withdrawAndRestake(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawRewards(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "DelegateSet(address,address)"(
      delegator?: string | null,
      delegate?: string | null
    ): TypedEventFilter<
      [string, string],
      { delegator: string; delegate: string }
    >;

    DelegateSet(
      delegator?: string | null,
      delegate?: string | null
    ): TypedEventFilter<
      [string, string],
      { delegator: string; delegate: string }
    >;

    "DelegatorSet(address,address)"(
      delegate?: string | null,
      delegator?: string | null
    ): TypedEventFilter<
      [string, string],
      { delegate: string; delegator: string }
    >;

    DelegatorSet(
      delegate?: string | null,
      delegator?: string | null
    ): TypedEventFilter<
      [string, string],
      { delegate: string; delegator: string }
    >;

    "EncryptedVote(address,uint32,bytes32,uint256,bytes,bytes)"(
      caller?: string | null,
      roundId?: BigNumberish | null,
      identifier?: BytesLike | null,
      time?: null,
      ancillaryData?: null,
      encryptedVote?: null
    ): TypedEventFilter<
      [string, number, string, BigNumber, string, string],
      {
        caller: string;
        roundId: number;
        identifier: string;
        time: BigNumber;
        ancillaryData: string;
        encryptedVote: string;
      }
    >;

    EncryptedVote(
      caller?: string | null,
      roundId?: BigNumberish | null,
      identifier?: BytesLike | null,
      time?: null,
      ancillaryData?: null,
      encryptedVote?: null
    ): TypedEventFilter<
      [string, number, string, BigNumber, string, string],
      {
        caller: string;
        roundId: number;
        identifier: string;
        time: BigNumber;
        ancillaryData: string;
        encryptedVote: string;
      }
    >;

    "ExecutedUnstake(address,uint128,uint128)"(
      voter?: string | null,
      tokensSent?: null,
      voterStake?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { voter: string; tokensSent: BigNumber; voterStake: BigNumber }
    >;

    ExecutedUnstake(
      voter?: string | null,
      tokensSent?: null,
      voterStake?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { voter: string; tokensSent: BigNumber; voterStake: BigNumber }
    >;

    "GatAndSpatChanged(uint128,uint64)"(
      newGat?: null,
      newSpat?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { newGat: BigNumber; newSpat: BigNumber }
    >;

    GatAndSpatChanged(
      newGat?: null,
      newSpat?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { newGat: BigNumber; newSpat: BigNumber }
    >;

    "MaxRequestsPerRoundChanged(uint32)"(
      newMaxRequestsPerRound?: null
    ): TypedEventFilter<[number], { newMaxRequestsPerRound: number }>;

    MaxRequestsPerRoundChanged(
      newMaxRequestsPerRound?: null
    ): TypedEventFilter<[number], { newMaxRequestsPerRound: number }>;

    "MaxRollsChanged(uint32)"(
      newMaxRolls?: null
    ): TypedEventFilter<[number], { newMaxRolls: number }>;

    MaxRollsChanged(
      newMaxRolls?: null
    ): TypedEventFilter<[number], { newMaxRolls: number }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "RequestAdded(address,uint32,bytes32,uint256,bytes,bool)"(
      requester?: string | null,
      roundId?: BigNumberish | null,
      identifier?: BytesLike | null,
      time?: null,
      ancillaryData?: null,
      isGovernance?: null
    ): TypedEventFilter<
      [string, number, string, BigNumber, string, boolean],
      {
        requester: string;
        roundId: number;
        identifier: string;
        time: BigNumber;
        ancillaryData: string;
        isGovernance: boolean;
      }
    >;

    RequestAdded(
      requester?: string | null,
      roundId?: BigNumberish | null,
      identifier?: BytesLike | null,
      time?: null,
      ancillaryData?: null,
      isGovernance?: null
    ): TypedEventFilter<
      [string, number, string, BigNumber, string, boolean],
      {
        requester: string;
        roundId: number;
        identifier: string;
        time: BigNumber;
        ancillaryData: string;
        isGovernance: boolean;
      }
    >;

    "RequestDeleted(bytes32,uint256,bytes,uint32)"(
      identifier?: BytesLike | null,
      time?: BigNumberish | null,
      ancillaryData?: null,
      rollCount?: null
    ): TypedEventFilter<
      [string, BigNumber, string, number],
      {
        identifier: string;
        time: BigNumber;
        ancillaryData: string;
        rollCount: number;
      }
    >;

    RequestDeleted(
      identifier?: BytesLike | null,
      time?: BigNumberish | null,
      ancillaryData?: null,
      rollCount?: null
    ): TypedEventFilter<
      [string, BigNumber, string, number],
      {
        identifier: string;
        time: BigNumber;
        ancillaryData: string;
        rollCount: number;
      }
    >;

    "RequestResolved(uint32,uint256,bytes32,uint256,bytes,int256)"(
      roundId?: BigNumberish | null,
      resolvedPriceRequestIndex?: BigNumberish | null,
      identifier?: BytesLike | null,
      time?: null,
      ancillaryData?: null,
      price?: null
    ): TypedEventFilter<
      [number, BigNumber, string, BigNumber, string, BigNumber],
      {
        roundId: number;
        resolvedPriceRequestIndex: BigNumber;
        identifier: string;
        time: BigNumber;
        ancillaryData: string;
        price: BigNumber;
      }
    >;

    RequestResolved(
      roundId?: BigNumberish | null,
      resolvedPriceRequestIndex?: BigNumberish | null,
      identifier?: BytesLike | null,
      time?: null,
      ancillaryData?: null,
      price?: null
    ): TypedEventFilter<
      [number, BigNumber, string, BigNumber, string, BigNumber],
      {
        roundId: number;
        resolvedPriceRequestIndex: BigNumber;
        identifier: string;
        time: BigNumber;
        ancillaryData: string;
        price: BigNumber;
      }
    >;

    "RequestRolled(bytes32,uint256,bytes,uint32)"(
      identifier?: BytesLike | null,
      time?: BigNumberish | null,
      ancillaryData?: null,
      rollCount?: null
    ): TypedEventFilter<
      [string, BigNumber, string, number],
      {
        identifier: string;
        time: BigNumber;
        ancillaryData: string;
        rollCount: number;
      }
    >;

    RequestRolled(
      identifier?: BytesLike | null,
      time?: BigNumberish | null,
      ancillaryData?: null,
      rollCount?: null
    ): TypedEventFilter<
      [string, BigNumber, string, number],
      {
        identifier: string;
        time: BigNumber;
        ancillaryData: string;
        rollCount: number;
      }
    >;

    "RequestedUnstake(address,uint128,uint64,uint128)"(
      voter?: string | null,
      amount?: null,
      unstakeTime?: null,
      voterStake?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        voter: string;
        amount: BigNumber;
        unstakeTime: BigNumber;
        voterStake: BigNumber;
      }
    >;

    RequestedUnstake(
      voter?: string | null,
      amount?: null,
      unstakeTime?: null,
      voterStake?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        voter: string;
        amount: BigNumber;
        unstakeTime: BigNumber;
        voterStake: BigNumber;
      }
    >;

    "SetNewEmissionRate(uint128)"(
      newEmissionRate?: null
    ): TypedEventFilter<[BigNumber], { newEmissionRate: BigNumber }>;

    SetNewEmissionRate(
      newEmissionRate?: null
    ): TypedEventFilter<[BigNumber], { newEmissionRate: BigNumber }>;

    "SetNewUnstakeCoolDown(uint64)"(
      newUnstakeCoolDown?: null
    ): TypedEventFilter<[BigNumber], { newUnstakeCoolDown: BigNumber }>;

    SetNewUnstakeCoolDown(
      newUnstakeCoolDown?: null
    ): TypedEventFilter<[BigNumber], { newUnstakeCoolDown: BigNumber }>;

    "SlashingLibraryChanged(address)"(
      newAddress?: null
    ): TypedEventFilter<[string], { newAddress: string }>;

    SlashingLibraryChanged(
      newAddress?: null
    ): TypedEventFilter<[string], { newAddress: string }>;

    "Staked(address,address,uint128,uint128,uint128,uint128)"(
      voter?: string | null,
      from?: string | null,
      amount?: null,
      voterStake?: null,
      voterPendingUnstake?: null,
      cumulativeStake?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        voter: string;
        from: string;
        amount: BigNumber;
        voterStake: BigNumber;
        voterPendingUnstake: BigNumber;
        cumulativeStake: BigNumber;
      }
    >;

    Staked(
      voter?: string | null,
      from?: string | null,
      amount?: null,
      voterStake?: null,
      voterPendingUnstake?: null,
      cumulativeStake?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        voter: string;
        from: string;
        amount: BigNumber;
        voterStake: BigNumber;
        voterPendingUnstake: BigNumber;
        cumulativeStake: BigNumber;
      }
    >;

    "UpdatedReward(address,uint128,uint64)"(
      voter?: string | null,
      newReward?: null,
      lastUpdateTime?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { voter: string; newReward: BigNumber; lastUpdateTime: BigNumber }
    >;

    UpdatedReward(
      voter?: string | null,
      newReward?: null,
      lastUpdateTime?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { voter: string; newReward: BigNumber; lastUpdateTime: BigNumber }
    >;

    "VoteCommitted(address,address,uint32,bytes32,uint256,bytes)"(
      voter?: string | null,
      caller?: string | null,
      roundId?: null,
      identifier?: BytesLike | null,
      time?: null,
      ancillaryData?: null
    ): TypedEventFilter<
      [string, string, number, string, BigNumber, string],
      {
        voter: string;
        caller: string;
        roundId: number;
        identifier: string;
        time: BigNumber;
        ancillaryData: string;
      }
    >;

    VoteCommitted(
      voter?: string | null,
      caller?: string | null,
      roundId?: null,
      identifier?: BytesLike | null,
      time?: null,
      ancillaryData?: null
    ): TypedEventFilter<
      [string, string, number, string, BigNumber, string],
      {
        voter: string;
        caller: string;
        roundId: number;
        identifier: string;
        time: BigNumber;
        ancillaryData: string;
      }
    >;

    "VoteRevealed(address,address,uint32,bytes32,uint256,bytes,int256,uint128)"(
      voter?: string | null,
      caller?: string | null,
      roundId?: null,
      identifier?: BytesLike | null,
      time?: null,
      ancillaryData?: null,
      price?: null,
      numTokens?: null
    ): TypedEventFilter<
      [string, string, number, string, BigNumber, string, BigNumber, BigNumber],
      {
        voter: string;
        caller: string;
        roundId: number;
        identifier: string;
        time: BigNumber;
        ancillaryData: string;
        price: BigNumber;
        numTokens: BigNumber;
      }
    >;

    VoteRevealed(
      voter?: string | null,
      caller?: string | null,
      roundId?: null,
      identifier?: BytesLike | null,
      time?: null,
      ancillaryData?: null,
      price?: null,
      numTokens?: null
    ): TypedEventFilter<
      [string, string, number, string, BigNumber, string, BigNumber, BigNumber],
      {
        voter: string;
        caller: string;
        roundId: number;
        identifier: string;
        time: BigNumber;
        ancillaryData: string;
        price: BigNumber;
        numTokens: BigNumber;
      }
    >;

    "VoterSlashApplied(address,int128,uint128)"(
      voter?: string | null,
      slashedTokens?: null,
      postStake?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { voter: string; slashedTokens: BigNumber; postStake: BigNumber }
    >;

    VoterSlashApplied(
      voter?: string | null,
      slashedTokens?: null,
      postStake?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { voter: string; slashedTokens: BigNumber; postStake: BigNumber }
    >;

    "VoterSlashed(address,uint256,int128)"(
      voter?: string | null,
      requestIndex?: BigNumberish | null,
      slashedTokens?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { voter: string; requestIndex: BigNumber; slashedTokens: BigNumber }
    >;

    VoterSlashed(
      voter?: string | null,
      requestIndex?: BigNumberish | null,
      slashedTokens?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { voter: string; requestIndex: BigNumber; slashedTokens: BigNumber }
    >;

    "VotingContractMigrated(address)"(
      newAddress?: null
    ): TypedEventFilter<[string], { newAddress: string }>;

    VotingContractMigrated(
      newAddress?: null
    ): TypedEventFilter<[string], { newAddress: string }>;

    "WithdrawnRewards(address,address,uint128)"(
      voter?: string | null,
      delegate?: string | null,
      tokensWithdrawn?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { voter: string; delegate: string; tokensWithdrawn: BigNumber }
    >;

    WithdrawnRewards(
      voter?: string | null,
      delegate?: string | null,
      tokensWithdrawn?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { voter: string; delegate: string; tokensWithdrawn: BigNumber }
    >;
  };

  estimateGas: {
    ANCILLARY_BYTES_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    UINT64_MAX(overrides?: CallOverrides): Promise<BigNumber>;

    "commitAndEmitEncryptedVote(bytes32,uint256,bytes,bytes32,bytes)"(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      hash: BytesLike,
      encryptedVote: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "commitAndEmitEncryptedVote(bytes32,uint256,bytes32,bytes)"(
      identifier: BytesLike,
      time: BigNumberish,
      hash: BytesLike,
      encryptedVote: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "commitVote(bytes32,uint256,bytes,bytes32)"(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      hash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "commitVote(bytes32,uint256,bytes32)"(
      identifier: BytesLike,
      time: BigNumberish,
      hash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cumulativeStake(overrides?: CallOverrides): Promise<BigNumber>;

    currentActiveRequests(overrides?: CallOverrides): Promise<BigNumber>;

    delegateToStaker(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    emissionRate(overrides?: CallOverrides): Promise<BigNumber>;

    executeUnstake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    finder(overrides?: CallOverrides): Promise<BigNumber>;

    gat(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentRoundId(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

    getNumberOfPriceRequests(overrides?: CallOverrides): Promise<BigNumber>;

    getNumberOfPriceRequestsPostUpdate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getPendingPriceRequestsArray(overrides?: CallOverrides): Promise<BigNumber>;

    getPendingRequests(overrides?: CallOverrides): Promise<BigNumber>;

    "getPrice(bytes32,uint256,bytes)"(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPrice(bytes32,uint256)"(
      identifier: BytesLike,
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPriceRequestStatuses(tuple[])"(
      requests: {
        identifier: BytesLike;
        time: BigNumberish;
        ancillaryData: BytesLike;
      }[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPriceRequestStatuses(tuple[])"(
      requests: { identifier: BytesLike; time: BigNumberish }[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoundEndTime(
      roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoundIdToVoteOnRequest(
      targetRoundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVotePhase(overrides?: CallOverrides): Promise<BigNumber>;

    getVoterFromDelegate(
      caller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoterParticipation(
      requestIndex: BigNumberish,
      lastVotingRound: BigNumberish,
      voter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoterPendingStake(
      voter: string,
      roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoterStakePostUpdate(
      voter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "hasPrice(bytes32,uint256)"(
      identifier: BytesLike,
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasPrice(bytes32,uint256,bytes)"(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastRoundIdProcessed(overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

    maxRequestsPerRound(overrides?: CallOverrides): Promise<BigNumber>;

    maxRolls(overrides?: CallOverrides): Promise<BigNumber>;

    migratedAddress(overrides?: CallOverrides): Promise<BigNumber>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nextPendingIndexToProcess(overrides?: CallOverrides): Promise<BigNumber>;

    outstandingRewards(
      voter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingPriceRequestsIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previousVotingContract(overrides?: CallOverrides): Promise<BigNumber>;

    priceRequests(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    processResolvablePriceRequests(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    processResolvablePriceRequestsRange(
      maxTraversals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestGovernanceAction(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "requestPrice(bytes32,uint256,bytes)"(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "requestPrice(bytes32,uint256)"(
      identifier: BytesLike,
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestSlashingTrackers(
      requestIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requestUnstake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    resolvedPriceRequestIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    retrieveRewardsOnMigratedVotingContract(
      voter: string,
      roundId: BigNumberish,
      toRetrieve: {
        identifier: BytesLike;
        time: BigNumberish;
        ancillaryData: BytesLike;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "revealVote(bytes32,uint256,int256,int256)"(
      identifier: BytesLike,
      time: BigNumberish,
      price: BigNumberish,
      salt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "revealVote(bytes32,uint256,int256,bytes,int256)"(
      identifier: BytesLike,
      time: BigNumberish,
      price: BigNumberish,
      ancillaryData: BytesLike,
      salt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardPerToken(overrides?: CallOverrides): Promise<BigNumber>;

    rewardPerTokenStored(overrides?: CallOverrides): Promise<BigNumber>;

    rounds(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    setCurrentTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDelegate(
      delegate: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDelegator(
      delegator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEmissionRate(
      newEmissionRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGatAndSpat(
      newGat: BigNumberish,
      newSpat: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxRequestPerRound(
      newMaxRequestsPerRound: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxRolls(
      newMaxRolls: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMigrated(
      newVotingAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSlashingLibrary(
      _newSlashingLibrary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUnstakeCoolDown(
      newUnstakeCoolDown: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    slashingLibrary(overrides?: CallOverrides): Promise<BigNumber>;

    spat(overrides?: CallOverrides): Promise<BigNumber>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakeTo(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    timerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unstakeCoolDown(overrides?: CallOverrides): Promise<BigNumber>;

    updateTrackers(
      voter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateTrackersRange(
      voter: string,
      maxTraversals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    voteTiming(overrides?: CallOverrides): Promise<BigNumber>;

    voterStakes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    votingToken(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawAndRestake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ANCILLARY_BYTES_LIMIT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    UINT64_MAX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "commitAndEmitEncryptedVote(bytes32,uint256,bytes,bytes32,bytes)"(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      hash: BytesLike,
      encryptedVote: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "commitAndEmitEncryptedVote(bytes32,uint256,bytes32,bytes)"(
      identifier: BytesLike,
      time: BigNumberish,
      hash: BytesLike,
      encryptedVote: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "commitVote(bytes32,uint256,bytes,bytes32)"(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      hash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "commitVote(bytes32,uint256,bytes32)"(
      identifier: BytesLike,
      time: BigNumberish,
      hash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cumulativeStake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentActiveRequests(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delegateToStaker(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emissionRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executeUnstake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    finder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gat(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentRoundId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNumberOfPriceRequests(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumberOfPriceRequestsPostUpdate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getPendingPriceRequestsArray(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPendingRequests(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPrice(bytes32,uint256,bytes)"(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPrice(bytes32,uint256)"(
      identifier: BytesLike,
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPriceRequestStatuses(tuple[])"(
      requests: {
        identifier: BytesLike;
        time: BigNumberish;
        ancillaryData: BytesLike;
      }[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPriceRequestStatuses(tuple[])"(
      requests: { identifier: BytesLike; time: BigNumberish }[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoundEndTime(
      roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoundIdToVoteOnRequest(
      targetRoundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVotePhase(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVoterFromDelegate(
      caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVoterParticipation(
      requestIndex: BigNumberish,
      lastVotingRound: BigNumberish,
      voter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVoterPendingStake(
      voter: string,
      roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVoterStakePostUpdate(
      voter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "hasPrice(bytes32,uint256)"(
      identifier: BytesLike,
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasPrice(bytes32,uint256,bytes)"(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastRoundIdProcessed(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastUpdateTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxRequestsPerRound(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxRolls(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    migratedAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nextPendingIndexToProcess(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    outstandingRewards(
      voter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingPriceRequestsIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    previousVotingContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceRequests(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    processResolvablePriceRequests(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    processResolvablePriceRequestsRange(
      maxTraversals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestGovernanceAction(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "requestPrice(bytes32,uint256,bytes)"(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "requestPrice(bytes32,uint256)"(
      identifier: BytesLike,
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestSlashingTrackers(
      requestIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requestUnstake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    resolvedPriceRequestIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    retrieveRewardsOnMigratedVotingContract(
      voter: string,
      roundId: BigNumberish,
      toRetrieve: {
        identifier: BytesLike;
        time: BigNumberish;
        ancillaryData: BytesLike;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "revealVote(bytes32,uint256,int256,int256)"(
      identifier: BytesLike,
      time: BigNumberish,
      price: BigNumberish,
      salt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "revealVote(bytes32,uint256,int256,bytes,int256)"(
      identifier: BytesLike,
      time: BigNumberish,
      price: BigNumberish,
      ancillaryData: BytesLike,
      salt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardPerToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardPerTokenStored(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rounds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setCurrentTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDelegate(
      delegate: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDelegator(
      delegator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEmissionRate(
      newEmissionRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGatAndSpat(
      newGat: BigNumberish,
      newSpat: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxRequestPerRound(
      newMaxRequestsPerRound: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxRolls(
      newMaxRolls: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMigrated(
      newVotingAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSlashingLibrary(
      _newSlashingLibrary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUnstakeCoolDown(
      newUnstakeCoolDown: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    slashingLibrary(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    spat(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakeTo(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    timerAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unstakeCoolDown(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateTrackers(
      voter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateTrackersRange(
      voter: string,
      maxTraversals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    voteTiming(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    voterStakes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    votingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawAndRestake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
