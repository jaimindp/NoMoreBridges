/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface OptimisticOracleV2InterfaceInterface extends ethers.utils.Interface {
  functions: {
    "ancillaryBytesLimit()": FunctionFragment;
    "defaultLiveness()": FunctionFragment;
    "disputePrice(address,bytes32,uint256,bytes)": FunctionFragment;
    "disputePriceFor(address,address,bytes32,uint256,bytes)": FunctionFragment;
    "finder()": FunctionFragment;
    "getCurrentTime()": FunctionFragment;
    "getRequest(address,bytes32,uint256,bytes)": FunctionFragment;
    "getState(address,bytes32,uint256,bytes)": FunctionFragment;
    "hasPrice(address,bytes32,uint256,bytes)": FunctionFragment;
    "proposePrice(address,bytes32,uint256,bytes,int256)": FunctionFragment;
    "proposePriceFor(address,address,bytes32,uint256,bytes,int256)": FunctionFragment;
    "requestPrice(bytes32,uint256,bytes,address,uint256)": FunctionFragment;
    "requests(bytes32)": FunctionFragment;
    "setBond(bytes32,uint256,bytes,uint256)": FunctionFragment;
    "setCallbacks(bytes32,uint256,bytes,bool,bool,bool)": FunctionFragment;
    "setCustomLiveness(bytes32,uint256,bytes,uint256)": FunctionFragment;
    "setEventBased(bytes32,uint256,bytes)": FunctionFragment;
    "setRefundOnDispute(bytes32,uint256,bytes)": FunctionFragment;
    "settle(address,bytes32,uint256,bytes)": FunctionFragment;
    "settleAndGetPrice(bytes32,uint256,bytes)": FunctionFragment;
    "stampAncillaryData(bytes,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ancillaryBytesLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultLiveness",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disputePrice",
    values: [string, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "disputePriceFor",
    values: [string, string, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "finder", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCurrentTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRequest",
    values: [string, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getState",
    values: [string, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasPrice",
    values: [string, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "proposePrice",
    values: [string, BytesLike, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposePriceFor",
    values: [string, string, BytesLike, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestPrice",
    values: [BytesLike, BigNumberish, BytesLike, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "requests", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "setBond",
    values: [BytesLike, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCallbacks",
    values: [BytesLike, BigNumberish, BytesLike, boolean, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setCustomLiveness",
    values: [BytesLike, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setEventBased",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRefundOnDispute",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "settle",
    values: [string, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "settleAndGetPrice",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stampAncillaryData",
    values: [BytesLike, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "ancillaryBytesLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultLiveness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disputePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disputePriceFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "finder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRequest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getState", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposePriceFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "requests", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setBond", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCallbacks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCustomLiveness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEventBased",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRefundOnDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "settle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "settleAndGetPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stampAncillaryData",
    data: BytesLike
  ): Result;

  events: {
    "DisputePrice(address,address,address,bytes32,uint256,bytes,int256)": EventFragment;
    "ProposePrice(address,address,bytes32,uint256,bytes,int256,uint256,address)": EventFragment;
    "RequestPrice(address,bytes32,uint256,bytes,address,uint256,uint256)": EventFragment;
    "Settle(address,address,address,bytes32,uint256,bytes,int256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DisputePrice"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposePrice"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestPrice"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Settle"): EventFragment;
}

export type DisputePriceEvent = TypedEvent<
  [string, string, string, string, BigNumber, string, BigNumber] & {
    requester: string;
    proposer: string;
    disputer: string;
    identifier: string;
    timestamp: BigNumber;
    ancillaryData: string;
    proposedPrice: BigNumber;
  }
>;

export type ProposePriceEvent = TypedEvent<
  [string, string, string, BigNumber, string, BigNumber, BigNumber, string] & {
    requester: string;
    proposer: string;
    identifier: string;
    timestamp: BigNumber;
    ancillaryData: string;
    proposedPrice: BigNumber;
    expirationTimestamp: BigNumber;
    currency: string;
  }
>;

export type RequestPriceEvent = TypedEvent<
  [string, string, BigNumber, string, string, BigNumber, BigNumber] & {
    requester: string;
    identifier: string;
    timestamp: BigNumber;
    ancillaryData: string;
    currency: string;
    reward: BigNumber;
    finalFee: BigNumber;
  }
>;

export type SettleEvent = TypedEvent<
  [string, string, string, string, BigNumber, string, BigNumber, BigNumber] & {
    requester: string;
    proposer: string;
    disputer: string;
    identifier: string;
    timestamp: BigNumber;
    ancillaryData: string;
    price: BigNumber;
    payout: BigNumber;
  }
>;

export class OptimisticOracleV2Interface extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: OptimisticOracleV2InterfaceInterface;

  functions: {
    ancillaryBytesLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    defaultLiveness(overrides?: CallOverrides): Promise<[BigNumber]>;

    disputePrice(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    disputePriceFor(
      disputer: string,
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    finder(overrides?: CallOverrides): Promise<[string]>;

    getCurrentTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRequest(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          string,
          boolean,
          [
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            BigNumber,
            BigNumber
          ] & {
            eventBased: boolean;
            refundOnDispute: boolean;
            callbackOnPriceProposed: boolean;
            callbackOnPriceDisputed: boolean;
            callbackOnPriceSettled: boolean;
            bond: BigNumber;
            customLiveness: BigNumber;
          },
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          proposer: string;
          disputer: string;
          currency: string;
          settled: boolean;
          requestSettings: [
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            BigNumber,
            BigNumber
          ] & {
            eventBased: boolean;
            refundOnDispute: boolean;
            callbackOnPriceProposed: boolean;
            callbackOnPriceDisputed: boolean;
            callbackOnPriceSettled: boolean;
            bond: BigNumber;
            customLiveness: BigNumber;
          };
          proposedPrice: BigNumber;
          resolvedPrice: BigNumber;
          expirationTime: BigNumber;
          reward: BigNumber;
          finalFee: BigNumber;
        }
      ]
    >;

    getState(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number]>;

    hasPrice(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    proposePrice(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      proposedPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposePriceFor(
      proposer: string,
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      proposedPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestPrice(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      currency: string,
      reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requests(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        boolean,
        [boolean, boolean, boolean, boolean, boolean, BigNumber, BigNumber] & {
          eventBased: boolean;
          refundOnDispute: boolean;
          callbackOnPriceProposed: boolean;
          callbackOnPriceDisputed: boolean;
          callbackOnPriceSettled: boolean;
          bond: BigNumber;
          customLiveness: BigNumber;
        },
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        proposer: string;
        disputer: string;
        currency: string;
        settled: boolean;
        requestSettings: [
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          BigNumber,
          BigNumber
        ] & {
          eventBased: boolean;
          refundOnDispute: boolean;
          callbackOnPriceProposed: boolean;
          callbackOnPriceDisputed: boolean;
          callbackOnPriceSettled: boolean;
          bond: BigNumber;
          customLiveness: BigNumber;
        };
        proposedPrice: BigNumber;
        resolvedPrice: BigNumber;
        expirationTime: BigNumber;
        reward: BigNumber;
        finalFee: BigNumber;
      }
    >;

    setBond(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      bond: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCallbacks(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      callbackOnPriceProposed: boolean,
      callbackOnPriceDisputed: boolean,
      callbackOnPriceSettled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCustomLiveness(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      customLiveness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEventBased(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRefundOnDispute(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settle(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settleAndGetPrice(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stampAncillaryData(
      ancillaryData: BytesLike,
      requester: string,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  ancillaryBytesLimit(overrides?: CallOverrides): Promise<BigNumber>;

  defaultLiveness(overrides?: CallOverrides): Promise<BigNumber>;

  disputePrice(
    requester: string,
    identifier: BytesLike,
    timestamp: BigNumberish,
    ancillaryData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  disputePriceFor(
    disputer: string,
    requester: string,
    identifier: BytesLike,
    timestamp: BigNumberish,
    ancillaryData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  finder(overrides?: CallOverrides): Promise<string>;

  getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

  getRequest(
    requester: string,
    identifier: BytesLike,
    timestamp: BigNumberish,
    ancillaryData: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      boolean,
      [boolean, boolean, boolean, boolean, boolean, BigNumber, BigNumber] & {
        eventBased: boolean;
        refundOnDispute: boolean;
        callbackOnPriceProposed: boolean;
        callbackOnPriceDisputed: boolean;
        callbackOnPriceSettled: boolean;
        bond: BigNumber;
        customLiveness: BigNumber;
      },
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      proposer: string;
      disputer: string;
      currency: string;
      settled: boolean;
      requestSettings: [
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        BigNumber,
        BigNumber
      ] & {
        eventBased: boolean;
        refundOnDispute: boolean;
        callbackOnPriceProposed: boolean;
        callbackOnPriceDisputed: boolean;
        callbackOnPriceSettled: boolean;
        bond: BigNumber;
        customLiveness: BigNumber;
      };
      proposedPrice: BigNumber;
      resolvedPrice: BigNumber;
      expirationTime: BigNumber;
      reward: BigNumber;
      finalFee: BigNumber;
    }
  >;

  getState(
    requester: string,
    identifier: BytesLike,
    timestamp: BigNumberish,
    ancillaryData: BytesLike,
    overrides?: CallOverrides
  ): Promise<number>;

  hasPrice(
    requester: string,
    identifier: BytesLike,
    timestamp: BigNumberish,
    ancillaryData: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  proposePrice(
    requester: string,
    identifier: BytesLike,
    timestamp: BigNumberish,
    ancillaryData: BytesLike,
    proposedPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposePriceFor(
    proposer: string,
    requester: string,
    identifier: BytesLike,
    timestamp: BigNumberish,
    ancillaryData: BytesLike,
    proposedPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestPrice(
    identifier: BytesLike,
    timestamp: BigNumberish,
    ancillaryData: BytesLike,
    currency: string,
    reward: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requests(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      boolean,
      [boolean, boolean, boolean, boolean, boolean, BigNumber, BigNumber] & {
        eventBased: boolean;
        refundOnDispute: boolean;
        callbackOnPriceProposed: boolean;
        callbackOnPriceDisputed: boolean;
        callbackOnPriceSettled: boolean;
        bond: BigNumber;
        customLiveness: BigNumber;
      },
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      proposer: string;
      disputer: string;
      currency: string;
      settled: boolean;
      requestSettings: [
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        BigNumber,
        BigNumber
      ] & {
        eventBased: boolean;
        refundOnDispute: boolean;
        callbackOnPriceProposed: boolean;
        callbackOnPriceDisputed: boolean;
        callbackOnPriceSettled: boolean;
        bond: BigNumber;
        customLiveness: BigNumber;
      };
      proposedPrice: BigNumber;
      resolvedPrice: BigNumber;
      expirationTime: BigNumber;
      reward: BigNumber;
      finalFee: BigNumber;
    }
  >;

  setBond(
    identifier: BytesLike,
    timestamp: BigNumberish,
    ancillaryData: BytesLike,
    bond: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCallbacks(
    identifier: BytesLike,
    timestamp: BigNumberish,
    ancillaryData: BytesLike,
    callbackOnPriceProposed: boolean,
    callbackOnPriceDisputed: boolean,
    callbackOnPriceSettled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCustomLiveness(
    identifier: BytesLike,
    timestamp: BigNumberish,
    ancillaryData: BytesLike,
    customLiveness: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEventBased(
    identifier: BytesLike,
    timestamp: BigNumberish,
    ancillaryData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRefundOnDispute(
    identifier: BytesLike,
    timestamp: BigNumberish,
    ancillaryData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settle(
    requester: string,
    identifier: BytesLike,
    timestamp: BigNumberish,
    ancillaryData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settleAndGetPrice(
    identifier: BytesLike,
    timestamp: BigNumberish,
    ancillaryData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stampAncillaryData(
    ancillaryData: BytesLike,
    requester: string,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    ancillaryBytesLimit(overrides?: CallOverrides): Promise<BigNumber>;

    defaultLiveness(overrides?: CallOverrides): Promise<BigNumber>;

    disputePrice(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    disputePriceFor(
      disputer: string,
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    finder(overrides?: CallOverrides): Promise<string>;

    getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

    getRequest(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        boolean,
        [boolean, boolean, boolean, boolean, boolean, BigNumber, BigNumber] & {
          eventBased: boolean;
          refundOnDispute: boolean;
          callbackOnPriceProposed: boolean;
          callbackOnPriceDisputed: boolean;
          callbackOnPriceSettled: boolean;
          bond: BigNumber;
          customLiveness: BigNumber;
        },
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        proposer: string;
        disputer: string;
        currency: string;
        settled: boolean;
        requestSettings: [
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          BigNumber,
          BigNumber
        ] & {
          eventBased: boolean;
          refundOnDispute: boolean;
          callbackOnPriceProposed: boolean;
          callbackOnPriceDisputed: boolean;
          callbackOnPriceSettled: boolean;
          bond: BigNumber;
          customLiveness: BigNumber;
        };
        proposedPrice: BigNumber;
        resolvedPrice: BigNumber;
        expirationTime: BigNumber;
        reward: BigNumber;
        finalFee: BigNumber;
      }
    >;

    getState(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<number>;

    hasPrice(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    proposePrice(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      proposedPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposePriceFor(
      proposer: string,
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      proposedPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requestPrice(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      currency: string,
      reward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requests(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        boolean,
        [boolean, boolean, boolean, boolean, boolean, BigNumber, BigNumber] & {
          eventBased: boolean;
          refundOnDispute: boolean;
          callbackOnPriceProposed: boolean;
          callbackOnPriceDisputed: boolean;
          callbackOnPriceSettled: boolean;
          bond: BigNumber;
          customLiveness: BigNumber;
        },
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        proposer: string;
        disputer: string;
        currency: string;
        settled: boolean;
        requestSettings: [
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          BigNumber,
          BigNumber
        ] & {
          eventBased: boolean;
          refundOnDispute: boolean;
          callbackOnPriceProposed: boolean;
          callbackOnPriceDisputed: boolean;
          callbackOnPriceSettled: boolean;
          bond: BigNumber;
          customLiveness: BigNumber;
        };
        proposedPrice: BigNumber;
        resolvedPrice: BigNumber;
        expirationTime: BigNumber;
        reward: BigNumber;
        finalFee: BigNumber;
      }
    >;

    setBond(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      bond: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setCallbacks(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      callbackOnPriceProposed: boolean,
      callbackOnPriceDisputed: boolean,
      callbackOnPriceSettled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setCustomLiveness(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      customLiveness: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setEventBased(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setRefundOnDispute(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    settle(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    settleAndGetPrice(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stampAncillaryData(
      ancillaryData: BytesLike,
      requester: string,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "DisputePrice(address,address,address,bytes32,uint256,bytes,int256)"(
      requester?: string | null,
      proposer?: string | null,
      disputer?: string | null,
      identifier?: null,
      timestamp?: null,
      ancillaryData?: null,
      proposedPrice?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber, string, BigNumber],
      {
        requester: string;
        proposer: string;
        disputer: string;
        identifier: string;
        timestamp: BigNumber;
        ancillaryData: string;
        proposedPrice: BigNumber;
      }
    >;

    DisputePrice(
      requester?: string | null,
      proposer?: string | null,
      disputer?: string | null,
      identifier?: null,
      timestamp?: null,
      ancillaryData?: null,
      proposedPrice?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber, string, BigNumber],
      {
        requester: string;
        proposer: string;
        disputer: string;
        identifier: string;
        timestamp: BigNumber;
        ancillaryData: string;
        proposedPrice: BigNumber;
      }
    >;

    "ProposePrice(address,address,bytes32,uint256,bytes,int256,uint256,address)"(
      requester?: string | null,
      proposer?: string | null,
      identifier?: null,
      timestamp?: null,
      ancillaryData?: null,
      proposedPrice?: null,
      expirationTimestamp?: null,
      currency?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, string, BigNumber, BigNumber, string],
      {
        requester: string;
        proposer: string;
        identifier: string;
        timestamp: BigNumber;
        ancillaryData: string;
        proposedPrice: BigNumber;
        expirationTimestamp: BigNumber;
        currency: string;
      }
    >;

    ProposePrice(
      requester?: string | null,
      proposer?: string | null,
      identifier?: null,
      timestamp?: null,
      ancillaryData?: null,
      proposedPrice?: null,
      expirationTimestamp?: null,
      currency?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, string, BigNumber, BigNumber, string],
      {
        requester: string;
        proposer: string;
        identifier: string;
        timestamp: BigNumber;
        ancillaryData: string;
        proposedPrice: BigNumber;
        expirationTimestamp: BigNumber;
        currency: string;
      }
    >;

    "RequestPrice(address,bytes32,uint256,bytes,address,uint256,uint256)"(
      requester?: string | null,
      identifier?: null,
      timestamp?: null,
      ancillaryData?: null,
      currency?: null,
      reward?: null,
      finalFee?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, string, BigNumber, BigNumber],
      {
        requester: string;
        identifier: string;
        timestamp: BigNumber;
        ancillaryData: string;
        currency: string;
        reward: BigNumber;
        finalFee: BigNumber;
      }
    >;

    RequestPrice(
      requester?: string | null,
      identifier?: null,
      timestamp?: null,
      ancillaryData?: null,
      currency?: null,
      reward?: null,
      finalFee?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, string, BigNumber, BigNumber],
      {
        requester: string;
        identifier: string;
        timestamp: BigNumber;
        ancillaryData: string;
        currency: string;
        reward: BigNumber;
        finalFee: BigNumber;
      }
    >;

    "Settle(address,address,address,bytes32,uint256,bytes,int256,uint256)"(
      requester?: string | null,
      proposer?: string | null,
      disputer?: string | null,
      identifier?: null,
      timestamp?: null,
      ancillaryData?: null,
      price?: null,
      payout?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber, string, BigNumber, BigNumber],
      {
        requester: string;
        proposer: string;
        disputer: string;
        identifier: string;
        timestamp: BigNumber;
        ancillaryData: string;
        price: BigNumber;
        payout: BigNumber;
      }
    >;

    Settle(
      requester?: string | null,
      proposer?: string | null,
      disputer?: string | null,
      identifier?: null,
      timestamp?: null,
      ancillaryData?: null,
      price?: null,
      payout?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber, string, BigNumber, BigNumber],
      {
        requester: string;
        proposer: string;
        disputer: string;
        identifier: string;
        timestamp: BigNumber;
        ancillaryData: string;
        price: BigNumber;
        payout: BigNumber;
      }
    >;
  };

  estimateGas: {
    ancillaryBytesLimit(overrides?: CallOverrides): Promise<BigNumber>;

    defaultLiveness(overrides?: CallOverrides): Promise<BigNumber>;

    disputePrice(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    disputePriceFor(
      disputer: string,
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    finder(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

    getRequest(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getState(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasPrice(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposePrice(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      proposedPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposePriceFor(
      proposer: string,
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      proposedPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestPrice(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      currency: string,
      reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requests(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    setBond(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      bond: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCallbacks(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      callbackOnPriceProposed: boolean,
      callbackOnPriceDisputed: boolean,
      callbackOnPriceSettled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCustomLiveness(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      customLiveness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEventBased(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRefundOnDispute(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settle(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settleAndGetPrice(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stampAncillaryData(
      ancillaryData: BytesLike,
      requester: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ancillaryBytesLimit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    defaultLiveness(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    disputePrice(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    disputePriceFor(
      disputer: string,
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    finder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRequest(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getState(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasPrice(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposePrice(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      proposedPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposePriceFor(
      proposer: string,
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      proposedPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestPrice(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      currency: string,
      reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requests(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setBond(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      bond: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCallbacks(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      callbackOnPriceProposed: boolean,
      callbackOnPriceDisputed: boolean,
      callbackOnPriceSettled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCustomLiveness(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      customLiveness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEventBased(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRefundOnDispute(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settle(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settleAndGetPrice(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stampAncillaryData(
      ancillaryData: BytesLike,
      requester: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
