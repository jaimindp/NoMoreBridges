/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface PerpetualInterface extends ethers.utils.Interface {
  functions: {
    "applyFundingRate()": FunctionFragment;
    "cancelWithdrawal()": FunctionFragment;
    "collateralCurrency()": FunctionFragment;
    "collateralRequirement()": FunctionFragment;
    "configStore()": FunctionFragment;
    "create((uint256),(uint256))": FunctionFragment;
    "createLiquidation(address,(uint256),(uint256),(uint256),uint256)": FunctionFragment;
    "cumulativeFeeMultiplier()": FunctionFragment;
    "deposit((uint256))": FunctionFragment;
    "depositTo(address,(uint256))": FunctionFragment;
    "dispute(uint256,address)": FunctionFragment;
    "disputeBondPercentage()": FunctionFragment;
    "disputerDisputeRewardPercentage()": FunctionFragment;
    "emergencyShutdown()": FunctionFragment;
    "emergencyShutdownPrice()": FunctionFragment;
    "emergencyShutdownTimestamp()": FunctionFragment;
    "finder()": FunctionFragment;
    "fundingRate()": FunctionFragment;
    "getCollateral(address)": FunctionFragment;
    "getCurrentTime()": FunctionFragment;
    "getFundingRateAppliedTokenDebt((uint256))": FunctionFragment;
    "getLiquidations(address)": FunctionFragment;
    "getOutstandingRegularFees(uint256)": FunctionFragment;
    "gulp()": FunctionFragment;
    "liquidationLiveness()": FunctionFragment;
    "liquidations(address,uint256)": FunctionFragment;
    "minSponsorTokens()": FunctionFragment;
    "payRegularFees()": FunctionFragment;
    "pfc()": FunctionFragment;
    "positions(address)": FunctionFragment;
    "priceIdentifier()": FunctionFragment;
    "proposeFundingRate((int256),uint256)": FunctionFragment;
    "rawLiquidationCollateral()": FunctionFragment;
    "rawTotalPositionCollateral()": FunctionFragment;
    "redeem((uint256))": FunctionFragment;
    "remargin()": FunctionFragment;
    "repay((uint256))": FunctionFragment;
    "requestWithdrawal((uint256))": FunctionFragment;
    "setCurrentTime(uint256)": FunctionFragment;
    "settleEmergencyShutdown()": FunctionFragment;
    "sponsorDisputeRewardPercentage()": FunctionFragment;
    "timerAddress()": FunctionFragment;
    "tokenCurrency()": FunctionFragment;
    "totalPositionCollateral()": FunctionFragment;
    "totalTokensOutstanding()": FunctionFragment;
    "withdraw((uint256))": FunctionFragment;
    "withdrawLiquidation(uint256,address)": FunctionFragment;
    "withdrawPassedRequest()": FunctionFragment;
    "withdrawalLiveness()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "applyFundingRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelWithdrawal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralCurrency",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralRequirement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "configStore",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "create",
    values: [{ rawValue: BigNumberish }, { rawValue: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "createLiquidation",
    values: [
      string,
      { rawValue: BigNumberish },
      { rawValue: BigNumberish },
      { rawValue: BigNumberish },
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "cumulativeFeeMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [{ rawValue: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "depositTo",
    values: [string, { rawValue: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "dispute",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "disputeBondPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disputerDisputeRewardPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyShutdown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyShutdownPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyShutdownTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "finder", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fundingRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateral",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFundingRateAppliedTokenDebt",
    values: [{ rawValue: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidations",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getOutstandingRegularFees",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "gulp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "liquidationLiveness",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidations",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "minSponsorTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "payRegularFees",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pfc", values?: undefined): string;
  encodeFunctionData(functionFragment: "positions", values: [string]): string;
  encodeFunctionData(
    functionFragment: "priceIdentifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposeFundingRate",
    values: [{ rawValue: BigNumberish }, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rawLiquidationCollateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rawTotalPositionCollateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [{ rawValue: BigNumberish }]
  ): string;
  encodeFunctionData(functionFragment: "remargin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "repay",
    values: [{ rawValue: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "requestWithdrawal",
    values: [{ rawValue: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "setCurrentTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "settleEmergencyShutdown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sponsorDisputeRewardPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenCurrency",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalPositionCollateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalTokensOutstanding",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [{ rawValue: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLiquidation",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawPassedRequest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalLiveness",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "applyFundingRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralRequirement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configStore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createLiquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cumulativeFeeMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositTo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dispute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "disputeBondPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disputerDisputeRewardPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyShutdown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyShutdownPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyShutdownTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "finder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fundingRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFundingRateAppliedTokenDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOutstandingRegularFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gulp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidationLiveness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minSponsorTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payRegularFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pfc", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "positions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceIdentifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeFundingRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rawLiquidationCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rawTotalPositionCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "remargin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCurrentTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleEmergencyShutdown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sponsorDisputeRewardPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalPositionCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalTokensOutstanding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLiquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawPassedRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalLiveness",
    data: BytesLike
  ): Result;

  events: {
    "Deposit(address,uint256)": EventFragment;
    "DisputeSettled(address,address,address,address,uint256,bool)": EventFragment;
    "EmergencyShutdown(address,uint256)": EventFragment;
    "EndedSponsorPosition(address)": EventFragment;
    "FinalFeesPaid(uint256)": EventFragment;
    "FundingRateUpdated(int256,uint256,uint256)": EventFragment;
    "LiquidationCreated(address,address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "LiquidationDisputed(address,address,address,uint256,uint256)": EventFragment;
    "LiquidationWithdrawn(address,uint256,uint256,uint256,uint8,uint256)": EventFragment;
    "NewSponsor(address)": EventFragment;
    "PositionCreated(address,uint256,uint256)": EventFragment;
    "Redeem(address,uint256,uint256)": EventFragment;
    "RegularFeesPaid(uint256,uint256)": EventFragment;
    "Repay(address,uint256,uint256)": EventFragment;
    "RequestWithdrawal(address,uint256)": EventFragment;
    "RequestWithdrawalCanceled(address,uint256)": EventFragment;
    "RequestWithdrawalExecuted(address,uint256)": EventFragment;
    "SettleEmergencyShutdown(address,uint256,uint256)": EventFragment;
    "Withdrawal(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DisputeSettled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyShutdown"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EndedSponsorPosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FinalFeesPaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundingRateUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidationCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidationDisputed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidationWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewSponsor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redeem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegularFeesPaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Repay"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestWithdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestWithdrawalCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestWithdrawalExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SettleEmergencyShutdown"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawal"): EventFragment;
}

export type DepositEvent = TypedEvent<
  [string, BigNumber] & { sponsor: string; collateralAmount: BigNumber }
>;

export type DisputeSettledEvent = TypedEvent<
  [string, string, string, string, BigNumber, boolean] & {
    caller: string;
    sponsor: string;
    liquidator: string;
    disputer: string;
    liquidationId: BigNumber;
    disputeSucceeded: boolean;
  }
>;

export type EmergencyShutdownEvent = TypedEvent<
  [string, BigNumber] & { caller: string; shutdownTimestamp: BigNumber }
>;

export type EndedSponsorPositionEvent = TypedEvent<
  [string] & { sponsor: string }
>;

export type FinalFeesPaidEvent = TypedEvent<
  [BigNumber] & { amount: BigNumber }
>;

export type FundingRateUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber] & {
    newFundingRate: BigNumber;
    updateTime: BigNumber;
    reward: BigNumber;
  }
>;

export type LiquidationCreatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
    sponsor: string;
    liquidator: string;
    liquidationId: BigNumber;
    tokensOutstanding: BigNumber;
    lockedCollateral: BigNumber;
    liquidatedCollateral: BigNumber;
    liquidationTime: BigNumber;
  }
>;

export type LiquidationDisputedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber] & {
    sponsor: string;
    liquidator: string;
    disputer: string;
    liquidationId: BigNumber;
    disputeBondAmount: BigNumber;
  }
>;

export type LiquidationWithdrawnEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, number, BigNumber] & {
    caller: string;
    paidToLiquidator: BigNumber;
    paidToDisputer: BigNumber;
    paidToSponsor: BigNumber;
    liquidationStatus: number;
    settlementPrice: BigNumber;
  }
>;

export type NewSponsorEvent = TypedEvent<[string] & { sponsor: string }>;

export type PositionCreatedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    sponsor: string;
    collateralAmount: BigNumber;
    tokenAmount: BigNumber;
  }
>;

export type RedeemEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    sponsor: string;
    collateralAmount: BigNumber;
    tokenAmount: BigNumber;
  }
>;

export type RegularFeesPaidEvent = TypedEvent<
  [BigNumber, BigNumber] & { regularFee: BigNumber; lateFee: BigNumber }
>;

export type RepayEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    sponsor: string;
    numTokensRepaid: BigNumber;
    newTokenCount: BigNumber;
  }
>;

export type RequestWithdrawalEvent = TypedEvent<
  [string, BigNumber] & { sponsor: string; collateralAmount: BigNumber }
>;

export type RequestWithdrawalCanceledEvent = TypedEvent<
  [string, BigNumber] & { sponsor: string; collateralAmount: BigNumber }
>;

export type RequestWithdrawalExecutedEvent = TypedEvent<
  [string, BigNumber] & { sponsor: string; collateralAmount: BigNumber }
>;

export type SettleEmergencyShutdownEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    caller: string;
    collateralReturned: BigNumber;
    tokensBurned: BigNumber;
  }
>;

export type WithdrawalEvent = TypedEvent<
  [string, BigNumber] & { sponsor: string; collateralAmount: BigNumber }
>;

export class Perpetual extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PerpetualInterface;

  functions: {
    applyFundingRate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelWithdrawal(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collateralCurrency(overrides?: CallOverrides): Promise<[string]>;

    collateralRequirement(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    configStore(overrides?: CallOverrides): Promise<[string]>;

    create(
      collateralAmount: { rawValue: BigNumberish },
      numTokens: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createLiquidation(
      sponsor: string,
      minCollateralPerToken: { rawValue: BigNumberish },
      maxCollateralPerToken: { rawValue: BigNumberish },
      maxTokensToLiquidate: { rawValue: BigNumberish },
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cumulativeFeeMultiplier(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    deposit(
      collateralAmount: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositTo(
      sponsor: string,
      collateralAmount: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dispute(
      liquidationId: BigNumberish,
      sponsor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    disputeBondPercentage(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    disputerDisputeRewardPercentage(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    emergencyShutdown(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emergencyShutdownPrice(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    emergencyShutdownTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    finder(overrides?: CallOverrides): Promise<[string]>;

    fundingRate(
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber] & { rawValue: BigNumber },
        string,
        [BigNumber] & { rawValue: BigNumber },
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        rate: [BigNumber] & { rawValue: BigNumber };
        identifier: string;
        cumulativeMultiplier: [BigNumber] & { rawValue: BigNumber };
        updateTime: BigNumber;
        applicationTime: BigNumber;
        proposalTime: BigNumber;
      }
    >;

    getCollateral(
      sponsor: string,
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber] & { rawValue: BigNumber }] & {
        collateralAmount: [BigNumber] & { rawValue: BigNumber };
      }
    >;

    getCurrentTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    getFundingRateAppliedTokenDebt(
      rawTokenDebt: { rawValue: BigNumberish },
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber] & { rawValue: BigNumber }] & {
        totalCollateral: [BigNumber] & { rawValue: BigNumber };
      }
    >;

    getLiquidations(
      sponsor: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          string,
          number,
          BigNumber,
          [BigNumber] & { rawValue: BigNumber },
          [BigNumber] & { rawValue: BigNumber },
          [BigNumber] & { rawValue: BigNumber },
          [BigNumber] & { rawValue: BigNumber },
          string,
          [BigNumber] & { rawValue: BigNumber },
          [BigNumber] & { rawValue: BigNumber }
        ] & {
          sponsor: string;
          liquidator: string;
          state: number;
          liquidationTime: BigNumber;
          tokensOutstanding: [BigNumber] & { rawValue: BigNumber };
          lockedCollateral: [BigNumber] & { rawValue: BigNumber };
          liquidatedCollateral: [BigNumber] & { rawValue: BigNumber };
          rawUnitCollateral: [BigNumber] & { rawValue: BigNumber };
          disputer: string;
          settlementPrice: [BigNumber] & { rawValue: BigNumber };
          finalFee: [BigNumber] & { rawValue: BigNumber };
        })[]
      ] & {
        liquidationData: ([
          string,
          string,
          number,
          BigNumber,
          [BigNumber] & { rawValue: BigNumber },
          [BigNumber] & { rawValue: BigNumber },
          [BigNumber] & { rawValue: BigNumber },
          [BigNumber] & { rawValue: BigNumber },
          string,
          [BigNumber] & { rawValue: BigNumber },
          [BigNumber] & { rawValue: BigNumber }
        ] & {
          sponsor: string;
          liquidator: string;
          state: number;
          liquidationTime: BigNumber;
          tokensOutstanding: [BigNumber] & { rawValue: BigNumber };
          lockedCollateral: [BigNumber] & { rawValue: BigNumber };
          liquidatedCollateral: [BigNumber] & { rawValue: BigNumber };
          rawUnitCollateral: [BigNumber] & { rawValue: BigNumber };
          disputer: string;
          settlementPrice: [BigNumber] & { rawValue: BigNumber };
          finalFee: [BigNumber] & { rawValue: BigNumber };
        })[];
      }
    >;

    getOutstandingRegularFees(
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber }
      ] & {
        regularFee: [BigNumber] & { rawValue: BigNumber };
        latePenalty: [BigNumber] & { rawValue: BigNumber };
        totalPaid: [BigNumber] & { rawValue: BigNumber };
      }
    >;

    gulp(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidationLiveness(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidations(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        number,
        BigNumber,
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        string,
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber }
      ] & {
        sponsor: string;
        liquidator: string;
        state: number;
        liquidationTime: BigNumber;
        tokensOutstanding: [BigNumber] & { rawValue: BigNumber };
        lockedCollateral: [BigNumber] & { rawValue: BigNumber };
        liquidatedCollateral: [BigNumber] & { rawValue: BigNumber };
        rawUnitCollateral: [BigNumber] & { rawValue: BigNumber };
        disputer: string;
        settlementPrice: [BigNumber] & { rawValue: BigNumber };
        finalFee: [BigNumber] & { rawValue: BigNumber };
      }
    >;

    minSponsorTokens(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    payRegularFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pfc(
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { rawValue: BigNumber }]>;

    positions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber] & { rawValue: BigNumber },
        BigNumber,
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber }
      ] & {
        tokensOutstanding: [BigNumber] & { rawValue: BigNumber };
        withdrawalRequestPassTimestamp: BigNumber;
        withdrawalRequestAmount: [BigNumber] & { rawValue: BigNumber };
        rawCollateral: [BigNumber] & { rawValue: BigNumber };
      }
    >;

    priceIdentifier(overrides?: CallOverrides): Promise<[string]>;

    proposeFundingRate(
      rate: { rawValue: BigNumberish },
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rawLiquidationCollateral(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    rawTotalPositionCollateral(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    redeem(
      numTokens: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    remargin(overrides?: CallOverrides): Promise<[void]>;

    repay(
      numTokens: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestWithdrawal(
      collateralAmount: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCurrentTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settleEmergencyShutdown(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sponsorDisputeRewardPercentage(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    timerAddress(overrides?: CallOverrides): Promise<[string]>;

    tokenCurrency(overrides?: CallOverrides): Promise<[string]>;

    totalPositionCollateral(
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber] & { rawValue: BigNumber }] & {
        totalCollateral: [BigNumber] & { rawValue: BigNumber };
      }
    >;

    totalTokensOutstanding(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    withdraw(
      collateralAmount: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawLiquidation(
      liquidationId: BigNumberish,
      sponsor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawPassedRequest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawalLiveness(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  applyFundingRate(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelWithdrawal(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collateralCurrency(overrides?: CallOverrides): Promise<string>;

  collateralRequirement(overrides?: CallOverrides): Promise<BigNumber>;

  configStore(overrides?: CallOverrides): Promise<string>;

  create(
    collateralAmount: { rawValue: BigNumberish },
    numTokens: { rawValue: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createLiquidation(
    sponsor: string,
    minCollateralPerToken: { rawValue: BigNumberish },
    maxCollateralPerToken: { rawValue: BigNumberish },
    maxTokensToLiquidate: { rawValue: BigNumberish },
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cumulativeFeeMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    collateralAmount: { rawValue: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositTo(
    sponsor: string,
    collateralAmount: { rawValue: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dispute(
    liquidationId: BigNumberish,
    sponsor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  disputeBondPercentage(overrides?: CallOverrides): Promise<BigNumber>;

  disputerDisputeRewardPercentage(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  emergencyShutdown(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emergencyShutdownPrice(overrides?: CallOverrides): Promise<BigNumber>;

  emergencyShutdownTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  finder(overrides?: CallOverrides): Promise<string>;

  fundingRate(
    overrides?: CallOverrides
  ): Promise<
    [
      [BigNumber] & { rawValue: BigNumber },
      string,
      [BigNumber] & { rawValue: BigNumber },
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      rate: [BigNumber] & { rawValue: BigNumber };
      identifier: string;
      cumulativeMultiplier: [BigNumber] & { rawValue: BigNumber };
      updateTime: BigNumber;
      applicationTime: BigNumber;
      proposalTime: BigNumber;
    }
  >;

  getCollateral(
    sponsor: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { rawValue: BigNumber }>;

  getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

  getFundingRateAppliedTokenDebt(
    rawTokenDebt: { rawValue: BigNumberish },
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { rawValue: BigNumber }>;

  getLiquidations(
    sponsor: string,
    overrides?: CallOverrides
  ): Promise<
    ([
      string,
      string,
      number,
      BigNumber,
      [BigNumber] & { rawValue: BigNumber },
      [BigNumber] & { rawValue: BigNumber },
      [BigNumber] & { rawValue: BigNumber },
      [BigNumber] & { rawValue: BigNumber },
      string,
      [BigNumber] & { rawValue: BigNumber },
      [BigNumber] & { rawValue: BigNumber }
    ] & {
      sponsor: string;
      liquidator: string;
      state: number;
      liquidationTime: BigNumber;
      tokensOutstanding: [BigNumber] & { rawValue: BigNumber };
      lockedCollateral: [BigNumber] & { rawValue: BigNumber };
      liquidatedCollateral: [BigNumber] & { rawValue: BigNumber };
      rawUnitCollateral: [BigNumber] & { rawValue: BigNumber };
      disputer: string;
      settlementPrice: [BigNumber] & { rawValue: BigNumber };
      finalFee: [BigNumber] & { rawValue: BigNumber };
    })[]
  >;

  getOutstandingRegularFees(
    time: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      [BigNumber] & { rawValue: BigNumber },
      [BigNumber] & { rawValue: BigNumber },
      [BigNumber] & { rawValue: BigNumber }
    ] & {
      regularFee: [BigNumber] & { rawValue: BigNumber };
      latePenalty: [BigNumber] & { rawValue: BigNumber };
      totalPaid: [BigNumber] & { rawValue: BigNumber };
    }
  >;

  gulp(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidationLiveness(overrides?: CallOverrides): Promise<BigNumber>;

  liquidations(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      number,
      BigNumber,
      [BigNumber] & { rawValue: BigNumber },
      [BigNumber] & { rawValue: BigNumber },
      [BigNumber] & { rawValue: BigNumber },
      [BigNumber] & { rawValue: BigNumber },
      string,
      [BigNumber] & { rawValue: BigNumber },
      [BigNumber] & { rawValue: BigNumber }
    ] & {
      sponsor: string;
      liquidator: string;
      state: number;
      liquidationTime: BigNumber;
      tokensOutstanding: [BigNumber] & { rawValue: BigNumber };
      lockedCollateral: [BigNumber] & { rawValue: BigNumber };
      liquidatedCollateral: [BigNumber] & { rawValue: BigNumber };
      rawUnitCollateral: [BigNumber] & { rawValue: BigNumber };
      disputer: string;
      settlementPrice: [BigNumber] & { rawValue: BigNumber };
      finalFee: [BigNumber] & { rawValue: BigNumber };
    }
  >;

  minSponsorTokens(overrides?: CallOverrides): Promise<BigNumber>;

  payRegularFees(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pfc(
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { rawValue: BigNumber }>;

  positions(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [
      [BigNumber] & { rawValue: BigNumber },
      BigNumber,
      [BigNumber] & { rawValue: BigNumber },
      [BigNumber] & { rawValue: BigNumber }
    ] & {
      tokensOutstanding: [BigNumber] & { rawValue: BigNumber };
      withdrawalRequestPassTimestamp: BigNumber;
      withdrawalRequestAmount: [BigNumber] & { rawValue: BigNumber };
      rawCollateral: [BigNumber] & { rawValue: BigNumber };
    }
  >;

  priceIdentifier(overrides?: CallOverrides): Promise<string>;

  proposeFundingRate(
    rate: { rawValue: BigNumberish },
    timestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rawLiquidationCollateral(overrides?: CallOverrides): Promise<BigNumber>;

  rawTotalPositionCollateral(overrides?: CallOverrides): Promise<BigNumber>;

  redeem(
    numTokens: { rawValue: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  remargin(overrides?: CallOverrides): Promise<void>;

  repay(
    numTokens: { rawValue: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestWithdrawal(
    collateralAmount: { rawValue: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCurrentTime(
    time: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settleEmergencyShutdown(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sponsorDisputeRewardPercentage(overrides?: CallOverrides): Promise<BigNumber>;

  timerAddress(overrides?: CallOverrides): Promise<string>;

  tokenCurrency(overrides?: CallOverrides): Promise<string>;

  totalPositionCollateral(
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { rawValue: BigNumber }>;

  totalTokensOutstanding(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    collateralAmount: { rawValue: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawLiquidation(
    liquidationId: BigNumberish,
    sponsor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawPassedRequest(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawalLiveness(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    applyFundingRate(overrides?: CallOverrides): Promise<void>;

    cancelWithdrawal(overrides?: CallOverrides): Promise<void>;

    collateralCurrency(overrides?: CallOverrides): Promise<string>;

    collateralRequirement(overrides?: CallOverrides): Promise<BigNumber>;

    configStore(overrides?: CallOverrides): Promise<string>;

    create(
      collateralAmount: { rawValue: BigNumberish },
      numTokens: { rawValue: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    createLiquidation(
      sponsor: string,
      minCollateralPerToken: { rawValue: BigNumberish },
      maxCollateralPerToken: { rawValue: BigNumberish },
      maxTokensToLiquidate: { rawValue: BigNumberish },
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber }
      ] & {
        liquidationId: BigNumber;
        tokensLiquidated: [BigNumber] & { rawValue: BigNumber };
        finalFeeBond: [BigNumber] & { rawValue: BigNumber };
      }
    >;

    cumulativeFeeMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      collateralAmount: { rawValue: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    depositTo(
      sponsor: string,
      collateralAmount: { rawValue: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    dispute(
      liquidationId: BigNumberish,
      sponsor: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    disputeBondPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    disputerDisputeRewardPercentage(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    emergencyShutdown(overrides?: CallOverrides): Promise<void>;

    emergencyShutdownPrice(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyShutdownTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    finder(overrides?: CallOverrides): Promise<string>;

    fundingRate(
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber] & { rawValue: BigNumber },
        string,
        [BigNumber] & { rawValue: BigNumber },
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        rate: [BigNumber] & { rawValue: BigNumber };
        identifier: string;
        cumulativeMultiplier: [BigNumber] & { rawValue: BigNumber };
        updateTime: BigNumber;
        applicationTime: BigNumber;
        proposalTime: BigNumber;
      }
    >;

    getCollateral(
      sponsor: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

    getFundingRateAppliedTokenDebt(
      rawTokenDebt: { rawValue: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    getLiquidations(
      sponsor: string,
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        string,
        number,
        BigNumber,
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        string,
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber }
      ] & {
        sponsor: string;
        liquidator: string;
        state: number;
        liquidationTime: BigNumber;
        tokensOutstanding: [BigNumber] & { rawValue: BigNumber };
        lockedCollateral: [BigNumber] & { rawValue: BigNumber };
        liquidatedCollateral: [BigNumber] & { rawValue: BigNumber };
        rawUnitCollateral: [BigNumber] & { rawValue: BigNumber };
        disputer: string;
        settlementPrice: [BigNumber] & { rawValue: BigNumber };
        finalFee: [BigNumber] & { rawValue: BigNumber };
      })[]
    >;

    getOutstandingRegularFees(
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber }
      ] & {
        regularFee: [BigNumber] & { rawValue: BigNumber };
        latePenalty: [BigNumber] & { rawValue: BigNumber };
        totalPaid: [BigNumber] & { rawValue: BigNumber };
      }
    >;

    gulp(overrides?: CallOverrides): Promise<void>;

    liquidationLiveness(overrides?: CallOverrides): Promise<BigNumber>;

    liquidations(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        number,
        BigNumber,
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        string,
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber }
      ] & {
        sponsor: string;
        liquidator: string;
        state: number;
        liquidationTime: BigNumber;
        tokensOutstanding: [BigNumber] & { rawValue: BigNumber };
        lockedCollateral: [BigNumber] & { rawValue: BigNumber };
        liquidatedCollateral: [BigNumber] & { rawValue: BigNumber };
        rawUnitCollateral: [BigNumber] & { rawValue: BigNumber };
        disputer: string;
        settlementPrice: [BigNumber] & { rawValue: BigNumber };
        finalFee: [BigNumber] & { rawValue: BigNumber };
      }
    >;

    minSponsorTokens(overrides?: CallOverrides): Promise<BigNumber>;

    payRegularFees(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    pfc(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    positions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber] & { rawValue: BigNumber },
        BigNumber,
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber }
      ] & {
        tokensOutstanding: [BigNumber] & { rawValue: BigNumber };
        withdrawalRequestPassTimestamp: BigNumber;
        withdrawalRequestAmount: [BigNumber] & { rawValue: BigNumber };
        rawCollateral: [BigNumber] & { rawValue: BigNumber };
      }
    >;

    priceIdentifier(overrides?: CallOverrides): Promise<string>;

    proposeFundingRate(
      rate: { rawValue: BigNumberish },
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    rawLiquidationCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    rawTotalPositionCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      numTokens: { rawValue: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    remargin(overrides?: CallOverrides): Promise<void>;

    repay(
      numTokens: { rawValue: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    requestWithdrawal(
      collateralAmount: { rawValue: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    setCurrentTime(
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    settleEmergencyShutdown(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    sponsorDisputeRewardPercentage(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    timerAddress(overrides?: CallOverrides): Promise<string>;

    tokenCurrency(overrides?: CallOverrides): Promise<string>;

    totalPositionCollateral(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    totalTokensOutstanding(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      collateralAmount: { rawValue: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    withdrawLiquidation(
      liquidationId: BigNumberish,
      sponsor: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber }
      ] & {
        payToSponsor: [BigNumber] & { rawValue: BigNumber };
        payToLiquidator: [BigNumber] & { rawValue: BigNumber };
        payToDisputer: [BigNumber] & { rawValue: BigNumber };
        paidToSponsor: [BigNumber] & { rawValue: BigNumber };
        paidToLiquidator: [BigNumber] & { rawValue: BigNumber };
        paidToDisputer: [BigNumber] & { rawValue: BigNumber };
      }
    >;

    withdrawPassedRequest(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    withdrawalLiveness(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Deposit(address,uint256)"(
      sponsor?: string | null,
      collateralAmount?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { sponsor: string; collateralAmount: BigNumber }
    >;

    Deposit(
      sponsor?: string | null,
      collateralAmount?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { sponsor: string; collateralAmount: BigNumber }
    >;

    "DisputeSettled(address,address,address,address,uint256,bool)"(
      caller?: string | null,
      sponsor?: string | null,
      liquidator?: string | null,
      disputer?: null,
      liquidationId?: null,
      disputeSucceeded?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber, boolean],
      {
        caller: string;
        sponsor: string;
        liquidator: string;
        disputer: string;
        liquidationId: BigNumber;
        disputeSucceeded: boolean;
      }
    >;

    DisputeSettled(
      caller?: string | null,
      sponsor?: string | null,
      liquidator?: string | null,
      disputer?: null,
      liquidationId?: null,
      disputeSucceeded?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber, boolean],
      {
        caller: string;
        sponsor: string;
        liquidator: string;
        disputer: string;
        liquidationId: BigNumber;
        disputeSucceeded: boolean;
      }
    >;

    "EmergencyShutdown(address,uint256)"(
      caller?: string | null,
      shutdownTimestamp?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { caller: string; shutdownTimestamp: BigNumber }
    >;

    EmergencyShutdown(
      caller?: string | null,
      shutdownTimestamp?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { caller: string; shutdownTimestamp: BigNumber }
    >;

    "EndedSponsorPosition(address)"(
      sponsor?: string | null
    ): TypedEventFilter<[string], { sponsor: string }>;

    EndedSponsorPosition(
      sponsor?: string | null
    ): TypedEventFilter<[string], { sponsor: string }>;

    "FinalFeesPaid(uint256)"(
      amount?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    FinalFeesPaid(
      amount?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    "FundingRateUpdated(int256,uint256,uint256)"(
      newFundingRate?: null,
      updateTime?: BigNumberish | null,
      reward?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { newFundingRate: BigNumber; updateTime: BigNumber; reward: BigNumber }
    >;

    FundingRateUpdated(
      newFundingRate?: null,
      updateTime?: BigNumberish | null,
      reward?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { newFundingRate: BigNumber; updateTime: BigNumber; reward: BigNumber }
    >;

    "LiquidationCreated(address,address,uint256,uint256,uint256,uint256,uint256)"(
      sponsor?: string | null,
      liquidator?: string | null,
      liquidationId?: BigNumberish | null,
      tokensOutstanding?: null,
      lockedCollateral?: null,
      liquidatedCollateral?: null,
      liquidationTime?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        sponsor: string;
        liquidator: string;
        liquidationId: BigNumber;
        tokensOutstanding: BigNumber;
        lockedCollateral: BigNumber;
        liquidatedCollateral: BigNumber;
        liquidationTime: BigNumber;
      }
    >;

    LiquidationCreated(
      sponsor?: string | null,
      liquidator?: string | null,
      liquidationId?: BigNumberish | null,
      tokensOutstanding?: null,
      lockedCollateral?: null,
      liquidatedCollateral?: null,
      liquidationTime?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        sponsor: string;
        liquidator: string;
        liquidationId: BigNumber;
        tokensOutstanding: BigNumber;
        lockedCollateral: BigNumber;
        liquidatedCollateral: BigNumber;
        liquidationTime: BigNumber;
      }
    >;

    "LiquidationDisputed(address,address,address,uint256,uint256)"(
      sponsor?: string | null,
      liquidator?: string | null,
      disputer?: string | null,
      liquidationId?: null,
      disputeBondAmount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        sponsor: string;
        liquidator: string;
        disputer: string;
        liquidationId: BigNumber;
        disputeBondAmount: BigNumber;
      }
    >;

    LiquidationDisputed(
      sponsor?: string | null,
      liquidator?: string | null,
      disputer?: string | null,
      liquidationId?: null,
      disputeBondAmount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        sponsor: string;
        liquidator: string;
        disputer: string;
        liquidationId: BigNumber;
        disputeBondAmount: BigNumber;
      }
    >;

    "LiquidationWithdrawn(address,uint256,uint256,uint256,uint8,uint256)"(
      caller?: string | null,
      paidToLiquidator?: null,
      paidToDisputer?: null,
      paidToSponsor?: null,
      liquidationStatus?: BigNumberish | null,
      settlementPrice?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, number, BigNumber],
      {
        caller: string;
        paidToLiquidator: BigNumber;
        paidToDisputer: BigNumber;
        paidToSponsor: BigNumber;
        liquidationStatus: number;
        settlementPrice: BigNumber;
      }
    >;

    LiquidationWithdrawn(
      caller?: string | null,
      paidToLiquidator?: null,
      paidToDisputer?: null,
      paidToSponsor?: null,
      liquidationStatus?: BigNumberish | null,
      settlementPrice?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, number, BigNumber],
      {
        caller: string;
        paidToLiquidator: BigNumber;
        paidToDisputer: BigNumber;
        paidToSponsor: BigNumber;
        liquidationStatus: number;
        settlementPrice: BigNumber;
      }
    >;

    "NewSponsor(address)"(
      sponsor?: string | null
    ): TypedEventFilter<[string], { sponsor: string }>;

    NewSponsor(
      sponsor?: string | null
    ): TypedEventFilter<[string], { sponsor: string }>;

    "PositionCreated(address,uint256,uint256)"(
      sponsor?: string | null,
      collateralAmount?: BigNumberish | null,
      tokenAmount?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { sponsor: string; collateralAmount: BigNumber; tokenAmount: BigNumber }
    >;

    PositionCreated(
      sponsor?: string | null,
      collateralAmount?: BigNumberish | null,
      tokenAmount?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { sponsor: string; collateralAmount: BigNumber; tokenAmount: BigNumber }
    >;

    "Redeem(address,uint256,uint256)"(
      sponsor?: string | null,
      collateralAmount?: BigNumberish | null,
      tokenAmount?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { sponsor: string; collateralAmount: BigNumber; tokenAmount: BigNumber }
    >;

    Redeem(
      sponsor?: string | null,
      collateralAmount?: BigNumberish | null,
      tokenAmount?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { sponsor: string; collateralAmount: BigNumber; tokenAmount: BigNumber }
    >;

    "RegularFeesPaid(uint256,uint256)"(
      regularFee?: BigNumberish | null,
      lateFee?: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { regularFee: BigNumber; lateFee: BigNumber }
    >;

    RegularFeesPaid(
      regularFee?: BigNumberish | null,
      lateFee?: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { regularFee: BigNumber; lateFee: BigNumber }
    >;

    "Repay(address,uint256,uint256)"(
      sponsor?: string | null,
      numTokensRepaid?: BigNumberish | null,
      newTokenCount?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { sponsor: string; numTokensRepaid: BigNumber; newTokenCount: BigNumber }
    >;

    Repay(
      sponsor?: string | null,
      numTokensRepaid?: BigNumberish | null,
      newTokenCount?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { sponsor: string; numTokensRepaid: BigNumber; newTokenCount: BigNumber }
    >;

    "RequestWithdrawal(address,uint256)"(
      sponsor?: string | null,
      collateralAmount?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { sponsor: string; collateralAmount: BigNumber }
    >;

    RequestWithdrawal(
      sponsor?: string | null,
      collateralAmount?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { sponsor: string; collateralAmount: BigNumber }
    >;

    "RequestWithdrawalCanceled(address,uint256)"(
      sponsor?: string | null,
      collateralAmount?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { sponsor: string; collateralAmount: BigNumber }
    >;

    RequestWithdrawalCanceled(
      sponsor?: string | null,
      collateralAmount?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { sponsor: string; collateralAmount: BigNumber }
    >;

    "RequestWithdrawalExecuted(address,uint256)"(
      sponsor?: string | null,
      collateralAmount?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { sponsor: string; collateralAmount: BigNumber }
    >;

    RequestWithdrawalExecuted(
      sponsor?: string | null,
      collateralAmount?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { sponsor: string; collateralAmount: BigNumber }
    >;

    "SettleEmergencyShutdown(address,uint256,uint256)"(
      caller?: string | null,
      collateralReturned?: BigNumberish | null,
      tokensBurned?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { caller: string; collateralReturned: BigNumber; tokensBurned: BigNumber }
    >;

    SettleEmergencyShutdown(
      caller?: string | null,
      collateralReturned?: BigNumberish | null,
      tokensBurned?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { caller: string; collateralReturned: BigNumber; tokensBurned: BigNumber }
    >;

    "Withdrawal(address,uint256)"(
      sponsor?: string | null,
      collateralAmount?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { sponsor: string; collateralAmount: BigNumber }
    >;

    Withdrawal(
      sponsor?: string | null,
      collateralAmount?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { sponsor: string; collateralAmount: BigNumber }
    >;
  };

  estimateGas: {
    applyFundingRate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelWithdrawal(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collateralCurrency(overrides?: CallOverrides): Promise<BigNumber>;

    collateralRequirement(overrides?: CallOverrides): Promise<BigNumber>;

    configStore(overrides?: CallOverrides): Promise<BigNumber>;

    create(
      collateralAmount: { rawValue: BigNumberish },
      numTokens: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createLiquidation(
      sponsor: string,
      minCollateralPerToken: { rawValue: BigNumberish },
      maxCollateralPerToken: { rawValue: BigNumberish },
      maxTokensToLiquidate: { rawValue: BigNumberish },
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cumulativeFeeMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      collateralAmount: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositTo(
      sponsor: string,
      collateralAmount: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dispute(
      liquidationId: BigNumberish,
      sponsor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    disputeBondPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    disputerDisputeRewardPercentage(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    emergencyShutdown(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emergencyShutdownPrice(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyShutdownTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    finder(overrides?: CallOverrides): Promise<BigNumber>;

    fundingRate(overrides?: CallOverrides): Promise<BigNumber>;

    getCollateral(
      sponsor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

    getFundingRateAppliedTokenDebt(
      rawTokenDebt: { rawValue: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiquidations(
      sponsor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOutstandingRegularFees(
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gulp(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidationLiveness(overrides?: CallOverrides): Promise<BigNumber>;

    liquidations(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minSponsorTokens(overrides?: CallOverrides): Promise<BigNumber>;

    payRegularFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pfc(overrides?: CallOverrides): Promise<BigNumber>;

    positions(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    priceIdentifier(overrides?: CallOverrides): Promise<BigNumber>;

    proposeFundingRate(
      rate: { rawValue: BigNumberish },
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rawLiquidationCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    rawTotalPositionCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      numTokens: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    remargin(overrides?: CallOverrides): Promise<BigNumber>;

    repay(
      numTokens: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestWithdrawal(
      collateralAmount: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCurrentTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settleEmergencyShutdown(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sponsorDisputeRewardPercentage(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    timerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    tokenCurrency(overrides?: CallOverrides): Promise<BigNumber>;

    totalPositionCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    totalTokensOutstanding(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      collateralAmount: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawLiquidation(
      liquidationId: BigNumberish,
      sponsor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawPassedRequest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawalLiveness(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    applyFundingRate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelWithdrawal(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collateralCurrency(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralRequirement(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    configStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    create(
      collateralAmount: { rawValue: BigNumberish },
      numTokens: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createLiquidation(
      sponsor: string,
      minCollateralPerToken: { rawValue: BigNumberish },
      maxCollateralPerToken: { rawValue: BigNumberish },
      maxTokensToLiquidate: { rawValue: BigNumberish },
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cumulativeFeeMultiplier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      collateralAmount: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositTo(
      sponsor: string,
      collateralAmount: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dispute(
      liquidationId: BigNumberish,
      sponsor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    disputeBondPercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    disputerDisputeRewardPercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emergencyShutdown(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emergencyShutdownPrice(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emergencyShutdownTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    finder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fundingRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCollateral(
      sponsor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFundingRateAppliedTokenDebt(
      rawTokenDebt: { rawValue: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidations(
      sponsor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOutstandingRegularFees(
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gulp(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidationLiveness(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidations(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minSponsorTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payRegularFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pfc(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    positions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceIdentifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposeFundingRate(
      rate: { rawValue: BigNumberish },
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rawLiquidationCollateral(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rawTotalPositionCollateral(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeem(
      numTokens: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    remargin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    repay(
      numTokens: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestWithdrawal(
      collateralAmount: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCurrentTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settleEmergencyShutdown(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sponsorDisputeRewardPercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    timerAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenCurrency(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalPositionCollateral(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalTokensOutstanding(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      collateralAmount: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawLiquidation(
      liquidationId: BigNumberish,
      sponsor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawPassedRequest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawalLiveness(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
