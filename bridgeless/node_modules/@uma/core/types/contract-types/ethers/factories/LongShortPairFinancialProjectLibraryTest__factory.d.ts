import { Signer, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { LongShortPairFinancialProjectLibraryTest, LongShortPairFinancialProjectLibraryTestInterface } from "../LongShortPairFinancialProjectLibraryTest";
export declare class LongShortPairFinancialProjectLibraryTest__factory extends ContractFactory {
    constructor(...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>);
    deploy(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<LongShortPairFinancialProjectLibraryTest>;
    getDeployTransaction(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): TransactionRequest;
    attach(address: string): LongShortPairFinancialProjectLibraryTest;
    connect(signer: Signer): LongShortPairFinancialProjectLibraryTest__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b5060cd8061001f6000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c80632da52361146041578063a88ae677146065578063b4252014146077575b600080fd5b6053604c366004607f565b5060005490565b60405190815260200160405180910390f35b60756070366004607f565b600055565b005b605360005481565b600060208284031215609057600080fd5b503591905056fea264697066735822122059e9ee6132885b371de8dbd5d18085d02fdebde59a55c5cf4b6432d7737386d264736f6c63430008100033";
    static readonly abi: {
        inputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        name: string;
        outputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        stateMutability: string;
        type: string;
    }[];
    static createInterface(): LongShortPairFinancialProjectLibraryTestInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): LongShortPairFinancialProjectLibraryTest;
}
