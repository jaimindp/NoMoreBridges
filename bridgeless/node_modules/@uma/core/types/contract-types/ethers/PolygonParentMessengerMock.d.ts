/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface PolygonParentMessengerMockInterface extends ethers.utils.Interface {
  functions: {
    "SEND_MESSAGE_EVENT_SIG()": FunctionFragment;
    "checkpointManager()": FunctionFragment;
    "childChainId()": FunctionFragment;
    "childMessenger()": FunctionFragment;
    "fxChildTunnel()": FunctionFragment;
    "fxRoot()": FunctionFragment;
    "getL1CallValue()": FunctionFragment;
    "governorHub()": FunctionFragment;
    "governorSpoke()": FunctionFragment;
    "oracleHub()": FunctionFragment;
    "oracleSpoke()": FunctionFragment;
    "owner()": FunctionFragment;
    "processMessageFromChild(bytes)": FunctionFragment;
    "processedExits(bytes32)": FunctionFragment;
    "receiveMessage(bytes)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "sendMessageToChild(bytes)": FunctionFragment;
    "setChildMessenger(address)": FunctionFragment;
    "setFxChildTunnel(address)": FunctionFragment;
    "setGovernorHub(address)": FunctionFragment;
    "setGovernorSpoke(address)": FunctionFragment;
    "setOracleHub(address)": FunctionFragment;
    "setOracleSpoke(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "SEND_MESSAGE_EVENT_SIG",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkpointManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "childChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "childMessenger",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fxChildTunnel",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "fxRoot", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getL1CallValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governorHub",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governorSpoke",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "oracleHub", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "oracleSpoke",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "processMessageFromChild",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "processedExits",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveMessage",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendMessageToChild",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setChildMessenger",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFxChildTunnel",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setGovernorHub",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setGovernorSpoke",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setOracleHub",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setOracleSpoke",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "SEND_MESSAGE_EVENT_SIG",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkpointManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "childChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "childMessenger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fxChildTunnel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fxRoot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getL1CallValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "governorHub",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "governorSpoke",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oracleHub", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "oracleSpoke",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processMessageFromChild",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processedExits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendMessageToChild",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setChildMessenger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFxChildTunnel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGovernorHub",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGovernorSpoke",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOracleHub",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOracleSpoke",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "MessageReceivedFromChild(address,bytes)": EventFragment;
    "MessageSentToChild(bytes,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SetChildMessenger(address)": EventFragment;
    "SetGovernorHub(address)": EventFragment;
    "SetGovernorSpoke(address)": EventFragment;
    "SetOracleHub(address)": EventFragment;
    "SetOracleSpoke(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MessageReceivedFromChild"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MessageSentToChild"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetChildMessenger"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetGovernorHub"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetGovernorSpoke"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetOracleHub"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetOracleSpoke"): EventFragment;
}

export type MessageReceivedFromChildEvent = TypedEvent<
  [string, string] & { targetHub: string; dataToSendToTarget: string }
>;

export type MessageSentToChildEvent = TypedEvent<
  [string, string] & { data: string; targetSpoke: string }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type SetChildMessengerEvent = TypedEvent<
  [string] & { childMessenger: string }
>;

export type SetGovernorHubEvent = TypedEvent<
  [string] & { governorHub: string }
>;

export type SetGovernorSpokeEvent = TypedEvent<
  [string] & { governorSpoke: string }
>;

export type SetOracleHubEvent = TypedEvent<[string] & { oracleHub: string }>;

export type SetOracleSpokeEvent = TypedEvent<
  [string] & { oracleSpoke: string }
>;

export class PolygonParentMessengerMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PolygonParentMessengerMockInterface;

  functions: {
    SEND_MESSAGE_EVENT_SIG(overrides?: CallOverrides): Promise<[string]>;

    checkpointManager(overrides?: CallOverrides): Promise<[string]>;

    childChainId(overrides?: CallOverrides): Promise<[BigNumber]>;

    childMessenger(overrides?: CallOverrides): Promise<[string]>;

    fxChildTunnel(overrides?: CallOverrides): Promise<[string]>;

    fxRoot(overrides?: CallOverrides): Promise<[string]>;

    getL1CallValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    governorHub(overrides?: CallOverrides): Promise<[string]>;

    governorSpoke(overrides?: CallOverrides): Promise<[string]>;

    oracleHub(overrides?: CallOverrides): Promise<[string]>;

    oracleSpoke(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    processMessageFromChild(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    processedExits(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    receiveMessage(
      inputData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendMessageToChild(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setChildMessenger(
      newChildMessenger: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFxChildTunnel(
      _fxChildTunnel: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGovernorHub(
      newGovernorHub: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGovernorSpoke(
      newGovernorSpoke: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOracleHub(
      newOracleHub: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOracleSpoke(
      newOracleSpoke: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  SEND_MESSAGE_EVENT_SIG(overrides?: CallOverrides): Promise<string>;

  checkpointManager(overrides?: CallOverrides): Promise<string>;

  childChainId(overrides?: CallOverrides): Promise<BigNumber>;

  childMessenger(overrides?: CallOverrides): Promise<string>;

  fxChildTunnel(overrides?: CallOverrides): Promise<string>;

  fxRoot(overrides?: CallOverrides): Promise<string>;

  getL1CallValue(overrides?: CallOverrides): Promise<BigNumber>;

  governorHub(overrides?: CallOverrides): Promise<string>;

  governorSpoke(overrides?: CallOverrides): Promise<string>;

  oracleHub(overrides?: CallOverrides): Promise<string>;

  oracleSpoke(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  processMessageFromChild(
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  processedExits(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  receiveMessage(
    inputData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendMessageToChild(
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setChildMessenger(
    newChildMessenger: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFxChildTunnel(
    _fxChildTunnel: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGovernorHub(
    newGovernorHub: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGovernorSpoke(
    newGovernorSpoke: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOracleHub(
    newOracleHub: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOracleSpoke(
    newOracleSpoke: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    SEND_MESSAGE_EVENT_SIG(overrides?: CallOverrides): Promise<string>;

    checkpointManager(overrides?: CallOverrides): Promise<string>;

    childChainId(overrides?: CallOverrides): Promise<BigNumber>;

    childMessenger(overrides?: CallOverrides): Promise<string>;

    fxChildTunnel(overrides?: CallOverrides): Promise<string>;

    fxRoot(overrides?: CallOverrides): Promise<string>;

    getL1CallValue(overrides?: CallOverrides): Promise<BigNumber>;

    governorHub(overrides?: CallOverrides): Promise<string>;

    governorSpoke(overrides?: CallOverrides): Promise<string>;

    oracleHub(overrides?: CallOverrides): Promise<string>;

    oracleSpoke(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    processMessageFromChild(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    processedExits(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    receiveMessage(
      inputData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    sendMessageToChild(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setChildMessenger(
      newChildMessenger: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFxChildTunnel(
      _fxChildTunnel: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setGovernorHub(
      newGovernorHub: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setGovernorSpoke(
      newGovernorSpoke: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setOracleHub(
      newOracleHub: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setOracleSpoke(
      newOracleSpoke: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "MessageReceivedFromChild(address,bytes)"(
      targetHub?: string | null,
      dataToSendToTarget?: null
    ): TypedEventFilter<
      [string, string],
      { targetHub: string; dataToSendToTarget: string }
    >;

    MessageReceivedFromChild(
      targetHub?: string | null,
      dataToSendToTarget?: null
    ): TypedEventFilter<
      [string, string],
      { targetHub: string; dataToSendToTarget: string }
    >;

    "MessageSentToChild(bytes,address)"(
      data?: null,
      targetSpoke?: string | null
    ): TypedEventFilter<
      [string, string],
      { data: string; targetSpoke: string }
    >;

    MessageSentToChild(
      data?: null,
      targetSpoke?: string | null
    ): TypedEventFilter<
      [string, string],
      { data: string; targetSpoke: string }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "SetChildMessenger(address)"(
      childMessenger?: string | null
    ): TypedEventFilter<[string], { childMessenger: string }>;

    SetChildMessenger(
      childMessenger?: string | null
    ): TypedEventFilter<[string], { childMessenger: string }>;

    "SetGovernorHub(address)"(
      governorHub?: string | null
    ): TypedEventFilter<[string], { governorHub: string }>;

    SetGovernorHub(
      governorHub?: string | null
    ): TypedEventFilter<[string], { governorHub: string }>;

    "SetGovernorSpoke(address)"(
      governorSpoke?: string | null
    ): TypedEventFilter<[string], { governorSpoke: string }>;

    SetGovernorSpoke(
      governorSpoke?: string | null
    ): TypedEventFilter<[string], { governorSpoke: string }>;

    "SetOracleHub(address)"(
      oracleHub?: string | null
    ): TypedEventFilter<[string], { oracleHub: string }>;

    SetOracleHub(
      oracleHub?: string | null
    ): TypedEventFilter<[string], { oracleHub: string }>;

    "SetOracleSpoke(address)"(
      oracleSpoke?: string | null
    ): TypedEventFilter<[string], { oracleSpoke: string }>;

    SetOracleSpoke(
      oracleSpoke?: string | null
    ): TypedEventFilter<[string], { oracleSpoke: string }>;
  };

  estimateGas: {
    SEND_MESSAGE_EVENT_SIG(overrides?: CallOverrides): Promise<BigNumber>;

    checkpointManager(overrides?: CallOverrides): Promise<BigNumber>;

    childChainId(overrides?: CallOverrides): Promise<BigNumber>;

    childMessenger(overrides?: CallOverrides): Promise<BigNumber>;

    fxChildTunnel(overrides?: CallOverrides): Promise<BigNumber>;

    fxRoot(overrides?: CallOverrides): Promise<BigNumber>;

    getL1CallValue(overrides?: CallOverrides): Promise<BigNumber>;

    governorHub(overrides?: CallOverrides): Promise<BigNumber>;

    governorSpoke(overrides?: CallOverrides): Promise<BigNumber>;

    oracleHub(overrides?: CallOverrides): Promise<BigNumber>;

    oracleSpoke(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    processMessageFromChild(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    processedExits(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    receiveMessage(
      inputData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendMessageToChild(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setChildMessenger(
      newChildMessenger: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFxChildTunnel(
      _fxChildTunnel: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGovernorHub(
      newGovernorHub: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGovernorSpoke(
      newGovernorSpoke: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOracleHub(
      newOracleHub: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOracleSpoke(
      newOracleSpoke: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    SEND_MESSAGE_EVENT_SIG(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkpointManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    childChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    childMessenger(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fxChildTunnel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fxRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getL1CallValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governorHub(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governorSpoke(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oracleHub(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oracleSpoke(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    processMessageFromChild(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    processedExits(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    receiveMessage(
      inputData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendMessageToChild(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setChildMessenger(
      newChildMessenger: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFxChildTunnel(
      _fxChildTunnel: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGovernorHub(
      newGovernorHub: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGovernorSpoke(
      newGovernorSpoke: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOracleHub(
      newOracleHub: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOracleSpoke(
      newOracleSpoke: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
