/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type DelegateSet = ContractEventLog<{
  delegator: string;
  delegate: string;
  0: string;
  1: string;
}>;
export type DelegatorSet = ContractEventLog<{
  delegate: string;
  delegator: string;
  0: string;
  1: string;
}>;
export type EncryptedVote = ContractEventLog<{
  caller: string;
  roundId: string;
  identifier: string;
  time: string;
  ancillaryData: string;
  encryptedVote: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
}>;
export type ExecutedUnstake = ContractEventLog<{
  voter: string;
  tokensSent: string;
  voterStake: string;
  0: string;
  1: string;
  2: string;
}>;
export type GatAndSpatChanged = ContractEventLog<{
  newGat: string;
  newSpat: string;
  0: string;
  1: string;
}>;
export type MaxRequestsPerRoundChanged = ContractEventLog<{
  newMaxRequestsPerRound: string;
  0: string;
}>;
export type MaxRollsChanged = ContractEventLog<{
  newMaxRolls: string;
  0: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type RequestAdded = ContractEventLog<{
  requester: string;
  roundId: string;
  identifier: string;
  time: string;
  ancillaryData: string;
  isGovernance: boolean;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: boolean;
}>;
export type RequestDeleted = ContractEventLog<{
  identifier: string;
  time: string;
  ancillaryData: string;
  rollCount: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type RequestResolved = ContractEventLog<{
  roundId: string;
  resolvedPriceRequestIndex: string;
  identifier: string;
  time: string;
  ancillaryData: string;
  price: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
}>;
export type RequestRolled = ContractEventLog<{
  identifier: string;
  time: string;
  ancillaryData: string;
  rollCount: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type RequestedUnstake = ContractEventLog<{
  voter: string;
  amount: string;
  unstakeTime: string;
  voterStake: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type SetNewEmissionRate = ContractEventLog<{
  newEmissionRate: string;
  0: string;
}>;
export type SetNewUnstakeCoolDown = ContractEventLog<{
  newUnstakeCoolDown: string;
  0: string;
}>;
export type SlashingLibraryChanged = ContractEventLog<{
  newAddress: string;
  0: string;
}>;
export type Staked = ContractEventLog<{
  voter: string;
  from: string;
  amount: string;
  voterStake: string;
  voterPendingUnstake: string;
  cumulativeStake: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
}>;
export type UpdatedReward = ContractEventLog<{
  voter: string;
  newReward: string;
  lastUpdateTime: string;
  0: string;
  1: string;
  2: string;
}>;
export type VoteCommitted = ContractEventLog<{
  voter: string;
  caller: string;
  roundId: string;
  identifier: string;
  time: string;
  ancillaryData: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
}>;
export type VoteRevealed = ContractEventLog<{
  voter: string;
  caller: string;
  roundId: string;
  identifier: string;
  time: string;
  ancillaryData: string;
  price: string;
  numTokens: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
  6: string;
  7: string;
}>;
export type VoterSlashApplied = ContractEventLog<{
  voter: string;
  slashedTokens: string;
  postStake: string;
  0: string;
  1: string;
  2: string;
}>;
export type VoterSlashed = ContractEventLog<{
  voter: string;
  requestIndex: string;
  slashedTokens: string;
  0: string;
  1: string;
  2: string;
}>;
export type VotingContractMigrated = ContractEventLog<{
  newAddress: string;
  0: string;
}>;
export type WithdrawnRewards = ContractEventLog<{
  voter: string;
  delegate: string;
  tokensWithdrawn: string;
  0: string;
  1: string;
  2: string;
}>;

export interface VotingV2ControllableTiming extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): VotingV2ControllableTiming;
  clone(): VotingV2ControllableTiming;
  methods: {
    ANCILLARY_BYTES_LIMIT(): NonPayableTransactionObject<string>;

    UINT64_MAX(): NonPayableTransactionObject<string>;

    "commitAndEmitEncryptedVote(bytes32,uint256,bytes,bytes32,bytes)"(
      identifier: string | number[],
      time: number | string | BN,
      ancillaryData: string | number[],
      hash: string | number[],
      encryptedVote: string | number[]
    ): NonPayableTransactionObject<void>;

    "commitAndEmitEncryptedVote(bytes32,uint256,bytes32,bytes)"(
      identifier: string | number[],
      time: number | string | BN,
      hash: string | number[],
      encryptedVote: string | number[]
    ): NonPayableTransactionObject<void>;

    "commitVote(bytes32,uint256,bytes,bytes32)"(
      identifier: string | number[],
      time: number | string | BN,
      ancillaryData: string | number[],
      hash: string | number[]
    ): NonPayableTransactionObject<void>;

    "commitVote(bytes32,uint256,bytes32)"(
      identifier: string | number[],
      time: number | string | BN,
      hash: string | number[]
    ): NonPayableTransactionObject<void>;

    cumulativeStake(): NonPayableTransactionObject<string>;

    currentActiveRequests(): NonPayableTransactionObject<boolean>;

    delegateToStaker(arg0: string): NonPayableTransactionObject<string>;

    emissionRate(): NonPayableTransactionObject<string>;

    executeUnstake(): NonPayableTransactionObject<void>;

    finder(): NonPayableTransactionObject<string>;

    gat(): NonPayableTransactionObject<string>;

    getCurrentRoundId(): NonPayableTransactionObject<string>;

    getCurrentTime(): NonPayableTransactionObject<string>;

    getNumberOfPriceRequests(): NonPayableTransactionObject<{
      numberPendingPriceRequests: string;
      numberResolvedPriceRequests: string;
      0: string;
      1: string;
    }>;

    getNumberOfPriceRequestsPostUpdate(): NonPayableTransactionObject<{
      numberPendingPriceRequests: string;
      numberResolvedPriceRequests: string;
      0: string;
      1: string;
    }>;

    getPendingPriceRequestsArray(): NonPayableTransactionObject<string[]>;

    getPendingRequests(): NonPayableTransactionObject<
      [string, boolean, string, string, string, string][]
    >;

    "getPrice(bytes32,uint256,bytes)"(
      identifier: string | number[],
      time: number | string | BN,
      ancillaryData: string | number[]
    ): NonPayableTransactionObject<string>;

    "getPrice(bytes32,uint256)"(
      identifier: string | number[],
      time: number | string | BN
    ): NonPayableTransactionObject<string>;

    "getPriceRequestStatuses(tuple[])"(
      requests: [string | number[], number | string | BN, string | number[]][]
    ): NonPayableTransactionObject<[string, string][]>;

    "getPriceRequestStatuses(tuple[])"(
      requests: [string | number[], number | string | BN][]
    ): NonPayableTransactionObject<[string, string][]>;

    getRoundEndTime(
      roundId: number | string | BN
    ): NonPayableTransactionObject<string>;

    getRoundIdToVoteOnRequest(
      targetRoundId: number | string | BN
    ): NonPayableTransactionObject<string>;

    getVotePhase(): NonPayableTransactionObject<string>;

    getVoterFromDelegate(caller: string): NonPayableTransactionObject<string>;

    getVoterParticipation(
      requestIndex: number | string | BN,
      lastVotingRound: number | string | BN,
      voter: string
    ): NonPayableTransactionObject<string>;

    getVoterPendingStake(
      voter: string,
      roundId: number | string | BN
    ): NonPayableTransactionObject<string>;

    getVoterStakePostUpdate(voter: string): NonPayableTransactionObject<string>;

    "hasPrice(bytes32,uint256)"(
      identifier: string | number[],
      time: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    "hasPrice(bytes32,uint256,bytes)"(
      identifier: string | number[],
      time: number | string | BN,
      ancillaryData: string | number[]
    ): NonPayableTransactionObject<boolean>;

    lastRoundIdProcessed(): NonPayableTransactionObject<string>;

    lastUpdateTime(): NonPayableTransactionObject<string>;

    maxRequestsPerRound(): NonPayableTransactionObject<string>;

    maxRolls(): NonPayableTransactionObject<string>;

    migratedAddress(): NonPayableTransactionObject<string>;

    multicall(
      data: (string | number[])[]
    ): NonPayableTransactionObject<string[]>;

    nextPendingIndexToProcess(): NonPayableTransactionObject<string>;

    outstandingRewards(voter: string): NonPayableTransactionObject<string>;

    owner(): NonPayableTransactionObject<string>;

    pendingPriceRequestsIds(
      arg0: number | string | BN
    ): NonPayableTransactionObject<string>;

    previousVotingContract(): NonPayableTransactionObject<string>;

    priceRequests(arg0: string | number[]): NonPayableTransactionObject<{
      lastVotingRound: string;
      isGovernance: boolean;
      time: string;
      rollCount: string;
      identifier: string;
      ancillaryData: string;
      0: string;
      1: boolean;
      2: string;
      3: string;
      4: string;
      5: string;
    }>;

    processResolvablePriceRequests(): NonPayableTransactionObject<void>;

    processResolvablePriceRequestsRange(
      maxTraversals: number | string | BN
    ): NonPayableTransactionObject<void>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    requestGovernanceAction(
      identifier: string | number[],
      time: number | string | BN,
      ancillaryData: string | number[]
    ): NonPayableTransactionObject<void>;

    "requestPrice(bytes32,uint256,bytes)"(
      identifier: string | number[],
      time: number | string | BN,
      ancillaryData: string | number[]
    ): NonPayableTransactionObject<void>;

    "requestPrice(bytes32,uint256)"(
      identifier: string | number[],
      time: number | string | BN
    ): NonPayableTransactionObject<void>;

    requestSlashingTrackers(
      requestIndex: number | string | BN
    ): NonPayableTransactionObject<[string, string, string, string, string]>;

    requestUnstake(
      amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    resolvedPriceRequestIds(
      arg0: number | string | BN
    ): NonPayableTransactionObject<string>;

    retrieveRewardsOnMigratedVotingContract(
      voter: string,
      roundId: number | string | BN,
      toRetrieve: [string | number[], number | string | BN, string | number[]][]
    ): NonPayableTransactionObject<string>;

    "revealVote(bytes32,uint256,int256,int256)"(
      identifier: string | number[],
      time: number | string | BN,
      price: number | string | BN,
      salt: number | string | BN
    ): NonPayableTransactionObject<void>;

    "revealVote(bytes32,uint256,int256,bytes,int256)"(
      identifier: string | number[],
      time: number | string | BN,
      price: number | string | BN,
      ancillaryData: string | number[],
      salt: number | string | BN
    ): NonPayableTransactionObject<void>;

    rewardPerToken(): NonPayableTransactionObject<string>;

    rewardPerTokenStored(): NonPayableTransactionObject<string>;

    rounds(arg0: number | string | BN): NonPayableTransactionObject<{
      slashingLibrary: string;
      minParticipationRequirement: string;
      minAgreementRequirement: string;
      cumulativeStakeAtRound: string;
      numberOfRequestsToVote: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
    }>;

    setCurrentTime(
      time: number | string | BN
    ): NonPayableTransactionObject<void>;

    setDelegate(delegate: string): NonPayableTransactionObject<void>;

    setDelegator(delegator: string): NonPayableTransactionObject<void>;

    setEmissionRate(
      newEmissionRate: number | string | BN
    ): NonPayableTransactionObject<void>;

    setGatAndSpat(
      newGat: number | string | BN,
      newSpat: number | string | BN
    ): NonPayableTransactionObject<void>;

    setMaxRequestPerRound(
      newMaxRequestsPerRound: number | string | BN
    ): NonPayableTransactionObject<void>;

    setMaxRolls(
      newMaxRolls: number | string | BN
    ): NonPayableTransactionObject<void>;

    setMigrated(newVotingAddress: string): NonPayableTransactionObject<void>;

    setSlashingLibrary(
      _newSlashingLibrary: string
    ): NonPayableTransactionObject<void>;

    setUnstakeCoolDown(
      newUnstakeCoolDown: number | string | BN
    ): NonPayableTransactionObject<void>;

    slashingLibrary(): NonPayableTransactionObject<string>;

    spat(): NonPayableTransactionObject<string>;

    stake(amount: number | string | BN): NonPayableTransactionObject<void>;

    stakeTo(
      recipient: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    timerAddress(): NonPayableTransactionObject<string>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    unstakeCoolDown(): NonPayableTransactionObject<string>;

    updateTrackers(voter: string): NonPayableTransactionObject<void>;

    updateTrackersRange(
      voter: string,
      maxTraversals: number | string | BN
    ): NonPayableTransactionObject<void>;

    voteTiming(): NonPayableTransactionObject<string>;

    voterStakes(arg0: string): NonPayableTransactionObject<{
      stake: string;
      pendingUnstake: string;
      rewardsPaidPerToken: string;
      outstandingRewards: string;
      unappliedSlash: string;
      nextIndexToProcess: string;
      unstakeTime: string;
      delegate: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: string;
      7: string;
    }>;

    votingToken(): NonPayableTransactionObject<string>;

    withdrawAndRestake(): NonPayableTransactionObject<string>;

    withdrawRewards(): NonPayableTransactionObject<string>;
  };
  events: {
    DelegateSet(cb?: Callback<DelegateSet>): EventEmitter;
    DelegateSet(
      options?: EventOptions,
      cb?: Callback<DelegateSet>
    ): EventEmitter;

    DelegatorSet(cb?: Callback<DelegatorSet>): EventEmitter;
    DelegatorSet(
      options?: EventOptions,
      cb?: Callback<DelegatorSet>
    ): EventEmitter;

    EncryptedVote(cb?: Callback<EncryptedVote>): EventEmitter;
    EncryptedVote(
      options?: EventOptions,
      cb?: Callback<EncryptedVote>
    ): EventEmitter;

    ExecutedUnstake(cb?: Callback<ExecutedUnstake>): EventEmitter;
    ExecutedUnstake(
      options?: EventOptions,
      cb?: Callback<ExecutedUnstake>
    ): EventEmitter;

    GatAndSpatChanged(cb?: Callback<GatAndSpatChanged>): EventEmitter;
    GatAndSpatChanged(
      options?: EventOptions,
      cb?: Callback<GatAndSpatChanged>
    ): EventEmitter;

    MaxRequestsPerRoundChanged(
      cb?: Callback<MaxRequestsPerRoundChanged>
    ): EventEmitter;
    MaxRequestsPerRoundChanged(
      options?: EventOptions,
      cb?: Callback<MaxRequestsPerRoundChanged>
    ): EventEmitter;

    MaxRollsChanged(cb?: Callback<MaxRollsChanged>): EventEmitter;
    MaxRollsChanged(
      options?: EventOptions,
      cb?: Callback<MaxRollsChanged>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    RequestAdded(cb?: Callback<RequestAdded>): EventEmitter;
    RequestAdded(
      options?: EventOptions,
      cb?: Callback<RequestAdded>
    ): EventEmitter;

    RequestDeleted(cb?: Callback<RequestDeleted>): EventEmitter;
    RequestDeleted(
      options?: EventOptions,
      cb?: Callback<RequestDeleted>
    ): EventEmitter;

    RequestResolved(cb?: Callback<RequestResolved>): EventEmitter;
    RequestResolved(
      options?: EventOptions,
      cb?: Callback<RequestResolved>
    ): EventEmitter;

    RequestRolled(cb?: Callback<RequestRolled>): EventEmitter;
    RequestRolled(
      options?: EventOptions,
      cb?: Callback<RequestRolled>
    ): EventEmitter;

    RequestedUnstake(cb?: Callback<RequestedUnstake>): EventEmitter;
    RequestedUnstake(
      options?: EventOptions,
      cb?: Callback<RequestedUnstake>
    ): EventEmitter;

    SetNewEmissionRate(cb?: Callback<SetNewEmissionRate>): EventEmitter;
    SetNewEmissionRate(
      options?: EventOptions,
      cb?: Callback<SetNewEmissionRate>
    ): EventEmitter;

    SetNewUnstakeCoolDown(cb?: Callback<SetNewUnstakeCoolDown>): EventEmitter;
    SetNewUnstakeCoolDown(
      options?: EventOptions,
      cb?: Callback<SetNewUnstakeCoolDown>
    ): EventEmitter;

    SlashingLibraryChanged(cb?: Callback<SlashingLibraryChanged>): EventEmitter;
    SlashingLibraryChanged(
      options?: EventOptions,
      cb?: Callback<SlashingLibraryChanged>
    ): EventEmitter;

    Staked(cb?: Callback<Staked>): EventEmitter;
    Staked(options?: EventOptions, cb?: Callback<Staked>): EventEmitter;

    UpdatedReward(cb?: Callback<UpdatedReward>): EventEmitter;
    UpdatedReward(
      options?: EventOptions,
      cb?: Callback<UpdatedReward>
    ): EventEmitter;

    VoteCommitted(cb?: Callback<VoteCommitted>): EventEmitter;
    VoteCommitted(
      options?: EventOptions,
      cb?: Callback<VoteCommitted>
    ): EventEmitter;

    VoteRevealed(cb?: Callback<VoteRevealed>): EventEmitter;
    VoteRevealed(
      options?: EventOptions,
      cb?: Callback<VoteRevealed>
    ): EventEmitter;

    VoterSlashApplied(cb?: Callback<VoterSlashApplied>): EventEmitter;
    VoterSlashApplied(
      options?: EventOptions,
      cb?: Callback<VoterSlashApplied>
    ): EventEmitter;

    VoterSlashed(cb?: Callback<VoterSlashed>): EventEmitter;
    VoterSlashed(
      options?: EventOptions,
      cb?: Callback<VoterSlashed>
    ): EventEmitter;

    VotingContractMigrated(cb?: Callback<VotingContractMigrated>): EventEmitter;
    VotingContractMigrated(
      options?: EventOptions,
      cb?: Callback<VotingContractMigrated>
    ): EventEmitter;

    WithdrawnRewards(cb?: Callback<WithdrawnRewards>): EventEmitter;
    WithdrawnRewards(
      options?: EventOptions,
      cb?: Callback<WithdrawnRewards>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "DelegateSet", cb: Callback<DelegateSet>): void;
  once(
    event: "DelegateSet",
    options: EventOptions,
    cb: Callback<DelegateSet>
  ): void;

  once(event: "DelegatorSet", cb: Callback<DelegatorSet>): void;
  once(
    event: "DelegatorSet",
    options: EventOptions,
    cb: Callback<DelegatorSet>
  ): void;

  once(event: "EncryptedVote", cb: Callback<EncryptedVote>): void;
  once(
    event: "EncryptedVote",
    options: EventOptions,
    cb: Callback<EncryptedVote>
  ): void;

  once(event: "ExecutedUnstake", cb: Callback<ExecutedUnstake>): void;
  once(
    event: "ExecutedUnstake",
    options: EventOptions,
    cb: Callback<ExecutedUnstake>
  ): void;

  once(event: "GatAndSpatChanged", cb: Callback<GatAndSpatChanged>): void;
  once(
    event: "GatAndSpatChanged",
    options: EventOptions,
    cb: Callback<GatAndSpatChanged>
  ): void;

  once(
    event: "MaxRequestsPerRoundChanged",
    cb: Callback<MaxRequestsPerRoundChanged>
  ): void;
  once(
    event: "MaxRequestsPerRoundChanged",
    options: EventOptions,
    cb: Callback<MaxRequestsPerRoundChanged>
  ): void;

  once(event: "MaxRollsChanged", cb: Callback<MaxRollsChanged>): void;
  once(
    event: "MaxRollsChanged",
    options: EventOptions,
    cb: Callback<MaxRollsChanged>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "RequestAdded", cb: Callback<RequestAdded>): void;
  once(
    event: "RequestAdded",
    options: EventOptions,
    cb: Callback<RequestAdded>
  ): void;

  once(event: "RequestDeleted", cb: Callback<RequestDeleted>): void;
  once(
    event: "RequestDeleted",
    options: EventOptions,
    cb: Callback<RequestDeleted>
  ): void;

  once(event: "RequestResolved", cb: Callback<RequestResolved>): void;
  once(
    event: "RequestResolved",
    options: EventOptions,
    cb: Callback<RequestResolved>
  ): void;

  once(event: "RequestRolled", cb: Callback<RequestRolled>): void;
  once(
    event: "RequestRolled",
    options: EventOptions,
    cb: Callback<RequestRolled>
  ): void;

  once(event: "RequestedUnstake", cb: Callback<RequestedUnstake>): void;
  once(
    event: "RequestedUnstake",
    options: EventOptions,
    cb: Callback<RequestedUnstake>
  ): void;

  once(event: "SetNewEmissionRate", cb: Callback<SetNewEmissionRate>): void;
  once(
    event: "SetNewEmissionRate",
    options: EventOptions,
    cb: Callback<SetNewEmissionRate>
  ): void;

  once(
    event: "SetNewUnstakeCoolDown",
    cb: Callback<SetNewUnstakeCoolDown>
  ): void;
  once(
    event: "SetNewUnstakeCoolDown",
    options: EventOptions,
    cb: Callback<SetNewUnstakeCoolDown>
  ): void;

  once(
    event: "SlashingLibraryChanged",
    cb: Callback<SlashingLibraryChanged>
  ): void;
  once(
    event: "SlashingLibraryChanged",
    options: EventOptions,
    cb: Callback<SlashingLibraryChanged>
  ): void;

  once(event: "Staked", cb: Callback<Staked>): void;
  once(event: "Staked", options: EventOptions, cb: Callback<Staked>): void;

  once(event: "UpdatedReward", cb: Callback<UpdatedReward>): void;
  once(
    event: "UpdatedReward",
    options: EventOptions,
    cb: Callback<UpdatedReward>
  ): void;

  once(event: "VoteCommitted", cb: Callback<VoteCommitted>): void;
  once(
    event: "VoteCommitted",
    options: EventOptions,
    cb: Callback<VoteCommitted>
  ): void;

  once(event: "VoteRevealed", cb: Callback<VoteRevealed>): void;
  once(
    event: "VoteRevealed",
    options: EventOptions,
    cb: Callback<VoteRevealed>
  ): void;

  once(event: "VoterSlashApplied", cb: Callback<VoterSlashApplied>): void;
  once(
    event: "VoterSlashApplied",
    options: EventOptions,
    cb: Callback<VoterSlashApplied>
  ): void;

  once(event: "VoterSlashed", cb: Callback<VoterSlashed>): void;
  once(
    event: "VoterSlashed",
    options: EventOptions,
    cb: Callback<VoterSlashed>
  ): void;

  once(
    event: "VotingContractMigrated",
    cb: Callback<VotingContractMigrated>
  ): void;
  once(
    event: "VotingContractMigrated",
    options: EventOptions,
    cb: Callback<VotingContractMigrated>
  ): void;

  once(event: "WithdrawnRewards", cb: Callback<WithdrawnRewards>): void;
  once(
    event: "WithdrawnRewards",
    options: EventOptions,
    cb: Callback<WithdrawnRewards>
  ): void;
}
