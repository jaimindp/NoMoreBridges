/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type AdminPropertiesSet = ContractEventLog<{
  defaultCurrency: string;
  defaultLiveness: string;
  burnedBondPercentage: string;
  0: string;
  1: string;
  2: string;
}>;
export type AssertionDisputed = ContractEventLog<{
  assertionId: string;
  caller: string;
  disputer: string;
  0: string;
  1: string;
  2: string;
}>;
export type AssertionMade = ContractEventLog<{
  assertionId: string;
  domainId: string;
  claim: string;
  asserter: string;
  callbackRecipient: string;
  escalationManager: string;
  caller: string;
  expirationTime: string;
  currency: string;
  bond: string;
  identifier: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
  6: string;
  7: string;
  8: string;
  9: string;
  10: string;
}>;
export type AssertionSettled = ContractEventLog<{
  assertionId: string;
  bondRecipient: string;
  disputed: boolean;
  settlementResolution: boolean;
  settleCaller: string;
  0: string;
  1: string;
  2: boolean;
  3: boolean;
  4: string;
}>;

export interface OptimisticOracleV3Interface extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): OptimisticOracleV3Interface;
  clone(): OptimisticOracleV3Interface;
  methods: {
    assertTruth(
      claim: string | number[],
      asserter: string,
      callbackRecipient: string,
      escalationManager: string,
      liveness: number | string | BN,
      currency: string,
      bond: number | string | BN,
      identifier: string | number[],
      domainId: string | number[]
    ): NonPayableTransactionObject<string>;

    assertTruthWithDefaults(
      claim: string | number[],
      asserter: string
    ): NonPayableTransactionObject<string>;

    defaultIdentifier(): NonPayableTransactionObject<string>;

    getAssertion(
      assertionId: string | number[]
    ): NonPayableTransactionObject<
      [
        [boolean, boolean, boolean, string, string],
        string,
        string,
        boolean,
        string,
        string,
        boolean,
        string,
        string,
        string,
        string,
        string
      ]
    >;

    getAssertionResult(
      assertionId: string | number[]
    ): NonPayableTransactionObject<boolean>;

    getMinimumBond(currency: string): NonPayableTransactionObject<string>;

    settleAndGetAssertionResult(
      assertionId: string | number[]
    ): NonPayableTransactionObject<boolean>;

    settleAssertion(
      assertionId: string | number[]
    ): NonPayableTransactionObject<void>;

    syncUmaParams(
      identifier: string | number[],
      currency: string
    ): NonPayableTransactionObject<void>;
  };
  events: {
    AdminPropertiesSet(cb?: Callback<AdminPropertiesSet>): EventEmitter;
    AdminPropertiesSet(
      options?: EventOptions,
      cb?: Callback<AdminPropertiesSet>
    ): EventEmitter;

    AssertionDisputed(cb?: Callback<AssertionDisputed>): EventEmitter;
    AssertionDisputed(
      options?: EventOptions,
      cb?: Callback<AssertionDisputed>
    ): EventEmitter;

    AssertionMade(cb?: Callback<AssertionMade>): EventEmitter;
    AssertionMade(
      options?: EventOptions,
      cb?: Callback<AssertionMade>
    ): EventEmitter;

    AssertionSettled(cb?: Callback<AssertionSettled>): EventEmitter;
    AssertionSettled(
      options?: EventOptions,
      cb?: Callback<AssertionSettled>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "AdminPropertiesSet", cb: Callback<AdminPropertiesSet>): void;
  once(
    event: "AdminPropertiesSet",
    options: EventOptions,
    cb: Callback<AdminPropertiesSet>
  ): void;

  once(event: "AssertionDisputed", cb: Callback<AssertionDisputed>): void;
  once(
    event: "AssertionDisputed",
    options: EventOptions,
    cb: Callback<AssertionDisputed>
  ): void;

  once(event: "AssertionMade", cb: Callback<AssertionMade>): void;
  once(
    event: "AssertionMade",
    options: EventOptions,
    cb: Callback<AssertionMade>
  ): void;

  once(event: "AssertionSettled", cb: Callback<AssertionSettled>): void;
  once(
    event: "AssertionSettled",
    options: EventOptions,
    cb: Callback<AssertionSettled>
  ): void;
}
