/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type DisputePrice = ContractEventLog<{
  requester: string;
  identifier: string;
  timestamp: string;
  ancillaryData: string;
  request: [
    string,
    string,
    string,
    boolean,
    [boolean, boolean, boolean, string, string],
    string,
    string,
    string,
    string,
    string
  ];
  0: string;
  1: string;
  2: string;
  3: string;
  4: [
    string,
    string,
    string,
    boolean,
    [boolean, boolean, boolean, string, string],
    string,
    string,
    string,
    string,
    string
  ];
}>;
export type ProposePrice = ContractEventLog<{
  requester: string;
  identifier: string;
  timestamp: string;
  ancillaryData: string;
  request: [
    string,
    string,
    string,
    boolean,
    [boolean, boolean, boolean, string, string],
    string,
    string,
    string,
    string,
    string
  ];
  0: string;
  1: string;
  2: string;
  3: string;
  4: [
    string,
    string,
    string,
    boolean,
    [boolean, boolean, boolean, string, string],
    string,
    string,
    string,
    string,
    string
  ];
}>;
export type RequestPrice = ContractEventLog<{
  requester: string;
  identifier: string;
  timestamp: string;
  ancillaryData: string;
  request: [
    string,
    string,
    string,
    boolean,
    [boolean, boolean, boolean, string, string],
    string,
    string,
    string,
    string,
    string
  ];
  0: string;
  1: string;
  2: string;
  3: string;
  4: [
    string,
    string,
    string,
    boolean,
    [boolean, boolean, boolean, string, string],
    string,
    string,
    string,
    string,
    string
  ];
}>;
export type Settle = ContractEventLog<{
  requester: string;
  identifier: string;
  timestamp: string;
  ancillaryData: string;
  request: [
    string,
    string,
    string,
    boolean,
    [boolean, boolean, boolean, string, string],
    string,
    string,
    string,
    string,
    string
  ];
  0: string;
  1: string;
  2: string;
  3: string;
  4: [
    string,
    string,
    string,
    boolean,
    [boolean, boolean, boolean, string, string],
    string,
    string,
    string,
    string,
    string
  ];
}>;

export interface SkinnyOptimisticOracleV2 extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): SkinnyOptimisticOracleV2;
  clone(): SkinnyOptimisticOracleV2;
  methods: {
    ancillaryBytesLimit(): NonPayableTransactionObject<string>;

    defaultLiveness(): NonPayableTransactionObject<string>;

    disputePrice(
      requester: string,
      identifier: string | number[],
      timestamp: number | string | BN,
      ancillaryData: string | number[],
      request: [
        string,
        string,
        string,
        boolean,
        [boolean, boolean, boolean, number | string | BN, number | string | BN],
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ]
    ): NonPayableTransactionObject<string>;

    disputePriceFor(
      identifier: string | number[],
      timestamp: number | string | BN,
      ancillaryData: string | number[],
      request: [
        string,
        string,
        string,
        boolean,
        [boolean, boolean, boolean, number | string | BN, number | string | BN],
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ],
      disputer: string,
      requester: string
    ): NonPayableTransactionObject<string>;

    finder(): NonPayableTransactionObject<string>;

    getCurrentTime(): NonPayableTransactionObject<string>;

    getState(
      requester: string,
      identifier: string | number[],
      timestamp: number | string | BN,
      ancillaryData: string | number[],
      request: [
        string,
        string,
        string,
        boolean,
        [boolean, boolean, boolean, number | string | BN, number | string | BN],
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ]
    ): NonPayableTransactionObject<string>;

    hasPrice(
      requester: string,
      identifier: string | number[],
      timestamp: number | string | BN,
      ancillaryData: string | number[],
      request: [
        string,
        string,
        string,
        boolean,
        [boolean, boolean, boolean, number | string | BN, number | string | BN],
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ]
    ): NonPayableTransactionObject<boolean>;

    proposePrice(
      requester: string,
      identifier: string | number[],
      timestamp: number | string | BN,
      ancillaryData: string | number[],
      request: [
        string,
        string,
        string,
        boolean,
        [boolean, boolean, boolean, number | string | BN, number | string | BN],
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ],
      proposedPrice: number | string | BN
    ): NonPayableTransactionObject<string>;

    proposePriceFor(
      requester: string,
      identifier: string | number[],
      timestamp: number | string | BN,
      ancillaryData: string | number[],
      request: [
        string,
        string,
        string,
        boolean,
        [boolean, boolean, boolean, number | string | BN, number | string | BN],
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ],
      proposer: string,
      proposedPrice: number | string | BN
    ): NonPayableTransactionObject<string>;

    requestAndProposePriceFor(
      identifier: string | number[],
      timestamp: number | string | BN,
      ancillaryData: string | number[],
      currency: string,
      reward: number | string | BN,
      requestSettings: [
        boolean,
        boolean,
        boolean,
        number | string | BN,
        number | string | BN
      ],
      proposer: string,
      proposedPrice: number | string | BN
    ): NonPayableTransactionObject<string>;

    requestPrice(
      identifier: string | number[],
      timestamp: number | string | BN,
      ancillaryData: string | number[],
      currency: string,
      reward: number | string | BN,
      requestSettings: [
        boolean,
        boolean,
        boolean,
        number | string | BN,
        number | string | BN
      ]
    ): NonPayableTransactionObject<string>;

    requests(arg0: string | number[]): NonPayableTransactionObject<string>;

    setCurrentTime(
      time: number | string | BN
    ): NonPayableTransactionObject<void>;

    settle(
      requester: string,
      identifier: string | number[],
      timestamp: number | string | BN,
      ancillaryData: string | number[],
      request: [
        string,
        string,
        string,
        boolean,
        [boolean, boolean, boolean, number | string | BN, number | string | BN],
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ]
    ): NonPayableTransactionObject<{
      payout: string;
      resolvedPrice: string;
      0: string;
      1: string;
    }>;

    stampAncillaryData(
      ancillaryData: string | number[],
      requester: string
    ): NonPayableTransactionObject<string>;

    timerAddress(): NonPayableTransactionObject<string>;
  };
  events: {
    DisputePrice(cb?: Callback<DisputePrice>): EventEmitter;
    DisputePrice(
      options?: EventOptions,
      cb?: Callback<DisputePrice>
    ): EventEmitter;

    ProposePrice(cb?: Callback<ProposePrice>): EventEmitter;
    ProposePrice(
      options?: EventOptions,
      cb?: Callback<ProposePrice>
    ): EventEmitter;

    RequestPrice(cb?: Callback<RequestPrice>): EventEmitter;
    RequestPrice(
      options?: EventOptions,
      cb?: Callback<RequestPrice>
    ): EventEmitter;

    Settle(cb?: Callback<Settle>): EventEmitter;
    Settle(options?: EventOptions, cb?: Callback<Settle>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "DisputePrice", cb: Callback<DisputePrice>): void;
  once(
    event: "DisputePrice",
    options: EventOptions,
    cb: Callback<DisputePrice>
  ): void;

  once(event: "ProposePrice", cb: Callback<ProposePrice>): void;
  once(
    event: "ProposePrice",
    options: EventOptions,
    cb: Callback<ProposePrice>
  ): void;

  once(event: "RequestPrice", cb: Callback<RequestPrice>): void;
  once(
    event: "RequestPrice",
    options: EventOptions,
    cb: Callback<RequestPrice>
  ): void;

  once(event: "Settle", cb: Callback<Settle>): void;
  once(event: "Settle", options: EventOptions, cb: Callback<Settle>): void;
}
