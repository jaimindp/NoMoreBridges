/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export interface OptimisticRequesterTest extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): OptimisticRequesterTest;
  clone(): OptimisticRequesterTest;
  methods: {
    ancillaryData(): NonPayableTransactionObject<string>;

    clearState(): NonPayableTransactionObject<void>;

    collateralCurrency(): NonPayableTransactionObject<string>;

    expirationTimestamp(): NonPayableTransactionObject<string>;

    identifier(): NonPayableTransactionObject<string>;

    price(): NonPayableTransactionObject<string>;

    priceDisputed(
      _identifier: string | number[],
      _timestamp: number | string | BN,
      _ancillaryData: string | number[],
      _refund: number | string | BN
    ): NonPayableTransactionObject<void>;

    priceProposed(
      _identifier: string | number[],
      _timestamp: number | string | BN,
      _ancillaryData: string | number[]
    ): NonPayableTransactionObject<void>;

    priceSettled(
      _identifier: string | number[],
      _timestamp: number | string | BN,
      _ancillaryData: string | number[],
      _price: number | string | BN
    ): NonPayableTransactionObject<void>;

    refund(): NonPayableTransactionObject<string>;

    requestPrice(
      _identifier: string | number[],
      _timestamp: number | string | BN,
      _ancillaryData: string | number[],
      currency: string,
      reward: number | string | BN
    ): NonPayableTransactionObject<void>;

    setBond(
      _identifier: string | number[],
      _timestamp: number | string | BN,
      _ancillaryData: string | number[],
      bond: number | string | BN
    ): NonPayableTransactionObject<void>;

    setCallbacks(
      _identifier: string | number[],
      _timestamp: number | string | BN,
      _ancillaryData: string | number[],
      _callbackOnPriceProposed: boolean,
      _callbackOnPriceDisputed: boolean,
      _callbackOnPriceSettled: boolean
    ): NonPayableTransactionObject<void>;

    setCustomLiveness(
      _identifier: string | number[],
      _timestamp: number | string | BN,
      _ancillaryData: string | number[],
      customLiveness: number | string | BN
    ): NonPayableTransactionObject<void>;

    setEventBased(
      _identifier: string | number[],
      _timestamp: number | string | BN,
      _ancillaryData: string | number[]
    ): NonPayableTransactionObject<void>;

    setExpirationTimestamp(
      _expirationTimestamp: number | string | BN
    ): NonPayableTransactionObject<void>;

    setRefundOnDispute(
      _identifier: string | number[],
      _timestamp: number | string | BN,
      _ancillaryData: string | number[]
    ): NonPayableTransactionObject<void>;

    setRevert(_shouldRevert: boolean): NonPayableTransactionObject<void>;

    settleAndGetPrice(
      _identifier: string | number[],
      _timestamp: number | string | BN,
      _ancillaryData: string | number[]
    ): NonPayableTransactionObject<string>;

    shouldRevert(): NonPayableTransactionObject<boolean>;

    timestamp(): NonPayableTransactionObject<string>;
  };
  events: {
    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };
}
