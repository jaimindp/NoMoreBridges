/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Burn = ContractEventLog<{
  owner: string;
  tickLower: string;
  tickUpper: string;
  amount: string;
  amount0: string;
  amount1: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
}>;
export type Collect = ContractEventLog<{
  owner: string;
  recipient: string;
  tickLower: string;
  tickUpper: string;
  amount0: string;
  amount1: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
}>;
export type CollectProtocol = ContractEventLog<{
  sender: string;
  recipient: string;
  amount0: string;
  amount1: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type Flash = ContractEventLog<{
  sender: string;
  recipient: string;
  amount0: string;
  amount1: string;
  paid0: string;
  paid1: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
}>;
export type IncreaseObservationCardinalityNext = ContractEventLog<{
  observationCardinalityNextOld: string;
  observationCardinalityNextNew: string;
  0: string;
  1: string;
}>;
export type Initialize = ContractEventLog<{
  sqrtPriceX96: string;
  tick: string;
  0: string;
  1: string;
}>;
export type Mint = ContractEventLog<{
  sender: string;
  owner: string;
  tickLower: string;
  tickUpper: string;
  amount: string;
  amount0: string;
  amount1: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
  6: string;
}>;
export type SetFeeProtocol = ContractEventLog<{
  feeProtocol0Old: string;
  feeProtocol1Old: string;
  feeProtocol0New: string;
  feeProtocol1New: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type Swap = ContractEventLog<{
  sender: string;
  recipient: string;
  amount0: string;
  amount1: string;
  sqrtPriceX96: string;
  liquidity: string;
  tick: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
  6: string;
}>;

export interface IUniswapV3PoolEvents extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): IUniswapV3PoolEvents;
  clone(): IUniswapV3PoolEvents;
  methods: {};
  events: {
    Burn(cb?: Callback<Burn>): EventEmitter;
    Burn(options?: EventOptions, cb?: Callback<Burn>): EventEmitter;

    Collect(cb?: Callback<Collect>): EventEmitter;
    Collect(options?: EventOptions, cb?: Callback<Collect>): EventEmitter;

    CollectProtocol(cb?: Callback<CollectProtocol>): EventEmitter;
    CollectProtocol(
      options?: EventOptions,
      cb?: Callback<CollectProtocol>
    ): EventEmitter;

    Flash(cb?: Callback<Flash>): EventEmitter;
    Flash(options?: EventOptions, cb?: Callback<Flash>): EventEmitter;

    IncreaseObservationCardinalityNext(
      cb?: Callback<IncreaseObservationCardinalityNext>
    ): EventEmitter;
    IncreaseObservationCardinalityNext(
      options?: EventOptions,
      cb?: Callback<IncreaseObservationCardinalityNext>
    ): EventEmitter;

    Initialize(cb?: Callback<Initialize>): EventEmitter;
    Initialize(options?: EventOptions, cb?: Callback<Initialize>): EventEmitter;

    Mint(cb?: Callback<Mint>): EventEmitter;
    Mint(options?: EventOptions, cb?: Callback<Mint>): EventEmitter;

    SetFeeProtocol(cb?: Callback<SetFeeProtocol>): EventEmitter;
    SetFeeProtocol(
      options?: EventOptions,
      cb?: Callback<SetFeeProtocol>
    ): EventEmitter;

    Swap(cb?: Callback<Swap>): EventEmitter;
    Swap(options?: EventOptions, cb?: Callback<Swap>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Burn", cb: Callback<Burn>): void;
  once(event: "Burn", options: EventOptions, cb: Callback<Burn>): void;

  once(event: "Collect", cb: Callback<Collect>): void;
  once(event: "Collect", options: EventOptions, cb: Callback<Collect>): void;

  once(event: "CollectProtocol", cb: Callback<CollectProtocol>): void;
  once(
    event: "CollectProtocol",
    options: EventOptions,
    cb: Callback<CollectProtocol>
  ): void;

  once(event: "Flash", cb: Callback<Flash>): void;
  once(event: "Flash", options: EventOptions, cb: Callback<Flash>): void;

  once(
    event: "IncreaseObservationCardinalityNext",
    cb: Callback<IncreaseObservationCardinalityNext>
  ): void;
  once(
    event: "IncreaseObservationCardinalityNext",
    options: EventOptions,
    cb: Callback<IncreaseObservationCardinalityNext>
  ): void;

  once(event: "Initialize", cb: Callback<Initialize>): void;
  once(
    event: "Initialize",
    options: EventOptions,
    cb: Callback<Initialize>
  ): void;

  once(event: "Mint", cb: Callback<Mint>): void;
  once(event: "Mint", options: EventOptions, cb: Callback<Mint>): void;

  once(event: "SetFeeProtocol", cb: Callback<SetFeeProtocol>): void;
  once(
    event: "SetFeeProtocol",
    options: EventOptions,
    cb: Callback<SetFeeProtocol>
  ): void;

  once(event: "Swap", cb: Callback<Swap>): void;
  once(event: "Swap", options: EventOptions, cb: Callback<Swap>): void;
}
