/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type AvatarSet = ContractEventLog<{
  previousAvatar: string;
  newAvatar: string;
  0: string;
  1: string;
}>;
export type ChangedGuard = ContractEventLog<{
  guard: string;
  0: string;
}>;
export type Initialized = ContractEventLog<{
  version: string;
  0: string;
}>;
export type OptimisticGovernorDeployed = ContractEventLog<{
  owner: string;
  avatar: string;
  target: string;
  0: string;
  1: string;
  2: string;
}>;
export type OptimisticOracleChanged = ContractEventLog<{
  newOptimisticOracleV3: string;
  0: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type ProposalDeleted = ContractEventLog<{
  proposalHash: string;
  assertionId: string;
  0: string;
  1: string;
}>;
export type ProposalExecuted = ContractEventLog<{
  proposalHash: string;
  assertionId: string;
  0: string;
  1: string;
}>;
export type SetCollateralAndBond = ContractEventLog<{
  collateral: string;
  bondAmount: string;
  0: string;
  1: string;
}>;
export type SetEscalationManager = ContractEventLog<{
  escalationManager: string;
  0: string;
}>;
export type SetIdentifier = ContractEventLog<{
  identifier: string;
  0: string;
}>;
export type SetLiveness = ContractEventLog<{
  liveness: string;
  0: string;
}>;
export type SetRules = ContractEventLog<{
  rules: string;
  0: string;
}>;
export type TargetSet = ContractEventLog<{
  previousTarget: string;
  newTarget: string;
  0: string;
  1: string;
}>;
export type TransactionExecuted = ContractEventLog<{
  proposalHash: string;
  assertionId: string;
  transactionIndex: string;
  0: string;
  1: string;
  2: string;
}>;
export type TransactionsProposed = ContractEventLog<{
  proposer: string;
  proposalTime: string;
  assertionId: string;
  proposal: [[string, string, string, string][], string];
  proposalHash: string;
  explanation: string;
  rules: string;
  challengeWindowEnds: string;
  0: string;
  1: string;
  2: string;
  3: [[string, string, string, string][], string];
  4: string;
  5: string;
  6: string;
  7: string;
}>;

export interface OptimisticGovernorTest extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): OptimisticGovernorTest;
  clone(): OptimisticGovernorTest;
  methods: {
    EXPLANATION_KEY(): NonPayableTransactionObject<string>;

    PROPOSAL_HASH_KEY(): NonPayableTransactionObject<string>;

    RULES_KEY(): NonPayableTransactionObject<string>;

    assertionDisputedCallback(
      assertionId: string | number[]
    ): NonPayableTransactionObject<void>;

    assertionIds(arg0: string | number[]): NonPayableTransactionObject<string>;

    assertionResolvedCallback(
      assertionId: string | number[],
      assertedTruthfully: boolean
    ): NonPayableTransactionObject<void>;

    avatar(): NonPayableTransactionObject<string>;

    bondAmount(): NonPayableTransactionObject<string>;

    collateral(): NonPayableTransactionObject<string>;

    deleteProposalOnUpgrade(
      proposalHash: string | number[]
    ): NonPayableTransactionObject<void>;

    escalationManager(): NonPayableTransactionObject<string>;

    executeProposal(
      transactions: [
        string,
        number | string | BN,
        number | string | BN,
        string | number[]
      ][]
    ): NonPayableTransactionObject<void>;

    finder(): NonPayableTransactionObject<string>;

    getCurrentTime(): NonPayableTransactionObject<string>;

    getGuard(): NonPayableTransactionObject<string>;

    getProposalBond(): NonPayableTransactionObject<string>;

    guard(): NonPayableTransactionObject<string>;

    identifier(): NonPayableTransactionObject<string>;

    liveness(): NonPayableTransactionObject<string>;

    optimisticOracleV3(): NonPayableTransactionObject<string>;

    owner(): NonPayableTransactionObject<string>;

    proposalHashes(
      arg0: string | number[]
    ): NonPayableTransactionObject<string>;

    proposeTransactions(
      transactions: [
        string,
        number | string | BN,
        number | string | BN,
        string | number[]
      ][],
      explanation: string | number[]
    ): NonPayableTransactionObject<void>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    rules(): NonPayableTransactionObject<string>;

    setAvatar(_avatar: string): NonPayableTransactionObject<void>;

    setCollateralAndBond(
      _collateral: string,
      _bondAmount: number | string | BN
    ): NonPayableTransactionObject<void>;

    setCurrentTime(
      time: number | string | BN
    ): NonPayableTransactionObject<void>;

    setEscalationManager(
      _escalationManager: string
    ): NonPayableTransactionObject<void>;

    setGuard(_guard: string): NonPayableTransactionObject<void>;

    setIdentifier(
      _identifier: string | number[]
    ): NonPayableTransactionObject<void>;

    setLiveness(
      _liveness: number | string | BN
    ): NonPayableTransactionObject<void>;

    setRules(_rules: string): NonPayableTransactionObject<void>;

    setTarget(_target: string): NonPayableTransactionObject<void>;

    setTimer(_timerAddress: string): NonPayableTransactionObject<void>;

    setUp(
      initializeParams: string | number[]
    ): NonPayableTransactionObject<void>;

    sync(): NonPayableTransactionObject<void>;

    target(): NonPayableTransactionObject<string>;

    timerAddress(): NonPayableTransactionObject<string>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;
  };
  events: {
    AvatarSet(cb?: Callback<AvatarSet>): EventEmitter;
    AvatarSet(options?: EventOptions, cb?: Callback<AvatarSet>): EventEmitter;

    ChangedGuard(cb?: Callback<ChangedGuard>): EventEmitter;
    ChangedGuard(
      options?: EventOptions,
      cb?: Callback<ChangedGuard>
    ): EventEmitter;

    Initialized(cb?: Callback<Initialized>): EventEmitter;
    Initialized(
      options?: EventOptions,
      cb?: Callback<Initialized>
    ): EventEmitter;

    OptimisticGovernorDeployed(
      cb?: Callback<OptimisticGovernorDeployed>
    ): EventEmitter;
    OptimisticGovernorDeployed(
      options?: EventOptions,
      cb?: Callback<OptimisticGovernorDeployed>
    ): EventEmitter;

    OptimisticOracleChanged(
      cb?: Callback<OptimisticOracleChanged>
    ): EventEmitter;
    OptimisticOracleChanged(
      options?: EventOptions,
      cb?: Callback<OptimisticOracleChanged>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    ProposalDeleted(cb?: Callback<ProposalDeleted>): EventEmitter;
    ProposalDeleted(
      options?: EventOptions,
      cb?: Callback<ProposalDeleted>
    ): EventEmitter;

    ProposalExecuted(cb?: Callback<ProposalExecuted>): EventEmitter;
    ProposalExecuted(
      options?: EventOptions,
      cb?: Callback<ProposalExecuted>
    ): EventEmitter;

    SetCollateralAndBond(cb?: Callback<SetCollateralAndBond>): EventEmitter;
    SetCollateralAndBond(
      options?: EventOptions,
      cb?: Callback<SetCollateralAndBond>
    ): EventEmitter;

    SetEscalationManager(cb?: Callback<SetEscalationManager>): EventEmitter;
    SetEscalationManager(
      options?: EventOptions,
      cb?: Callback<SetEscalationManager>
    ): EventEmitter;

    SetIdentifier(cb?: Callback<SetIdentifier>): EventEmitter;
    SetIdentifier(
      options?: EventOptions,
      cb?: Callback<SetIdentifier>
    ): EventEmitter;

    SetLiveness(cb?: Callback<SetLiveness>): EventEmitter;
    SetLiveness(
      options?: EventOptions,
      cb?: Callback<SetLiveness>
    ): EventEmitter;

    SetRules(cb?: Callback<SetRules>): EventEmitter;
    SetRules(options?: EventOptions, cb?: Callback<SetRules>): EventEmitter;

    TargetSet(cb?: Callback<TargetSet>): EventEmitter;
    TargetSet(options?: EventOptions, cb?: Callback<TargetSet>): EventEmitter;

    TransactionExecuted(cb?: Callback<TransactionExecuted>): EventEmitter;
    TransactionExecuted(
      options?: EventOptions,
      cb?: Callback<TransactionExecuted>
    ): EventEmitter;

    TransactionsProposed(cb?: Callback<TransactionsProposed>): EventEmitter;
    TransactionsProposed(
      options?: EventOptions,
      cb?: Callback<TransactionsProposed>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "AvatarSet", cb: Callback<AvatarSet>): void;
  once(
    event: "AvatarSet",
    options: EventOptions,
    cb: Callback<AvatarSet>
  ): void;

  once(event: "ChangedGuard", cb: Callback<ChangedGuard>): void;
  once(
    event: "ChangedGuard",
    options: EventOptions,
    cb: Callback<ChangedGuard>
  ): void;

  once(event: "Initialized", cb: Callback<Initialized>): void;
  once(
    event: "Initialized",
    options: EventOptions,
    cb: Callback<Initialized>
  ): void;

  once(
    event: "OptimisticGovernorDeployed",
    cb: Callback<OptimisticGovernorDeployed>
  ): void;
  once(
    event: "OptimisticGovernorDeployed",
    options: EventOptions,
    cb: Callback<OptimisticGovernorDeployed>
  ): void;

  once(
    event: "OptimisticOracleChanged",
    cb: Callback<OptimisticOracleChanged>
  ): void;
  once(
    event: "OptimisticOracleChanged",
    options: EventOptions,
    cb: Callback<OptimisticOracleChanged>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "ProposalDeleted", cb: Callback<ProposalDeleted>): void;
  once(
    event: "ProposalDeleted",
    options: EventOptions,
    cb: Callback<ProposalDeleted>
  ): void;

  once(event: "ProposalExecuted", cb: Callback<ProposalExecuted>): void;
  once(
    event: "ProposalExecuted",
    options: EventOptions,
    cb: Callback<ProposalExecuted>
  ): void;

  once(event: "SetCollateralAndBond", cb: Callback<SetCollateralAndBond>): void;
  once(
    event: "SetCollateralAndBond",
    options: EventOptions,
    cb: Callback<SetCollateralAndBond>
  ): void;

  once(event: "SetEscalationManager", cb: Callback<SetEscalationManager>): void;
  once(
    event: "SetEscalationManager",
    options: EventOptions,
    cb: Callback<SetEscalationManager>
  ): void;

  once(event: "SetIdentifier", cb: Callback<SetIdentifier>): void;
  once(
    event: "SetIdentifier",
    options: EventOptions,
    cb: Callback<SetIdentifier>
  ): void;

  once(event: "SetLiveness", cb: Callback<SetLiveness>): void;
  once(
    event: "SetLiveness",
    options: EventOptions,
    cb: Callback<SetLiveness>
  ): void;

  once(event: "SetRules", cb: Callback<SetRules>): void;
  once(event: "SetRules", options: EventOptions, cb: Callback<SetRules>): void;

  once(event: "TargetSet", cb: Callback<TargetSet>): void;
  once(
    event: "TargetSet",
    options: EventOptions,
    cb: Callback<TargetSet>
  ): void;

  once(event: "TransactionExecuted", cb: Callback<TransactionExecuted>): void;
  once(
    event: "TransactionExecuted",
    options: EventOptions,
    cb: Callback<TransactionExecuted>
  ): void;

  once(event: "TransactionsProposed", cb: Callback<TransactionsProposed>): void;
  once(
    event: "TransactionsProposed",
    options: EventOptions,
    cb: Callback<TransactionsProposed>
  ): void;
}
