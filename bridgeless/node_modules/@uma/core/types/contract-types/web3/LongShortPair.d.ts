/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type ContractExpired = ContractEventLog<{
  caller: string;
  0: string;
}>;
export type EarlyExpirationRequested = ContractEventLog<{
  caller: string;
  earlyExpirationTimeStamp: string;
  0: string;
  1: string;
}>;
export type PositionSettled = ContractEventLog<{
  sponsor: string;
  collateralReturned: string;
  longTokens: string;
  shortTokens: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type TokensCreated = ContractEventLog<{
  sponsor: string;
  collateralUsed: string;
  tokensMinted: string;
  0: string;
  1: string;
  2: string;
}>;
export type TokensRedeemed = ContractEventLog<{
  sponsor: string;
  collateralReturned: string;
  tokensRedeemed: string;
  0: string;
  1: string;
  2: string;
}>;

export interface LongShortPair extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): LongShortPair;
  clone(): LongShortPair;
  methods: {
    collateralPerPair(): NonPayableTransactionObject<string>;

    collateralToken(): NonPayableTransactionObject<string>;

    create(
      tokensToCreate: number | string | BN
    ): NonPayableTransactionObject<string>;

    customAncillaryData(): NonPayableTransactionObject<string>;

    earlyExpirationTimestamp(): NonPayableTransactionObject<string>;

    enableEarlyExpiration(): NonPayableTransactionObject<boolean>;

    expirationTimestamp(): NonPayableTransactionObject<string>;

    expire(): NonPayableTransactionObject<void>;

    expiryPercentLong(): NonPayableTransactionObject<string>;

    expiryPrice(): NonPayableTransactionObject<string>;

    financialProductLibrary(): NonPayableTransactionObject<string>;

    finder(): NonPayableTransactionObject<string>;

    getCurrentTime(): NonPayableTransactionObject<string>;

    getEarlyExpirationAncillaryData(): NonPayableTransactionObject<string>;

    getPositionTokens(sponsor: string): NonPayableTransactionObject<{
      longTokens: string;
      shortTokens: string;
      0: string;
      1: string;
    }>;

    ignoreEarlyExpirationPrice(): NonPayableTransactionObject<string>;

    isContractEarlyExpired(): NonPayableTransactionObject<boolean>;

    longToken(): NonPayableTransactionObject<string>;

    optimisticOracleLivenessTime(): NonPayableTransactionObject<string>;

    optimisticOracleProposerBond(): NonPayableTransactionObject<string>;

    pairName(): NonPayableTransactionObject<string>;

    priceIdentifier(): NonPayableTransactionObject<string>;

    proposerReward(): NonPayableTransactionObject<string>;

    receivedSettlementPrice(): NonPayableTransactionObject<boolean>;

    redeem(
      tokensToRedeem: number | string | BN
    ): NonPayableTransactionObject<string>;

    requestEarlyExpiration(
      _earlyExpirationTimestamp: number | string | BN
    ): NonPayableTransactionObject<void>;

    setCurrentTime(
      time: number | string | BN
    ): NonPayableTransactionObject<void>;

    settle(
      longTokensToRedeem: number | string | BN,
      shortTokensToRedeem: number | string | BN
    ): NonPayableTransactionObject<string>;

    shortToken(): NonPayableTransactionObject<string>;

    timerAddress(): NonPayableTransactionObject<string>;
  };
  events: {
    ContractExpired(cb?: Callback<ContractExpired>): EventEmitter;
    ContractExpired(
      options?: EventOptions,
      cb?: Callback<ContractExpired>
    ): EventEmitter;

    EarlyExpirationRequested(
      cb?: Callback<EarlyExpirationRequested>
    ): EventEmitter;
    EarlyExpirationRequested(
      options?: EventOptions,
      cb?: Callback<EarlyExpirationRequested>
    ): EventEmitter;

    PositionSettled(cb?: Callback<PositionSettled>): EventEmitter;
    PositionSettled(
      options?: EventOptions,
      cb?: Callback<PositionSettled>
    ): EventEmitter;

    TokensCreated(cb?: Callback<TokensCreated>): EventEmitter;
    TokensCreated(
      options?: EventOptions,
      cb?: Callback<TokensCreated>
    ): EventEmitter;

    TokensRedeemed(cb?: Callback<TokensRedeemed>): EventEmitter;
    TokensRedeemed(
      options?: EventOptions,
      cb?: Callback<TokensRedeemed>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "ContractExpired", cb: Callback<ContractExpired>): void;
  once(
    event: "ContractExpired",
    options: EventOptions,
    cb: Callback<ContractExpired>
  ): void;

  once(
    event: "EarlyExpirationRequested",
    cb: Callback<EarlyExpirationRequested>
  ): void;
  once(
    event: "EarlyExpirationRequested",
    options: EventOptions,
    cb: Callback<EarlyExpirationRequested>
  ): void;

  once(event: "PositionSettled", cb: Callback<PositionSettled>): void;
  once(
    event: "PositionSettled",
    options: EventOptions,
    cb: Callback<PositionSettled>
  ): void;

  once(event: "TokensCreated", cb: Callback<TokensCreated>): void;
  once(
    event: "TokensCreated",
    options: EventOptions,
    cb: Callback<TokensCreated>
  ): void;

  once(event: "TokensRedeemed", cb: Callback<TokensRedeemed>): void;
  once(
    event: "TokensRedeemed",
    options: EventOptions,
    cb: Callback<TokensRedeemed>
  ): void;
}
