/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type ProposalCreated = ContractEventLog<{
  sponsor: string;
  rewardToken: string;
  rewardIndex: string;
  proposalTimestamp: string;
  maximumRewardAmount: string;
  proposalId: string;
  merkleRoot: string;
  ipfsHash: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
  6: string;
  7: string;
}>;
export type ProposalRejected = ContractEventLog<{
  rewardIndex: string;
  proposalId: string;
  0: string;
  1: string;
}>;
export type RewardCreated = ContractEventLog<{
  sponsor: string;
  rewardToken: string;
  rewardIndex: string;
  maximumRewardAmount: string;
  earliestProposalTimestamp: string;
  optimisticOracleProposerBond: string;
  optimisticOracleLivenessTime: string;
  priceIdentifier: string;
  customAncillaryData: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
  6: string;
  7: string;
  8: string;
}>;
export type RewardDistributed = ContractEventLog<{
  sponsor: string;
  rewardToken: string;
  rewardIndex: string;
  maximumRewardAmount: string;
  proposalId: string;
  merkleRoot: string;
  ipfsHash: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
  6: string;
}>;
export type RewardIncreased = ContractEventLog<{
  rewardIndex: string;
  newMaximumRewardAmount: string;
  0: string;
  1: string;
}>;

export interface OptimisticDistributor extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): OptimisticDistributor;
  clone(): OptimisticDistributor;
  methods: {
    ANCILLARY_BYTES_RESERVE(): NonPayableTransactionObject<string>;

    MAXIMUM_LIVENESS(): NonPayableTransactionObject<string>;

    MINIMUM_LIVENESS(): NonPayableTransactionObject<string>;

    ancillaryBytesLimit(): NonPayableTransactionObject<string>;

    bondToken(): NonPayableTransactionObject<string>;

    createReward(
      maximumRewardAmount: number | string | BN,
      earliestProposalTimestamp: number | string | BN,
      optimisticOracleProposerBond: number | string | BN,
      optimisticOracleLivenessTime: number | string | BN,
      priceIdentifier: string | number[],
      rewardToken: string,
      customAncillaryData: string | number[]
    ): NonPayableTransactionObject<void>;

    executeDistribution(
      proposalId: string | number[]
    ): NonPayableTransactionObject<void>;

    finder(): NonPayableTransactionObject<string>;

    getCurrentTime(): NonPayableTransactionObject<string>;

    increaseReward(
      rewardIndex: number | string | BN,
      additionalRewardAmount: number | string | BN
    ): NonPayableTransactionObject<void>;

    maximumFundingPeriod(): NonPayableTransactionObject<string>;

    maximumProposerBond(): NonPayableTransactionObject<string>;

    merkleDistributor(): NonPayableTransactionObject<string>;

    multicall(
      data: (string | number[])[]
    ): NonPayableTransactionObject<string[]>;

    optimisticOracle(): NonPayableTransactionObject<string>;

    proposals(arg0: string | number[]): NonPayableTransactionObject<{
      rewardIndex: string;
      timestamp: string;
      merkleRoot: string;
      ipfsHash: string;
      0: string;
      1: string;
      2: string;
      3: string;
    }>;

    proposeDistribution(
      rewardIndex: number | string | BN,
      merkleRoot: string | number[],
      ipfsHash: string
    ): NonPayableTransactionObject<void>;

    rewards(arg0: number | string | BN): NonPayableTransactionObject<{
      distributionExecuted: boolean;
      sponsor: string;
      rewardToken: string;
      maximumRewardAmount: string;
      earliestProposalTimestamp: string;
      optimisticOracleProposerBond: string;
      optimisticOracleLivenessTime: string;
      previousProposalTimestamp: string;
      priceIdentifier: string;
      customAncillaryData: string;
      0: boolean;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: string;
      7: string;
      8: string;
      9: string;
    }>;

    setCurrentTime(
      time: number | string | BN
    ): NonPayableTransactionObject<void>;

    syncUmaEcosystemParams(): NonPayableTransactionObject<void>;

    timerAddress(): NonPayableTransactionObject<string>;
  };
  events: {
    ProposalCreated(cb?: Callback<ProposalCreated>): EventEmitter;
    ProposalCreated(
      options?: EventOptions,
      cb?: Callback<ProposalCreated>
    ): EventEmitter;

    ProposalRejected(cb?: Callback<ProposalRejected>): EventEmitter;
    ProposalRejected(
      options?: EventOptions,
      cb?: Callback<ProposalRejected>
    ): EventEmitter;

    RewardCreated(cb?: Callback<RewardCreated>): EventEmitter;
    RewardCreated(
      options?: EventOptions,
      cb?: Callback<RewardCreated>
    ): EventEmitter;

    RewardDistributed(cb?: Callback<RewardDistributed>): EventEmitter;
    RewardDistributed(
      options?: EventOptions,
      cb?: Callback<RewardDistributed>
    ): EventEmitter;

    RewardIncreased(cb?: Callback<RewardIncreased>): EventEmitter;
    RewardIncreased(
      options?: EventOptions,
      cb?: Callback<RewardIncreased>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "ProposalCreated", cb: Callback<ProposalCreated>): void;
  once(
    event: "ProposalCreated",
    options: EventOptions,
    cb: Callback<ProposalCreated>
  ): void;

  once(event: "ProposalRejected", cb: Callback<ProposalRejected>): void;
  once(
    event: "ProposalRejected",
    options: EventOptions,
    cb: Callback<ProposalRejected>
  ): void;

  once(event: "RewardCreated", cb: Callback<RewardCreated>): void;
  once(
    event: "RewardCreated",
    options: EventOptions,
    cb: Callback<RewardCreated>
  ): void;

  once(event: "RewardDistributed", cb: Callback<RewardDistributed>): void;
  once(
    event: "RewardDistributed",
    options: EventOptions,
    cb: Callback<RewardDistributed>
  ): void;

  once(event: "RewardIncreased", cb: Callback<RewardIncreased>): void;
  once(
    event: "RewardIncreased",
    options: EventOptions,
    cb: Callback<RewardIncreased>
  ): void;
}
