/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type MarketAsserted = ContractEventLog<{
  marketId: string;
  assertedOutcome: string;
  assertionId: string;
  0: string;
  1: string;
  2: string;
}>;
export type MarketInitialized = ContractEventLog<{
  marketId: string;
  outcome1: string;
  outcome2: string;
  description: string;
  outcome1Token: string;
  outcome2Token: string;
  reward: string;
  requiredBond: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
  6: string;
  7: string;
}>;
export type MarketResolved = ContractEventLog<{
  marketId: string;
  0: string;
}>;
export type TokensCreated = ContractEventLog<{
  marketId: string;
  account: string;
  tokensCreated: string;
  0: string;
  1: string;
  2: string;
}>;
export type TokensRedeemed = ContractEventLog<{
  marketId: string;
  account: string;
  tokensRedeemed: string;
  0: string;
  1: string;
  2: string;
}>;
export type TokensSettled = ContractEventLog<{
  marketId: string;
  account: string;
  payout: string;
  outcome1Tokens: string;
  outcome2Tokens: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;

export interface PredictionMarket extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): PredictionMarket;
  clone(): PredictionMarket;
  methods: {
    assertMarket(
      marketId: string | number[],
      assertedOutcome: string
    ): NonPayableTransactionObject<string>;

    assertedMarkets(arg0: string | number[]): NonPayableTransactionObject<{
      asserter: string;
      marketId: string;
      0: string;
      1: string;
    }>;

    assertionDisputedCallback(
      assertionId: string | number[]
    ): NonPayableTransactionObject<void>;

    assertionLiveness(): NonPayableTransactionObject<string>;

    assertionResolvedCallback(
      assertionId: string | number[],
      assertedTruthfully: boolean
    ): NonPayableTransactionObject<void>;

    createOutcomeTokens(
      marketId: string | number[],
      tokensToCreate: number | string | BN
    ): NonPayableTransactionObject<void>;

    currency(): NonPayableTransactionObject<string>;

    defaultIdentifier(): NonPayableTransactionObject<string>;

    finder(): NonPayableTransactionObject<string>;

    getMarket(
      marketId: string | number[]
    ): NonPayableTransactionObject<
      [boolean, string, string, string, string, string, string, string, string]
    >;

    initializeMarket(
      outcome1: string,
      outcome2: string,
      description: string,
      reward: number | string | BN,
      requiredBond: number | string | BN
    ): NonPayableTransactionObject<string>;

    markets(arg0: string | number[]): NonPayableTransactionObject<{
      resolved: boolean;
      assertedOutcomeId: string;
      outcome1Token: string;
      outcome2Token: string;
      reward: string;
      requiredBond: string;
      outcome1: string;
      outcome2: string;
      description: string;
      0: boolean;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: string;
      7: string;
      8: string;
    }>;

    oo(): NonPayableTransactionObject<string>;

    redeemOutcomeTokens(
      marketId: string | number[],
      tokensToRedeem: number | string | BN
    ): NonPayableTransactionObject<void>;

    settleOutcomeTokens(
      marketId: string | number[]
    ): NonPayableTransactionObject<string>;

    unresolvable(): NonPayableTransactionObject<string>;
  };
  events: {
    MarketAsserted(cb?: Callback<MarketAsserted>): EventEmitter;
    MarketAsserted(
      options?: EventOptions,
      cb?: Callback<MarketAsserted>
    ): EventEmitter;

    MarketInitialized(cb?: Callback<MarketInitialized>): EventEmitter;
    MarketInitialized(
      options?: EventOptions,
      cb?: Callback<MarketInitialized>
    ): EventEmitter;

    MarketResolved(cb?: Callback<MarketResolved>): EventEmitter;
    MarketResolved(
      options?: EventOptions,
      cb?: Callback<MarketResolved>
    ): EventEmitter;

    TokensCreated(cb?: Callback<TokensCreated>): EventEmitter;
    TokensCreated(
      options?: EventOptions,
      cb?: Callback<TokensCreated>
    ): EventEmitter;

    TokensRedeemed(cb?: Callback<TokensRedeemed>): EventEmitter;
    TokensRedeemed(
      options?: EventOptions,
      cb?: Callback<TokensRedeemed>
    ): EventEmitter;

    TokensSettled(cb?: Callback<TokensSettled>): EventEmitter;
    TokensSettled(
      options?: EventOptions,
      cb?: Callback<TokensSettled>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "MarketAsserted", cb: Callback<MarketAsserted>): void;
  once(
    event: "MarketAsserted",
    options: EventOptions,
    cb: Callback<MarketAsserted>
  ): void;

  once(event: "MarketInitialized", cb: Callback<MarketInitialized>): void;
  once(
    event: "MarketInitialized",
    options: EventOptions,
    cb: Callback<MarketInitialized>
  ): void;

  once(event: "MarketResolved", cb: Callback<MarketResolved>): void;
  once(
    event: "MarketResolved",
    options: EventOptions,
    cb: Callback<MarketResolved>
  ): void;

  once(event: "TokensCreated", cb: Callback<TokensCreated>): void;
  once(
    event: "TokensCreated",
    options: EventOptions,
    cb: Callback<TokensCreated>
  ): void;

  once(event: "TokensRedeemed", cb: Callback<TokensRedeemed>): void;
  once(
    event: "TokensRedeemed",
    options: EventOptions,
    cb: Callback<TokensRedeemed>
  ): void;

  once(event: "TokensSettled", cb: Callback<TokensSettled>): void;
  once(
    event: "TokensSettled",
    options: EventOptions,
    cb: Callback<TokensSettled>
  ): void;
}
