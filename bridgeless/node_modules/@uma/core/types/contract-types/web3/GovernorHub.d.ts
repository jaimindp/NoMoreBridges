/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type RelayedGovernanceRequest = ContractEventLog<{
  chainId: string;
  messenger: string;
  calls: [string, string][];
  dataSentToChild: string;
  0: string;
  1: string;
  2: [string, string][];
  3: string;
}>;
export type SetParentMessenger = ContractEventLog<{
  chainId: string;
  parentMessenger: string;
  0: string;
  1: string;
}>;

export interface GovernorHub extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): GovernorHub;
  clone(): GovernorHub;
  methods: {
    messengers(arg0: number | string | BN): NonPayableTransactionObject<string>;

    multicall(
      data: (string | number[])[]
    ): NonPayableTransactionObject<string[]>;

    owner(): NonPayableTransactionObject<string>;

    relayGovernance(
      chainId: number | string | BN,
      calls: [string, string | number[]][]
    ): NonPayableTransactionObject<void>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    setMessenger(
      chainId: number | string | BN,
      messenger: string
    ): NonPayableTransactionObject<void>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;
  };
  events: {
    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    RelayedGovernanceRequest(
      cb?: Callback<RelayedGovernanceRequest>
    ): EventEmitter;
    RelayedGovernanceRequest(
      options?: EventOptions,
      cb?: Callback<RelayedGovernanceRequest>
    ): EventEmitter;

    SetParentMessenger(cb?: Callback<SetParentMessenger>): EventEmitter;
    SetParentMessenger(
      options?: EventOptions,
      cb?: Callback<SetParentMessenger>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(
    event: "RelayedGovernanceRequest",
    cb: Callback<RelayedGovernanceRequest>
  ): void;
  once(
    event: "RelayedGovernanceRequest",
    options: EventOptions,
    cb: Callback<RelayedGovernanceRequest>
  ): void;

  once(event: "SetParentMessenger", cb: Callback<SetParentMessenger>): void;
  once(
    event: "SetParentMessenger",
    options: EventOptions,
    cb: Callback<SetParentMessenger>
  ): void;
}
