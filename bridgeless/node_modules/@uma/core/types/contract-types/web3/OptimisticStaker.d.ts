/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Deposit = ContractEventLog<{
  tokenId: string;
  amount: string;
  0: string;
  1: string;
}>;
export type Withdraw = ContractEventLog<{
  tokenId: string;
  amount: string;
  0: string;
  1: string;
}>;

export interface OptimisticStaker extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): OptimisticStaker;
  clone(): OptimisticStaker;
  methods: {
    balances(arg0: number | string | BN): NonPayableTransactionObject<string>;

    deposit(
      tokenId: number | string | BN,
      amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    depositFor(
      tokenId: number | string | BN,
      amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    depositNew(
      amount: number | string | BN
    ): NonPayableTransactionObject<string>;

    multicall(
      data: (string | number[])[]
    ): NonPayableTransactionObject<string[]>;

    optimisticRewarder(): NonPayableTransactionObject<string>;

    stakedToken(): NonPayableTransactionObject<string>;

    withdraw(
      tokenId: number | string | BN,
      amount: number | string | BN
    ): NonPayableTransactionObject<void>;
  };
  events: {
    Deposit(cb?: Callback<Deposit>): EventEmitter;
    Deposit(options?: EventOptions, cb?: Callback<Deposit>): EventEmitter;

    Withdraw(cb?: Callback<Withdraw>): EventEmitter;
    Withdraw(options?: EventOptions, cb?: Callback<Withdraw>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Deposit", cb: Callback<Deposit>): void;
  once(event: "Deposit", options: EventOptions, cb: Callback<Deposit>): void;

  once(event: "Withdraw", cb: Callback<Withdraw>): void;
  once(event: "Withdraw", options: EventOptions, cb: Callback<Withdraw>): void;
}
