"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataAsserter__factory = void 0;
const ethers_1 = require("ethers");
const _abi = [
    {
        inputs: [
            {
                internalType: "address",
                name: "_defaultCurrency",
                type: "address",
            },
            {
                internalType: "address",
                name: "_optimisticOracleV3",
                type: "address",
            },
        ],
        stateMutability: "nonpayable",
        type: "constructor",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "bytes32",
                name: "dataId",
                type: "bytes32",
            },
            {
                indexed: false,
                internalType: "bytes32",
                name: "data",
                type: "bytes32",
            },
            {
                indexed: true,
                internalType: "address",
                name: "asserter",
                type: "address",
            },
            {
                indexed: false,
                internalType: "bytes32",
                name: "assertionId",
                type: "bytes32",
            },
        ],
        name: "DataAsserted",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "bytes32",
                name: "dataId",
                type: "bytes32",
            },
            {
                indexed: false,
                internalType: "bytes32",
                name: "data",
                type: "bytes32",
            },
            {
                indexed: true,
                internalType: "address",
                name: "asserter",
                type: "address",
            },
            {
                indexed: false,
                internalType: "bytes32",
                name: "assertionId",
                type: "bytes32",
            },
        ],
        name: "DataAssertionResolved",
        type: "event",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "dataId",
                type: "bytes32",
            },
            {
                internalType: "bytes32",
                name: "data",
                type: "bytes32",
            },
            {
                internalType: "address",
                name: "asserter",
                type: "address",
            },
        ],
        name: "assertDataFor",
        outputs: [
            {
                internalType: "bytes32",
                name: "assertionId",
                type: "bytes32",
            },
        ],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "assertionId",
                type: "bytes32",
            },
        ],
        name: "assertionDisputedCallback",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [],
        name: "assertionLiveness",
        outputs: [
            {
                internalType: "uint64",
                name: "",
                type: "uint64",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "assertionId",
                type: "bytes32",
            },
            {
                internalType: "bool",
                name: "assertedTruthfully",
                type: "bool",
            },
        ],
        name: "assertionResolvedCallback",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32",
            },
        ],
        name: "assertionsData",
        outputs: [
            {
                internalType: "bytes32",
                name: "dataId",
                type: "bytes32",
            },
            {
                internalType: "bytes32",
                name: "data",
                type: "bytes32",
            },
            {
                internalType: "address",
                name: "asserter",
                type: "address",
            },
            {
                internalType: "bool",
                name: "resolved",
                type: "bool",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "defaultCurrency",
        outputs: [
            {
                internalType: "contract IERC20",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "defaultIdentifier",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "assertionId",
                type: "bytes32",
            },
        ],
        name: "getData",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool",
            },
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "oo",
        outputs: [
            {
                internalType: "contract OptimisticOracleV3Interface",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
];
const _bytecode = "0x60e06040523480156200001157600080fd5b5060405162001896380380620018968339810160408190526200003491620000d4565b6001600160a01b03808316608052811660a08190526040805163d509b01760e01b8152905163d509b017916004808201926020929091908290030181865afa15801562000085573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000ab91906200010c565b60c05250620001269050565b80516001600160a01b0381168114620000cf57600080fd5b919050565b60008060408385031215620000e857600080fd5b620000f383620000b7565b91506200010360208401620000b7565b90509250929050565b6000602082840312156200011f57600080fd5b5051919050565b60805160a05160c0516117026200019460003960008181610245015261057d015260008181610128015281816103630152818161044e0152818161047501526106ec01526000818160ad01528181610335015281816103ea0152818161042c015261055901526117026000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c8063b33893da11610076578063d448a4ec1161005b578063d448a4ec1461022d578063d509b01714610240578063f1b156b21461026757600080fd5b8063b33893da1461016b578063b75d4e241461020b57600080fd5b806320402e1d146100a857806354f6127f146100f95780638921a6141461012357806393ee663b1461014a575b600080fd5b6100cf7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b61010c61010736600461118a565b61027a565b6040805192151583526020830191909152016100f0565b6100cf7f000000000000000000000000000000000000000000000000000000000000000081565b61015d6101583660046111a3565b6102d2565b6040519081526020016100f0565b6101cd61017936600461118a565b60006020819052908152604090208054600182015460029092015490919073ffffffffffffffffffffffffffffffffffffffff81169074010000000000000000000000000000000000000000900460ff1684565b6040516100f09493929190938452602084019290925273ffffffffffffffffffffffffffffffffffffffff1660408301521515606082015260800190565b610214611c2081565b60405167ffffffffffffffff90911681526020016100f0565b61023e61023b36600461118a565b50565b005b61015d7f000000000000000000000000000000000000000000000000000000000000000081565b61023e610275366004611203565b6106d4565b600081815260208190526040812060020154819074010000000000000000000000000000000000000000900460ff166102b857506000928392509050565b505060009081526020819052604090206001908101549091565b600073ffffffffffffffffffffffffffffffffffffffff8216156102f657816102f8565b335b6040517f4360af3d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000811660048301529193506000917f00000000000000000000000000000000000000000000000000000000000000001690634360af3d90602401602060405180830381865afa1580156103aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ce9190611233565b905061041273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016333084610843565b61047373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083610925565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636457c9796104b886610ab1565b6104c188610ab1565b6104ca87610af2565b6104d342610b6a565b6104dc30610af2565b6040516020016104f095949392919061128c565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1682526105a79187903090600090611c20907f0000000000000000000000000000000000000000000000000000000000000000908a907f0000000000000000000000000000000000000000000000000000000000000000908590600401611460565b6020604051808303816000875af11580156105c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ea9190611233565b60408051608081018252878152602080820188815273ffffffffffffffffffffffffffffffffffffffff88811684860181815260006060870181815289825281875290889020965187559351600187015551600290950180549351151574010000000000000000000000000000000000000000027fffffffffffffffffffffff000000000000000000000000000000000000000000909416959092169490941791909117905582518881529081018490529294509187917f29ae27364abd65b112ad0ac18e7e4f97360c20afa9636864dc91195d4d9204ec910160405180910390a3509392505050565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461071657600080fd5b80156107fe57600082815260208181526040918290206002810180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff81167401000000000000000000000000000000000000000090811792839055855160808101875284548082526001959095015495810186905273ffffffffffffffffffffffffffffffffffffffff909216828701819052920460ff1615156060820152935190927fe49ab75dd8ad20084c43aacc9218434d61af074f44263f887212c41ad2d41c9d916107f191908890918252602082015260400190565b60405180910390a3505050565b506000908152602081905260408120818155600181019190915560020180547fffffffffffffffffffffff000000000000000000000000000000000000000000169055565b60405173ffffffffffffffffffffffffffffffffffffffff8085166024830152831660448201526064810182905261091f9085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610cca565b50505050565b8015806109c557506040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff838116602483015284169063dd62ed3e90604401602060405180830381865afa15801561099f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c39190611233565b155b610a56576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e63650000000000000000000060648201526084015b60405180910390fd5b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052610aac9084907f095ea7b3000000000000000000000000000000000000000000000000000000009060640161089d565b505050565b6060610ac0608083901c610dd9565b610ac983610dd9565b6040805160208101939093528201526060015b6040516020818303038152906040529050919050565b6060610b136fffffffffffffffffffffffffffffffff602084901c16610dd9565b610b2e8360601b6bffffffffffffffffffffffff1916610dd9565b604051602001610adc9291909182527fffffffffffffffff00000000000000000000000000000000000000000000000016602082015260280190565b606081600003610bad57505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b8115610bd75780610bc18161150a565b9150610bd09050600a83611571565b9150610bb1565b60008167ffffffffffffffff811115610bf257610bf26115ac565b6040519080825280601f01601f191660200182016040528015610c1c576020820181803683370190505b509050815b8515610cc157610c326001826115db565b90506000610c41600a88611571565b610c4c90600a6115f4565b610c5690886115db565b610c61906030611631565b905060008160f81b905080848481518110610c7e57610c7e61164a565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350610cb8600a89611571565b97505050610c21565b50949350505050565b6000610d2c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610f7b9092919063ffffffff16565b9050805160001480610d4d575080806020019051810190610d4d9190611679565b610aac576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610a4d565b6000808260001c9050806fffffffffffffffffffffffffffffffff169050806801000000000000000002811777ffffffffffffffff0000000000000000ffffffffffffffff169050806401000000000281177bffffffff00000000ffffffff00000000ffffffff00000000ffffffff16905080620100000281177dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff169050806101000281177eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff1690508060100281177f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f16905060006008827f08080808080808080808080808080808080808080808080808080808080808081681610efd57610efd611542565b0460047f040404040404040404040404040404040404040404040404040404040404040484160460027f020202020202020202020202020202020202020202020202020202020202020285160417166027029091017f3030303030303030303030303030303030303030303030303030303030303030019392505050565b6060610f8a8484600085610f92565b949350505050565b606082471015611024576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610a4d565b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161104d919061169d565b60006040518083038185875af1925050503d806000811461108a576040519150601f19603f3d011682016040523d82523d6000602084013e61108f565b606091505b50915091506110a0878383876110ab565b979650505050505050565b6060831561114157825160000361113a5773ffffffffffffffffffffffffffffffffffffffff85163b61113a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610a4d565b5081610f8a565b610f8a83838151156111565781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4d91906116b9565b60006020828403121561119c57600080fd5b5035919050565b6000806000606084860312156111b857600080fd5b8335925060208401359150604084013573ffffffffffffffffffffffffffffffffffffffff811681146111ea57600080fd5b809150509250925092565b801515811461023b57600080fd5b6000806040838503121561121657600080fd5b823591506020830135611228816111f5565b809150509250929050565b60006020828403121561124557600080fd5b5051919050565b60005b8381101561126757818101518382015260200161124f565b50506000910152565b6000815161128281856020860161124c565b9290920192915050565b7f446174612061737365727465643a20307800000000000000000000000000000081526000865160206112c58260118601838c0161124c565b7f20666f72206461746149643a2030780000000000000000000000000000000000601192850192830152875161130081838501848c0161124c565b7f20616e642061737365727465723a203078000000000000000000000000000000920181810192909252865161133c81603185018a850161124c565b6011818401019250507f2061742074696d657374616d703a20000000000000000000000000000000000081830152855161137c81602f8501848a0161124c565b600f818401019250507f20696e207468652044617461417373657274657220636f6e747261637420617481830152507f2030780000000000000000000000000000000000000000000000000000000000604082015261140a6113e16043830186611270565b7f2069732076616c69642e000000000000000000000000000000000000000000008152600a0190565b98975050505050505050565b6000815180845261142e81602086016020860161124c565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60006101208083526114748184018d611416565b73ffffffffffffffffffffffffffffffffffffffff9b8c166020850152998b1660408401525050958816606087015267ffffffffffffffff9490941660808601529190951660a084015260c083019490945260e08201939093526101000191909152919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361153b5761153b6114db565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000826115a7577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b818103818111156115ee576115ee6114db565b92915050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561162c5761162c6114db565b500290565b60ff81811683821601908111156115ee576115ee6114db565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020828403121561168b57600080fd5b8151611696816111f5565b9392505050565b600082516116af81846020870161124c565b9190910192915050565b602081526000611696602083018461141656fea2646970667358221220174efed8a0410c32cbf11a9853d901be6ac18f67ab1bb05dba647b80be5311e764736f6c63430008100033";
class DataAsserter__factory extends ethers_1.ContractFactory {
    constructor(...args) {
        if (args.length === 1) {
            super(_abi, _bytecode, args[0]);
        }
        else {
            super(...args);
        }
    }
    deploy(_defaultCurrency, _optimisticOracleV3, overrides) {
        return super.deploy(_defaultCurrency, _optimisticOracleV3, overrides || {});
    }
    getDeployTransaction(_defaultCurrency, _optimisticOracleV3, overrides) {
        return super.getDeployTransaction(_defaultCurrency, _optimisticOracleV3, overrides || {});
    }
    attach(address) {
        return super.attach(address);
    }
    connect(signer) {
        return super.connect(signer);
    }
    static createInterface() {
        return new ethers_1.utils.Interface(_abi);
    }
    static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    }
}
exports.DataAsserter__factory = DataAsserter__factory;
DataAsserter__factory.bytecode = _bytecode;
DataAsserter__factory.abi = _abi;
