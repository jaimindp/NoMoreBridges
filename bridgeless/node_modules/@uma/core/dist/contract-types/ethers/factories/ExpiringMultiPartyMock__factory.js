"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExpiringMultiPartyMock__factory = void 0;
const ethers_1 = require("ethers");
const _abi = [
    {
        inputs: [
            {
                internalType: "address",
                name: "_financialProductLibraryAddress",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "_expirationTimestamp",
                type: "uint256",
            },
            {
                components: [
                    {
                        internalType: "uint256",
                        name: "rawValue",
                        type: "uint256",
                    },
                ],
                internalType: "struct FixedPoint.Unsigned",
                name: "_collateralRequirement",
                type: "tuple",
            },
            {
                internalType: "bytes32",
                name: "_priceIdentifier",
                type: "bytes32",
            },
            {
                internalType: "address",
                name: "_timerAddress",
                type: "address",
            },
        ],
        stateMutability: "nonpayable",
        type: "constructor",
    },
    {
        inputs: [],
        name: "collateralRequirement",
        outputs: [
            {
                internalType: "uint256",
                name: "rawValue",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "expirationTimestamp",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "financialProductLibrary",
        outputs: [
            {
                internalType: "contract FinancialProductLibrary",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "getCurrentTime",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "priceIdentifier",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "time",
                type: "uint256",
            },
        ],
        name: "setCurrentTime",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [],
        name: "timerAddress",
        outputs: [
            {
                internalType: "address",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "uint256",
                        name: "rawValue",
                        type: "uint256",
                    },
                ],
                internalType: "struct FixedPoint.Unsigned",
                name: "price",
                type: "tuple",
            },
        ],
        name: "transformCollateralRequirement",
        outputs: [
            {
                components: [
                    {
                        internalType: "uint256",
                        name: "rawValue",
                        type: "uint256",
                    },
                ],
                internalType: "struct FixedPoint.Unsigned",
                name: "",
                type: "tuple",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "uint256",
                        name: "rawValue",
                        type: "uint256",
                    },
                ],
                internalType: "struct FixedPoint.Unsigned",
                name: "price",
                type: "tuple",
            },
            {
                internalType: "uint256",
                name: "requestTime",
                type: "uint256",
            },
        ],
        name: "transformPrice",
        outputs: [
            {
                components: [
                    {
                        internalType: "uint256",
                        name: "rawValue",
                        type: "uint256",
                    },
                ],
                internalType: "struct FixedPoint.Unsigned",
                name: "",
                type: "tuple",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "requestTime",
                type: "uint256",
            },
        ],
        name: "transformPriceIdentifier",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
];
const _bytecode = "0x608060405234801561001057600080fd5b506040516108c33803806108c383398101604081905261002f9161008e565b600080546001600160a01b03199081166001600160a01b039384161790915560029490945591516003556001805490931693909116929092179055600455610128565b80516001600160a01b038116811461008957600080fd5b919050565b600080600080600085870360a08112156100a757600080fd5b6100b087610072565b9550602087015194506020603f19820112156100cb57600080fd5b50604051602081016001600160401b03811182821017156100fc57634e487b7160e01b600052604160045260246000fd5b604090815287015181526060870151909350915061011c60808701610072565b90509295509295909350565b61078c806101376000396000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c806348e30c3f116100765780639375f0e91161005b5780639375f0e91461018a57806397523661146101aa5780639f43ddd2146101b357600080fd5b806348e30c3f1461016d57806362b5f7f51461017757600080fd5b80631c39c38d116100a75780631c39c38d146100fd57806322f8e5661461014257806329cb924d1461015757600080fd5b80630ff49b90146100c3578063197f7848146100ea575b600080fd5b6100d66100d136600461066d565b6101bc565b604051905181526020015b60405180910390f35b6100d66100f8366004610698565b6102b3565b60005461011d9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100e1565b6101556101503660046106bb565b6103be565b005b61015f610467565b6040519081526020016100e1565b60035461015f9081565b61015f6101853660046106bb565b61051f565b60015461011d9073ffffffffffffffffffffffffffffffffffffffff1681565b61015f60045481565b61015f60025481565b60408051602081019091526000815260015473ffffffffffffffffffffffffffffffffffffffff166101ef5750816102ad565b6001546040517f0ff49b90000000000000000000000000000000000000000000000000000000008152845160048201526024810184905273ffffffffffffffffffffffffffffffffffffffff90911690630ff49b9090604401602060405180830381865afa92505050801561029f575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261029c918101906106d4565b60015b6102aa5750816102ad565b90505b92915050565b60408051602081019091526000815260015473ffffffffffffffffffffffffffffffffffffffff166102f45750506040805160208101909152600354815290565b6001546040517f2a31263700000000000000000000000000000000000000000000000000000000815283516004820152600354602482015273ffffffffffffffffffffffffffffffffffffffff90911690632a31263790604401602060405180830381865afa9250505080156103a5575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526103a2918101906106d4565b60015b6102ad5750506040805160208101909152600354815290565b60005473ffffffffffffffffffffffffffffffffffffffff166103e057600080fd5b6000546040517f22f8e5660000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff909116906322f8e56690602401600060405180830381600087803b15801561044c57600080fd5b505af1158015610460573d6000803e3d6000fd5b5050505050565b6000805473ffffffffffffffffffffffffffffffffffffffff161561051a5760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166329cb924d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104f1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610515919061073d565b905090565b504290565b60015460009073ffffffffffffffffffffffffffffffffffffffff1661054757505060045490565b600154600480546040517ff19371b7000000000000000000000000000000000000000000000000000000008152918201526024810184905273ffffffffffffffffffffffffffffffffffffffff9091169063f19371b790604401602060405180830381865afa9250505080156105f8575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526105f59181019061073d565b60015b6102ad57505060045490565b60006020828403121561061657600080fd5b6040516020810181811067ffffffffffffffff82111715610660577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040529135825250919050565b6000806040838503121561068057600080fd5b61068a8484610604565b946020939093013593505050565b6000602082840312156106aa57600080fd5b6106b48383610604565b9392505050565b6000602082840312156106cd57600080fd5b5035919050565b6000602082840312156106e657600080fd5b6040516020810181811067ffffffffffffffff82111715610730577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040529151825250919050565b60006020828403121561074f57600080fd5b505191905056fea264697066735822122052b8b3b6877230fc8ab07dbf7b168e8b7e7b778af550f8d97cbc080ce2d8dda364736f6c63430008100033";
class ExpiringMultiPartyMock__factory extends ethers_1.ContractFactory {
    constructor(...args) {
        if (args.length === 1) {
            super(_abi, _bytecode, args[0]);
        }
        else {
            super(...args);
        }
    }
    deploy(_financialProductLibraryAddress, _expirationTimestamp, _collateralRequirement, _priceIdentifier, _timerAddress, overrides) {
        return super.deploy(_financialProductLibraryAddress, _expirationTimestamp, _collateralRequirement, _priceIdentifier, _timerAddress, overrides || {});
    }
    getDeployTransaction(_financialProductLibraryAddress, _expirationTimestamp, _collateralRequirement, _priceIdentifier, _timerAddress, overrides) {
        return super.getDeployTransaction(_financialProductLibraryAddress, _expirationTimestamp, _collateralRequirement, _priceIdentifier, _timerAddress, overrides || {});
    }
    attach(address) {
        return super.attach(address);
    }
    connect(signer) {
        return super.connect(signer);
    }
    static createInterface() {
        return new ethers_1.utils.Interface(_abi);
    }
    static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    }
}
exports.ExpiringMultiPartyMock__factory = ExpiringMultiPartyMock__factory;
ExpiringMultiPartyMock__factory.bytecode = _bytecode;
ExpiringMultiPartyMock__factory.abi = _abi;
