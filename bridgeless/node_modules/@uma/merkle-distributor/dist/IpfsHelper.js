"use strict";
// This script adds some useful functions for dealing with IPFS.
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ipfsApi = require("ipfs-http-client"); // using require import as the types on this package are broken in TS.
const node_fetch_1 = __importDefault(require("node-fetch"));
exports.default = (pinataApiKey, pinataApiSecret) => {
    const ipfs = ipfsApi({ host: "ipfs.infura.io", port: 5001, protocol: "https" });
    async function uploadFile(file) {
        const { path } = await ipfs.add({ content: Buffer.from(JSON.stringify(file)) });
        return path;
    }
    async function viewFile(fileHash) {
        const response = await (0, node_fetch_1.default)(`"https://ipfs.infura.io:5001/api/v0/get?arg=${fileHash}`);
        return await response.json();
    }
    async function pinHash(hashToPin) {
        const infuraResponse = await (0, node_fetch_1.default)(`https://ipfs.infura.io:5001/api/v0/pin/add?arg=${hashToPin}`);
        if (infuraResponse.status != 200)
            throw { infuraResponse, error: new Error("Failed to pin on infura") };
        if (pinataApiKey && pinataApiSecret) {
            const pinataResponse = await (0, node_fetch_1.default)(`https://api.pinata.cloud/pinning/pinByHash`, {
                method: "post",
                body: JSON.stringify({ hashToPin }),
                headers: {
                    "Content-Type": "application/json",
                    pinata_api_key: pinataApiKey,
                    pinata_secret_api_key: pinataApiSecret,
                },
            });
            if (pinataResponse.status != 200)
                throw { pinataResponse, error: new Error("Failed to pin on pinata") };
        }
    }
    return { uploadFile, viewFile, pinHash };
};
