import HDWalletProvider from "@truffle/hdwallet-provider";
import type { KeyConfig } from "./GckmsConfig";
type Tail2<T extends any[]> = T extends [unknown, unknown, ...infer R] ? R : never;
type RemainingHDWalletArgs = Tail2<ConstructorParameters<typeof HDWalletProvider>>;
export declare class ManagedSecretProvider {
    private readonly cloudKmsSecretConfigs;
    private readonly providerOrUrl;
    private readonly remainingArgs;
    private wrappedProvider;
    private wrappedProviderPromise;
    constructor(cloudKmsSecretConfigs: KeyConfig[], providerOrUrl: string | any, // Mirrors the type that HDWalletProvider expects.
    ...remainingArgs: RemainingHDWalletArgs);
    sendAsync(...all: Parameters<HDWalletProvider["sendAsync"]>): ReturnType<HDWalletProvider["sendAsync"]>;
    send(...all: Parameters<HDWalletProvider["send"]>): ReturnType<HDWalletProvider["send"]>;
    getAddress(...all: Parameters<HDWalletProvider["getAddress"]>): ReturnType<HDWalletProvider["getAddress"]>;
    getWrappedProviderOrThrow(): HDWalletProvider;
    getOrConstructWrappedProvider(): Promise<HDWalletProvider>;
}
export {};
