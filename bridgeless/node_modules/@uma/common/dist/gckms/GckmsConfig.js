"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getGckmsConfig = void 0;
// Example usage:
// $(npm bin)/truffle exec <some_script> --network test --keys priceFeed --keys registry
const minimist_1 = __importDefault(require("minimist"));
const fs_1 = __importDefault(require("fs"));
const dotenv_1 = __importDefault(require("dotenv"));
const PublicNetworks_1 = require("../PublicNetworks");
const argv = (0, minimist_1.default)(process.argv.slice());
dotenv_1.default.config();
function arrayify(input) {
    if (!input)
        return [];
    if (!Array.isArray(input))
        return [input];
    return input;
}
function getGckmsConfig(keys = arrayify(argv.keys), network = argv.network) {
    let configOverride = {};
    // If there is no env variable providing the config, attempt to pull it from a file.
    // TODO: this is kinda hacky. We should refactor this to only take in the config using one method.
    if (process.env.GCKMS_CONFIG) {
        // If the env variable is present, just take that json.
        configOverride = JSON.parse(process.env.GCKMS_CONFIG);
    }
    else {
        // Import the .GckmsOverride.js file if it exists.
        // Note: this file is expected to be present in the same directory as this script.
        const overrideFname = ".GckmsOverride.js";
        try {
            if (fs_1.default.existsSync(`${__dirname}/${overrideFname}`)) {
                configOverride = require(`./${overrideFname}`);
            }
        }
        catch (err) {
            console.error(err);
        }
    }
    const getNetworkName = () => {
        if ((0, PublicNetworks_1.isPublicNetwork)(network || "unknown")) {
            // Take everything before the underscore:
            // mainnet_gckms -> mainnet.
            return network.split("_")[0];
        }
        return "mainnet";
    };
    // Compose the exact config for this network.
    const networkConfig = configOverride[getNetworkName()];
    // Provide the configs for the keys requested.
    const keyConfigs = keys.map((keyName) => {
        return networkConfig[keyName] || {};
    });
    return keyConfigs;
}
exports.getGckmsConfig = getGckmsConfig;
