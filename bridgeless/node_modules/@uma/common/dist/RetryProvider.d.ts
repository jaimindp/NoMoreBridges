import Web3 from "web3";
type Web3ProviderOptions = ConstructorParameters<typeof Web3.providers.HttpProvider>[1] | ConstructorParameters<typeof Web3.providers.WebsocketProvider>[1];
type Web3Provider = InstanceType<typeof Web3.providers.HttpProvider> | InstanceType<typeof Web3.providers.WebsocketProvider>;
interface Config {
    retries: number;
    delay: number;
    url: string;
    options?: Web3ProviderOptions;
}
type PartialExcept<T, K extends keyof T> = Partial<Omit<T, K>> & Pick<T, K>;
type Payload = Parameters<Web3Provider["send"]>[0];
type Callback = Parameters<Web3Provider["send"]>[1];
export type RetryConfig = PartialExcept<Config, "url">;
export declare class RetryProvider {
    private providerCaches;
    /**
     * @notice Constructs new retry provider.
     * @param {Array} config config object:
     *   [
     *      {
     *        retries: 3,
     *        delay: 1
     *        url: https://mainnet.infura.io/v3/ACCOUNT_ID,
     *        options: {
     *          timeout: 15000
     *        }
     *      },
     *      {
     *        retries: 5,
     *        delay: 1,
     *        url: ws://99.999.99.99
     *      }
     *   ]
     */
    constructor(configs: RetryConfig[]);
    sendAsync(payload: Payload, callback: Callback): void;
    send(payload: Payload, callback: Callback): void;
    disconnect(code: number, reason: string): void;
    supportsSubscriptions(): boolean;
    _constructOrGetProvider(index: number): Web3Provider;
    _runRetry<T>(fn: (provider: Web3Provider) => Promise<T>, providerIndex?: number, retryIndex?: number, previousErrors?: Error[]): Promise<T>;
}
export {};
