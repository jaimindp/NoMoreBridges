import { PublicNetworks as networkUtils } from "./PublicNetworks";
import type { BN } from "./types";
export { formatFixed, parseFixed } from "@ethersproject/bignumber";
export declare const formatDateShort: (timestampInSeconds: number) => string;
export declare const formatDate: (timestampInSeconds: number) => string;
export declare const formatHours: (seconds: number, decimals?: number) => string;
export declare const formatWei: (num: string | BN) => string;
export declare const formatWithMaxDecimals: (num: number | string, decimalPlaces: number, minPrecision: number, roundUp: boolean, showSign: boolean) => string;
export declare const createFormatFunction: (numDisplayedDecimals: number, minDisplayedPrecision: number, showSign?: boolean, decimals?: number) => (valInWei: string | BN) => string;
type NetworkId = keyof typeof networkUtils;
export declare function createEtherscanLinkFromtx(networkId: NetworkId): string;
export declare function createShortHexString(hex: string): string;
export declare function createEtherscanLinkMarkdown(hex: string, networkId?: NetworkId): string | null;
export declare function addSign(number: string): string;
export declare const ConvertDecimals: (fromDecimals: number, toDecimals: number) => (amountIn: string | number | BN) => BN;
export declare const replaceAddressCase: (object: any) => any;
