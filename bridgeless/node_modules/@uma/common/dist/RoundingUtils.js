"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.roundToDecimal = void 0;
const web3_1 = __importDefault(require("web3"));
const bignumber_js_1 = require("bignumber.js");
const { toBN } = web3_1.default.utils;
/**
 * @title Utility function for rounding BN values.
 * @param {BN} inputAmount that is scaled up.
 * @param {Number} inputDecimals specifies decimal scaling for processed value.
 * @param {Number} roundingPrecision specifies amount of decimals left after rounding.
 *      Negative value would round to the nearest 10 to the power of absolute roundingPrecision value.
 * @param {RoundingMode} roundingMode is optional rounding mode documented in
 *      https://mikemcl.github.io/bignumber.js/#constructor-properties
 */
function roundToDecimal(inputAmount, inputDecimals, roundingPrecision, roundingMode = bignumber_js_1.BigNumber.ROUND_HALF_UP) {
    if (inputDecimals < 0)
        throw new Error("decimal precision should be non-negative");
    return toBN(new bignumber_js_1.BigNumber(inputAmount.toString())
        .shiftedBy(roundingPrecision - inputDecimals)
        .decimalPlaces(0, roundingMode)
        .shiftedBy(inputDecimals - roundingPrecision)
        .toFixed());
}
exports.roundToDecimal = roundToDecimal;
