import type Web3 from "web3";
interface KeyPair {
    privateKey: string;
    publicKey: string;
}
export declare function encryptMessage(publicKey: string, message: string): Promise<string>;
export declare function addressFromPublicKey(publicKey: string): string;
export declare function recoverPublicKey(privateKey: string): string;
export declare function decryptMessage(privKey: string, encryptedMessage: string): Promise<string>;
export declare function deriveKeyPair(web3: Web3, signature: string): Promise<KeyPair>;
export declare function getMessageSignatureMetamask(web3: Web3, messageToSign: string, signingAccount: string): Promise<string>;
export declare function getMessageSignatureTruffle(web3: Web3, messageToSign: string, signingAccount: string): Promise<string>;
export declare function deriveKeyPairFromSignatureMetamask(web3: Web3, messageToSign: string, signingAccount: string): Promise<KeyPair>;
export declare function deriveKeyPairFromSignatureTruffle(web3: Web3, messageToSign: string, signingAccount: string): Promise<KeyPair>;
export declare function signMessage(web3: Web3, message: string, account: string): Promise<string>;
export {};
