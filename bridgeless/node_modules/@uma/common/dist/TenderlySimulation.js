"use strict";
// Simulates transaction results on Tenderly.
// Requires environment variables TENDERLY_USER, TENDERLY_PROJECT and TENDERLY_ACCESS_KEY to be set, check:
// - https://docs.tenderly.co/other/platform-access/how-to-find-the-project-slug-username-and-organization-name
// - https://docs.tenderly.co/other/platform-access/how-to-generate-api-access-tokens
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.simulateTenderlyTx = void 0;
const address_1 = require("@ethersproject/address");
const bignumber_1 = require("@ethersproject/bignumber");
const bytes_1 = require("@ethersproject/bytes");
const constants_1 = require("@ethersproject/constants");
const async_retry_1 = __importDefault(require("async-retry"));
const dotenv = __importStar(require("dotenv"));
const node_fetch_1 = __importDefault(require("node-fetch"));
const processEnvironment = () => {
    dotenv.config();
    if (!process.env.TENDERLY_USER)
        throw new Error("TENDERLY_USER not set");
    if (!process.env.TENDERLY_PROJECT)
        throw new Error("TENDERLY_PROJECT not set");
    if (!process.env.TENDERLY_ACCESS_KEY)
        throw new Error("TENDERLY_ACCESS_KEY not set");
    return {
        user: process.env.TENDERLY_USER,
        project: process.env.TENDERLY_PROJECT,
        apiKey: process.env.TENDERLY_ACCESS_KEY,
    };
};
const validateSimulationParams = (simulationParams) => {
    if (!(0, address_1.isAddress)(simulationParams.to))
        throw new Error(`Invalid to address: ${simulationParams.to}`);
    if (simulationParams.from !== undefined && !(0, address_1.isAddress)(simulationParams.from))
        throw new Error(`Invalid from address: ${simulationParams.from}`);
    if (simulationParams.input !== undefined && !(0, bytes_1.isHexString)(simulationParams.input))
        throw new Error(`Invalid input: ${simulationParams.input}`);
    if (simulationParams.value !== undefined && !bignumber_1.BigNumber.from(simulationParams.value).gte(0))
        throw new Error(`Invalid value: ${simulationParams.value}`);
    if (simulationParams.timestampOverride !== undefined && !bignumber_1.BigNumber.from(simulationParams.timestampOverride).gte(0))
        throw new Error(`Invalid timestampOverride: ${simulationParams.timestampOverride}`);
};
const createRequestUrl = (tenderlyEnv, fork) => {
    const baseUrl = `https://api.tenderly.co/api/v1/account/${tenderlyEnv.user}/project/${tenderlyEnv.project}/`;
    return fork === undefined ? baseUrl + "simulate" : baseUrl + "fork/" + fork.id + "/simulate";
};
const createRequestBody = (simulationParams) => {
    const body = {
        save: true,
        save_if_fails: true,
        simulation_type: "full",
        network_id: simulationParams.chainId.toString(),
        to: simulationParams.to,
        input: simulationParams.input,
        value: simulationParams.value,
        from: simulationParams.from || constants_1.AddressZero,
        root: simulationParams.fork?.root,
    };
    if (simulationParams.timestampOverride !== undefined) {
        body.block_header = {
            timestamp: bignumber_1.BigNumber.from(simulationParams.timestampOverride).toHexString(),
        };
    }
    return body;
};
// Type guard function to check if the API response conforms to the required TenderlyAPIResponse interface
function isTenderlyAPIResponse(response) {
    if (response &&
        response.simulation &&
        typeof response.simulation.id === "string" &&
        typeof response.simulation.status === "boolean") {
        return true;
    }
    return false;
}
const getSimulationResponse = async (simulationParams, tenderlyEnv, retryOptions) => {
    // Construct Tenderly simulation API request.
    const url = createRequestUrl(tenderlyEnv, simulationParams.fork);
    const body = createRequestBody(simulationParams);
    const headers = { "X-Access-Key": tenderlyEnv.apiKey };
    // Send Tenderly simulation API request with retries.
    const response = await (0, async_retry_1.default)(async () => {
        const fetchResponse = await (0, node_fetch_1.default)(url, {
            method: "POST",
            headers: headers,
            body: JSON.stringify(body),
        });
        if (!fetchResponse.ok) {
            throw new Error(`Simulation API returned HTTP ${fetchResponse.status}: ${fetchResponse.statusText}`);
        }
        return fetchResponse;
    }, retryOptions);
    // If the HTTP response was OK, we expect the response body should be a JSON object containing expected Tenderly
    // simulation response properties.
    const apiResponse = await response.json();
    if (!isTenderlyAPIResponse(apiResponse)) {
        throw new Error(`Failed to parse Tenderly simulation API response: ${JSON.stringify(apiResponse)}`);
    }
    return apiResponse;
};
const isProjectPublic = async (tenderlyEnv, retryOptions) => {
    const url = `https://api.tenderly.co/api/v1/public/account/${tenderlyEnv.user}/project/${tenderlyEnv.project}`;
    const headers = { "X-Access-Key": tenderlyEnv.apiKey };
    // Return true only if the project API responds OK and the project is public. On any error, return false.
    try {
        const response = await (0, async_retry_1.default)(async () => {
            const fetchResponse = await (0, node_fetch_1.default)(url, {
                method: "GET",
                headers: headers, // Private projects require authentication.
            });
            if (!fetchResponse.ok) {
                throw new Error(`Project API returned HTTP ${fetchResponse.status}: ${fetchResponse.statusText}`);
            }
            return fetchResponse;
        }, retryOptions);
        const projectResponse = (await response.json());
        return projectResponse.project.public;
    }
    catch {
        return false;
    }
};
const getResultUrl = async (simulationId, tenderlyEnv, retryOptions, fork) => {
    const publicUrl = `https://dashboard.tenderly.co/public/${tenderlyEnv.user}/${tenderlyEnv.project}/${fork !== undefined ? "fork-simulation" : "simulator"}/${simulationId}`;
    const privateUrl = `https://dashboard.tenderly.co/${tenderlyEnv.user}/${tenderlyEnv.project}/${fork !== undefined ? "fork/" + fork.id + "/simulation" : "simulator"}/${simulationId}`;
    return (await isProjectPublic(tenderlyEnv, retryOptions))
        ? { url: publicUrl, public: true }
        : { url: privateUrl, public: false };
};
const simulateTenderlyTx = async (simulationParams, retryOptions = { retries: 0 } // By default, do not retry, but the caller can override this.
) => {
    // Will throw if required environment variables are not set.
    const tenderlyEnv = processEnvironment();
    // Will throw if simulation parameters are invalid.
    validateSimulationParams(simulationParams);
    // Will throw if Tenderly API request fails or returns unparsable response.
    const simulationResponse = await getSimulationResponse(simulationParams, tenderlyEnv, retryOptions);
    // Get the URL to the simulation result page. If project is not public, the URL will be private (requires login).
    const resultUrl = await getResultUrl(simulationResponse.simulation.id, tenderlyEnv, retryOptions, simulationParams.fork);
    return { id: simulationResponse.simulation.id, status: simulationResponse.simulation.status, resultUrl };
};
exports.simulateTenderlyTx = simulateTenderlyTx;
