"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getKeyGenMessage = exports.computeVoteHashAncillary = exports.computeVoteHash = exports.computeTopicHash = void 0;
const web3_1 = __importDefault(require("web3"));
// Web3's soliditySha3 will attempt to auto-detect the type of given input parameters,
// but this won't produce expected behavior for certain types such as `bytes32` or `address`.
// Therefore, these helper methods will explicitly set types.
function computeTopicHash(request, roundId) {
    const hash = web3_1.default.utils.soliditySha3({ t: "bytes32", v: request.identifier }, { t: "uint", v: request.time }, { t: "uint", v: roundId });
    if (hash === null)
        throw new Error("Returned null hash.");
    return hash;
}
exports.computeTopicHash = computeTopicHash;
function computeVoteHash(request) {
    const hash = web3_1.default.utils.soliditySha3({ t: "int", v: request.price }, { t: "int", v: request.salt }, { t: "address", v: request.account }, { t: "uint", v: request.time }, { t: "bytes", v: "0x" }, { t: "uint", v: request.roundId }, { t: "bytes32", v: request.identifier });
    if (hash === null)
        throw new Error("Returned null hash.");
    return hash;
}
exports.computeVoteHash = computeVoteHash;
function computeVoteHashAncillary(request) {
    const hash = web3_1.default.utils.soliditySha3({ t: "int", v: request.price }, { t: "int", v: request.salt }, { t: "address", v: request.account }, { t: "uint", v: request.time }, { t: "bytes", v: request.ancillaryData }, { t: "uint", v: request.roundId }, { t: "bytes32", v: request.identifier });
    if (hash === null)
        throw new Error("Returned null hash.");
    return hash;
}
exports.computeVoteHashAncillary = computeVoteHashAncillary;
function getKeyGenMessage(roundId) {
    // TODO: discuss dApp tradeoffs for changing this to a per-topic hash keypair.
    return `UMA Protocol one time key for round: ${roundId.toString()}`;
}
exports.getKeyGenMessage = getKeyGenMessage;
