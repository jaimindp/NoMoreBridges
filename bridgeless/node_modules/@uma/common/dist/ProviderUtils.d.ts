import Web3 from "web3";
import { RetryProvider, RetryConfig } from "./RetryProvider";
export declare function getNodeUrl(networkName: string, useHttps?: boolean, chainId?: number | null): string;
export declare function createBasicProvider(nodeRetryConfig: RetryConfig[]): RetryProvider;
export declare function getMnemonic(): string;
/**
 * @notice Creates a web3 instance for a particular chain.
 * @param chainId the chain id for the network the user wants to connect to.
 * @returns new Web3 instance.
 */
export declare function getWeb3ByChainId(chainId: number): Web3;
/**
 * @notice Creates array of web3 instances for a particular chain.
 * @dev Providers to use are described in RETRY_CONFIG_{chainId} dictionary under the "url" key.
 * @param chainId the chain id for the network the user wants to connect to.
 * @returns array of new readonly Web3 instances.
 */
export declare function getRetryWeb3sByChainId(chainId: number): Web3[];
/**
 * @notice Gets a web3 instance based on the network argument using the truffle config in this package.
 * Use this for compatibility for running with or without truffle.
 * @example
 *  If a node app uses getWeb3() and you want to load network 1 with a default wallet For full list of potential network
 * names see common/src/TruffleConfig node app --network=mainnet_mnemonic
 *
 * @notice You can also specify environment variables INFURA_API_KEY, CUSTOM_NODE_URL and CUSTOM_LOCAL_NODE_PORT.
 * If not provided there are defaults which load a hardcoded infura key. Default port is 9545.
 *
 * @notice a parameterizedNetwork name can also be provided. This enables you to use the library without needing to define
 * a `--network` argument. Useful in serverless or when running node scripts.
 *
 */
export declare function getWeb3(parameterizedNetwork?: string): Web3;
