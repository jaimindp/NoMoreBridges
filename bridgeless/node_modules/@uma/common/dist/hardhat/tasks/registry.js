"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("hardhat/config");
const Enums_1 = require("../../Enums");
const _registerAccount = async (account, registry, deployer) => {
    const isRegistered = await registry.methods.isContractRegistered(account).call();
    if (!isRegistered) {
        console.log(`Registering ${account}...`);
        const registerTxn = await registry.methods.registerContract([], account).send({ from: deployer });
        console.log(`...Receipt: ${registerTxn.transactionHash}`);
    }
    else {
        console.log(`${account} is already registered!`);
    }
};
(0, config_1.task)("register-accounts", "Register custom account with Registry capable of making price requests")
    .addOptionalParam("account", "Custom account to register", "", config_1.types.string)
    .setAction(async function (taskArguments, hre_) {
    const hre = hre_;
    const { deployments, getNamedAccounts, web3 } = hre;
    const { deployer } = await getNamedAccounts();
    const { account } = taskArguments;
    const Registry = await deployments.get("Registry");
    const registry = new web3.eth.Contract(Registry.abi, Registry.address);
    console.log(`Using Registry @ ${registry.options.address}`);
    // Only those holding the ContractCreator role can register contracts. So we'll first add the deployer
    // as a ContractCreator so that it can register itself.
    const isCreator = await registry.methods.holdsRole(Enums_1.RegistryRolesEnum.CONTRACT_CREATOR, deployer).call();
    if (!isCreator) {
        console.log("Adding deployer as a Contract Creator...");
        const txn = await registry.methods
            .addMember(Enums_1.RegistryRolesEnum.CONTRACT_CREATOR, deployer)
            .send({ from: deployer });
        console.log(`...Receipt: ${txn.transactionHash}`);
    }
    // Register custom account.
    if (account !== "") {
        await _registerAccount(account, registry, deployer);
    }
    // Remove deployer from contract creator role.
    console.log("Removing deployer as Contract Creator...");
    const txn = await registry.methods
        .removeMember(Enums_1.RegistryRolesEnum.CONTRACT_CREATOR, deployer)
        .send({ from: deployer });
    console.log(`...Receipt: ${txn.transactionHash}`);
});
