"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("hardhat/config");
const task_names_1 = require("hardhat/builtin-tasks/task-names");
// This overrides a hardhat internal task, which is part of its test task's lifecycle. This allows us to only run tests
// that are compatible with a given network config, which are described by entries in a hardhat network's
// `testWhitelist`  & `testBlacklist` configuration. For example:
// defaultConfig = {
//     networks: {
//         hardhat: { ..., testWhitelist: ["ovm"], testBlacklist: [".e2e.js"] }
//     }
// }
(0, config_1.internalTask)(task_names_1.TASK_TEST_GET_TEST_FILES, async (_, { config, network }, runSuper) => {
    let filePaths = await runSuper();
    const networkConfig = config.networks[network.name]; // Cast to allow extra props.
    // Build absolute path for all directories on user-specified whitelist.
    const whitelist = networkConfig.testWhitelist;
    if (whitelist && Array.isArray(whitelist)) {
        filePaths = filePaths.filter((filePath) => {
            for (const whitelistString of whitelist) {
                if (filePath.includes(whitelistString))
                    return true;
                else
                    continue;
            }
            return false;
        });
    }
    // Some tests should not be run using hardhat. Define a `testBlacklist`. Ignore any tests that contain the blacklist.
    const blacklist = networkConfig.testBlacklist;
    if (blacklist && Array.isArray(blacklist)) {
        filePaths = filePaths.filter((filePath) => {
            for (const blacklistedString of blacklist) {
                if (filePath.includes(blacklistedString))
                    return false;
                else
                    continue;
            }
            return true;
        });
    }
    return filePaths;
});
