"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.runVotingV2Fixture = void 0;
const Constants_1 = require("../../Constants");
const Enums_1 = require("../../Enums");
const defaultFixtureWhitelist = [
    "VotingToken",
    "FinancialContractsAdmin",
    "Finder",
    "dvmv2",
    "Registry",
    "Store",
    "IdentifierWhitelist",
    "AddressWhitelist",
];
async function runVotingV2Fixture({ deployments }, runInitialDeployment = true) {
    const setup = deployments.createFixture(async (hre) => {
        const { deployments, getNamedAccounts, web3 } = hre; // Cast because hardhat extension isn't well-typed.
        const { padRight, toWei, utf8ToHex } = web3.utils;
        if (runInitialDeployment)
            await deployments.fixture(defaultFixtureWhitelist);
        const { deployer } = await getNamedAccounts();
        const getDeployment = async (name) => {
            const contract = await deployments.get(name);
            return new web3.eth.Contract(contract.abi, contract.address);
        };
        // Setup finder.
        const finder = await getDeployment("Finder");
        const addToFinder = async (deploymentName, finderName) => {
            const { address } = await deployments.get(deploymentName);
            const hexName = padRight(utf8ToHex(finderName), 64);
            await finder.methods.changeImplementationAddress(hexName, address).send({ from: deployer });
        };
        await addToFinder("FinancialContractsAdmin", Constants_1.interfaceName.FinancialContractsAdmin);
        await addToFinder("VotingV2", Constants_1.interfaceName.Oracle);
        await addToFinder("Registry", Constants_1.interfaceName.Registry);
        await addToFinder("Store", Constants_1.interfaceName.Store);
        await addToFinder("IdentifierWhitelist", Constants_1.interfaceName.IdentifierWhitelist);
        await addToFinder("AddressWhitelist", Constants_1.interfaceName.CollateralWhitelist);
        // Setup token.
        const votingToken = await getDeployment("VotingToken");
        const minterRoleEnumValue = 1;
        await votingToken.methods.addMember(minterRoleEnumValue, deployer).send({ from: deployer });
        await votingToken.methods.mint(deployer, toWei("100000000")).send({ from: deployer });
        await votingToken.methods.removeMember(minterRoleEnumValue, deployer).send({ from: deployer });
        // Set the minter to be the Voting contract.
        const { address: votingAddress } = await deployments.get("VotingV2");
        await votingToken.methods.addMember(minterRoleEnumValue, votingAddress).send({ from: deployer });
        // Setup Registry.
        const registry = await getDeployment("Registry");
        // Add pre-registered contracts.
        const { address: governorAddress } = await deployments.get("GovernorV2");
        await registry.methods.addMember(Enums_1.RegistryRolesEnum.CONTRACT_CREATOR, deployer).send({ from: deployer });
        await registry.methods.registerContract([], governorAddress).send({ from: deployer });
        await registry.methods.removeMember(Enums_1.RegistryRolesEnum.CONTRACT_CREATOR, deployer).send({ from: deployer });
    });
    await setup();
}
exports.runVotingV2Fixture = runVotingV2Fixture;
