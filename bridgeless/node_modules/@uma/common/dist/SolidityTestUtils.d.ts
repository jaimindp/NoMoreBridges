import type Web3 from "web3";
import type HRE from "hardhat";
type HardhatNetwork = typeof HRE["network"];
export declare function didContractThrow<T>(promise: Promise<T>): Promise<boolean>;
export declare function didContractRevertWith<T>(promise: Promise<T>, revertMessage: string): Promise<boolean>;
type Web3Provider = InstanceType<typeof Web3.providers.HttpProvider> | InstanceType<typeof Web3.providers.WebsocketProvider>;
type Callback = Parameters<Web3Provider["send"]>[1];
type CallbackResult = Parameters<Callback>[1];
export declare function advanceBlockAndSetTime(web3: Web3, time: number): Promise<CallbackResult>;
export declare function stopMining(web3: Web3): Promise<CallbackResult>;
export declare function takeSnapshot(web3: Web3): Promise<CallbackResult>;
export declare function revertToSnapshot(web3: Web3, id: number): Promise<CallbackResult>;
type Contract = InstanceType<InstanceType<typeof Web3>["eth"]["Contract"]>;
type Transaction = ReturnType<InstanceType<InstanceType<typeof Web3>["eth"]["Contract"]>["deploy"]>;
export declare function mineTransactionsAtTime(web3: Web3, transactions: Transaction[], time: number, sender: string): Promise<Contract[]>;
export declare function mineTransactionsAtTimeHardhat(network: HardhatNetwork, transactions: Transaction[], time: number, sender: string): Promise<Contract[]>;
export {};
