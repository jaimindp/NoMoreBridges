/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export interface BaseGuard extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): BaseGuard;
  clone(): BaseGuard;
  methods: {
    checkAfterExecution(
      txHash: string | number[],
      success: boolean
    ): NonPayableTransactionObject<void>;

    checkTransaction(
      to: string,
      value: number | string | BN,
      data: string | number[],
      operation: number | string | BN,
      safeTxGas: number | string | BN,
      baseGas: number | string | BN,
      gasPrice: number | string | BN,
      gasToken: string,
      refundReceiver: string,
      signatures: string | number[],
      msgSender: string
    ): NonPayableTransactionObject<void>;

    supportsInterface(
      interfaceId: string | number[]
    ): NonPayableTransactionObject<boolean>;
  };
  events: {
    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };
}
