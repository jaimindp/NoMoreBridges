/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export interface VotingUpgraderV2 extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): VotingUpgraderV2;
  clone(): VotingUpgraderV2;
  methods: {
    canRun(): NonPayableTransactionObject<void>;

    existingGovernor(): NonPayableTransactionObject<string>;

    existingProposer(): NonPayableTransactionObject<string>;

    existingVoting(): NonPayableTransactionObject<string>;

    finder(): NonPayableTransactionObject<string>;

    multiroleContracts(): NonPayableTransactionObject<{
      registry: string;
      store: string;
      0: string;
      1: string;
    }>;

    newGovernor(): NonPayableTransactionObject<string>;

    newVoting(): NonPayableTransactionObject<string>;

    ownableContracts(): NonPayableTransactionObject<{
      identifierWhitelist: string;
      financialContractsAdmin: string;
      addressWhitelist: string;
      governorRootTunnel: string;
      arbitrumParentMessenger: string;
      oracleHub: string;
      governorHub: string;
      bobaParentMessenger: string;
      optimismParentMessenger: string;
      optimisticOracleV3: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: string;
      7: string;
      8: string;
      9: string;
    }>;

    upgrade(): NonPayableTransactionObject<void>;

    upgrader(): NonPayableTransactionObject<string>;
  };
  events: {
    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };
}
