/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type BondSet = ContractEventLog<{
  bond: string;
  0: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type ProposalResolved = ContractEventLog<{
  id: string;
  success: boolean;
  0: string;
  1: boolean;
}>;

export interface ProposerV2Test extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): ProposerV2Test;
  clone(): ProposerV2Test;
  methods: {
    bond(): NonPayableTransactionObject<string>;

    bondedProposals(arg0: number | string | BN): NonPayableTransactionObject<{
      sender: string;
      time: string;
      lockedBond: string;
      ancillaryData: string;
      0: string;
      1: string;
      2: string;
      3: string;
    }>;

    finder(): NonPayableTransactionObject<string>;

    getCurrentTime(): NonPayableTransactionObject<string>;

    governor(): NonPayableTransactionObject<string>;

    multicall(
      data: (string | number[])[]
    ): NonPayableTransactionObject<string[]>;

    owner(): NonPayableTransactionObject<string>;

    propose(
      transactions: [string, number | string | BN, string | number[]][],
      ancillaryData: string | number[]
    ): NonPayableTransactionObject<string>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    resolveProposal(
      id: number | string | BN
    ): NonPayableTransactionObject<void>;

    setBond(_bond: number | string | BN): NonPayableTransactionObject<void>;

    setCurrentTime(
      time: number | string | BN
    ): NonPayableTransactionObject<void>;

    timerAddress(): NonPayableTransactionObject<string>;

    token(): NonPayableTransactionObject<string>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;
  };
  events: {
    BondSet(cb?: Callback<BondSet>): EventEmitter;
    BondSet(options?: EventOptions, cb?: Callback<BondSet>): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    ProposalResolved(cb?: Callback<ProposalResolved>): EventEmitter;
    ProposalResolved(
      options?: EventOptions,
      cb?: Callback<ProposalResolved>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "BondSet", cb: Callback<BondSet>): void;
  once(event: "BondSet", options: EventOptions, cb: Callback<BondSet>): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "ProposalResolved", cb: Callback<ProposalResolved>): void;
  once(
    event: "ProposalResolved",
    options: EventOptions,
    cb: Callback<ProposalResolved>
  ): void;
}
