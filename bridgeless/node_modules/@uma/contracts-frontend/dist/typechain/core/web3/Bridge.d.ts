/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Deposit = ContractEventLog<{
  destinationChainID: string;
  resourceID: string;
  depositNonce: string;
  0: string;
  1: string;
  2: string;
}>;
export type Paused = ContractEventLog<{
  account: string;
  0: string;
}>;
export type ProposalEvent = ContractEventLog<{
  originChainID: string;
  depositNonce: string;
  status: string;
  resourceID: string;
  dataHash: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;
export type ProposalVote = ContractEventLog<{
  originChainID: string;
  depositNonce: string;
  status: string;
  resourceID: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type RelayerAdded = ContractEventLog<{
  relayer: string;
  0: string;
}>;
export type RelayerRemoved = ContractEventLog<{
  relayer: string;
  0: string;
}>;
export type RelayerThresholdChanged = ContractEventLog<{
  newThreshold: string;
  0: string;
}>;
export type RoleAdminChanged = ContractEventLog<{
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
  0: string;
  1: string;
  2: string;
}>;
export type RoleGranted = ContractEventLog<{
  role: string;
  account: string;
  sender: string;
  0: string;
  1: string;
  2: string;
}>;
export type RoleRevoked = ContractEventLog<{
  role: string;
  account: string;
  sender: string;
  0: string;
  1: string;
  2: string;
}>;
export type Unpaused = ContractEventLog<{
  account: string;
  0: string;
}>;

export interface Bridge extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): Bridge;
  clone(): Bridge;
  methods: {
    DEFAULT_ADMIN_ROLE(): NonPayableTransactionObject<string>;

    RELAYER_ROLE(): NonPayableTransactionObject<string>;

    _chainID(): NonPayableTransactionObject<string>;

    _depositCounts(
      arg0: number | string | BN
    ): NonPayableTransactionObject<string>;

    _depositRecords(
      arg0: number | string | BN,
      arg1: number | string | BN
    ): NonPayableTransactionObject<string>;

    _expiry(): NonPayableTransactionObject<string>;

    _fee(): NonPayableTransactionObject<string>;

    _hasVotedOnProposal(
      arg0: number | string | BN,
      arg1: string | number[],
      arg2: string
    ): NonPayableTransactionObject<boolean>;

    _proposals(
      arg0: number | string | BN,
      arg1: string | number[]
    ): NonPayableTransactionObject<{
      _resourceID: string;
      _dataHash: string;
      _status: string;
      _proposedBlock: string;
      0: string;
      1: string;
      2: string;
      3: string;
    }>;

    _relayerThreshold(): NonPayableTransactionObject<string>;

    _resourceIDToHandlerAddress(
      arg0: string | number[]
    ): NonPayableTransactionObject<string>;

    _totalProposals(): NonPayableTransactionObject<string>;

    _totalRelayers(): NonPayableTransactionObject<string>;

    adminAddRelayer(relayerAddress: string): NonPayableTransactionObject<void>;

    adminChangeFee(
      newFee: number | string | BN
    ): NonPayableTransactionObject<void>;

    adminChangeRelayerThreshold(
      newThreshold: number | string | BN
    ): NonPayableTransactionObject<void>;

    adminPauseTransfers(): NonPayableTransactionObject<void>;

    adminRemoveRelayer(
      relayerAddress: string
    ): NonPayableTransactionObject<void>;

    adminSetBurnable(
      handlerAddress: string,
      tokenAddress: string
    ): NonPayableTransactionObject<void>;

    adminSetGenericResource(
      handlerAddress: string,
      resourceID: string | number[],
      contractAddress: string,
      depositFunctionSig: string | number[],
      executeFunctionSig: string | number[]
    ): NonPayableTransactionObject<void>;

    adminSetResource(
      handlerAddress: string,
      resourceID: string | number[],
      tokenAddress: string
    ): NonPayableTransactionObject<void>;

    adminUnpauseTransfers(): NonPayableTransactionObject<void>;

    adminWithdraw(
      handlerAddress: string,
      tokenAddress: string,
      recipient: string,
      amountOrTokenID: number | string | BN
    ): NonPayableTransactionObject<void>;

    cancelProposal(
      chainID: number | string | BN,
      depositNonce: number | string | BN,
      dataHash: string | number[]
    ): NonPayableTransactionObject<void>;

    deposit(
      destinationChainID: number | string | BN,
      resourceID: string | number[],
      data: string | number[]
    ): PayableTransactionObject<void>;

    executeProposal(
      chainID: number | string | BN,
      depositNonce: number | string | BN,
      data: string | number[],
      resourceID: string | number[]
    ): NonPayableTransactionObject<void>;

    getProposal(
      originChainID: number | string | BN,
      depositNonce: number | string | BN,
      dataHash: string | number[]
    ): NonPayableTransactionObject<
      [string, string, string[], string[], string, string]
    >;

    getRoleAdmin(role: string | number[]): NonPayableTransactionObject<string>;

    grantRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<void>;

    hasRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<boolean>;

    isRelayer(relayer: string): NonPayableTransactionObject<boolean>;

    paused(): NonPayableTransactionObject<boolean>;

    renounceAdmin(newAdmin: string): NonPayableTransactionObject<void>;

    renounceRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<void>;

    revokeRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<void>;

    supportsInterface(
      interfaceId: string | number[]
    ): NonPayableTransactionObject<boolean>;

    transferFunds(
      addrs: string[],
      amounts: (number | string | BN)[]
    ): NonPayableTransactionObject<void>;

    voteProposal(
      chainID: number | string | BN,
      depositNonce: number | string | BN,
      resourceID: string | number[],
      dataHash: string | number[]
    ): NonPayableTransactionObject<void>;
  };
  events: {
    Deposit(cb?: Callback<Deposit>): EventEmitter;
    Deposit(options?: EventOptions, cb?: Callback<Deposit>): EventEmitter;

    Paused(cb?: Callback<Paused>): EventEmitter;
    Paused(options?: EventOptions, cb?: Callback<Paused>): EventEmitter;

    ProposalEvent(cb?: Callback<ProposalEvent>): EventEmitter;
    ProposalEvent(
      options?: EventOptions,
      cb?: Callback<ProposalEvent>
    ): EventEmitter;

    ProposalVote(cb?: Callback<ProposalVote>): EventEmitter;
    ProposalVote(
      options?: EventOptions,
      cb?: Callback<ProposalVote>
    ): EventEmitter;

    RelayerAdded(cb?: Callback<RelayerAdded>): EventEmitter;
    RelayerAdded(
      options?: EventOptions,
      cb?: Callback<RelayerAdded>
    ): EventEmitter;

    RelayerRemoved(cb?: Callback<RelayerRemoved>): EventEmitter;
    RelayerRemoved(
      options?: EventOptions,
      cb?: Callback<RelayerRemoved>
    ): EventEmitter;

    RelayerThresholdChanged(
      cb?: Callback<RelayerThresholdChanged>
    ): EventEmitter;
    RelayerThresholdChanged(
      options?: EventOptions,
      cb?: Callback<RelayerThresholdChanged>
    ): EventEmitter;

    RoleAdminChanged(cb?: Callback<RoleAdminChanged>): EventEmitter;
    RoleAdminChanged(
      options?: EventOptions,
      cb?: Callback<RoleAdminChanged>
    ): EventEmitter;

    RoleGranted(cb?: Callback<RoleGranted>): EventEmitter;
    RoleGranted(
      options?: EventOptions,
      cb?: Callback<RoleGranted>
    ): EventEmitter;

    RoleRevoked(cb?: Callback<RoleRevoked>): EventEmitter;
    RoleRevoked(
      options?: EventOptions,
      cb?: Callback<RoleRevoked>
    ): EventEmitter;

    Unpaused(cb?: Callback<Unpaused>): EventEmitter;
    Unpaused(options?: EventOptions, cb?: Callback<Unpaused>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Deposit", cb: Callback<Deposit>): void;
  once(event: "Deposit", options: EventOptions, cb: Callback<Deposit>): void;

  once(event: "Paused", cb: Callback<Paused>): void;
  once(event: "Paused", options: EventOptions, cb: Callback<Paused>): void;

  once(event: "ProposalEvent", cb: Callback<ProposalEvent>): void;
  once(
    event: "ProposalEvent",
    options: EventOptions,
    cb: Callback<ProposalEvent>
  ): void;

  once(event: "ProposalVote", cb: Callback<ProposalVote>): void;
  once(
    event: "ProposalVote",
    options: EventOptions,
    cb: Callback<ProposalVote>
  ): void;

  once(event: "RelayerAdded", cb: Callback<RelayerAdded>): void;
  once(
    event: "RelayerAdded",
    options: EventOptions,
    cb: Callback<RelayerAdded>
  ): void;

  once(event: "RelayerRemoved", cb: Callback<RelayerRemoved>): void;
  once(
    event: "RelayerRemoved",
    options: EventOptions,
    cb: Callback<RelayerRemoved>
  ): void;

  once(
    event: "RelayerThresholdChanged",
    cb: Callback<RelayerThresholdChanged>
  ): void;
  once(
    event: "RelayerThresholdChanged",
    options: EventOptions,
    cb: Callback<RelayerThresholdChanged>
  ): void;

  once(event: "RoleAdminChanged", cb: Callback<RoleAdminChanged>): void;
  once(
    event: "RoleAdminChanged",
    options: EventOptions,
    cb: Callback<RoleAdminChanged>
  ): void;

  once(event: "RoleGranted", cb: Callback<RoleGranted>): void;
  once(
    event: "RoleGranted",
    options: EventOptions,
    cb: Callback<RoleGranted>
  ): void;

  once(event: "RoleRevoked", cb: Callback<RoleRevoked>): void;
  once(
    event: "RoleRevoked",
    options: EventOptions,
    cb: Callback<RoleRevoked>
  ): void;

  once(event: "Unpaused", cb: Callback<Unpaused>): void;
  once(event: "Unpaused", options: EventOptions, cb: Callback<Unpaused>): void;
}
