/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export interface SkinnyOptimisticV2RequesterTest extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): SkinnyOptimisticV2RequesterTest;
  clone(): SkinnyOptimisticV2RequesterTest;
  methods: {
    ancillaryData(): NonPayableTransactionObject<string>;

    expirationTimestamp(): NonPayableTransactionObject<string>;

    finder(): NonPayableTransactionObject<string>;

    identifier(): NonPayableTransactionObject<string>;

    priceDisputed(
      _identifier: string | number[],
      _timestamp: number | string | BN,
      _ancillaryData: string | number[],
      _request: [
        string,
        string,
        string,
        boolean,
        [boolean, boolean, boolean, number | string | BN, number | string | BN],
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ]
    ): NonPayableTransactionObject<void>;

    priceProposed(
      _identifier: string | number[],
      _timestamp: number | string | BN,
      _ancillaryData: string | number[],
      _request: [
        string,
        string,
        string,
        boolean,
        [boolean, boolean, boolean, number | string | BN, number | string | BN],
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ]
    ): NonPayableTransactionObject<void>;

    priceSettled(
      _identifier: string | number[],
      _timestamp: number | string | BN,
      _ancillaryData: string | number[],
      _request: [
        string,
        string,
        string,
        boolean,
        [boolean, boolean, boolean, number | string | BN, number | string | BN],
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ]
    ): NonPayableTransactionObject<void>;

    request(): NonPayableTransactionObject<{
      proposer: string;
      disputer: string;
      currency: string;
      settled: boolean;
      requestSettings: [boolean, boolean, boolean, string, string];
      proposedPrice: string;
      resolvedPrice: string;
      expirationTime: string;
      reward: string;
      finalFee: string;
      0: string;
      1: string;
      2: string;
      3: boolean;
      4: [boolean, boolean, boolean, string, string];
      5: string;
      6: string;
      7: string;
      8: string;
      9: string;
    }>;

    requestAndProposePriceFor(
      _identifier: string | number[],
      _timestamp: number | string | BN,
      _ancillaryData: string | number[],
      currency: string,
      reward: number | string | BN,
      requestSettings: [
        boolean,
        boolean,
        boolean,
        number | string | BN,
        number | string | BN
      ],
      proposer: string,
      proposedPrice: number | string | BN
    ): NonPayableTransactionObject<void>;

    requestPrice(
      _identifier: string | number[],
      _timestamp: number | string | BN,
      _ancillaryData: string | number[],
      currency: string,
      reward: number | string | BN,
      requestSettings: [
        boolean,
        boolean,
        boolean,
        number | string | BN,
        number | string | BN
      ]
    ): NonPayableTransactionObject<void>;

    setExpirationTimestamp(
      _expirationTimestamp: number | string | BN
    ): NonPayableTransactionObject<void>;

    setRevert(_shouldRevert: boolean): NonPayableTransactionObject<void>;

    shouldRevert(): NonPayableTransactionObject<boolean>;

    timestamp(): NonPayableTransactionObject<string>;
  };
  events: {
    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };
}
