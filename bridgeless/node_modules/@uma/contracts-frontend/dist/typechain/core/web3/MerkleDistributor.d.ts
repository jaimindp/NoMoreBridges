/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Claimed = ContractEventLog<{
  caller: string;
  windowIndex: string;
  account: string;
  accountIndex: string;
  amount: string;
  rewardToken: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
}>;
export type CreatedWindow = ContractEventLog<{
  windowIndex: string;
  rewardsDeposited: string;
  rewardToken: string;
  owner: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type DeleteWindow = ContractEventLog<{
  windowIndex: string;
  owner: string;
  0: string;
  1: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type WithdrawRewards = ContractEventLog<{
  owner: string;
  amount: string;
  currency: string;
  0: string;
  1: string;
  2: string;
}>;

export interface MerkleDistributor extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): MerkleDistributor;
  clone(): MerkleDistributor;
  methods: {
    claim(
      _claim: [
        number | string | BN,
        number | string | BN,
        number | string | BN,
        string,
        (string | number[])[]
      ]
    ): NonPayableTransactionObject<void>;

    claimMulti(
      claims: [
        number | string | BN,
        number | string | BN,
        number | string | BN,
        string,
        (string | number[])[]
      ][]
    ): NonPayableTransactionObject<void>;

    deleteWindow(
      windowIndex: number | string | BN
    ): NonPayableTransactionObject<void>;

    getRewardTokenForWindow(
      windowIndex: number | string | BN
    ): NonPayableTransactionObject<string>;

    isClaimed(
      windowIndex: number | string | BN,
      accountIndex: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    merkleWindows(arg0: number | string | BN): NonPayableTransactionObject<{
      merkleRoot: string;
      remainingAmount: string;
      rewardToken: string;
      ipfsHash: string;
      0: string;
      1: string;
      2: string;
      3: string;
    }>;

    nextCreatedIndex(): NonPayableTransactionObject<string>;

    owner(): NonPayableTransactionObject<string>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    setWindow(
      rewardsToDeposit: number | string | BN,
      rewardToken: string,
      merkleRoot: string | number[],
      ipfsHash: string
    ): NonPayableTransactionObject<void>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    verifyClaim(
      _claim: [
        number | string | BN,
        number | string | BN,
        number | string | BN,
        string,
        (string | number[])[]
      ]
    ): NonPayableTransactionObject<boolean>;

    withdrawRewards(
      rewardCurrency: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<void>;
  };
  events: {
    Claimed(cb?: Callback<Claimed>): EventEmitter;
    Claimed(options?: EventOptions, cb?: Callback<Claimed>): EventEmitter;

    CreatedWindow(cb?: Callback<CreatedWindow>): EventEmitter;
    CreatedWindow(
      options?: EventOptions,
      cb?: Callback<CreatedWindow>
    ): EventEmitter;

    DeleteWindow(cb?: Callback<DeleteWindow>): EventEmitter;
    DeleteWindow(
      options?: EventOptions,
      cb?: Callback<DeleteWindow>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    WithdrawRewards(cb?: Callback<WithdrawRewards>): EventEmitter;
    WithdrawRewards(
      options?: EventOptions,
      cb?: Callback<WithdrawRewards>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Claimed", cb: Callback<Claimed>): void;
  once(event: "Claimed", options: EventOptions, cb: Callback<Claimed>): void;

  once(event: "CreatedWindow", cb: Callback<CreatedWindow>): void;
  once(
    event: "CreatedWindow",
    options: EventOptions,
    cb: Callback<CreatedWindow>
  ): void;

  once(event: "DeleteWindow", cb: Callback<DeleteWindow>): void;
  once(
    event: "DeleteWindow",
    options: EventOptions,
    cb: Callback<DeleteWindow>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "WithdrawRewards", cb: Callback<WithdrawRewards>): void;
  once(
    event: "WithdrawRewards",
    options: EventOptions,
    cb: Callback<WithdrawRewards>
  ): void;
}
