/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type NewDesignatedVoting = ContractEventLog<{
  voter: string;
  owner: string;
  designatedVoting: string;
  0: string;
  1: string;
  2: string;
}>;

export interface DesignatedVotingV2Factory extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): DesignatedVotingV2Factory;
  clone(): DesignatedVotingV2Factory;
  methods: {
    finder(): NonPayableTransactionObject<string>;

    multicall(
      data: (string | number[])[]
    ): NonPayableTransactionObject<string[]>;

    newDesignatedVoting(
      owner: string,
      voter: string
    ): NonPayableTransactionObject<string>;
  };
  events: {
    NewDesignatedVoting(cb?: Callback<NewDesignatedVoting>): EventEmitter;
    NewDesignatedVoting(
      options?: EventOptions,
      cb?: Callback<NewDesignatedVoting>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "NewDesignatedVoting", cb: Callback<NewDesignatedVoting>): void;
  once(
    event: "NewDesignatedVoting",
    options: EventOptions,
    cb: Callback<NewDesignatedVoting>
  ): void;
}
