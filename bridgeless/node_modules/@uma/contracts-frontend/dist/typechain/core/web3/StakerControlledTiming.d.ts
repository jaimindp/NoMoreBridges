/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type DelegateSet = ContractEventLog<{
  delegator: string;
  delegate: string;
  0: string;
  1: string;
}>;
export type DelegatorSet = ContractEventLog<{
  delegate: string;
  delegator: string;
  0: string;
  1: string;
}>;
export type ExecutedUnstake = ContractEventLog<{
  voter: string;
  tokensSent: string;
  voterStake: string;
  0: string;
  1: string;
  2: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type RequestedUnstake = ContractEventLog<{
  voter: string;
  amount: string;
  unstakeTime: string;
  voterStake: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type SetNewEmissionRate = ContractEventLog<{
  newEmissionRate: string;
  0: string;
}>;
export type SetNewUnstakeCoolDown = ContractEventLog<{
  newUnstakeCoolDown: string;
  0: string;
}>;
export type Staked = ContractEventLog<{
  voter: string;
  from: string;
  amount: string;
  voterStake: string;
  voterPendingUnstake: string;
  cumulativeStake: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
}>;
export type UpdatedReward = ContractEventLog<{
  voter: string;
  newReward: string;
  lastUpdateTime: string;
  0: string;
  1: string;
  2: string;
}>;
export type WithdrawnRewards = ContractEventLog<{
  voter: string;
  delegate: string;
  tokensWithdrawn: string;
  0: string;
  1: string;
  2: string;
}>;

export interface StakerControlledTiming extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): StakerControlledTiming;
  clone(): StakerControlledTiming;
  methods: {
    cumulativeStake(): NonPayableTransactionObject<string>;

    delegateToStaker(arg0: string): NonPayableTransactionObject<string>;

    emissionRate(): NonPayableTransactionObject<string>;

    executeUnstake(): NonPayableTransactionObject<void>;

    getCurrentTime(): NonPayableTransactionObject<string>;

    getVoterFromDelegate(caller: string): NonPayableTransactionObject<string>;

    getVoterPendingStake(
      voter: string,
      roundId: number | string | BN
    ): NonPayableTransactionObject<string>;

    getVoterStakePostUpdate(voter: string): NonPayableTransactionObject<string>;

    lastUpdateTime(): NonPayableTransactionObject<string>;

    multicall(
      data: (string | number[])[]
    ): NonPayableTransactionObject<string[]>;

    outstandingRewards(voter: string): NonPayableTransactionObject<string>;

    owner(): NonPayableTransactionObject<string>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    requestUnstake(
      amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    rewardPerToken(): NonPayableTransactionObject<string>;

    rewardPerTokenStored(): NonPayableTransactionObject<string>;

    setCurrentTime(
      time: number | string | BN
    ): NonPayableTransactionObject<void>;

    setDelegate(delegate: string): NonPayableTransactionObject<void>;

    setDelegator(delegator: string): NonPayableTransactionObject<void>;

    setEmissionRate(
      newEmissionRate: number | string | BN
    ): NonPayableTransactionObject<void>;

    setUnstakeCoolDown(
      newUnstakeCoolDown: number | string | BN
    ): NonPayableTransactionObject<void>;

    stake(amount: number | string | BN): NonPayableTransactionObject<void>;

    stakeTo(
      recipient: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    timerAddress(): NonPayableTransactionObject<string>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    unstakeCoolDown(): NonPayableTransactionObject<string>;

    voterStakes(arg0: string): NonPayableTransactionObject<{
      stake: string;
      pendingUnstake: string;
      rewardsPaidPerToken: string;
      outstandingRewards: string;
      unappliedSlash: string;
      nextIndexToProcess: string;
      unstakeTime: string;
      delegate: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: string;
      7: string;
    }>;

    votingToken(): NonPayableTransactionObject<string>;

    withdrawAndRestake(): NonPayableTransactionObject<string>;

    withdrawRewards(): NonPayableTransactionObject<string>;
  };
  events: {
    DelegateSet(cb?: Callback<DelegateSet>): EventEmitter;
    DelegateSet(
      options?: EventOptions,
      cb?: Callback<DelegateSet>
    ): EventEmitter;

    DelegatorSet(cb?: Callback<DelegatorSet>): EventEmitter;
    DelegatorSet(
      options?: EventOptions,
      cb?: Callback<DelegatorSet>
    ): EventEmitter;

    ExecutedUnstake(cb?: Callback<ExecutedUnstake>): EventEmitter;
    ExecutedUnstake(
      options?: EventOptions,
      cb?: Callback<ExecutedUnstake>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    RequestedUnstake(cb?: Callback<RequestedUnstake>): EventEmitter;
    RequestedUnstake(
      options?: EventOptions,
      cb?: Callback<RequestedUnstake>
    ): EventEmitter;

    SetNewEmissionRate(cb?: Callback<SetNewEmissionRate>): EventEmitter;
    SetNewEmissionRate(
      options?: EventOptions,
      cb?: Callback<SetNewEmissionRate>
    ): EventEmitter;

    SetNewUnstakeCoolDown(cb?: Callback<SetNewUnstakeCoolDown>): EventEmitter;
    SetNewUnstakeCoolDown(
      options?: EventOptions,
      cb?: Callback<SetNewUnstakeCoolDown>
    ): EventEmitter;

    Staked(cb?: Callback<Staked>): EventEmitter;
    Staked(options?: EventOptions, cb?: Callback<Staked>): EventEmitter;

    UpdatedReward(cb?: Callback<UpdatedReward>): EventEmitter;
    UpdatedReward(
      options?: EventOptions,
      cb?: Callback<UpdatedReward>
    ): EventEmitter;

    WithdrawnRewards(cb?: Callback<WithdrawnRewards>): EventEmitter;
    WithdrawnRewards(
      options?: EventOptions,
      cb?: Callback<WithdrawnRewards>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "DelegateSet", cb: Callback<DelegateSet>): void;
  once(
    event: "DelegateSet",
    options: EventOptions,
    cb: Callback<DelegateSet>
  ): void;

  once(event: "DelegatorSet", cb: Callback<DelegatorSet>): void;
  once(
    event: "DelegatorSet",
    options: EventOptions,
    cb: Callback<DelegatorSet>
  ): void;

  once(event: "ExecutedUnstake", cb: Callback<ExecutedUnstake>): void;
  once(
    event: "ExecutedUnstake",
    options: EventOptions,
    cb: Callback<ExecutedUnstake>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "RequestedUnstake", cb: Callback<RequestedUnstake>): void;
  once(
    event: "RequestedUnstake",
    options: EventOptions,
    cb: Callback<RequestedUnstake>
  ): void;

  once(event: "SetNewEmissionRate", cb: Callback<SetNewEmissionRate>): void;
  once(
    event: "SetNewEmissionRate",
    options: EventOptions,
    cb: Callback<SetNewEmissionRate>
  ): void;

  once(
    event: "SetNewUnstakeCoolDown",
    cb: Callback<SetNewUnstakeCoolDown>
  ): void;
  once(
    event: "SetNewUnstakeCoolDown",
    options: EventOptions,
    cb: Callback<SetNewUnstakeCoolDown>
  ): void;

  once(event: "Staked", cb: Callback<Staked>): void;
  once(event: "Staked", options: EventOptions, cb: Callback<Staked>): void;

  once(event: "UpdatedReward", cb: Callback<UpdatedReward>): void;
  once(
    event: "UpdatedReward",
    options: EventOptions,
    cb: Callback<UpdatedReward>
  ): void;

  once(event: "WithdrawnRewards", cb: Callback<WithdrawnRewards>): void;
  once(
    event: "WithdrawnRewards",
    options: EventOptions,
    cb: Callback<WithdrawnRewards>
  ): void;
}
