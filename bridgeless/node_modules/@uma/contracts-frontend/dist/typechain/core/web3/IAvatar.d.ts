/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type DisabledModule = ContractEventLog<{
  module: string;
  0: string;
}>;
export type EnabledModule = ContractEventLog<{
  module: string;
  0: string;
}>;
export type ExecutionFromModuleFailure = ContractEventLog<{
  module: string;
  0: string;
}>;
export type ExecutionFromModuleSuccess = ContractEventLog<{
  module: string;
  0: string;
}>;

export interface IAvatar extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): IAvatar;
  clone(): IAvatar;
  methods: {
    disableModule(
      prevModule: string,
      module: string
    ): NonPayableTransactionObject<void>;

    enableModule(module: string): NonPayableTransactionObject<void>;

    execTransactionFromModule(
      to: string,
      value: number | string | BN,
      data: string | number[],
      operation: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    execTransactionFromModuleReturnData(
      to: string,
      value: number | string | BN,
      data: string | number[],
      operation: number | string | BN
    ): NonPayableTransactionObject<{
      success: boolean;
      returnData: string;
      0: boolean;
      1: string;
    }>;

    getModulesPaginated(
      start: string,
      pageSize: number | string | BN
    ): NonPayableTransactionObject<{
      array: string[];
      next: string;
      0: string[];
      1: string;
    }>;

    isModuleEnabled(module: string): NonPayableTransactionObject<boolean>;
  };
  events: {
    DisabledModule(cb?: Callback<DisabledModule>): EventEmitter;
    DisabledModule(
      options?: EventOptions,
      cb?: Callback<DisabledModule>
    ): EventEmitter;

    EnabledModule(cb?: Callback<EnabledModule>): EventEmitter;
    EnabledModule(
      options?: EventOptions,
      cb?: Callback<EnabledModule>
    ): EventEmitter;

    ExecutionFromModuleFailure(
      cb?: Callback<ExecutionFromModuleFailure>
    ): EventEmitter;
    ExecutionFromModuleFailure(
      options?: EventOptions,
      cb?: Callback<ExecutionFromModuleFailure>
    ): EventEmitter;

    ExecutionFromModuleSuccess(
      cb?: Callback<ExecutionFromModuleSuccess>
    ): EventEmitter;
    ExecutionFromModuleSuccess(
      options?: EventOptions,
      cb?: Callback<ExecutionFromModuleSuccess>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "DisabledModule", cb: Callback<DisabledModule>): void;
  once(
    event: "DisabledModule",
    options: EventOptions,
    cb: Callback<DisabledModule>
  ): void;

  once(event: "EnabledModule", cb: Callback<EnabledModule>): void;
  once(
    event: "EnabledModule",
    options: EventOptions,
    cb: Callback<EnabledModule>
  ): void;

  once(
    event: "ExecutionFromModuleFailure",
    cb: Callback<ExecutionFromModuleFailure>
  ): void;
  once(
    event: "ExecutionFromModuleFailure",
    options: EventOptions,
    cb: Callback<ExecutionFromModuleFailure>
  ): void;

  once(
    event: "ExecutionFromModuleSuccess",
    cb: Callback<ExecutionFromModuleSuccess>
  ): void;
  once(
    event: "ExecutionFromModuleSuccess",
    options: EventOptions,
    cb: Callback<ExecutionFromModuleSuccess>
  ): void;
}
