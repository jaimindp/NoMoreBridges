/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface StoreInterface extends ethers.utils.Interface {
  functions: {
    "SECONDS_PER_WEEK()": FunctionFragment;
    "addMember(uint256,address)": FunctionFragment;
    "computeFinalFee(address)": FunctionFragment;
    "computeRegularFee(uint256,uint256,(uint256))": FunctionFragment;
    "finalFees(address)": FunctionFragment;
    "fixedOracleFeePerSecondPerPfc()": FunctionFragment;
    "getCurrentTime()": FunctionFragment;
    "getMember(uint256)": FunctionFragment;
    "holdsRole(uint256,address)": FunctionFragment;
    "payOracleFees()": FunctionFragment;
    "payOracleFeesErc20(address,(uint256))": FunctionFragment;
    "removeMember(uint256,address)": FunctionFragment;
    "renounceMembership(uint256)": FunctionFragment;
    "resetMember(uint256,address)": FunctionFragment;
    "setCurrentTime(uint256)": FunctionFragment;
    "setFinalFee(address,(uint256))": FunctionFragment;
    "setFixedOracleFeePerSecondPerPfc((uint256))": FunctionFragment;
    "setWeeklyDelayFeePerSecondPerPfc((uint256))": FunctionFragment;
    "timerAddress()": FunctionFragment;
    "weeklyDelayFeePerSecondPerPfc()": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "withdrawErc20(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "SECONDS_PER_WEEK",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addMember",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "computeFinalFee",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "computeRegularFee",
    values: [BigNumberish, BigNumberish, { rawValue: BigNumberish }]
  ): string;
  encodeFunctionData(functionFragment: "finalFees", values: [string]): string;
  encodeFunctionData(
    functionFragment: "fixedOracleFeePerSecondPerPfc",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMember",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "holdsRole",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "payOracleFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "payOracleFeesErc20",
    values: [string, { rawValue: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "removeMember",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceMembership",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "resetMember",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setCurrentTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFinalFee",
    values: [string, { rawValue: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "setFixedOracleFeePerSecondPerPfc",
    values: [{ rawValue: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "setWeeklyDelayFeePerSecondPerPfc",
    values: [{ rawValue: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "timerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "weeklyDelayFeePerSecondPerPfc",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawErc20",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "SECONDS_PER_WEEK",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addMember", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "computeFinalFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeRegularFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "finalFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fixedOracleFeePerSecondPerPfc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMember", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "holdsRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payOracleFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payOracleFeesErc20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceMembership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCurrentTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFinalFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFixedOracleFeePerSecondPerPfc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWeeklyDelayFeePerSecondPerPfc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "weeklyDelayFeePerSecondPerPfc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawErc20",
    data: BytesLike
  ): Result;

  events: {
    "AddedSharedMember(uint256,address,address)": EventFragment;
    "NewFinalFee(tuple)": EventFragment;
    "NewFixedOracleFeePerSecondPerPfc(tuple)": EventFragment;
    "NewWeeklyDelayFeePerSecondPerPfc(tuple)": EventFragment;
    "RemovedSharedMember(uint256,address,address)": EventFragment;
    "ResetExclusiveMember(uint256,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddedSharedMember"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewFinalFee"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "NewFixedOracleFeePerSecondPerPfc"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "NewWeeklyDelayFeePerSecondPerPfc"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemovedSharedMember"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ResetExclusiveMember"): EventFragment;
}

export type AddedSharedMemberEvent = TypedEvent<
  [BigNumber, string, string] & {
    roleId: BigNumber;
    newMember: string;
    manager: string;
  }
>;

export type NewFinalFeeEvent = TypedEvent<
  [[BigNumber] & { rawValue: BigNumber }] & {
    newFinalFee: [BigNumber] & { rawValue: BigNumber };
  }
>;

export type NewFixedOracleFeePerSecondPerPfcEvent = TypedEvent<
  [[BigNumber] & { rawValue: BigNumber }] & {
    newOracleFee: [BigNumber] & { rawValue: BigNumber };
  }
>;

export type NewWeeklyDelayFeePerSecondPerPfcEvent = TypedEvent<
  [[BigNumber] & { rawValue: BigNumber }] & {
    newWeeklyDelayFeePerSecondPerPfc: [BigNumber] & { rawValue: BigNumber };
  }
>;

export type RemovedSharedMemberEvent = TypedEvent<
  [BigNumber, string, string] & {
    roleId: BigNumber;
    oldMember: string;
    manager: string;
  }
>;

export type ResetExclusiveMemberEvent = TypedEvent<
  [BigNumber, string, string] & {
    roleId: BigNumber;
    newMember: string;
    manager: string;
  }
>;

export class Store extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: StoreInterface;

  functions: {
    SECONDS_PER_WEEK(overrides?: CallOverrides): Promise<[BigNumber]>;

    addMember(
      roleId: BigNumberish,
      newMember: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    computeFinalFee(
      currency: string,
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { rawValue: BigNumber }]>;

    computeRegularFee(
      startTime: BigNumberish,
      endTime: BigNumberish,
      pfc: { rawValue: BigNumberish },
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber }
      ] & {
        regularFee: [BigNumber] & { rawValue: BigNumber };
        latePenalty: [BigNumber] & { rawValue: BigNumber };
      }
    >;

    finalFees(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    fixedOracleFeePerSecondPerPfc(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    getCurrentTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMember(
      roleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    holdsRole(
      roleId: BigNumberish,
      memberToCheck: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    payOracleFees(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    payOracleFeesErc20(
      erc20Address: string,
      amount: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeMember(
      roleId: BigNumberish,
      memberToRemove: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceMembership(
      roleId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    resetMember(
      roleId: BigNumberish,
      newMember: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCurrentTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFinalFee(
      currency: string,
      newFinalFee: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFixedOracleFeePerSecondPerPfc(
      newFixedOracleFeePerSecondPerPfc: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWeeklyDelayFeePerSecondPerPfc(
      newWeeklyDelayFeePerSecondPerPfc: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    timerAddress(overrides?: CallOverrides): Promise<[string]>;

    weeklyDelayFeePerSecondPerPfc(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawErc20(
      erc20Address: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  SECONDS_PER_WEEK(overrides?: CallOverrides): Promise<BigNumber>;

  addMember(
    roleId: BigNumberish,
    newMember: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  computeFinalFee(
    currency: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { rawValue: BigNumber }>;

  computeRegularFee(
    startTime: BigNumberish,
    endTime: BigNumberish,
    pfc: { rawValue: BigNumberish },
    overrides?: CallOverrides
  ): Promise<
    [
      [BigNumber] & { rawValue: BigNumber },
      [BigNumber] & { rawValue: BigNumber }
    ] & {
      regularFee: [BigNumber] & { rawValue: BigNumber };
      latePenalty: [BigNumber] & { rawValue: BigNumber };
    }
  >;

  finalFees(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  fixedOracleFeePerSecondPerPfc(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

  getMember(roleId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  holdsRole(
    roleId: BigNumberish,
    memberToCheck: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  payOracleFees(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  payOracleFeesErc20(
    erc20Address: string,
    amount: { rawValue: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeMember(
    roleId: BigNumberish,
    memberToRemove: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceMembership(
    roleId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  resetMember(
    roleId: BigNumberish,
    newMember: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCurrentTime(
    time: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFinalFee(
    currency: string,
    newFinalFee: { rawValue: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFixedOracleFeePerSecondPerPfc(
    newFixedOracleFeePerSecondPerPfc: { rawValue: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWeeklyDelayFeePerSecondPerPfc(
    newWeeklyDelayFeePerSecondPerPfc: { rawValue: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  timerAddress(overrides?: CallOverrides): Promise<string>;

  weeklyDelayFeePerSecondPerPfc(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawErc20(
    erc20Address: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    SECONDS_PER_WEEK(overrides?: CallOverrides): Promise<BigNumber>;

    addMember(
      roleId: BigNumberish,
      newMember: string,
      overrides?: CallOverrides
    ): Promise<void>;

    computeFinalFee(
      currency: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    computeRegularFee(
      startTime: BigNumberish,
      endTime: BigNumberish,
      pfc: { rawValue: BigNumberish },
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber }
      ] & {
        regularFee: [BigNumber] & { rawValue: BigNumber };
        latePenalty: [BigNumber] & { rawValue: BigNumber };
      }
    >;

    finalFees(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    fixedOracleFeePerSecondPerPfc(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

    getMember(roleId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    holdsRole(
      roleId: BigNumberish,
      memberToCheck: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    payOracleFees(overrides?: CallOverrides): Promise<void>;

    payOracleFeesErc20(
      erc20Address: string,
      amount: { rawValue: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    removeMember(
      roleId: BigNumberish,
      memberToRemove: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceMembership(
      roleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    resetMember(
      roleId: BigNumberish,
      newMember: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setCurrentTime(
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFinalFee(
      currency: string,
      newFinalFee: { rawValue: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    setFixedOracleFeePerSecondPerPfc(
      newFixedOracleFeePerSecondPerPfc: { rawValue: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    setWeeklyDelayFeePerSecondPerPfc(
      newWeeklyDelayFeePerSecondPerPfc: { rawValue: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    timerAddress(overrides?: CallOverrides): Promise<string>;

    weeklyDelayFeePerSecondPerPfc(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    withdrawErc20(
      erc20Address: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddedSharedMember(uint256,address,address)"(
      roleId?: BigNumberish | null,
      newMember?: string | null,
      manager?: string | null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { roleId: BigNumber; newMember: string; manager: string }
    >;

    AddedSharedMember(
      roleId?: BigNumberish | null,
      newMember?: string | null,
      manager?: string | null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { roleId: BigNumber; newMember: string; manager: string }
    >;

    "NewFinalFee(tuple)"(
      newFinalFee?: null
    ): TypedEventFilter<
      [[BigNumber] & { rawValue: BigNumber }],
      { newFinalFee: [BigNumber] & { rawValue: BigNumber } }
    >;

    NewFinalFee(
      newFinalFee?: null
    ): TypedEventFilter<
      [[BigNumber] & { rawValue: BigNumber }],
      { newFinalFee: [BigNumber] & { rawValue: BigNumber } }
    >;

    "NewFixedOracleFeePerSecondPerPfc(tuple)"(
      newOracleFee?: null
    ): TypedEventFilter<
      [[BigNumber] & { rawValue: BigNumber }],
      { newOracleFee: [BigNumber] & { rawValue: BigNumber } }
    >;

    NewFixedOracleFeePerSecondPerPfc(
      newOracleFee?: null
    ): TypedEventFilter<
      [[BigNumber] & { rawValue: BigNumber }],
      { newOracleFee: [BigNumber] & { rawValue: BigNumber } }
    >;

    "NewWeeklyDelayFeePerSecondPerPfc(tuple)"(
      newWeeklyDelayFeePerSecondPerPfc?: null
    ): TypedEventFilter<
      [[BigNumber] & { rawValue: BigNumber }],
      {
        newWeeklyDelayFeePerSecondPerPfc: [BigNumber] & { rawValue: BigNumber };
      }
    >;

    NewWeeklyDelayFeePerSecondPerPfc(
      newWeeklyDelayFeePerSecondPerPfc?: null
    ): TypedEventFilter<
      [[BigNumber] & { rawValue: BigNumber }],
      {
        newWeeklyDelayFeePerSecondPerPfc: [BigNumber] & { rawValue: BigNumber };
      }
    >;

    "RemovedSharedMember(uint256,address,address)"(
      roleId?: BigNumberish | null,
      oldMember?: string | null,
      manager?: string | null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { roleId: BigNumber; oldMember: string; manager: string }
    >;

    RemovedSharedMember(
      roleId?: BigNumberish | null,
      oldMember?: string | null,
      manager?: string | null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { roleId: BigNumber; oldMember: string; manager: string }
    >;

    "ResetExclusiveMember(uint256,address,address)"(
      roleId?: BigNumberish | null,
      newMember?: string | null,
      manager?: string | null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { roleId: BigNumber; newMember: string; manager: string }
    >;

    ResetExclusiveMember(
      roleId?: BigNumberish | null,
      newMember?: string | null,
      manager?: string | null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { roleId: BigNumber; newMember: string; manager: string }
    >;
  };

  estimateGas: {
    SECONDS_PER_WEEK(overrides?: CallOverrides): Promise<BigNumber>;

    addMember(
      roleId: BigNumberish,
      newMember: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    computeFinalFee(
      currency: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeRegularFee(
      startTime: BigNumberish,
      endTime: BigNumberish,
      pfc: { rawValue: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    finalFees(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    fixedOracleFeePerSecondPerPfc(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

    getMember(
      roleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    holdsRole(
      roleId: BigNumberish,
      memberToCheck: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    payOracleFees(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    payOracleFeesErc20(
      erc20Address: string,
      amount: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeMember(
      roleId: BigNumberish,
      memberToRemove: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceMembership(
      roleId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    resetMember(
      roleId: BigNumberish,
      newMember: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCurrentTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFinalFee(
      currency: string,
      newFinalFee: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFixedOracleFeePerSecondPerPfc(
      newFixedOracleFeePerSecondPerPfc: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWeeklyDelayFeePerSecondPerPfc(
      newWeeklyDelayFeePerSecondPerPfc: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    timerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    weeklyDelayFeePerSecondPerPfc(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawErc20(
      erc20Address: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    SECONDS_PER_WEEK(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addMember(
      roleId: BigNumberish,
      newMember: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    computeFinalFee(
      currency: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeRegularFee(
      startTime: BigNumberish,
      endTime: BigNumberish,
      pfc: { rawValue: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    finalFees(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fixedOracleFeePerSecondPerPfc(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMember(
      roleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    holdsRole(
      roleId: BigNumberish,
      memberToCheck: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    payOracleFees(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    payOracleFeesErc20(
      erc20Address: string,
      amount: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeMember(
      roleId: BigNumberish,
      memberToRemove: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceMembership(
      roleId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    resetMember(
      roleId: BigNumberish,
      newMember: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCurrentTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFinalFee(
      currency: string,
      newFinalFee: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFixedOracleFeePerSecondPerPfc(
      newFixedOracleFeePerSecondPerPfc: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWeeklyDelayFeePerSecondPerPfc(
      newWeeklyDelayFeePerSecondPerPfc: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    timerAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weeklyDelayFeePerSecondPerPfc(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawErc20(
      erc20Address: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
