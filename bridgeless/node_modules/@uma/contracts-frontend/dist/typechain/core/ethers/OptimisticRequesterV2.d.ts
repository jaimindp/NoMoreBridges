/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface OptimisticRequesterV2Interface extends ethers.utils.Interface {
  functions: {
    "priceDisputed(bytes32,uint32,bytes,(address,address,address,bool,(bool,bool,bool,uint256,uint256),int256,int256,uint256,uint256,uint256))": FunctionFragment;
    "priceProposed(bytes32,uint32,bytes,(address,address,address,bool,(bool,bool,bool,uint256,uint256),int256,int256,uint256,uint256,uint256))": FunctionFragment;
    "priceSettled(bytes32,uint32,bytes,(address,address,address,bool,(bool,bool,bool,uint256,uint256),int256,int256,uint256,uint256,uint256))": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "priceDisputed",
    values: [
      BytesLike,
      BigNumberish,
      BytesLike,
      {
        proposer: string;
        disputer: string;
        currency: string;
        settled: boolean;
        requestSettings: {
          callbackOnPriceProposed: boolean;
          callbackOnPriceDisputed: boolean;
          callbackOnPriceSettled: boolean;
          bond: BigNumberish;
          customLiveness: BigNumberish;
        };
        proposedPrice: BigNumberish;
        resolvedPrice: BigNumberish;
        expirationTime: BigNumberish;
        reward: BigNumberish;
        finalFee: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "priceProposed",
    values: [
      BytesLike,
      BigNumberish,
      BytesLike,
      {
        proposer: string;
        disputer: string;
        currency: string;
        settled: boolean;
        requestSettings: {
          callbackOnPriceProposed: boolean;
          callbackOnPriceDisputed: boolean;
          callbackOnPriceSettled: boolean;
          bond: BigNumberish;
          customLiveness: BigNumberish;
        };
        proposedPrice: BigNumberish;
        resolvedPrice: BigNumberish;
        expirationTime: BigNumberish;
        reward: BigNumberish;
        finalFee: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "priceSettled",
    values: [
      BytesLike,
      BigNumberish,
      BytesLike,
      {
        proposer: string;
        disputer: string;
        currency: string;
        settled: boolean;
        requestSettings: {
          callbackOnPriceProposed: boolean;
          callbackOnPriceDisputed: boolean;
          callbackOnPriceSettled: boolean;
          bond: BigNumberish;
          customLiveness: BigNumberish;
        };
        proposedPrice: BigNumberish;
        resolvedPrice: BigNumberish;
        expirationTime: BigNumberish;
        reward: BigNumberish;
        finalFee: BigNumberish;
      }
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "priceDisputed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceProposed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceSettled",
    data: BytesLike
  ): Result;

  events: {};
}

export class OptimisticRequesterV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: OptimisticRequesterV2Interface;

  functions: {
    priceDisputed(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      request: {
        proposer: string;
        disputer: string;
        currency: string;
        settled: boolean;
        requestSettings: {
          callbackOnPriceProposed: boolean;
          callbackOnPriceDisputed: boolean;
          callbackOnPriceSettled: boolean;
          bond: BigNumberish;
          customLiveness: BigNumberish;
        };
        proposedPrice: BigNumberish;
        resolvedPrice: BigNumberish;
        expirationTime: BigNumberish;
        reward: BigNumberish;
        finalFee: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    priceProposed(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      request: {
        proposer: string;
        disputer: string;
        currency: string;
        settled: boolean;
        requestSettings: {
          callbackOnPriceProposed: boolean;
          callbackOnPriceDisputed: boolean;
          callbackOnPriceSettled: boolean;
          bond: BigNumberish;
          customLiveness: BigNumberish;
        };
        proposedPrice: BigNumberish;
        resolvedPrice: BigNumberish;
        expirationTime: BigNumberish;
        reward: BigNumberish;
        finalFee: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    priceSettled(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      request: {
        proposer: string;
        disputer: string;
        currency: string;
        settled: boolean;
        requestSettings: {
          callbackOnPriceProposed: boolean;
          callbackOnPriceDisputed: boolean;
          callbackOnPriceSettled: boolean;
          bond: BigNumberish;
          customLiveness: BigNumberish;
        };
        proposedPrice: BigNumberish;
        resolvedPrice: BigNumberish;
        expirationTime: BigNumberish;
        reward: BigNumberish;
        finalFee: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  priceDisputed(
    identifier: BytesLike,
    timestamp: BigNumberish,
    ancillaryData: BytesLike,
    request: {
      proposer: string;
      disputer: string;
      currency: string;
      settled: boolean;
      requestSettings: {
        callbackOnPriceProposed: boolean;
        callbackOnPriceDisputed: boolean;
        callbackOnPriceSettled: boolean;
        bond: BigNumberish;
        customLiveness: BigNumberish;
      };
      proposedPrice: BigNumberish;
      resolvedPrice: BigNumberish;
      expirationTime: BigNumberish;
      reward: BigNumberish;
      finalFee: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  priceProposed(
    identifier: BytesLike,
    timestamp: BigNumberish,
    ancillaryData: BytesLike,
    request: {
      proposer: string;
      disputer: string;
      currency: string;
      settled: boolean;
      requestSettings: {
        callbackOnPriceProposed: boolean;
        callbackOnPriceDisputed: boolean;
        callbackOnPriceSettled: boolean;
        bond: BigNumberish;
        customLiveness: BigNumberish;
      };
      proposedPrice: BigNumberish;
      resolvedPrice: BigNumberish;
      expirationTime: BigNumberish;
      reward: BigNumberish;
      finalFee: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  priceSettled(
    identifier: BytesLike,
    timestamp: BigNumberish,
    ancillaryData: BytesLike,
    request: {
      proposer: string;
      disputer: string;
      currency: string;
      settled: boolean;
      requestSettings: {
        callbackOnPriceProposed: boolean;
        callbackOnPriceDisputed: boolean;
        callbackOnPriceSettled: boolean;
        bond: BigNumberish;
        customLiveness: BigNumberish;
      };
      proposedPrice: BigNumberish;
      resolvedPrice: BigNumberish;
      expirationTime: BigNumberish;
      reward: BigNumberish;
      finalFee: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    priceDisputed(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      request: {
        proposer: string;
        disputer: string;
        currency: string;
        settled: boolean;
        requestSettings: {
          callbackOnPriceProposed: boolean;
          callbackOnPriceDisputed: boolean;
          callbackOnPriceSettled: boolean;
          bond: BigNumberish;
          customLiveness: BigNumberish;
        };
        proposedPrice: BigNumberish;
        resolvedPrice: BigNumberish;
        expirationTime: BigNumberish;
        reward: BigNumberish;
        finalFee: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    priceProposed(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      request: {
        proposer: string;
        disputer: string;
        currency: string;
        settled: boolean;
        requestSettings: {
          callbackOnPriceProposed: boolean;
          callbackOnPriceDisputed: boolean;
          callbackOnPriceSettled: boolean;
          bond: BigNumberish;
          customLiveness: BigNumberish;
        };
        proposedPrice: BigNumberish;
        resolvedPrice: BigNumberish;
        expirationTime: BigNumberish;
        reward: BigNumberish;
        finalFee: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    priceSettled(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      request: {
        proposer: string;
        disputer: string;
        currency: string;
        settled: boolean;
        requestSettings: {
          callbackOnPriceProposed: boolean;
          callbackOnPriceDisputed: boolean;
          callbackOnPriceSettled: boolean;
          bond: BigNumberish;
          customLiveness: BigNumberish;
        };
        proposedPrice: BigNumberish;
        resolvedPrice: BigNumberish;
        expirationTime: BigNumberish;
        reward: BigNumberish;
        finalFee: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    priceDisputed(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      request: {
        proposer: string;
        disputer: string;
        currency: string;
        settled: boolean;
        requestSettings: {
          callbackOnPriceProposed: boolean;
          callbackOnPriceDisputed: boolean;
          callbackOnPriceSettled: boolean;
          bond: BigNumberish;
          customLiveness: BigNumberish;
        };
        proposedPrice: BigNumberish;
        resolvedPrice: BigNumberish;
        expirationTime: BigNumberish;
        reward: BigNumberish;
        finalFee: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    priceProposed(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      request: {
        proposer: string;
        disputer: string;
        currency: string;
        settled: boolean;
        requestSettings: {
          callbackOnPriceProposed: boolean;
          callbackOnPriceDisputed: boolean;
          callbackOnPriceSettled: boolean;
          bond: BigNumberish;
          customLiveness: BigNumberish;
        };
        proposedPrice: BigNumberish;
        resolvedPrice: BigNumberish;
        expirationTime: BigNumberish;
        reward: BigNumberish;
        finalFee: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    priceSettled(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      request: {
        proposer: string;
        disputer: string;
        currency: string;
        settled: boolean;
        requestSettings: {
          callbackOnPriceProposed: boolean;
          callbackOnPriceDisputed: boolean;
          callbackOnPriceSettled: boolean;
          bond: BigNumberish;
          customLiveness: BigNumberish;
        };
        proposedPrice: BigNumberish;
        resolvedPrice: BigNumberish;
        expirationTime: BigNumberish;
        reward: BigNumberish;
        finalFee: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    priceDisputed(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      request: {
        proposer: string;
        disputer: string;
        currency: string;
        settled: boolean;
        requestSettings: {
          callbackOnPriceProposed: boolean;
          callbackOnPriceDisputed: boolean;
          callbackOnPriceSettled: boolean;
          bond: BigNumberish;
          customLiveness: BigNumberish;
        };
        proposedPrice: BigNumberish;
        resolvedPrice: BigNumberish;
        expirationTime: BigNumberish;
        reward: BigNumberish;
        finalFee: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    priceProposed(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      request: {
        proposer: string;
        disputer: string;
        currency: string;
        settled: boolean;
        requestSettings: {
          callbackOnPriceProposed: boolean;
          callbackOnPriceDisputed: boolean;
          callbackOnPriceSettled: boolean;
          bond: BigNumberish;
          customLiveness: BigNumberish;
        };
        proposedPrice: BigNumberish;
        resolvedPrice: BigNumberish;
        expirationTime: BigNumberish;
        reward: BigNumberish;
        finalFee: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    priceSettled(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      request: {
        proposer: string;
        disputer: string;
        currency: string;
        settled: boolean;
        requestSettings: {
          callbackOnPriceProposed: boolean;
          callbackOnPriceDisputed: boolean;
          callbackOnPriceSettled: boolean;
          bond: BigNumberish;
          customLiveness: BigNumberish;
        };
        proposedPrice: BigNumberish;
        resolvedPrice: BigNumberish;
        expirationTime: BigNumberish;
        reward: BigNumberish;
        finalFee: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
