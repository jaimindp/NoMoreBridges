/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface LongShortPairInterface extends ethers.utils.Interface {
  functions: {
    "collateralPerPair()": FunctionFragment;
    "collateralToken()": FunctionFragment;
    "create(uint256)": FunctionFragment;
    "customAncillaryData()": FunctionFragment;
    "earlyExpirationTimestamp()": FunctionFragment;
    "enableEarlyExpiration()": FunctionFragment;
    "expirationTimestamp()": FunctionFragment;
    "expire()": FunctionFragment;
    "expiryPercentLong()": FunctionFragment;
    "expiryPrice()": FunctionFragment;
    "financialProductLibrary()": FunctionFragment;
    "finder()": FunctionFragment;
    "getCurrentTime()": FunctionFragment;
    "getEarlyExpirationAncillaryData()": FunctionFragment;
    "getPositionTokens(address)": FunctionFragment;
    "ignoreEarlyExpirationPrice()": FunctionFragment;
    "isContractEarlyExpired()": FunctionFragment;
    "longToken()": FunctionFragment;
    "optimisticOracleLivenessTime()": FunctionFragment;
    "optimisticOracleProposerBond()": FunctionFragment;
    "pairName()": FunctionFragment;
    "priceIdentifier()": FunctionFragment;
    "proposerReward()": FunctionFragment;
    "receivedSettlementPrice()": FunctionFragment;
    "redeem(uint256)": FunctionFragment;
    "requestEarlyExpiration(uint64)": FunctionFragment;
    "setCurrentTime(uint256)": FunctionFragment;
    "settle(uint256,uint256)": FunctionFragment;
    "shortToken()": FunctionFragment;
    "timerAddress()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "collateralPerPair",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "create",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "customAncillaryData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "earlyExpirationTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enableEarlyExpiration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "expirationTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "expire", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "expiryPercentLong",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "expiryPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "financialProductLibrary",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "finder", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCurrentTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEarlyExpirationAncillaryData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionTokens",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ignoreEarlyExpirationPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isContractEarlyExpired",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "longToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "optimisticOracleLivenessTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "optimisticOracleProposerBond",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pairName", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "priceIdentifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposerReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "receivedSettlementPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestEarlyExpiration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCurrentTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "settle",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "shortToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timerAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "collateralPerPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "customAncillaryData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "earlyExpirationTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableEarlyExpiration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "expirationTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "expire", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "expiryPercentLong",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "expiryPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "financialProductLibrary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "finder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEarlyExpirationAncillaryData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ignoreEarlyExpirationPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isContractEarlyExpired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "longToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "optimisticOracleLivenessTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "optimisticOracleProposerBond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pairName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceIdentifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposerReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receivedSettlementPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestEarlyExpiration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCurrentTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "settle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "shortToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "timerAddress",
    data: BytesLike
  ): Result;

  events: {
    "ContractExpired(address)": EventFragment;
    "EarlyExpirationRequested(address,uint64)": EventFragment;
    "PositionSettled(address,uint256,uint256,uint256)": EventFragment;
    "TokensCreated(address,uint256,uint256)": EventFragment;
    "TokensRedeemed(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ContractExpired"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EarlyExpirationRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionSettled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensRedeemed"): EventFragment;
}

export type ContractExpiredEvent = TypedEvent<[string] & { caller: string }>;

export type EarlyExpirationRequestedEvent = TypedEvent<
  [string, BigNumber] & { caller: string; earlyExpirationTimeStamp: BigNumber }
>;

export type PositionSettledEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber] & {
    sponsor: string;
    collateralReturned: BigNumber;
    longTokens: BigNumber;
    shortTokens: BigNumber;
  }
>;

export type TokensCreatedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    sponsor: string;
    collateralUsed: BigNumber;
    tokensMinted: BigNumber;
  }
>;

export type TokensRedeemedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    sponsor: string;
    collateralReturned: BigNumber;
    tokensRedeemed: BigNumber;
  }
>;

export class LongShortPair extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LongShortPairInterface;

  functions: {
    collateralPerPair(overrides?: CallOverrides): Promise<[BigNumber]>;

    collateralToken(overrides?: CallOverrides): Promise<[string]>;

    create(
      tokensToCreate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    customAncillaryData(overrides?: CallOverrides): Promise<[string]>;

    earlyExpirationTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    enableEarlyExpiration(overrides?: CallOverrides): Promise<[boolean]>;

    expirationTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    expire(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    expiryPercentLong(overrides?: CallOverrides): Promise<[BigNumber]>;

    expiryPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    financialProductLibrary(overrides?: CallOverrides): Promise<[string]>;

    finder(overrides?: CallOverrides): Promise<[string]>;

    getCurrentTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    getEarlyExpirationAncillaryData(
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPositionTokens(
      sponsor: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { longTokens: BigNumber; shortTokens: BigNumber }
    >;

    ignoreEarlyExpirationPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    isContractEarlyExpired(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    longToken(overrides?: CallOverrides): Promise<[string]>;

    optimisticOracleLivenessTime(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    optimisticOracleProposerBond(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pairName(overrides?: CallOverrides): Promise<[string]>;

    priceIdentifier(overrides?: CallOverrides): Promise<[string]>;

    proposerReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    receivedSettlementPrice(overrides?: CallOverrides): Promise<[boolean]>;

    redeem(
      tokensToRedeem: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestEarlyExpiration(
      _earlyExpirationTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCurrentTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settle(
      longTokensToRedeem: BigNumberish,
      shortTokensToRedeem: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    shortToken(overrides?: CallOverrides): Promise<[string]>;

    timerAddress(overrides?: CallOverrides): Promise<[string]>;
  };

  collateralPerPair(overrides?: CallOverrides): Promise<BigNumber>;

  collateralToken(overrides?: CallOverrides): Promise<string>;

  create(
    tokensToCreate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  customAncillaryData(overrides?: CallOverrides): Promise<string>;

  earlyExpirationTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  enableEarlyExpiration(overrides?: CallOverrides): Promise<boolean>;

  expirationTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  expire(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  expiryPercentLong(overrides?: CallOverrides): Promise<BigNumber>;

  expiryPrice(overrides?: CallOverrides): Promise<BigNumber>;

  financialProductLibrary(overrides?: CallOverrides): Promise<string>;

  finder(overrides?: CallOverrides): Promise<string>;

  getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

  getEarlyExpirationAncillaryData(overrides?: CallOverrides): Promise<string>;

  getPositionTokens(
    sponsor: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { longTokens: BigNumber; shortTokens: BigNumber }
  >;

  ignoreEarlyExpirationPrice(overrides?: CallOverrides): Promise<BigNumber>;

  isContractEarlyExpired(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  longToken(overrides?: CallOverrides): Promise<string>;

  optimisticOracleLivenessTime(overrides?: CallOverrides): Promise<BigNumber>;

  optimisticOracleProposerBond(overrides?: CallOverrides): Promise<BigNumber>;

  pairName(overrides?: CallOverrides): Promise<string>;

  priceIdentifier(overrides?: CallOverrides): Promise<string>;

  proposerReward(overrides?: CallOverrides): Promise<BigNumber>;

  receivedSettlementPrice(overrides?: CallOverrides): Promise<boolean>;

  redeem(
    tokensToRedeem: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestEarlyExpiration(
    _earlyExpirationTimestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCurrentTime(
    time: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settle(
    longTokensToRedeem: BigNumberish,
    shortTokensToRedeem: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  shortToken(overrides?: CallOverrides): Promise<string>;

  timerAddress(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    collateralPerPair(overrides?: CallOverrides): Promise<BigNumber>;

    collateralToken(overrides?: CallOverrides): Promise<string>;

    create(
      tokensToCreate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    customAncillaryData(overrides?: CallOverrides): Promise<string>;

    earlyExpirationTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    enableEarlyExpiration(overrides?: CallOverrides): Promise<boolean>;

    expirationTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    expire(overrides?: CallOverrides): Promise<void>;

    expiryPercentLong(overrides?: CallOverrides): Promise<BigNumber>;

    expiryPrice(overrides?: CallOverrides): Promise<BigNumber>;

    financialProductLibrary(overrides?: CallOverrides): Promise<string>;

    finder(overrides?: CallOverrides): Promise<string>;

    getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

    getEarlyExpirationAncillaryData(overrides?: CallOverrides): Promise<string>;

    getPositionTokens(
      sponsor: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { longTokens: BigNumber; shortTokens: BigNumber }
    >;

    ignoreEarlyExpirationPrice(overrides?: CallOverrides): Promise<BigNumber>;

    isContractEarlyExpired(overrides?: CallOverrides): Promise<boolean>;

    longToken(overrides?: CallOverrides): Promise<string>;

    optimisticOracleLivenessTime(overrides?: CallOverrides): Promise<BigNumber>;

    optimisticOracleProposerBond(overrides?: CallOverrides): Promise<BigNumber>;

    pairName(overrides?: CallOverrides): Promise<string>;

    priceIdentifier(overrides?: CallOverrides): Promise<string>;

    proposerReward(overrides?: CallOverrides): Promise<BigNumber>;

    receivedSettlementPrice(overrides?: CallOverrides): Promise<boolean>;

    redeem(
      tokensToRedeem: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requestEarlyExpiration(
      _earlyExpirationTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCurrentTime(
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    settle(
      longTokensToRedeem: BigNumberish,
      shortTokensToRedeem: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    shortToken(overrides?: CallOverrides): Promise<string>;

    timerAddress(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "ContractExpired(address)"(
      caller?: string | null
    ): TypedEventFilter<[string], { caller: string }>;

    ContractExpired(
      caller?: string | null
    ): TypedEventFilter<[string], { caller: string }>;

    "EarlyExpirationRequested(address,uint64)"(
      caller?: string | null,
      earlyExpirationTimeStamp?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { caller: string; earlyExpirationTimeStamp: BigNumber }
    >;

    EarlyExpirationRequested(
      caller?: string | null,
      earlyExpirationTimeStamp?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { caller: string; earlyExpirationTimeStamp: BigNumber }
    >;

    "PositionSettled(address,uint256,uint256,uint256)"(
      sponsor?: string | null,
      collateralReturned?: null,
      longTokens?: null,
      shortTokens?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        sponsor: string;
        collateralReturned: BigNumber;
        longTokens: BigNumber;
        shortTokens: BigNumber;
      }
    >;

    PositionSettled(
      sponsor?: string | null,
      collateralReturned?: null,
      longTokens?: null,
      shortTokens?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        sponsor: string;
        collateralReturned: BigNumber;
        longTokens: BigNumber;
        shortTokens: BigNumber;
      }
    >;

    "TokensCreated(address,uint256,uint256)"(
      sponsor?: string | null,
      collateralUsed?: BigNumberish | null,
      tokensMinted?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { sponsor: string; collateralUsed: BigNumber; tokensMinted: BigNumber }
    >;

    TokensCreated(
      sponsor?: string | null,
      collateralUsed?: BigNumberish | null,
      tokensMinted?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { sponsor: string; collateralUsed: BigNumber; tokensMinted: BigNumber }
    >;

    "TokensRedeemed(address,uint256,uint256)"(
      sponsor?: string | null,
      collateralReturned?: BigNumberish | null,
      tokensRedeemed?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      {
        sponsor: string;
        collateralReturned: BigNumber;
        tokensRedeemed: BigNumber;
      }
    >;

    TokensRedeemed(
      sponsor?: string | null,
      collateralReturned?: BigNumberish | null,
      tokensRedeemed?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      {
        sponsor: string;
        collateralReturned: BigNumber;
        tokensRedeemed: BigNumber;
      }
    >;
  };

  estimateGas: {
    collateralPerPair(overrides?: CallOverrides): Promise<BigNumber>;

    collateralToken(overrides?: CallOverrides): Promise<BigNumber>;

    create(
      tokensToCreate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    customAncillaryData(overrides?: CallOverrides): Promise<BigNumber>;

    earlyExpirationTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    enableEarlyExpiration(overrides?: CallOverrides): Promise<BigNumber>;

    expirationTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    expire(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    expiryPercentLong(overrides?: CallOverrides): Promise<BigNumber>;

    expiryPrice(overrides?: CallOverrides): Promise<BigNumber>;

    financialProductLibrary(overrides?: CallOverrides): Promise<BigNumber>;

    finder(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

    getEarlyExpirationAncillaryData(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionTokens(
      sponsor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ignoreEarlyExpirationPrice(overrides?: CallOverrides): Promise<BigNumber>;

    isContractEarlyExpired(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    longToken(overrides?: CallOverrides): Promise<BigNumber>;

    optimisticOracleLivenessTime(overrides?: CallOverrides): Promise<BigNumber>;

    optimisticOracleProposerBond(overrides?: CallOverrides): Promise<BigNumber>;

    pairName(overrides?: CallOverrides): Promise<BigNumber>;

    priceIdentifier(overrides?: CallOverrides): Promise<BigNumber>;

    proposerReward(overrides?: CallOverrides): Promise<BigNumber>;

    receivedSettlementPrice(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      tokensToRedeem: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestEarlyExpiration(
      _earlyExpirationTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCurrentTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settle(
      longTokensToRedeem: BigNumberish,
      shortTokensToRedeem: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    shortToken(overrides?: CallOverrides): Promise<BigNumber>;

    timerAddress(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    collateralPerPair(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collateralToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    create(
      tokensToCreate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    customAncillaryData(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    earlyExpirationTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    enableEarlyExpiration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    expirationTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    expire(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    expiryPercentLong(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    expiryPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    financialProductLibrary(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    finder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEarlyExpirationAncillaryData(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositionTokens(
      sponsor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ignoreEarlyExpirationPrice(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isContractEarlyExpired(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    longToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    optimisticOracleLivenessTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    optimisticOracleProposerBond(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pairName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceIdentifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposerReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    receivedSettlementPrice(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeem(
      tokensToRedeem: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestEarlyExpiration(
      _earlyExpirationTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCurrentTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settle(
      longTokensToRedeem: BigNumberish,
      shortTokensToRedeem: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    shortToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timerAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
