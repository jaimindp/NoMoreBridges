/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Contract, utils } from "ethers";
const _abi = [
    {
        inputs: [
            {
                internalType: "uint256",
                name: "totalStaked",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "totalVotes",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "totalCorrectVotes",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "priceRequestIndex",
                type: "uint256",
            },
        ],
        name: "calcNoVoteSlashPerToken",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "totalStaked",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "totalVotes",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "totalCorrectVotes",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "priceRequestIndex",
                type: "uint256",
            },
            {
                internalType: "bool",
                name: "isGovernance",
                type: "bool",
            },
        ],
        name: "calcSlashing",
        outputs: [
            {
                internalType: "uint256",
                name: "wrongVoteSlashPerToken",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "noVoteSlashPerToken",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "totalStaked",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "totalVotes",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "totalCorrectVotes",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "priceRequestIndex",
                type: "uint256",
            },
        ],
        name: "calcWrongVoteSlashPerToken",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "totalStaked",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "totalVotes",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "totalCorrectVotes",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "priceRequestIndex",
                type: "uint256",
            },
        ],
        name: "calcWrongVoteSlashPerTokenGovernance",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
];
export class SlashingLibraryInterface__factory {
    static createInterface() {
        return new utils.Interface(_abi);
    }
    static connect(address, signerOrProvider) {
        return new Contract(address, _abi, signerOrProvider);
    }
}
SlashingLibraryInterface__factory.abi = _abi;
