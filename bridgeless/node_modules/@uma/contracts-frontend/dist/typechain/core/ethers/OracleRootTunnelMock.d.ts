/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface OracleRootTunnelMockInterface extends ethers.utils.Interface {
  functions: {
    "SEND_MESSAGE_EVENT_SIG()": FunctionFragment;
    "ancillaryBytesLimit()": FunctionFragment;
    "checkpointManager()": FunctionFragment;
    "errorMessage()": FunctionFragment;
    "finder()": FunctionFragment;
    "fxChildTunnel()": FunctionFragment;
    "fxRoot()": FunctionFragment;
    "processMessageFromChild(bytes)": FunctionFragment;
    "processedExits(bytes32)": FunctionFragment;
    "publishPrice(bytes32,uint256,bytes)": FunctionFragment;
    "receiveMessage(bytes)": FunctionFragment;
    "revertReceiveMessage()": FunctionFragment;
    "setFxChildTunnel(address)": FunctionFragment;
    "setRevertErrorMessage(string)": FunctionFragment;
    "setRevertReceiveMessage(bool)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "SEND_MESSAGE_EVENT_SIG",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ancillaryBytesLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkpointManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "errorMessage",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "finder", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fxChildTunnel",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "fxRoot", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "processMessageFromChild",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "processedExits",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "publishPrice",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveMessage",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revertReceiveMessage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFxChildTunnel",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRevertErrorMessage",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRevertReceiveMessage",
    values: [boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "SEND_MESSAGE_EVENT_SIG",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ancillaryBytesLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkpointManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "errorMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "finder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fxChildTunnel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fxRoot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processMessageFromChild",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processedExits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publishPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revertReceiveMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFxChildTunnel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRevertErrorMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRevertReceiveMessage",
    data: BytesLike
  ): Result;

  events: {
    "PriceRequestAdded(bytes32,uint256,bytes,bytes32)": EventFragment;
    "PushedPrice(bytes32,uint256,bytes,int256,bytes32)": EventFragment;
    "ReceivedMessage(bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PriceRequestAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PushedPrice"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReceivedMessage"): EventFragment;
}

export type PriceRequestAddedEvent = TypedEvent<
  [string, BigNumber, string, string] & {
    identifier: string;
    time: BigNumber;
    ancillaryData: string;
    requestHash: string;
  }
>;

export type PushedPriceEvent = TypedEvent<
  [string, BigNumber, string, BigNumber, string] & {
    identifier: string;
    time: BigNumber;
    ancillaryData: string;
    price: BigNumber;
    requestHash: string;
  }
>;

export type ReceivedMessageEvent = TypedEvent<[string] & { inputData: string }>;

export class OracleRootTunnelMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: OracleRootTunnelMockInterface;

  functions: {
    SEND_MESSAGE_EVENT_SIG(overrides?: CallOverrides): Promise<[string]>;

    ancillaryBytesLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    checkpointManager(overrides?: CallOverrides): Promise<[string]>;

    errorMessage(overrides?: CallOverrides): Promise<[string]>;

    finder(overrides?: CallOverrides): Promise<[string]>;

    fxChildTunnel(overrides?: CallOverrides): Promise<[string]>;

    fxRoot(overrides?: CallOverrides): Promise<[string]>;

    processMessageFromChild(
      message: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    processedExits(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    publishPrice(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    receiveMessage(
      inputData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revertReceiveMessage(overrides?: CallOverrides): Promise<[boolean]>;

    setFxChildTunnel(
      _fxChildTunnel: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRevertErrorMessage(
      _errorMessage: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRevertReceiveMessage(
      _revertReceiveMessage: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  SEND_MESSAGE_EVENT_SIG(overrides?: CallOverrides): Promise<string>;

  ancillaryBytesLimit(overrides?: CallOverrides): Promise<BigNumber>;

  checkpointManager(overrides?: CallOverrides): Promise<string>;

  errorMessage(overrides?: CallOverrides): Promise<string>;

  finder(overrides?: CallOverrides): Promise<string>;

  fxChildTunnel(overrides?: CallOverrides): Promise<string>;

  fxRoot(overrides?: CallOverrides): Promise<string>;

  processMessageFromChild(
    message: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  processedExits(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  publishPrice(
    identifier: BytesLike,
    time: BigNumberish,
    ancillaryData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  receiveMessage(
    inputData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revertReceiveMessage(overrides?: CallOverrides): Promise<boolean>;

  setFxChildTunnel(
    _fxChildTunnel: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRevertErrorMessage(
    _errorMessage: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRevertReceiveMessage(
    _revertReceiveMessage: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    SEND_MESSAGE_EVENT_SIG(overrides?: CallOverrides): Promise<string>;

    ancillaryBytesLimit(overrides?: CallOverrides): Promise<BigNumber>;

    checkpointManager(overrides?: CallOverrides): Promise<string>;

    errorMessage(overrides?: CallOverrides): Promise<string>;

    finder(overrides?: CallOverrides): Promise<string>;

    fxChildTunnel(overrides?: CallOverrides): Promise<string>;

    fxRoot(overrides?: CallOverrides): Promise<string>;

    processMessageFromChild(
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    processedExits(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    publishPrice(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    receiveMessage(
      inputData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    revertReceiveMessage(overrides?: CallOverrides): Promise<boolean>;

    setFxChildTunnel(
      _fxChildTunnel: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRevertErrorMessage(
      _errorMessage: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRevertReceiveMessage(
      _revertReceiveMessage: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "PriceRequestAdded(bytes32,uint256,bytes,bytes32)"(
      identifier?: BytesLike | null,
      time?: null,
      ancillaryData?: null,
      requestHash?: BytesLike | null
    ): TypedEventFilter<
      [string, BigNumber, string, string],
      {
        identifier: string;
        time: BigNumber;
        ancillaryData: string;
        requestHash: string;
      }
    >;

    PriceRequestAdded(
      identifier?: BytesLike | null,
      time?: null,
      ancillaryData?: null,
      requestHash?: BytesLike | null
    ): TypedEventFilter<
      [string, BigNumber, string, string],
      {
        identifier: string;
        time: BigNumber;
        ancillaryData: string;
        requestHash: string;
      }
    >;

    "PushedPrice(bytes32,uint256,bytes,int256,bytes32)"(
      identifier?: BytesLike | null,
      time?: null,
      ancillaryData?: null,
      price?: null,
      requestHash?: BytesLike | null
    ): TypedEventFilter<
      [string, BigNumber, string, BigNumber, string],
      {
        identifier: string;
        time: BigNumber;
        ancillaryData: string;
        price: BigNumber;
        requestHash: string;
      }
    >;

    PushedPrice(
      identifier?: BytesLike | null,
      time?: null,
      ancillaryData?: null,
      price?: null,
      requestHash?: BytesLike | null
    ): TypedEventFilter<
      [string, BigNumber, string, BigNumber, string],
      {
        identifier: string;
        time: BigNumber;
        ancillaryData: string;
        price: BigNumber;
        requestHash: string;
      }
    >;

    "ReceivedMessage(bytes)"(
      inputData?: BytesLike | null
    ): TypedEventFilter<[string], { inputData: string }>;

    ReceivedMessage(
      inputData?: BytesLike | null
    ): TypedEventFilter<[string], { inputData: string }>;
  };

  estimateGas: {
    SEND_MESSAGE_EVENT_SIG(overrides?: CallOverrides): Promise<BigNumber>;

    ancillaryBytesLimit(overrides?: CallOverrides): Promise<BigNumber>;

    checkpointManager(overrides?: CallOverrides): Promise<BigNumber>;

    errorMessage(overrides?: CallOverrides): Promise<BigNumber>;

    finder(overrides?: CallOverrides): Promise<BigNumber>;

    fxChildTunnel(overrides?: CallOverrides): Promise<BigNumber>;

    fxRoot(overrides?: CallOverrides): Promise<BigNumber>;

    processMessageFromChild(
      message: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    processedExits(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    publishPrice(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    receiveMessage(
      inputData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revertReceiveMessage(overrides?: CallOverrides): Promise<BigNumber>;

    setFxChildTunnel(
      _fxChildTunnel: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRevertErrorMessage(
      _errorMessage: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRevertReceiveMessage(
      _revertReceiveMessage: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    SEND_MESSAGE_EVENT_SIG(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ancillaryBytesLimit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkpointManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    errorMessage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    finder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fxChildTunnel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fxRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    processMessageFromChild(
      message: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    processedExits(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    publishPrice(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    receiveMessage(
      inputData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revertReceiveMessage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setFxChildTunnel(
      _fxChildTunnel: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRevertErrorMessage(
      _errorMessage: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRevertReceiveMessage(
      _revertReceiveMessage: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
