/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface VotingInterfaceTestingInterface extends ethers.utils.Interface {
  functions: {
    "batchCommit(tuple[])": FunctionFragment;
    "batchReveal(tuple[])": FunctionFragment;
    "commitAndEmitEncryptedVote(bytes32,uint256,bytes32,bytes)": FunctionFragment;
    "commitVote(bytes32,uint256,bytes32)": FunctionFragment;
    "getCurrentRoundId()": FunctionFragment;
    "getCurrentTime()": FunctionFragment;
    "getPendingPriceRequestsArray()": FunctionFragment;
    "getPendingRequests()": FunctionFragment;
    "getPrice(bytes32,uint256)": FunctionFragment;
    "getPriceRequestStatuses(tuple[])": FunctionFragment;
    "getVotePhase()": FunctionFragment;
    "hasPrice(bytes32,uint256)": FunctionFragment;
    "requestPrice(bytes32,uint256)": FunctionFragment;
    "retrieveRewards(address,uint256,tuple[])": FunctionFragment;
    "revealVote(bytes32,uint256,int256,int256)": FunctionFragment;
    "rounds(uint256)": FunctionFragment;
    "setCurrentTime(uint256)": FunctionFragment;
    "setGatPercentage((uint256))": FunctionFragment;
    "setInflationRate((uint256))": FunctionFragment;
    "setMigrated(address)": FunctionFragment;
    "setRewardsExpirationTimeout(uint256)": FunctionFragment;
    "snapshotCurrentRound(bytes)": FunctionFragment;
    "timerAddress()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "batchCommit",
    values: [
      {
        identifier: BytesLike;
        time: BigNumberish;
        hash: BytesLike;
        encryptedVote: BytesLike;
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "batchReveal",
    values: [
      {
        identifier: BytesLike;
        time: BigNumberish;
        price: BigNumberish;
        salt: BigNumberish;
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "commitAndEmitEncryptedVote",
    values: [BytesLike, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "commitVote",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentRoundId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingPriceRequestsArray",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingRequests",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceRequestStatuses",
    values: [{ identifier: BytesLike; time: BigNumberish }[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotePhase",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasPrice",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestPrice",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "retrieveRewards",
    values: [
      string,
      BigNumberish,
      { identifier: BytesLike; time: BigNumberish }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "revealVote",
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rounds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCurrentTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setGatPercentage",
    values: [{ rawValue: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "setInflationRate",
    values: [{ rawValue: BigNumberish }]
  ): string;
  encodeFunctionData(functionFragment: "setMigrated", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setRewardsExpirationTimeout",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "snapshotCurrentRound",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "timerAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "batchCommit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchReveal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitAndEmitEncryptedVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "commitVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentRoundId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingPriceRequestsArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPriceRequestStatuses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVotePhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retrieveRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revealVote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rounds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCurrentTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGatPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInflationRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMigrated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardsExpirationTimeout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "snapshotCurrentRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timerAddress",
    data: BytesLike
  ): Result;

  events: {
    "EncryptedVote(address,uint256,bytes32,uint256,bytes,bytes)": EventFragment;
    "PriceRequestAdded(uint256,bytes32,uint256)": EventFragment;
    "PriceResolved(uint256,bytes32,uint256,int256,bytes)": EventFragment;
    "RewardsRetrieved(address,uint256,bytes32,uint256,bytes,uint256)": EventFragment;
    "VoteCommitted(address,uint256,bytes32,uint256,bytes)": EventFragment;
    "VoteRevealed(address,uint256,bytes32,uint256,int256,bytes,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EncryptedVote"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceRequestAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceResolved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsRetrieved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoteCommitted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoteRevealed"): EventFragment;
}

export type EncryptedVoteEvent = TypedEvent<
  [string, BigNumber, string, BigNumber, string, string] & {
    voter: string;
    roundId: BigNumber;
    identifier: string;
    time: BigNumber;
    ancillaryData: string;
    encryptedVote: string;
  }
>;

export type PriceRequestAddedEvent = TypedEvent<
  [BigNumber, string, BigNumber] & {
    roundId: BigNumber;
    identifier: string;
    time: BigNumber;
  }
>;

export type PriceResolvedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, string] & {
    roundId: BigNumber;
    identifier: string;
    time: BigNumber;
    price: BigNumber;
    ancillaryData: string;
  }
>;

export type RewardsRetrievedEvent = TypedEvent<
  [string, BigNumber, string, BigNumber, string, BigNumber] & {
    voter: string;
    roundId: BigNumber;
    identifier: string;
    time: BigNumber;
    ancillaryData: string;
    numTokens: BigNumber;
  }
>;

export type VoteCommittedEvent = TypedEvent<
  [string, BigNumber, string, BigNumber, string] & {
    voter: string;
    roundId: BigNumber;
    identifier: string;
    time: BigNumber;
    ancillaryData: string;
  }
>;

export type VoteRevealedEvent = TypedEvent<
  [string, BigNumber, string, BigNumber, BigNumber, string, BigNumber] & {
    voter: string;
    roundId: BigNumber;
    identifier: string;
    time: BigNumber;
    price: BigNumber;
    ancillaryData: string;
    numTokens: BigNumber;
  }
>;

export class VotingInterfaceTesting extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: VotingInterfaceTestingInterface;

  functions: {
    batchCommit(
      commits: {
        identifier: BytesLike;
        time: BigNumberish;
        hash: BytesLike;
        encryptedVote: BytesLike;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchReveal(
      reveals: {
        identifier: BytesLike;
        time: BigNumberish;
        price: BigNumberish;
        salt: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    commitAndEmitEncryptedVote(
      identifier: BytesLike,
      time: BigNumberish,
      hash: BytesLike,
      encryptedVote: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    commitVote(
      identifier: BytesLike,
      time: BigNumberish,
      hash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCurrentRoundId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCurrentTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPendingPriceRequestsArray(
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getPendingRequests(
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, BigNumber, string] & {
          identifier: string;
          time: BigNumber;
          ancillaryData: string;
        })[]
      ]
    >;

    getPrice(
      identifier: BytesLike,
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPriceRequestStatuses(
      requests: { identifier: BytesLike; time: BigNumberish }[],
      overrides?: CallOverrides
    ): Promise<
      [([number, BigNumber] & { status: number; lastVotingRound: BigNumber })[]]
    >;

    getVotePhase(overrides?: CallOverrides): Promise<[number]>;

    hasPrice(
      identifier: BytesLike,
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    requestPrice(
      identifier: BytesLike,
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    retrieveRewards(
      voterAddress: string,
      roundId: BigNumberish,
      toRetrieve: { identifier: BytesLike; time: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revealVote(
      identifier: BytesLike,
      time: BigNumberish,
      price: BigNumberish,
      salt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rounds(
      roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          [BigNumber] & { rawValue: BigNumber },
          [BigNumber] & { rawValue: BigNumber },
          BigNumber
        ] & {
          snapshotId: BigNumber;
          inflationRate: [BigNumber] & { rawValue: BigNumber };
          gatPercentage: [BigNumber] & { rawValue: BigNumber };
          rewardsExpirationTime: BigNumber;
        }
      ]
    >;

    setCurrentTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGatPercentage(
      newGatPercentage: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setInflationRate(
      newInflationRate: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMigrated(
      newVotingAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRewardsExpirationTimeout(
      NewRewardsExpirationTimeout: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    snapshotCurrentRound(
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    timerAddress(overrides?: CallOverrides): Promise<[string]>;
  };

  batchCommit(
    commits: {
      identifier: BytesLike;
      time: BigNumberish;
      hash: BytesLike;
      encryptedVote: BytesLike;
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchReveal(
    reveals: {
      identifier: BytesLike;
      time: BigNumberish;
      price: BigNumberish;
      salt: BigNumberish;
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  commitAndEmitEncryptedVote(
    identifier: BytesLike,
    time: BigNumberish,
    hash: BytesLike,
    encryptedVote: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  commitVote(
    identifier: BytesLike,
    time: BigNumberish,
    hash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCurrentRoundId(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

  getPendingPriceRequestsArray(overrides?: CallOverrides): Promise<string[]>;

  getPendingRequests(
    overrides?: CallOverrides
  ): Promise<
    ([string, BigNumber, string] & {
      identifier: string;
      time: BigNumber;
      ancillaryData: string;
    })[]
  >;

  getPrice(
    identifier: BytesLike,
    time: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPriceRequestStatuses(
    requests: { identifier: BytesLike; time: BigNumberish }[],
    overrides?: CallOverrides
  ): Promise<
    ([number, BigNumber] & { status: number; lastVotingRound: BigNumber })[]
  >;

  getVotePhase(overrides?: CallOverrides): Promise<number>;

  hasPrice(
    identifier: BytesLike,
    time: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  requestPrice(
    identifier: BytesLike,
    time: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  retrieveRewards(
    voterAddress: string,
    roundId: BigNumberish,
    toRetrieve: { identifier: BytesLike; time: BigNumberish }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revealVote(
    identifier: BytesLike,
    time: BigNumberish,
    price: BigNumberish,
    salt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rounds(
    roundId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      [BigNumber] & { rawValue: BigNumber },
      [BigNumber] & { rawValue: BigNumber },
      BigNumber
    ] & {
      snapshotId: BigNumber;
      inflationRate: [BigNumber] & { rawValue: BigNumber };
      gatPercentage: [BigNumber] & { rawValue: BigNumber };
      rewardsExpirationTime: BigNumber;
    }
  >;

  setCurrentTime(
    time: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGatPercentage(
    newGatPercentage: { rawValue: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setInflationRate(
    newInflationRate: { rawValue: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMigrated(
    newVotingAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRewardsExpirationTimeout(
    NewRewardsExpirationTimeout: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  snapshotCurrentRound(
    signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  timerAddress(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    batchCommit(
      commits: {
        identifier: BytesLike;
        time: BigNumberish;
        hash: BytesLike;
        encryptedVote: BytesLike;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    batchReveal(
      reveals: {
        identifier: BytesLike;
        time: BigNumberish;
        price: BigNumberish;
        salt: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    commitAndEmitEncryptedVote(
      identifier: BytesLike,
      time: BigNumberish,
      hash: BytesLike,
      encryptedVote: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    commitVote(
      identifier: BytesLike,
      time: BigNumberish,
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getCurrentRoundId(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

    getPendingPriceRequestsArray(overrides?: CallOverrides): Promise<string[]>;

    getPendingRequests(
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber, string] & {
        identifier: string;
        time: BigNumber;
        ancillaryData: string;
      })[]
    >;

    getPrice(
      identifier: BytesLike,
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceRequestStatuses(
      requests: { identifier: BytesLike; time: BigNumberish }[],
      overrides?: CallOverrides
    ): Promise<
      ([number, BigNumber] & { status: number; lastVotingRound: BigNumber })[]
    >;

    getVotePhase(overrides?: CallOverrides): Promise<number>;

    hasPrice(
      identifier: BytesLike,
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    requestPrice(
      identifier: BytesLike,
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    retrieveRewards(
      voterAddress: string,
      roundId: BigNumberish,
      toRetrieve: { identifier: BytesLike; time: BigNumberish }[],
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    revealVote(
      identifier: BytesLike,
      time: BigNumberish,
      price: BigNumberish,
      salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    rounds(
      roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        BigNumber
      ] & {
        snapshotId: BigNumber;
        inflationRate: [BigNumber] & { rawValue: BigNumber };
        gatPercentage: [BigNumber] & { rawValue: BigNumber };
        rewardsExpirationTime: BigNumber;
      }
    >;

    setCurrentTime(
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setGatPercentage(
      newGatPercentage: { rawValue: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    setInflationRate(
      newInflationRate: { rawValue: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    setMigrated(
      newVotingAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardsExpirationTimeout(
      NewRewardsExpirationTimeout: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    snapshotCurrentRound(
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    timerAddress(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "EncryptedVote(address,uint256,bytes32,uint256,bytes,bytes)"(
      voter?: string | null,
      roundId?: BigNumberish | null,
      identifier?: BytesLike | null,
      time?: null,
      ancillaryData?: null,
      encryptedVote?: null
    ): TypedEventFilter<
      [string, BigNumber, string, BigNumber, string, string],
      {
        voter: string;
        roundId: BigNumber;
        identifier: string;
        time: BigNumber;
        ancillaryData: string;
        encryptedVote: string;
      }
    >;

    EncryptedVote(
      voter?: string | null,
      roundId?: BigNumberish | null,
      identifier?: BytesLike | null,
      time?: null,
      ancillaryData?: null,
      encryptedVote?: null
    ): TypedEventFilter<
      [string, BigNumber, string, BigNumber, string, string],
      {
        voter: string;
        roundId: BigNumber;
        identifier: string;
        time: BigNumber;
        ancillaryData: string;
        encryptedVote: string;
      }
    >;

    "PriceRequestAdded(uint256,bytes32,uint256)"(
      roundId?: BigNumberish | null,
      identifier?: BytesLike | null,
      time?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { roundId: BigNumber; identifier: string; time: BigNumber }
    >;

    PriceRequestAdded(
      roundId?: BigNumberish | null,
      identifier?: BytesLike | null,
      time?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { roundId: BigNumber; identifier: string; time: BigNumber }
    >;

    "PriceResolved(uint256,bytes32,uint256,int256,bytes)"(
      roundId?: BigNumberish | null,
      identifier?: BytesLike | null,
      time?: null,
      price?: null,
      ancillaryData?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, BigNumber, string],
      {
        roundId: BigNumber;
        identifier: string;
        time: BigNumber;
        price: BigNumber;
        ancillaryData: string;
      }
    >;

    PriceResolved(
      roundId?: BigNumberish | null,
      identifier?: BytesLike | null,
      time?: null,
      price?: null,
      ancillaryData?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, BigNumber, string],
      {
        roundId: BigNumber;
        identifier: string;
        time: BigNumber;
        price: BigNumber;
        ancillaryData: string;
      }
    >;

    "RewardsRetrieved(address,uint256,bytes32,uint256,bytes,uint256)"(
      voter?: string | null,
      roundId?: BigNumberish | null,
      identifier?: BytesLike | null,
      time?: null,
      ancillaryData?: null,
      numTokens?: null
    ): TypedEventFilter<
      [string, BigNumber, string, BigNumber, string, BigNumber],
      {
        voter: string;
        roundId: BigNumber;
        identifier: string;
        time: BigNumber;
        ancillaryData: string;
        numTokens: BigNumber;
      }
    >;

    RewardsRetrieved(
      voter?: string | null,
      roundId?: BigNumberish | null,
      identifier?: BytesLike | null,
      time?: null,
      ancillaryData?: null,
      numTokens?: null
    ): TypedEventFilter<
      [string, BigNumber, string, BigNumber, string, BigNumber],
      {
        voter: string;
        roundId: BigNumber;
        identifier: string;
        time: BigNumber;
        ancillaryData: string;
        numTokens: BigNumber;
      }
    >;

    "VoteCommitted(address,uint256,bytes32,uint256,bytes)"(
      voter?: string | null,
      roundId?: BigNumberish | null,
      identifier?: BytesLike | null,
      time?: null,
      ancillaryData?: null
    ): TypedEventFilter<
      [string, BigNumber, string, BigNumber, string],
      {
        voter: string;
        roundId: BigNumber;
        identifier: string;
        time: BigNumber;
        ancillaryData: string;
      }
    >;

    VoteCommitted(
      voter?: string | null,
      roundId?: BigNumberish | null,
      identifier?: BytesLike | null,
      time?: null,
      ancillaryData?: null
    ): TypedEventFilter<
      [string, BigNumber, string, BigNumber, string],
      {
        voter: string;
        roundId: BigNumber;
        identifier: string;
        time: BigNumber;
        ancillaryData: string;
      }
    >;

    "VoteRevealed(address,uint256,bytes32,uint256,int256,bytes,uint256)"(
      voter?: string | null,
      roundId?: BigNumberish | null,
      identifier?: BytesLike | null,
      time?: null,
      price?: null,
      ancillaryData?: null,
      numTokens?: null
    ): TypedEventFilter<
      [string, BigNumber, string, BigNumber, BigNumber, string, BigNumber],
      {
        voter: string;
        roundId: BigNumber;
        identifier: string;
        time: BigNumber;
        price: BigNumber;
        ancillaryData: string;
        numTokens: BigNumber;
      }
    >;

    VoteRevealed(
      voter?: string | null,
      roundId?: BigNumberish | null,
      identifier?: BytesLike | null,
      time?: null,
      price?: null,
      ancillaryData?: null,
      numTokens?: null
    ): TypedEventFilter<
      [string, BigNumber, string, BigNumber, BigNumber, string, BigNumber],
      {
        voter: string;
        roundId: BigNumber;
        identifier: string;
        time: BigNumber;
        price: BigNumber;
        ancillaryData: string;
        numTokens: BigNumber;
      }
    >;
  };

  estimateGas: {
    batchCommit(
      commits: {
        identifier: BytesLike;
        time: BigNumberish;
        hash: BytesLike;
        encryptedVote: BytesLike;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchReveal(
      reveals: {
        identifier: BytesLike;
        time: BigNumberish;
        price: BigNumberish;
        salt: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    commitAndEmitEncryptedVote(
      identifier: BytesLike,
      time: BigNumberish,
      hash: BytesLike,
      encryptedVote: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    commitVote(
      identifier: BytesLike,
      time: BigNumberish,
      hash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCurrentRoundId(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

    getPendingPriceRequestsArray(overrides?: CallOverrides): Promise<BigNumber>;

    getPendingRequests(overrides?: CallOverrides): Promise<BigNumber>;

    getPrice(
      identifier: BytesLike,
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceRequestStatuses(
      requests: { identifier: BytesLike; time: BigNumberish }[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVotePhase(overrides?: CallOverrides): Promise<BigNumber>;

    hasPrice(
      identifier: BytesLike,
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requestPrice(
      identifier: BytesLike,
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    retrieveRewards(
      voterAddress: string,
      roundId: BigNumberish,
      toRetrieve: { identifier: BytesLike; time: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revealVote(
      identifier: BytesLike,
      time: BigNumberish,
      price: BigNumberish,
      salt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rounds(
      roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setCurrentTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGatPercentage(
      newGatPercentage: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setInflationRate(
      newInflationRate: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMigrated(
      newVotingAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRewardsExpirationTimeout(
      NewRewardsExpirationTimeout: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    snapshotCurrentRound(
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    timerAddress(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    batchCommit(
      commits: {
        identifier: BytesLike;
        time: BigNumberish;
        hash: BytesLike;
        encryptedVote: BytesLike;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchReveal(
      reveals: {
        identifier: BytesLike;
        time: BigNumberish;
        price: BigNumberish;
        salt: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    commitAndEmitEncryptedVote(
      identifier: BytesLike,
      time: BigNumberish,
      hash: BytesLike,
      encryptedVote: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    commitVote(
      identifier: BytesLike,
      time: BigNumberish,
      hash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCurrentRoundId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPendingPriceRequestsArray(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPendingRequests(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrice(
      identifier: BytesLike,
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceRequestStatuses(
      requests: { identifier: BytesLike; time: BigNumberish }[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVotePhase(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasPrice(
      identifier: BytesLike,
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requestPrice(
      identifier: BytesLike,
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    retrieveRewards(
      voterAddress: string,
      roundId: BigNumberish,
      toRetrieve: { identifier: BytesLike; time: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revealVote(
      identifier: BytesLike,
      time: BigNumberish,
      price: BigNumberish,
      salt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rounds(
      roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setCurrentTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGatPercentage(
      newGatPercentage: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setInflationRate(
      newInflationRate: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMigrated(
      newVotingAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRewardsExpirationTimeout(
      NewRewardsExpirationTimeout: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    snapshotCurrentRound(
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    timerAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
