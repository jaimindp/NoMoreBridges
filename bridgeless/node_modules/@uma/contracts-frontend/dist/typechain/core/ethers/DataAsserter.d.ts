/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface DataAsserterInterface extends ethers.utils.Interface {
  functions: {
    "assertDataFor(bytes32,bytes32,address)": FunctionFragment;
    "assertionDisputedCallback(bytes32)": FunctionFragment;
    "assertionLiveness()": FunctionFragment;
    "assertionResolvedCallback(bytes32,bool)": FunctionFragment;
    "assertionsData(bytes32)": FunctionFragment;
    "defaultCurrency()": FunctionFragment;
    "defaultIdentifier()": FunctionFragment;
    "getData(bytes32)": FunctionFragment;
    "oo()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "assertDataFor",
    values: [BytesLike, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "assertionDisputedCallback",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "assertionLiveness",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assertionResolvedCallback",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "assertionsData",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultCurrency",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultIdentifier",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getData", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "oo", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "assertDataFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assertionDisputedCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assertionLiveness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assertionResolvedCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assertionsData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultIdentifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oo", data: BytesLike): Result;

  events: {
    "DataAsserted(bytes32,bytes32,address,bytes32)": EventFragment;
    "DataAssertionResolved(bytes32,bytes32,address,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DataAsserted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DataAssertionResolved"): EventFragment;
}

export type DataAssertedEvent = TypedEvent<
  [string, string, string, string] & {
    dataId: string;
    data: string;
    asserter: string;
    assertionId: string;
  }
>;

export type DataAssertionResolvedEvent = TypedEvent<
  [string, string, string, string] & {
    dataId: string;
    data: string;
    asserter: string;
    assertionId: string;
  }
>;

export class DataAsserter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DataAsserterInterface;

  functions: {
    assertDataFor(
      dataId: BytesLike,
      data: BytesLike,
      asserter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    assertionDisputedCallback(
      assertionId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    assertionLiveness(overrides?: CallOverrides): Promise<[BigNumber]>;

    assertionResolvedCallback(
      assertionId: BytesLike,
      assertedTruthfully: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    assertionsData(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, boolean] & {
        dataId: string;
        data: string;
        asserter: string;
        resolved: boolean;
      }
    >;

    defaultCurrency(overrides?: CallOverrides): Promise<[string]>;

    defaultIdentifier(overrides?: CallOverrides): Promise<[string]>;

    getData(
      assertionId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean, string]>;

    oo(overrides?: CallOverrides): Promise<[string]>;
  };

  assertDataFor(
    dataId: BytesLike,
    data: BytesLike,
    asserter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  assertionDisputedCallback(
    assertionId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  assertionLiveness(overrides?: CallOverrides): Promise<BigNumber>;

  assertionResolvedCallback(
    assertionId: BytesLike,
    assertedTruthfully: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  assertionsData(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, boolean] & {
      dataId: string;
      data: string;
      asserter: string;
      resolved: boolean;
    }
  >;

  defaultCurrency(overrides?: CallOverrides): Promise<string>;

  defaultIdentifier(overrides?: CallOverrides): Promise<string>;

  getData(
    assertionId: BytesLike,
    overrides?: CallOverrides
  ): Promise<[boolean, string]>;

  oo(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    assertDataFor(
      dataId: BytesLike,
      data: BytesLike,
      asserter: string,
      overrides?: CallOverrides
    ): Promise<string>;

    assertionDisputedCallback(
      assertionId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    assertionLiveness(overrides?: CallOverrides): Promise<BigNumber>;

    assertionResolvedCallback(
      assertionId: BytesLike,
      assertedTruthfully: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    assertionsData(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, boolean] & {
        dataId: string;
        data: string;
        asserter: string;
        resolved: boolean;
      }
    >;

    defaultCurrency(overrides?: CallOverrides): Promise<string>;

    defaultIdentifier(overrides?: CallOverrides): Promise<string>;

    getData(
      assertionId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean, string]>;

    oo(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "DataAsserted(bytes32,bytes32,address,bytes32)"(
      dataId?: BytesLike | null,
      data?: null,
      asserter?: string | null,
      assertionId?: null
    ): TypedEventFilter<
      [string, string, string, string],
      { dataId: string; data: string; asserter: string; assertionId: string }
    >;

    DataAsserted(
      dataId?: BytesLike | null,
      data?: null,
      asserter?: string | null,
      assertionId?: null
    ): TypedEventFilter<
      [string, string, string, string],
      { dataId: string; data: string; asserter: string; assertionId: string }
    >;

    "DataAssertionResolved(bytes32,bytes32,address,bytes32)"(
      dataId?: BytesLike | null,
      data?: null,
      asserter?: string | null,
      assertionId?: null
    ): TypedEventFilter<
      [string, string, string, string],
      { dataId: string; data: string; asserter: string; assertionId: string }
    >;

    DataAssertionResolved(
      dataId?: BytesLike | null,
      data?: null,
      asserter?: string | null,
      assertionId?: null
    ): TypedEventFilter<
      [string, string, string, string],
      { dataId: string; data: string; asserter: string; assertionId: string }
    >;
  };

  estimateGas: {
    assertDataFor(
      dataId: BytesLike,
      data: BytesLike,
      asserter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    assertionDisputedCallback(
      assertionId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    assertionLiveness(overrides?: CallOverrides): Promise<BigNumber>;

    assertionResolvedCallback(
      assertionId: BytesLike,
      assertedTruthfully: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    assertionsData(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    defaultCurrency(overrides?: CallOverrides): Promise<BigNumber>;

    defaultIdentifier(overrides?: CallOverrides): Promise<BigNumber>;

    getData(
      assertionId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oo(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    assertDataFor(
      dataId: BytesLike,
      data: BytesLike,
      asserter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    assertionDisputedCallback(
      assertionId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    assertionLiveness(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    assertionResolvedCallback(
      assertionId: BytesLike,
      assertedTruthfully: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    assertionsData(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    defaultCurrency(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    defaultIdentifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getData(
      assertionId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oo(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
