/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface RegistryInterface extends ethers.utils.Interface {
  functions: {
    "addMember(uint256,address)": FunctionFragment;
    "addPartyToContract(address)": FunctionFragment;
    "contractMap(address)": FunctionFragment;
    "getAllRegisteredContracts()": FunctionFragment;
    "getMember(uint256)": FunctionFragment;
    "getRegisteredContracts(address)": FunctionFragment;
    "holdsRole(uint256,address)": FunctionFragment;
    "isContractRegistered(address)": FunctionFragment;
    "isPartyMemberOfContract(address,address)": FunctionFragment;
    "registerContract(address[],address)": FunctionFragment;
    "registeredContracts(uint256)": FunctionFragment;
    "removeMember(uint256,address)": FunctionFragment;
    "removePartyFromContract(address)": FunctionFragment;
    "renounceMembership(uint256)": FunctionFragment;
    "resetMember(uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addMember",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addPartyToContract",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "contractMap", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getAllRegisteredContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMember",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRegisteredContracts",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "holdsRole",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isContractRegistered",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isPartyMemberOfContract",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerContract",
    values: [string[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "registeredContracts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeMember",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removePartyFromContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceMembership",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "resetMember",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: "addMember", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addPartyToContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllRegisteredContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMember", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRegisteredContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "holdsRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isContractRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPartyMemberOfContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registeredContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removePartyFromContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceMembership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetMember",
    data: BytesLike
  ): Result;

  events: {
    "AddedSharedMember(uint256,address,address)": EventFragment;
    "NewContractRegistered(address,address,address[])": EventFragment;
    "PartyAdded(address,address)": EventFragment;
    "PartyRemoved(address,address)": EventFragment;
    "RemovedSharedMember(uint256,address,address)": EventFragment;
    "ResetExclusiveMember(uint256,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddedSharedMember"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewContractRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PartyAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PartyRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemovedSharedMember"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ResetExclusiveMember"): EventFragment;
}

export type AddedSharedMemberEvent = TypedEvent<
  [BigNumber, string, string] & {
    roleId: BigNumber;
    newMember: string;
    manager: string;
  }
>;

export type NewContractRegisteredEvent = TypedEvent<
  [string, string, string[]] & {
    contractAddress: string;
    creator: string;
    parties: string[];
  }
>;

export type PartyAddedEvent = TypedEvent<
  [string, string] & { contractAddress: string; party: string }
>;

export type PartyRemovedEvent = TypedEvent<
  [string, string] & { contractAddress: string; party: string }
>;

export type RemovedSharedMemberEvent = TypedEvent<
  [BigNumber, string, string] & {
    roleId: BigNumber;
    oldMember: string;
    manager: string;
  }
>;

export type ResetExclusiveMemberEvent = TypedEvent<
  [BigNumber, string, string] & {
    roleId: BigNumber;
    newMember: string;
    manager: string;
  }
>;

export class Registry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RegistryInterface;

  functions: {
    addMember(
      roleId: BigNumberish,
      newMember: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addPartyToContract(
      party: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    contractMap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber] & { valid: number; index: BigNumber }>;

    getAllRegisteredContracts(overrides?: CallOverrides): Promise<[string[]]>;

    getMember(
      roleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRegisteredContracts(
      party: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    holdsRole(
      roleId: BigNumberish,
      memberToCheck: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isContractRegistered(
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isPartyMemberOfContract(
      party: string,
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    registerContract(
      parties: string[],
      contractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registeredContracts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    removeMember(
      roleId: BigNumberish,
      memberToRemove: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removePartyFromContract(
      partyAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceMembership(
      roleId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    resetMember(
      roleId: BigNumberish,
      newMember: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addMember(
    roleId: BigNumberish,
    newMember: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addPartyToContract(
    party: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  contractMap(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[number, BigNumber] & { valid: number; index: BigNumber }>;

  getAllRegisteredContracts(overrides?: CallOverrides): Promise<string[]>;

  getMember(roleId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getRegisteredContracts(
    party: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  holdsRole(
    roleId: BigNumberish,
    memberToCheck: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isContractRegistered(
    contractAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isPartyMemberOfContract(
    party: string,
    contractAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  registerContract(
    parties: string[],
    contractAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registeredContracts(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  removeMember(
    roleId: BigNumberish,
    memberToRemove: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removePartyFromContract(
    partyAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceMembership(
    roleId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  resetMember(
    roleId: BigNumberish,
    newMember: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addMember(
      roleId: BigNumberish,
      newMember: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addPartyToContract(party: string, overrides?: CallOverrides): Promise<void>;

    contractMap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber] & { valid: number; index: BigNumber }>;

    getAllRegisteredContracts(overrides?: CallOverrides): Promise<string[]>;

    getMember(roleId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    getRegisteredContracts(
      party: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    holdsRole(
      roleId: BigNumberish,
      memberToCheck: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isContractRegistered(
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPartyMemberOfContract(
      party: string,
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    registerContract(
      parties: string[],
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    registeredContracts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    removeMember(
      roleId: BigNumberish,
      memberToRemove: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removePartyFromContract(
      partyAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceMembership(
      roleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    resetMember(
      roleId: BigNumberish,
      newMember: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddedSharedMember(uint256,address,address)"(
      roleId?: BigNumberish | null,
      newMember?: string | null,
      manager?: string | null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { roleId: BigNumber; newMember: string; manager: string }
    >;

    AddedSharedMember(
      roleId?: BigNumberish | null,
      newMember?: string | null,
      manager?: string | null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { roleId: BigNumber; newMember: string; manager: string }
    >;

    "NewContractRegistered(address,address,address[])"(
      contractAddress?: string | null,
      creator?: string | null,
      parties?: null
    ): TypedEventFilter<
      [string, string, string[]],
      { contractAddress: string; creator: string; parties: string[] }
    >;

    NewContractRegistered(
      contractAddress?: string | null,
      creator?: string | null,
      parties?: null
    ): TypedEventFilter<
      [string, string, string[]],
      { contractAddress: string; creator: string; parties: string[] }
    >;

    "PartyAdded(address,address)"(
      contractAddress?: string | null,
      party?: string | null
    ): TypedEventFilter<
      [string, string],
      { contractAddress: string; party: string }
    >;

    PartyAdded(
      contractAddress?: string | null,
      party?: string | null
    ): TypedEventFilter<
      [string, string],
      { contractAddress: string; party: string }
    >;

    "PartyRemoved(address,address)"(
      contractAddress?: string | null,
      party?: string | null
    ): TypedEventFilter<
      [string, string],
      { contractAddress: string; party: string }
    >;

    PartyRemoved(
      contractAddress?: string | null,
      party?: string | null
    ): TypedEventFilter<
      [string, string],
      { contractAddress: string; party: string }
    >;

    "RemovedSharedMember(uint256,address,address)"(
      roleId?: BigNumberish | null,
      oldMember?: string | null,
      manager?: string | null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { roleId: BigNumber; oldMember: string; manager: string }
    >;

    RemovedSharedMember(
      roleId?: BigNumberish | null,
      oldMember?: string | null,
      manager?: string | null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { roleId: BigNumber; oldMember: string; manager: string }
    >;

    "ResetExclusiveMember(uint256,address,address)"(
      roleId?: BigNumberish | null,
      newMember?: string | null,
      manager?: string | null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { roleId: BigNumber; newMember: string; manager: string }
    >;

    ResetExclusiveMember(
      roleId?: BigNumberish | null,
      newMember?: string | null,
      manager?: string | null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { roleId: BigNumber; newMember: string; manager: string }
    >;
  };

  estimateGas: {
    addMember(
      roleId: BigNumberish,
      newMember: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addPartyToContract(
      party: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    contractMap(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getAllRegisteredContracts(overrides?: CallOverrides): Promise<BigNumber>;

    getMember(
      roleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRegisteredContracts(
      party: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    holdsRole(
      roleId: BigNumberish,
      memberToCheck: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isContractRegistered(
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPartyMemberOfContract(
      party: string,
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerContract(
      parties: string[],
      contractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registeredContracts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeMember(
      roleId: BigNumberish,
      memberToRemove: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removePartyFromContract(
      partyAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceMembership(
      roleId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    resetMember(
      roleId: BigNumberish,
      newMember: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addMember(
      roleId: BigNumberish,
      newMember: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addPartyToContract(
      party: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    contractMap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllRegisteredContracts(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMember(
      roleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRegisteredContracts(
      party: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    holdsRole(
      roleId: BigNumberish,
      memberToCheck: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isContractRegistered(
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPartyMemberOfContract(
      party: string,
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerContract(
      parties: string[],
      contractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registeredContracts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeMember(
      roleId: BigNumberish,
      memberToRemove: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removePartyFromContract(
      partyAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceMembership(
      roleId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    resetMember(
      roleId: BigNumberish,
      newMember: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
