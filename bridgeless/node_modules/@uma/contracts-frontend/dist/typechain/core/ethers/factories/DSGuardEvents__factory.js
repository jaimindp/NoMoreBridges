/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { utils, Contract, ContractFactory } from "ethers";
const _abi = [
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "bytes32",
                name: "src",
                type: "bytes32",
            },
            {
                indexed: true,
                internalType: "bytes32",
                name: "dst",
                type: "bytes32",
            },
            {
                indexed: true,
                internalType: "bytes32",
                name: "sig",
                type: "bytes32",
            },
        ],
        name: "LogForbid",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "bytes32",
                name: "src",
                type: "bytes32",
            },
            {
                indexed: true,
                internalType: "bytes32",
                name: "dst",
                type: "bytes32",
            },
            {
                indexed: true,
                internalType: "bytes32",
                name: "sig",
                type: "bytes32",
            },
        ],
        name: "LogPermit",
        type: "event",
    },
];
const _bytecode = "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea264697066735822122023025ddc34b8268e7fc8261364a9f8f9398e43006cddf500f6997c1f6001339664736f6c63430008100033";
export class DSGuardEvents__factory extends ContractFactory {
    constructor(...args) {
        if (args.length === 1) {
            super(_abi, _bytecode, args[0]);
        }
        else {
            super(...args);
        }
    }
    deploy(overrides) {
        return super.deploy(overrides || {});
    }
    getDeployTransaction(overrides) {
        return super.getDeployTransaction(overrides || {});
    }
    attach(address) {
        return super.attach(address);
    }
    connect(signer) {
        return super.connect(signer);
    }
    static createInterface() {
        return new utils.Interface(_abi);
    }
    static connect(address, signerOrProvider) {
        return new Contract(address, _abi, signerOrProvider);
    }
}
DSGuardEvents__factory.bytecode = _bytecode;
DSGuardEvents__factory.abi = _abi;
