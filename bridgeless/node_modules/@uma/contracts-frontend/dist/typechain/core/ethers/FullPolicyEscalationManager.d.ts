/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface FullPolicyEscalationManagerInterface extends ethers.utils.Interface {
  functions: {
    "arbitrateViaEscalationManager()": FunctionFragment;
    "arbitrationResolutions(bytes32)": FunctionFragment;
    "assertionDisputedCallback(bytes32)": FunctionFragment;
    "assertionResolvedCallback(bytes32,bool)": FunctionFragment;
    "blockByAsserter()": FunctionFragment;
    "blockByAssertingCaller()": FunctionFragment;
    "configureEscalationManager(bool,bool,bool,bool,bool)": FunctionFragment;
    "discardOracle()": FunctionFragment;
    "getAssertionPolicy(bytes32)": FunctionFragment;
    "getPrice(bytes32,uint256,bytes)": FunctionFragment;
    "getRequestId(bytes32,uint256,bytes)": FunctionFragment;
    "isDisputeAllowed(bytes32,address)": FunctionFragment;
    "numericalTrue()": FunctionFragment;
    "optimisticOracleV3()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "requestPrice(bytes32,uint256,bytes)": FunctionFragment;
    "setArbitrationResolution(bytes32,uint256,bytes,bool)": FunctionFragment;
    "setDisputeCallerInWhitelist(address,bool)": FunctionFragment;
    "setWhitelistedAsserters(address,bool)": FunctionFragment;
    "setWhitelistedAssertingCallers(address,bool)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "validateDisputers()": FunctionFragment;
    "whitelistedAsserters(address)": FunctionFragment;
    "whitelistedAssertingCallers(address)": FunctionFragment;
    "whitelistedDisputeCallers(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "arbitrateViaEscalationManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "arbitrationResolutions",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "assertionDisputedCallback",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "assertionResolvedCallback",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "blockByAsserter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "blockByAssertingCaller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "configureEscalationManager",
    values: [boolean, boolean, boolean, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "discardOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAssertionPolicy",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequestId",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isDisputeAllowed",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "numericalTrue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "optimisticOracleV3",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestPrice",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setArbitrationResolution",
    values: [BytesLike, BigNumberish, BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setDisputeCallerInWhitelist",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelistedAsserters",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelistedAssertingCallers",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "validateDisputers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistedAsserters",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistedAssertingCallers",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistedDisputeCallers",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "arbitrateViaEscalationManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "arbitrationResolutions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assertionDisputedCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assertionResolvedCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blockByAsserter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blockByAssertingCaller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configureEscalationManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "discardOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssertionPolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRequestId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDisputeAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numericalTrue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "optimisticOracleV3",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setArbitrationResolution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDisputeCallerInWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelistedAsserters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelistedAssertingCallers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateDisputers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistedAsserters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistedAssertingCallers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistedDisputeCallers",
    data: BytesLike
  ): Result;

  events: {
    "ArbitrationResolutionSet(bytes32,uint256,bytes,bool)": EventFragment;
    "AsserterWhitelistSet(address,bool)": EventFragment;
    "AssertingCallerWhitelistSet(address,bool)": EventFragment;
    "DisputeCallerWhitelistSet(address,bool)": EventFragment;
    "EscalationManagerConfigured(bool,bool,bool,bool,bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PriceRequestAdded(bytes32,uint256,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ArbitrationResolutionSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AsserterWhitelistSet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AssertingCallerWhitelistSet"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DisputeCallerWhitelistSet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "EscalationManagerConfigured"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceRequestAdded"): EventFragment;
}

export type ArbitrationResolutionSetEvent = TypedEvent<
  [string, BigNumber, string, boolean] & {
    identifier: string;
    time: BigNumber;
    ancillaryData: string;
    resolution: boolean;
  }
>;

export type AsserterWhitelistSetEvent = TypedEvent<
  [string, boolean] & { asserter: string; whitelisted: boolean }
>;

export type AssertingCallerWhitelistSetEvent = TypedEvent<
  [string, boolean] & { assertingCaller: string; whitelisted: boolean }
>;

export type DisputeCallerWhitelistSetEvent = TypedEvent<
  [string, boolean] & { disputeCaller: string; whitelisted: boolean }
>;

export type EscalationManagerConfiguredEvent = TypedEvent<
  [boolean, boolean, boolean, boolean, boolean] & {
    blockByAssertingCaller: boolean;
    blockByAsserter: boolean;
    validateDisputers: boolean;
    arbitrateViaEscalationManager: boolean;
    discardOracle: boolean;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PriceRequestAddedEvent = TypedEvent<
  [string, BigNumber, string] & {
    identifier: string;
    time: BigNumber;
    ancillaryData: string;
  }
>;

export class FullPolicyEscalationManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: FullPolicyEscalationManagerInterface;

  functions: {
    arbitrateViaEscalationManager(
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    arbitrationResolutions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean, boolean] & { valueSet: boolean; resolution: boolean }>;

    assertionDisputedCallback(
      assertionId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    assertionResolvedCallback(
      assertionId: BytesLike,
      assertedTruthfully: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    blockByAsserter(overrides?: CallOverrides): Promise<[boolean]>;

    blockByAssertingCaller(overrides?: CallOverrides): Promise<[boolean]>;

    configureEscalationManager(
      _blockByAssertingCaller: boolean,
      _blockByAsserter: boolean,
      _validateDisputers: boolean,
      _arbitrateViaEscalationManager: boolean,
      _discardOracle: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    discardOracle(overrides?: CallOverrides): Promise<[boolean]>;

    getAssertionPolicy(
      assertionId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [boolean, boolean, boolean, boolean] & {
          blockAssertion: boolean;
          arbitrateViaEscalationManager: boolean;
          discardOracle: boolean;
          validateDisputers: boolean;
        }
      ]
    >;

    getPrice(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRequestId(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isDisputeAllowed(
      assertionId: BytesLike,
      disputeCaller: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    numericalTrue(overrides?: CallOverrides): Promise<[BigNumber]>;

    optimisticOracleV3(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestPrice(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setArbitrationResolution(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      arbitrationResolution: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDisputeCallerInWhitelist(
      disputeCaller: string,
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWhitelistedAsserters(
      asserter: string,
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWhitelistedAssertingCallers(
      assertingCaller: string,
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    validateDisputers(overrides?: CallOverrides): Promise<[boolean]>;

    whitelistedAsserters(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    whitelistedAssertingCallers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    whitelistedDisputeCallers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  arbitrateViaEscalationManager(overrides?: CallOverrides): Promise<boolean>;

  arbitrationResolutions(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<[boolean, boolean] & { valueSet: boolean; resolution: boolean }>;

  assertionDisputedCallback(
    assertionId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  assertionResolvedCallback(
    assertionId: BytesLike,
    assertedTruthfully: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  blockByAsserter(overrides?: CallOverrides): Promise<boolean>;

  blockByAssertingCaller(overrides?: CallOverrides): Promise<boolean>;

  configureEscalationManager(
    _blockByAssertingCaller: boolean,
    _blockByAsserter: boolean,
    _validateDisputers: boolean,
    _arbitrateViaEscalationManager: boolean,
    _discardOracle: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  discardOracle(overrides?: CallOverrides): Promise<boolean>;

  getAssertionPolicy(
    assertionId: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean, boolean, boolean] & {
      blockAssertion: boolean;
      arbitrateViaEscalationManager: boolean;
      discardOracle: boolean;
      validateDisputers: boolean;
    }
  >;

  getPrice(
    identifier: BytesLike,
    time: BigNumberish,
    ancillaryData: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRequestId(
    identifier: BytesLike,
    time: BigNumberish,
    ancillaryData: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  isDisputeAllowed(
    assertionId: BytesLike,
    disputeCaller: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  numericalTrue(overrides?: CallOverrides): Promise<BigNumber>;

  optimisticOracleV3(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestPrice(
    identifier: BytesLike,
    time: BigNumberish,
    ancillaryData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setArbitrationResolution(
    identifier: BytesLike,
    time: BigNumberish,
    ancillaryData: BytesLike,
    arbitrationResolution: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDisputeCallerInWhitelist(
    disputeCaller: string,
    value: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWhitelistedAsserters(
    asserter: string,
    value: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWhitelistedAssertingCallers(
    assertingCaller: string,
    value: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  validateDisputers(overrides?: CallOverrides): Promise<boolean>;

  whitelistedAsserters(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  whitelistedAssertingCallers(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  whitelistedDisputeCallers(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    arbitrateViaEscalationManager(overrides?: CallOverrides): Promise<boolean>;

    arbitrationResolutions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean, boolean] & { valueSet: boolean; resolution: boolean }>;

    assertionDisputedCallback(
      assertionId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    assertionResolvedCallback(
      assertionId: BytesLike,
      assertedTruthfully: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    blockByAsserter(overrides?: CallOverrides): Promise<boolean>;

    blockByAssertingCaller(overrides?: CallOverrides): Promise<boolean>;

    configureEscalationManager(
      _blockByAssertingCaller: boolean,
      _blockByAsserter: boolean,
      _validateDisputers: boolean,
      _arbitrateViaEscalationManager: boolean,
      _discardOracle: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    discardOracle(overrides?: CallOverrides): Promise<boolean>;

    getAssertionPolicy(
      assertionId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, boolean, boolean] & {
        blockAssertion: boolean;
        arbitrateViaEscalationManager: boolean;
        discardOracle: boolean;
        validateDisputers: boolean;
      }
    >;

    getPrice(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRequestId(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    isDisputeAllowed(
      assertionId: BytesLike,
      disputeCaller: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    numericalTrue(overrides?: CallOverrides): Promise<BigNumber>;

    optimisticOracleV3(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    requestPrice(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setArbitrationResolution(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      arbitrationResolution: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setDisputeCallerInWhitelist(
      disputeCaller: string,
      value: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setWhitelistedAsserters(
      asserter: string,
      value: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setWhitelistedAssertingCallers(
      assertingCaller: string,
      value: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    validateDisputers(overrides?: CallOverrides): Promise<boolean>;

    whitelistedAsserters(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    whitelistedAssertingCallers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    whitelistedDisputeCallers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "ArbitrationResolutionSet(bytes32,uint256,bytes,bool)"(
      identifier?: BytesLike | null,
      time?: null,
      ancillaryData?: null,
      resolution?: null
    ): TypedEventFilter<
      [string, BigNumber, string, boolean],
      {
        identifier: string;
        time: BigNumber;
        ancillaryData: string;
        resolution: boolean;
      }
    >;

    ArbitrationResolutionSet(
      identifier?: BytesLike | null,
      time?: null,
      ancillaryData?: null,
      resolution?: null
    ): TypedEventFilter<
      [string, BigNumber, string, boolean],
      {
        identifier: string;
        time: BigNumber;
        ancillaryData: string;
        resolution: boolean;
      }
    >;

    "AsserterWhitelistSet(address,bool)"(
      asserter?: string | null,
      whitelisted?: null
    ): TypedEventFilter<
      [string, boolean],
      { asserter: string; whitelisted: boolean }
    >;

    AsserterWhitelistSet(
      asserter?: string | null,
      whitelisted?: null
    ): TypedEventFilter<
      [string, boolean],
      { asserter: string; whitelisted: boolean }
    >;

    "AssertingCallerWhitelistSet(address,bool)"(
      assertingCaller?: string | null,
      whitelisted?: null
    ): TypedEventFilter<
      [string, boolean],
      { assertingCaller: string; whitelisted: boolean }
    >;

    AssertingCallerWhitelistSet(
      assertingCaller?: string | null,
      whitelisted?: null
    ): TypedEventFilter<
      [string, boolean],
      { assertingCaller: string; whitelisted: boolean }
    >;

    "DisputeCallerWhitelistSet(address,bool)"(
      disputeCaller?: string | null,
      whitelisted?: null
    ): TypedEventFilter<
      [string, boolean],
      { disputeCaller: string; whitelisted: boolean }
    >;

    DisputeCallerWhitelistSet(
      disputeCaller?: string | null,
      whitelisted?: null
    ): TypedEventFilter<
      [string, boolean],
      { disputeCaller: string; whitelisted: boolean }
    >;

    "EscalationManagerConfigured(bool,bool,bool,bool,bool)"(
      blockByAssertingCaller?: null,
      blockByAsserter?: null,
      validateDisputers?: null,
      arbitrateViaEscalationManager?: null,
      discardOracle?: null
    ): TypedEventFilter<
      [boolean, boolean, boolean, boolean, boolean],
      {
        blockByAssertingCaller: boolean;
        blockByAsserter: boolean;
        validateDisputers: boolean;
        arbitrateViaEscalationManager: boolean;
        discardOracle: boolean;
      }
    >;

    EscalationManagerConfigured(
      blockByAssertingCaller?: null,
      blockByAsserter?: null,
      validateDisputers?: null,
      arbitrateViaEscalationManager?: null,
      discardOracle?: null
    ): TypedEventFilter<
      [boolean, boolean, boolean, boolean, boolean],
      {
        blockByAssertingCaller: boolean;
        blockByAsserter: boolean;
        validateDisputers: boolean;
        arbitrateViaEscalationManager: boolean;
        discardOracle: boolean;
      }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "PriceRequestAdded(bytes32,uint256,bytes)"(
      identifier?: BytesLike | null,
      time?: null,
      ancillaryData?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { identifier: string; time: BigNumber; ancillaryData: string }
    >;

    PriceRequestAdded(
      identifier?: BytesLike | null,
      time?: null,
      ancillaryData?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { identifier: string; time: BigNumber; ancillaryData: string }
    >;
  };

  estimateGas: {
    arbitrateViaEscalationManager(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    arbitrationResolutions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assertionDisputedCallback(
      assertionId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    assertionResolvedCallback(
      assertionId: BytesLike,
      assertedTruthfully: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    blockByAsserter(overrides?: CallOverrides): Promise<BigNumber>;

    blockByAssertingCaller(overrides?: CallOverrides): Promise<BigNumber>;

    configureEscalationManager(
      _blockByAssertingCaller: boolean,
      _blockByAsserter: boolean,
      _validateDisputers: boolean,
      _arbitrateViaEscalationManager: boolean,
      _discardOracle: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    discardOracle(overrides?: CallOverrides): Promise<BigNumber>;

    getAssertionPolicy(
      assertionId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrice(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRequestId(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isDisputeAllowed(
      assertionId: BytesLike,
      disputeCaller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numericalTrue(overrides?: CallOverrides): Promise<BigNumber>;

    optimisticOracleV3(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestPrice(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setArbitrationResolution(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      arbitrationResolution: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDisputeCallerInWhitelist(
      disputeCaller: string,
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWhitelistedAsserters(
      asserter: string,
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWhitelistedAssertingCallers(
      assertingCaller: string,
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    validateDisputers(overrides?: CallOverrides): Promise<BigNumber>;

    whitelistedAsserters(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whitelistedAssertingCallers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whitelistedDisputeCallers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    arbitrateViaEscalationManager(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    arbitrationResolutions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    assertionDisputedCallback(
      assertionId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    assertionResolvedCallback(
      assertionId: BytesLike,
      assertedTruthfully: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    blockByAsserter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    blockByAssertingCaller(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    configureEscalationManager(
      _blockByAssertingCaller: boolean,
      _blockByAsserter: boolean,
      _validateDisputers: boolean,
      _arbitrateViaEscalationManager: boolean,
      _discardOracle: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    discardOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAssertionPolicy(
      assertionId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrice(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRequestId(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isDisputeAllowed(
      assertionId: BytesLike,
      disputeCaller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numericalTrue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    optimisticOracleV3(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestPrice(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setArbitrationResolution(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      arbitrationResolution: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDisputeCallerInWhitelist(
      disputeCaller: string,
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWhitelistedAsserters(
      asserter: string,
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWhitelistedAssertingCallers(
      assertingCaller: string,
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    validateDisputers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    whitelistedAsserters(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelistedAssertingCallers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelistedDisputeCallers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
