/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ArbitrumChildMessengerInterface extends ethers.utils.Interface {
  functions: {
    "oracleSpoke()": FunctionFragment;
    "parentMessenger()": FunctionFragment;
    "processMessageFromCrossChainParent(bytes,address)": FunctionFragment;
    "sendMessageToParent(bytes)": FunctionFragment;
    "setOracleSpoke(address)": FunctionFragment;
    "setParentMessenger(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "oracleSpoke",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "parentMessenger",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "processMessageFromCrossChainParent",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "sendMessageToParent",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setOracleSpoke",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setParentMessenger",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "oracleSpoke",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parentMessenger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processMessageFromCrossChainParent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendMessageToParent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOracleSpoke",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setParentMessenger",
    data: BytesLike
  ): Result;

  events: {
    "MessageReceivedFromParent(bytes,address,address)": EventFragment;
    "MessageSentToParent(bytes,address,address,uint256)": EventFragment;
    "SentCrossDomainMessage(address,address,uint256,bytes)": EventFragment;
    "SetOracleSpoke(address)": EventFragment;
    "SetParentMessenger(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MessageReceivedFromParent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MessageSentToParent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SentCrossDomainMessage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetOracleSpoke"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetParentMessenger"): EventFragment;
}

export type MessageReceivedFromParentEvent = TypedEvent<
  [string, string, string] & {
    data: string;
    targetSpoke: string;
    parentAddress: string;
  }
>;

export type MessageSentToParentEvent = TypedEvent<
  [string, string, string, BigNumber] & {
    data: string;
    parentAddress: string;
    oracleSpoke: string;
    id: BigNumber;
  }
>;

export type SentCrossDomainMessageEvent = TypedEvent<
  [string, string, BigNumber, string] & {
    from: string;
    to: string;
    id: BigNumber;
    data: string;
  }
>;

export type SetOracleSpokeEvent = TypedEvent<
  [string] & { newOracleSpoke: string }
>;

export type SetParentMessengerEvent = TypedEvent<
  [string] & { newParentMessenger: string }
>;

export class ArbitrumChildMessenger extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ArbitrumChildMessengerInterface;

  functions: {
    oracleSpoke(overrides?: CallOverrides): Promise<[string]>;

    parentMessenger(overrides?: CallOverrides): Promise<[string]>;

    processMessageFromCrossChainParent(
      data: BytesLike,
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendMessageToParent(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOracleSpoke(
      newOracleSpoke: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setParentMessenger(
      newParentMessenger: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  oracleSpoke(overrides?: CallOverrides): Promise<string>;

  parentMessenger(overrides?: CallOverrides): Promise<string>;

  processMessageFromCrossChainParent(
    data: BytesLike,
    target: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendMessageToParent(
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOracleSpoke(
    newOracleSpoke: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setParentMessenger(
    newParentMessenger: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    oracleSpoke(overrides?: CallOverrides): Promise<string>;

    parentMessenger(overrides?: CallOverrides): Promise<string>;

    processMessageFromCrossChainParent(
      data: BytesLike,
      target: string,
      overrides?: CallOverrides
    ): Promise<void>;

    sendMessageToParent(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setOracleSpoke(
      newOracleSpoke: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setParentMessenger(
      newParentMessenger: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "MessageReceivedFromParent(bytes,address,address)"(
      data?: null,
      targetSpoke?: string | null,
      parentAddress?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { data: string; targetSpoke: string; parentAddress: string }
    >;

    MessageReceivedFromParent(
      data?: null,
      targetSpoke?: string | null,
      parentAddress?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { data: string; targetSpoke: string; parentAddress: string }
    >;

    "MessageSentToParent(bytes,address,address,uint256)"(
      data?: null,
      parentAddress?: string | null,
      oracleSpoke?: string | null,
      id?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      {
        data: string;
        parentAddress: string;
        oracleSpoke: string;
        id: BigNumber;
      }
    >;

    MessageSentToParent(
      data?: null,
      parentAddress?: string | null,
      oracleSpoke?: string | null,
      id?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      {
        data: string;
        parentAddress: string;
        oracleSpoke: string;
        id: BigNumber;
      }
    >;

    "SentCrossDomainMessage(address,address,uint256,bytes)"(
      from?: string | null,
      to?: string | null,
      id?: BigNumberish | null,
      data?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      { from: string; to: string; id: BigNumber; data: string }
    >;

    SentCrossDomainMessage(
      from?: string | null,
      to?: string | null,
      id?: BigNumberish | null,
      data?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      { from: string; to: string; id: BigNumber; data: string }
    >;

    "SetOracleSpoke(address)"(
      newOracleSpoke?: null
    ): TypedEventFilter<[string], { newOracleSpoke: string }>;

    SetOracleSpoke(
      newOracleSpoke?: null
    ): TypedEventFilter<[string], { newOracleSpoke: string }>;

    "SetParentMessenger(address)"(
      newParentMessenger?: null
    ): TypedEventFilter<[string], { newParentMessenger: string }>;

    SetParentMessenger(
      newParentMessenger?: null
    ): TypedEventFilter<[string], { newParentMessenger: string }>;
  };

  estimateGas: {
    oracleSpoke(overrides?: CallOverrides): Promise<BigNumber>;

    parentMessenger(overrides?: CallOverrides): Promise<BigNumber>;

    processMessageFromCrossChainParent(
      data: BytesLike,
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendMessageToParent(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOracleSpoke(
      newOracleSpoke: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setParentMessenger(
      newParentMessenger: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    oracleSpoke(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    parentMessenger(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    processMessageFromCrossChainParent(
      data: BytesLike,
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendMessageToParent(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOracleSpoke(
      newOracleSpoke: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setParentMessenger(
      newParentMessenger: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
