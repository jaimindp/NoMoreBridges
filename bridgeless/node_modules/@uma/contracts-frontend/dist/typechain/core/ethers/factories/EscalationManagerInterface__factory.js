/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Contract, utils } from "ethers";
const _abi = [
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "assertionId",
                type: "bytes32",
            },
        ],
        name: "assertionDisputedCallback",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "assertionId",
                type: "bytes32",
            },
            {
                internalType: "bool",
                name: "assertedTruthfully",
                type: "bool",
            },
        ],
        name: "assertionResolvedCallback",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "assertionId",
                type: "bytes32",
            },
        ],
        name: "getAssertionPolicy",
        outputs: [
            {
                components: [
                    {
                        internalType: "bool",
                        name: "blockAssertion",
                        type: "bool",
                    },
                    {
                        internalType: "bool",
                        name: "arbitrateViaEscalationManager",
                        type: "bool",
                    },
                    {
                        internalType: "bool",
                        name: "discardOracle",
                        type: "bool",
                    },
                    {
                        internalType: "bool",
                        name: "validateDisputers",
                        type: "bool",
                    },
                ],
                internalType: "struct EscalationManagerInterface.AssertionPolicy",
                name: "",
                type: "tuple",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "identifier",
                type: "bytes32",
            },
            {
                internalType: "uint256",
                name: "time",
                type: "uint256",
            },
            {
                internalType: "bytes",
                name: "ancillaryData",
                type: "bytes",
            },
        ],
        name: "getPrice",
        outputs: [
            {
                internalType: "int256",
                name: "",
                type: "int256",
            },
        ],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "assertionId",
                type: "bytes32",
            },
            {
                internalType: "address",
                name: "disputeCaller",
                type: "address",
            },
        ],
        name: "isDisputeAllowed",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "identifier",
                type: "bytes32",
            },
            {
                internalType: "uint256",
                name: "time",
                type: "uint256",
            },
            {
                internalType: "bytes",
                name: "ancillaryData",
                type: "bytes",
            },
        ],
        name: "requestPrice",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
];
export class EscalationManagerInterface__factory {
    static createInterface() {
        return new utils.Interface(_abi);
    }
    static connect(address, signerOrProvider) {
        return new Contract(address, _abi, signerOrProvider);
    }
}
EscalationManagerInterface__factory.abi = _abi;
