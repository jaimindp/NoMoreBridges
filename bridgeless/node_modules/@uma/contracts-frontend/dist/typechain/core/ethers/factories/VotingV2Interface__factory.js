/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Contract, utils } from "ethers";
const _abi = [
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "identifier",
                type: "bytes32",
            },
            {
                internalType: "uint256",
                name: "time",
                type: "uint256",
            },
            {
                internalType: "bytes",
                name: "ancillaryData",
                type: "bytes",
            },
            {
                internalType: "bytes32",
                name: "hash",
                type: "bytes32",
            },
            {
                internalType: "bytes",
                name: "encryptedVote",
                type: "bytes",
            },
        ],
        name: "commitAndEmitEncryptedVote",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "identifier",
                type: "bytes32",
            },
            {
                internalType: "uint256",
                name: "time",
                type: "uint256",
            },
            {
                internalType: "bytes",
                name: "ancillaryData",
                type: "bytes",
            },
            {
                internalType: "bytes32",
                name: "hash",
                type: "bytes32",
            },
        ],
        name: "commitVote",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [],
        name: "getCurrentRoundId",
        outputs: [
            {
                internalType: "uint32",
                name: "",
                type: "uint32",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "getPendingRequests",
        outputs: [
            {
                components: [
                    {
                        internalType: "uint32",
                        name: "lastVotingRound",
                        type: "uint32",
                    },
                    {
                        internalType: "bool",
                        name: "isGovernance",
                        type: "bool",
                    },
                    {
                        internalType: "uint64",
                        name: "time",
                        type: "uint64",
                    },
                    {
                        internalType: "uint32",
                        name: "rollCount",
                        type: "uint32",
                    },
                    {
                        internalType: "bytes32",
                        name: "identifier",
                        type: "bytes32",
                    },
                    {
                        internalType: "bytes",
                        name: "ancillaryData",
                        type: "bytes",
                    },
                ],
                internalType: "struct VotingV2Interface.PendingRequestAncillaryAugmented[]",
                name: "",
                type: "tuple[]",
            },
        ],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [],
        name: "getVotePhase",
        outputs: [
            {
                internalType: "enum VotingV2Interface.Phase",
                name: "",
                type: "uint8",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "identifier",
                type: "bytes32",
            },
            {
                internalType: "uint256",
                name: "time",
                type: "uint256",
            },
            {
                internalType: "int256",
                name: "price",
                type: "int256",
            },
            {
                internalType: "bytes",
                name: "ancillaryData",
                type: "bytes",
            },
            {
                internalType: "int256",
                name: "salt",
                type: "int256",
            },
        ],
        name: "revealVote",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint128",
                name: "newGat",
                type: "uint128",
            },
            {
                internalType: "uint64",
                name: "newSpat",
                type: "uint64",
            },
        ],
        name: "setGatAndSpat",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint32",
                name: "newMaxRequestsPerRound",
                type: "uint32",
            },
        ],
        name: "setMaxRequestPerRound",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint32",
                name: "newMaxRolls",
                type: "uint32",
            },
        ],
        name: "setMaxRolls",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "newVotingAddress",
                type: "address",
            },
        ],
        name: "setMigrated",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "_newSlashingLibrary",
                type: "address",
            },
        ],
        name: "setSlashingLibrary",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
];
export class VotingV2Interface__factory {
    static createInterface() {
        return new utils.Interface(_abi);
    }
    static connect(address, signerOrProvider) {
        return new Contract(address, _abi, signerOrProvider);
    }
}
VotingV2Interface__factory.abi = _abi;
