import { Signer, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { OptimisticOracleConstraints, OptimisticOracleConstraintsInterface } from "../OptimisticOracleConstraints";
export declare class OptimisticOracleConstraints__factory extends ContractFactory {
    constructor(signer?: Signer);
    deploy(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<OptimisticOracleConstraints>;
    getDeployTransaction(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): TransactionRequest;
    attach(address: string): OptimisticOracleConstraints;
    connect(signer: Signer): OptimisticOracleConstraints__factory;
    static readonly bytecode = "0x6088610038600b82828239805160001a607314602b57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060335760003560e01c8063c371dda7146038575b600080fd5b604061200081565b60405190815260200160405180910390f3fea264697066735822122053847a27fe17e82bd03e8d710ddf8986d3afa733fa4b7a18f345b24a889876f064736f6c63430008090033";
    static readonly abi: {
        inputs: never[];
        name: string;
        outputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        stateMutability: string;
        type: string;
    }[];
    static createInterface(): OptimisticOracleConstraintsInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): OptimisticOracleConstraints;
}
