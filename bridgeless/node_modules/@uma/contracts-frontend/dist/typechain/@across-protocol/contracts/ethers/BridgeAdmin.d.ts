/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface BridgeAdminInterface extends ethers.utils.Interface {
  functions: {
    "depositContracts(uint256)": FunctionFragment;
    "finder()": FunctionFragment;
    "identifier()": FunctionFragment;
    "optimisticOracleLiveness()": FunctionFragment;
    "owner()": FunctionFragment;
    "proposerBondPct()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setCrossDomainAdmin(uint256,address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "setDepositContract(uint256,address,address)": FunctionFragment;
    "setEnableDepositsAndRelays(uint256,address,bool,uint256,uint256,uint256,uint256)": FunctionFragment;
    "setIdentifier(bytes32)": FunctionFragment;
    "setLpFeeRatePerSecond(address,uint64)": FunctionFragment;
    "setMinimumBridgingDelay(uint256,uint64,uint256,uint256,uint256,uint256)": FunctionFragment;
    "setOptimisticOracleLiveness(uint32)": FunctionFragment;
    "setProposerBondPct(uint64)": FunctionFragment;
    "transferBridgePoolAdmin(address[],address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "whitelistToken(uint256,address,address,address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "whitelistedTokens(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "depositContracts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "finder", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "identifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "optimisticOracleLiveness",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposerBondPct",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCrossDomainAdmin",
    values: [
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setDepositContract",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setEnableDepositsAndRelays",
    values: [
      BigNumberish,
      string,
      boolean,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setIdentifier",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setLpFeeRatePerSecond",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumBridgingDelay",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setOptimisticOracleLiveness",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProposerBondPct",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferBridgePoolAdmin",
    values: [string[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistToken",
    values: [
      BigNumberish,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistedTokens",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "depositContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "finder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "identifier", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "optimisticOracleLiveness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposerBondPct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCrossDomainAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDepositContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEnableDepositsAndRelays",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIdentifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLpFeeRatePerSecond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumBridgingDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOptimisticOracleLiveness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProposerBondPct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferBridgePoolAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistedTokens",
    data: BytesLike
  ): Result;

  events: {
    "BridgePoolsAdminTransferred(address[],address)": EventFragment;
    "DepositsEnabled(uint256,address,bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SetCrossDomainAdmin(uint256,address)": EventFragment;
    "SetDepositContracts(uint256,address,address)": EventFragment;
    "SetLpFeeRate(address,uint64)": EventFragment;
    "SetMinimumBridgingDelay(uint256,uint64)": EventFragment;
    "SetOptimisticOracleLiveness(uint32)": EventFragment;
    "SetProposerBondPct(uint64)": EventFragment;
    "SetRelayIdentifier(bytes32)": EventFragment;
    "WhitelistToken(uint256,address,address,address)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "BridgePoolsAdminTransferred"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositsEnabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetCrossDomainAdmin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetDepositContracts"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetLpFeeRate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMinimumBridgingDelay"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetOptimisticOracleLiveness"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetProposerBondPct"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetRelayIdentifier"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WhitelistToken"): EventFragment;
}

export class BridgeAdmin extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BridgeAdminInterface;

  functions: {
    depositContracts(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string] & {
          depositContract: string;
          messengerContract: string;
        }
      ]
    >;

    finder(overrides?: CallOverrides): Promise<[string]>;

    identifier(overrides?: CallOverrides): Promise<[string]>;

    optimisticOracleLiveness(overrides?: CallOverrides): Promise<[number]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    proposerBondPct(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCrossDomainAdmin(
      chainId: BigNumberish,
      admin: string,
      l1CallValue: BigNumberish,
      l2Gas: BigNumberish,
      l2GasPrice: BigNumberish,
      maxSubmissionCost: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDepositContract(
      chainId: BigNumberish,
      depositContract: string,
      messengerContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEnableDepositsAndRelays(
      chainId: BigNumberish,
      l1Token: string,
      depositsEnabled: boolean,
      l1CallValue: BigNumberish,
      l2Gas: BigNumberish,
      l2GasPrice: BigNumberish,
      maxSubmissionCost: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setIdentifier(
      _identifier: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLpFeeRatePerSecond(
      bridgePool: string,
      newLpFeeRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinimumBridgingDelay(
      chainId: BigNumberish,
      minimumBridgingDelay: BigNumberish,
      l1CallValue: BigNumberish,
      l2Gas: BigNumberish,
      l2GasPrice: BigNumberish,
      maxSubmissionCost: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOptimisticOracleLiveness(
      liveness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setProposerBondPct(
      _proposerBondPct: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferBridgePoolAdmin(
      bridgePools: string[],
      newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whitelistToken(
      chainId: BigNumberish,
      l1Token: string,
      l2Token: string,
      bridgePool: string,
      l1CallValue: BigNumberish,
      l2Gas: BigNumberish,
      l2GasPrice: BigNumberish,
      maxSubmissionCost: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whitelistedTokens(
      l1Token: string,
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { l2Token: string; bridgePool: string }>;
  };

  depositContracts(
    chainId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string] & { depositContract: string; messengerContract: string }
  >;

  finder(overrides?: CallOverrides): Promise<string>;

  identifier(overrides?: CallOverrides): Promise<string>;

  optimisticOracleLiveness(overrides?: CallOverrides): Promise<number>;

  owner(overrides?: CallOverrides): Promise<string>;

  proposerBondPct(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCrossDomainAdmin(
    chainId: BigNumberish,
    admin: string,
    l1CallValue: BigNumberish,
    l2Gas: BigNumberish,
    l2GasPrice: BigNumberish,
    maxSubmissionCost: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDepositContract(
    chainId: BigNumberish,
    depositContract: string,
    messengerContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEnableDepositsAndRelays(
    chainId: BigNumberish,
    l1Token: string,
    depositsEnabled: boolean,
    l1CallValue: BigNumberish,
    l2Gas: BigNumberish,
    l2GasPrice: BigNumberish,
    maxSubmissionCost: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setIdentifier(
    _identifier: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLpFeeRatePerSecond(
    bridgePool: string,
    newLpFeeRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinimumBridgingDelay(
    chainId: BigNumberish,
    minimumBridgingDelay: BigNumberish,
    l1CallValue: BigNumberish,
    l2Gas: BigNumberish,
    l2GasPrice: BigNumberish,
    maxSubmissionCost: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOptimisticOracleLiveness(
    liveness: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setProposerBondPct(
    _proposerBondPct: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferBridgePoolAdmin(
    bridgePools: string[],
    newAdmin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whitelistToken(
    chainId: BigNumberish,
    l1Token: string,
    l2Token: string,
    bridgePool: string,
    l1CallValue: BigNumberish,
    l2Gas: BigNumberish,
    l2GasPrice: BigNumberish,
    maxSubmissionCost: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whitelistedTokens(
    l1Token: string,
    chainId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, string] & { l2Token: string; bridgePool: string }>;

  callStatic: {
    depositContracts(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { depositContract: string; messengerContract: string }
    >;

    finder(overrides?: CallOverrides): Promise<string>;

    identifier(overrides?: CallOverrides): Promise<string>;

    optimisticOracleLiveness(overrides?: CallOverrides): Promise<number>;

    owner(overrides?: CallOverrides): Promise<string>;

    proposerBondPct(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setCrossDomainAdmin(
      chainId: BigNumberish,
      admin: string,
      l1CallValue: BigNumberish,
      l2Gas: BigNumberish,
      l2GasPrice: BigNumberish,
      maxSubmissionCost: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDepositContract(
      chainId: BigNumberish,
      depositContract: string,
      messengerContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setEnableDepositsAndRelays(
      chainId: BigNumberish,
      l1Token: string,
      depositsEnabled: boolean,
      l1CallValue: BigNumberish,
      l2Gas: BigNumberish,
      l2GasPrice: BigNumberish,
      maxSubmissionCost: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setIdentifier(
      _identifier: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setLpFeeRatePerSecond(
      bridgePool: string,
      newLpFeeRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinimumBridgingDelay(
      chainId: BigNumberish,
      minimumBridgingDelay: BigNumberish,
      l1CallValue: BigNumberish,
      l2Gas: BigNumberish,
      l2GasPrice: BigNumberish,
      maxSubmissionCost: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOptimisticOracleLiveness(
      liveness: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setProposerBondPct(
      _proposerBondPct: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferBridgePoolAdmin(
      bridgePools: string[],
      newAdmin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelistToken(
      chainId: BigNumberish,
      l1Token: string,
      l2Token: string,
      bridgePool: string,
      l1CallValue: BigNumberish,
      l2Gas: BigNumberish,
      l2GasPrice: BigNumberish,
      maxSubmissionCost: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelistedTokens(
      l1Token: string,
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { l2Token: string; bridgePool: string }>;
  };

  filters: {
    BridgePoolsAdminTransferred(
      bridgePools?: null,
      newAdmin?: string | null
    ): TypedEventFilter<
      [string[], string],
      { bridgePools: string[]; newAdmin: string }
    >;

    DepositsEnabled(
      chainId?: BigNumberish | null,
      l2Token?: string | null,
      depositsEnabled?: null
    ): TypedEventFilter<
      [BigNumber, string, boolean],
      { chainId: BigNumber; l2Token: string; depositsEnabled: boolean }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    SetCrossDomainAdmin(
      chainId?: BigNumberish | null,
      newAdmin?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { chainId: BigNumber; newAdmin: string }
    >;

    SetDepositContracts(
      chainId?: BigNumberish | null,
      l2DepositContract?: string | null,
      l2MessengerContract?: string | null
    ): TypedEventFilter<
      [BigNumber, string, string],
      {
        chainId: BigNumber;
        l2DepositContract: string;
        l2MessengerContract: string;
      }
    >;

    SetLpFeeRate(
      bridgePool?: string | null,
      newLpFeeRatePerSecond?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { bridgePool: string; newLpFeeRatePerSecond: BigNumber }
    >;

    SetMinimumBridgingDelay(
      chainId?: BigNumberish | null,
      newMinimumBridgingDelay?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { chainId: BigNumber; newMinimumBridgingDelay: BigNumber }
    >;

    SetOptimisticOracleLiveness(
      liveness?: BigNumberish | null
    ): TypedEventFilter<[number], { liveness: number }>;

    SetProposerBondPct(
      proposerBondPct?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { proposerBondPct: BigNumber }>;

    SetRelayIdentifier(
      identifier?: BytesLike | null
    ): TypedEventFilter<[string], { identifier: string }>;

    WhitelistToken(
      chainId?: null,
      l1Token?: string | null,
      l2Token?: string | null,
      bridgePool?: string | null
    ): TypedEventFilter<
      [BigNumber, string, string, string],
      {
        chainId: BigNumber;
        l1Token: string;
        l2Token: string;
        bridgePool: string;
      }
    >;
  };

  estimateGas: {
    depositContracts(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    finder(overrides?: CallOverrides): Promise<BigNumber>;

    identifier(overrides?: CallOverrides): Promise<BigNumber>;

    optimisticOracleLiveness(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    proposerBondPct(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCrossDomainAdmin(
      chainId: BigNumberish,
      admin: string,
      l1CallValue: BigNumberish,
      l2Gas: BigNumberish,
      l2GasPrice: BigNumberish,
      maxSubmissionCost: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDepositContract(
      chainId: BigNumberish,
      depositContract: string,
      messengerContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEnableDepositsAndRelays(
      chainId: BigNumberish,
      l1Token: string,
      depositsEnabled: boolean,
      l1CallValue: BigNumberish,
      l2Gas: BigNumberish,
      l2GasPrice: BigNumberish,
      maxSubmissionCost: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setIdentifier(
      _identifier: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLpFeeRatePerSecond(
      bridgePool: string,
      newLpFeeRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinimumBridgingDelay(
      chainId: BigNumberish,
      minimumBridgingDelay: BigNumberish,
      l1CallValue: BigNumberish,
      l2Gas: BigNumberish,
      l2GasPrice: BigNumberish,
      maxSubmissionCost: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOptimisticOracleLiveness(
      liveness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setProposerBondPct(
      _proposerBondPct: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferBridgePoolAdmin(
      bridgePools: string[],
      newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whitelistToken(
      chainId: BigNumberish,
      l1Token: string,
      l2Token: string,
      bridgePool: string,
      l1CallValue: BigNumberish,
      l2Gas: BigNumberish,
      l2GasPrice: BigNumberish,
      maxSubmissionCost: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whitelistedTokens(
      l1Token: string,
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    depositContracts(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    finder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    identifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    optimisticOracleLiveness(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposerBondPct(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCrossDomainAdmin(
      chainId: BigNumberish,
      admin: string,
      l1CallValue: BigNumberish,
      l2Gas: BigNumberish,
      l2GasPrice: BigNumberish,
      maxSubmissionCost: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDepositContract(
      chainId: BigNumberish,
      depositContract: string,
      messengerContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEnableDepositsAndRelays(
      chainId: BigNumberish,
      l1Token: string,
      depositsEnabled: boolean,
      l1CallValue: BigNumberish,
      l2Gas: BigNumberish,
      l2GasPrice: BigNumberish,
      maxSubmissionCost: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setIdentifier(
      _identifier: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLpFeeRatePerSecond(
      bridgePool: string,
      newLpFeeRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinimumBridgingDelay(
      chainId: BigNumberish,
      minimumBridgingDelay: BigNumberish,
      l1CallValue: BigNumberish,
      l2Gas: BigNumberish,
      l2GasPrice: BigNumberish,
      maxSubmissionCost: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOptimisticOracleLiveness(
      liveness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setProposerBondPct(
      _proposerBondPct: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferBridgePoolAdmin(
      bridgePools: string[],
      newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whitelistToken(
      chainId: BigNumberish,
      l1Token: string,
      l2Token: string,
      bridgePool: string,
      l1CallValue: BigNumberish,
      l2Gas: BigNumberish,
      l2GasPrice: BigNumberish,
      maxSubmissionCost: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whitelistedTokens(
      l1Token: string,
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
