import { Signer, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ICheckpointManager, ICheckpointManagerInterface } from "../ICheckpointManager";
export declare class ICheckpointManager__factory extends ContractFactory {
    constructor(signer?: Signer);
    deploy(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ICheckpointManager>;
    getDeployTransaction(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): TransactionRequest;
    attach(address: string): ICheckpointManager;
    connect(signer: Signer): ICheckpointManager__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b5061010d806100206000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806341539d4a14602d575b600080fd5b607d603836600460bf565b600060208190529081526040902080546001820154600283015460038401546004909401549293919290919073ffffffffffffffffffffffffffffffffffffffff1685565b60408051958652602086019490945292840191909152606083015273ffffffffffffffffffffffffffffffffffffffff16608082015260a00160405180910390f35b60006020828403121560d057600080fd5b503591905056fea2646970667358221220f978f1f81e683858eecd4cf6439e20f2cc5d4ab26204147181b962af6550e96064736f6c63430008090033";
    static readonly abi: {
        inputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        name: string;
        outputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        stateMutability: string;
        type: string;
    }[];
    static createInterface(): ICheckpointManagerInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): ICheckpointManager;
}
