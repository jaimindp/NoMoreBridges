/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type BridgePoolsAdminTransferred = ContractEventLog<{
  bridgePools: string[];
  newAdmin: string;
  0: string[];
  1: string;
}>;
export type DepositsEnabled = ContractEventLog<{
  chainId: string;
  l2Token: string;
  depositsEnabled: boolean;
  0: string;
  1: string;
  2: boolean;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type SetCrossDomainAdmin = ContractEventLog<{
  chainId: string;
  newAdmin: string;
  0: string;
  1: string;
}>;
export type SetDepositContracts = ContractEventLog<{
  chainId: string;
  l2DepositContract: string;
  l2MessengerContract: string;
  0: string;
  1: string;
  2: string;
}>;
export type SetLpFeeRate = ContractEventLog<{
  bridgePool: string;
  newLpFeeRatePerSecond: string;
  0: string;
  1: string;
}>;
export type SetMinimumBridgingDelay = ContractEventLog<{
  chainId: string;
  newMinimumBridgingDelay: string;
  0: string;
  1: string;
}>;
export type SetOptimisticOracleLiveness = ContractEventLog<{
  liveness: string;
  0: string;
}>;
export type SetProposerBondPct = ContractEventLog<{
  proposerBondPct: string;
  0: string;
}>;
export type SetRelayIdentifier = ContractEventLog<{
  identifier: string;
  0: string;
}>;
export type WhitelistToken = ContractEventLog<{
  chainId: string;
  l1Token: string;
  l2Token: string;
  bridgePool: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;

export interface BridgeAdmin extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): BridgeAdmin;
  clone(): BridgeAdmin;
  methods: {
    depositContracts(
      chainId: number | string | BN
    ): NonPayableTransactionObject<[string, string]>;

    finder(): NonPayableTransactionObject<string>;

    identifier(): NonPayableTransactionObject<string>;

    optimisticOracleLiveness(): NonPayableTransactionObject<string>;

    owner(): NonPayableTransactionObject<string>;

    proposerBondPct(): NonPayableTransactionObject<string>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    setCrossDomainAdmin(
      chainId: number | string | BN,
      admin: string,
      l1CallValue: number | string | BN,
      l2Gas: number | string | BN,
      l2GasPrice: number | string | BN,
      maxSubmissionCost: number | string | BN
    ): PayableTransactionObject<void>;

    setDepositContract(
      chainId: number | string | BN,
      depositContract: string,
      messengerContract: string
    ): NonPayableTransactionObject<void>;

    setEnableDepositsAndRelays(
      chainId: number | string | BN,
      l1Token: string,
      depositsEnabled: boolean,
      l1CallValue: number | string | BN,
      l2Gas: number | string | BN,
      l2GasPrice: number | string | BN,
      maxSubmissionCost: number | string | BN
    ): PayableTransactionObject<void>;

    setIdentifier(
      _identifier: string | number[]
    ): NonPayableTransactionObject<void>;

    setLpFeeRatePerSecond(
      bridgePool: string,
      newLpFeeRate: number | string | BN
    ): NonPayableTransactionObject<void>;

    setMinimumBridgingDelay(
      chainId: number | string | BN,
      minimumBridgingDelay: number | string | BN,
      l1CallValue: number | string | BN,
      l2Gas: number | string | BN,
      l2GasPrice: number | string | BN,
      maxSubmissionCost: number | string | BN
    ): PayableTransactionObject<void>;

    setOptimisticOracleLiveness(
      liveness: number | string | BN
    ): NonPayableTransactionObject<void>;

    setProposerBondPct(
      _proposerBondPct: number | string | BN
    ): NonPayableTransactionObject<void>;

    transferBridgePoolAdmin(
      bridgePools: string[],
      newAdmin: string
    ): NonPayableTransactionObject<void>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    whitelistToken(
      chainId: number | string | BN,
      l1Token: string,
      l2Token: string,
      bridgePool: string,
      l1CallValue: number | string | BN,
      l2Gas: number | string | BN,
      l2GasPrice: number | string | BN,
      maxSubmissionCost: number | string | BN
    ): PayableTransactionObject<void>;

    whitelistedTokens(
      l1Token: string,
      chainId: number | string | BN
    ): NonPayableTransactionObject<{
      l2Token: string;
      bridgePool: string;
      0: string;
      1: string;
    }>;
  };
  events: {
    BridgePoolsAdminTransferred(
      cb?: Callback<BridgePoolsAdminTransferred>
    ): EventEmitter;
    BridgePoolsAdminTransferred(
      options?: EventOptions,
      cb?: Callback<BridgePoolsAdminTransferred>
    ): EventEmitter;

    DepositsEnabled(cb?: Callback<DepositsEnabled>): EventEmitter;
    DepositsEnabled(
      options?: EventOptions,
      cb?: Callback<DepositsEnabled>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    SetCrossDomainAdmin(cb?: Callback<SetCrossDomainAdmin>): EventEmitter;
    SetCrossDomainAdmin(
      options?: EventOptions,
      cb?: Callback<SetCrossDomainAdmin>
    ): EventEmitter;

    SetDepositContracts(cb?: Callback<SetDepositContracts>): EventEmitter;
    SetDepositContracts(
      options?: EventOptions,
      cb?: Callback<SetDepositContracts>
    ): EventEmitter;

    SetLpFeeRate(cb?: Callback<SetLpFeeRate>): EventEmitter;
    SetLpFeeRate(
      options?: EventOptions,
      cb?: Callback<SetLpFeeRate>
    ): EventEmitter;

    SetMinimumBridgingDelay(
      cb?: Callback<SetMinimumBridgingDelay>
    ): EventEmitter;
    SetMinimumBridgingDelay(
      options?: EventOptions,
      cb?: Callback<SetMinimumBridgingDelay>
    ): EventEmitter;

    SetOptimisticOracleLiveness(
      cb?: Callback<SetOptimisticOracleLiveness>
    ): EventEmitter;
    SetOptimisticOracleLiveness(
      options?: EventOptions,
      cb?: Callback<SetOptimisticOracleLiveness>
    ): EventEmitter;

    SetProposerBondPct(cb?: Callback<SetProposerBondPct>): EventEmitter;
    SetProposerBondPct(
      options?: EventOptions,
      cb?: Callback<SetProposerBondPct>
    ): EventEmitter;

    SetRelayIdentifier(cb?: Callback<SetRelayIdentifier>): EventEmitter;
    SetRelayIdentifier(
      options?: EventOptions,
      cb?: Callback<SetRelayIdentifier>
    ): EventEmitter;

    WhitelistToken(cb?: Callback<WhitelistToken>): EventEmitter;
    WhitelistToken(
      options?: EventOptions,
      cb?: Callback<WhitelistToken>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(
    event: "BridgePoolsAdminTransferred",
    cb: Callback<BridgePoolsAdminTransferred>
  ): void;
  once(
    event: "BridgePoolsAdminTransferred",
    options: EventOptions,
    cb: Callback<BridgePoolsAdminTransferred>
  ): void;

  once(event: "DepositsEnabled", cb: Callback<DepositsEnabled>): void;
  once(
    event: "DepositsEnabled",
    options: EventOptions,
    cb: Callback<DepositsEnabled>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "SetCrossDomainAdmin", cb: Callback<SetCrossDomainAdmin>): void;
  once(
    event: "SetCrossDomainAdmin",
    options: EventOptions,
    cb: Callback<SetCrossDomainAdmin>
  ): void;

  once(event: "SetDepositContracts", cb: Callback<SetDepositContracts>): void;
  once(
    event: "SetDepositContracts",
    options: EventOptions,
    cb: Callback<SetDepositContracts>
  ): void;

  once(event: "SetLpFeeRate", cb: Callback<SetLpFeeRate>): void;
  once(
    event: "SetLpFeeRate",
    options: EventOptions,
    cb: Callback<SetLpFeeRate>
  ): void;

  once(
    event: "SetMinimumBridgingDelay",
    cb: Callback<SetMinimumBridgingDelay>
  ): void;
  once(
    event: "SetMinimumBridgingDelay",
    options: EventOptions,
    cb: Callback<SetMinimumBridgingDelay>
  ): void;

  once(
    event: "SetOptimisticOracleLiveness",
    cb: Callback<SetOptimisticOracleLiveness>
  ): void;
  once(
    event: "SetOptimisticOracleLiveness",
    options: EventOptions,
    cb: Callback<SetOptimisticOracleLiveness>
  ): void;

  once(event: "SetProposerBondPct", cb: Callback<SetProposerBondPct>): void;
  once(
    event: "SetProposerBondPct",
    options: EventOptions,
    cb: Callback<SetProposerBondPct>
  ): void;

  once(event: "SetRelayIdentifier", cb: Callback<SetRelayIdentifier>): void;
  once(
    event: "SetRelayIdentifier",
    options: EventOptions,
    cb: Callback<SetRelayIdentifier>
  ): void;

  once(event: "WhitelistToken", cb: Callback<WhitelistToken>): void;
  once(
    event: "WhitelistToken",
    options: EventOptions,
    cb: Callback<WhitelistToken>
  ): void;
}
