/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type EmergencyProposalExecuted = ContractEventLog<{
  id: string;
  sender: string;
  caller: string;
  expiryTime: string;
  lockedTokens: string;
  transactions: [string, string, string][];
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: [string, string, string][];
}>;
export type EmergencyProposalRemoved = ContractEventLog<{
  id: string;
  sender: string;
  caller: string;
  expiryTime: string;
  lockedTokens: string;
  transactions: [string, string, string][];
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: [string, string, string][];
}>;
export type EmergencyProposalSlashed = ContractEventLog<{
  id: string;
  sender: string;
  caller: string;
  expiryTime: string;
  lockedTokens: string;
  transactions: [string, string, string][];
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: [string, string, string][];
}>;
export type EmergencyTransactionsProposed = ContractEventLog<{
  id: string;
  sender: string;
  caller: string;
  expiryTime: string;
  lockedTokens: string;
  transactions: [string, string, string][];
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: [string, string, string][];
}>;
export type ExecutorSet = ContractEventLog<{
  executor: string;
  0: string;
}>;
export type MinimumWaitTimeSet = ContractEventLog<{
  minimumWaitTime: string;
  0: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type QuorumSet = ContractEventLog<{
  quorum: string;
  0: string;
}>;

export interface EmergencyProposer extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): EmergencyProposer;
  clone(): EmergencyProposer;
  methods: {
    emergencyProposals(
      arg0: number | string | BN
    ): NonPayableTransactionObject<{
      sender: string;
      expiryTime: string;
      lockedTokens: string;
      0: string;
      1: string;
      2: string;
    }>;

    emergencyPropose(
      transactions: [string, number | string | BN, string | number[]][]
    ): NonPayableTransactionObject<string>;

    executeEmergencyProposal(
      id: number | string | BN
    ): PayableTransactionObject<void>;

    executor(): NonPayableTransactionObject<string>;

    getCurrentTime(): NonPayableTransactionObject<string>;

    governor(): NonPayableTransactionObject<string>;

    minimumWaitTime(): NonPayableTransactionObject<string>;

    multicall(
      data: (string | number[])[]
    ): NonPayableTransactionObject<string[]>;

    owner(): NonPayableTransactionObject<string>;

    quorum(): NonPayableTransactionObject<string>;

    removeProposal(id: number | string | BN): NonPayableTransactionObject<void>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    setExecutor(newExecutor: string): NonPayableTransactionObject<void>;

    setMinimumWaitTime(
      newMinimumWaitTime: number | string | BN
    ): NonPayableTransactionObject<void>;

    setQuorum(
      newQuorum: number | string | BN
    ): NonPayableTransactionObject<void>;

    slashProposal(id: number | string | BN): NonPayableTransactionObject<void>;

    token(): NonPayableTransactionObject<string>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;
  };
  events: {
    EmergencyProposalExecuted(
      cb?: Callback<EmergencyProposalExecuted>
    ): EventEmitter;
    EmergencyProposalExecuted(
      options?: EventOptions,
      cb?: Callback<EmergencyProposalExecuted>
    ): EventEmitter;

    EmergencyProposalRemoved(
      cb?: Callback<EmergencyProposalRemoved>
    ): EventEmitter;
    EmergencyProposalRemoved(
      options?: EventOptions,
      cb?: Callback<EmergencyProposalRemoved>
    ): EventEmitter;

    EmergencyProposalSlashed(
      cb?: Callback<EmergencyProposalSlashed>
    ): EventEmitter;
    EmergencyProposalSlashed(
      options?: EventOptions,
      cb?: Callback<EmergencyProposalSlashed>
    ): EventEmitter;

    EmergencyTransactionsProposed(
      cb?: Callback<EmergencyTransactionsProposed>
    ): EventEmitter;
    EmergencyTransactionsProposed(
      options?: EventOptions,
      cb?: Callback<EmergencyTransactionsProposed>
    ): EventEmitter;

    ExecutorSet(cb?: Callback<ExecutorSet>): EventEmitter;
    ExecutorSet(
      options?: EventOptions,
      cb?: Callback<ExecutorSet>
    ): EventEmitter;

    MinimumWaitTimeSet(cb?: Callback<MinimumWaitTimeSet>): EventEmitter;
    MinimumWaitTimeSet(
      options?: EventOptions,
      cb?: Callback<MinimumWaitTimeSet>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    QuorumSet(cb?: Callback<QuorumSet>): EventEmitter;
    QuorumSet(options?: EventOptions, cb?: Callback<QuorumSet>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(
    event: "EmergencyProposalExecuted",
    cb: Callback<EmergencyProposalExecuted>
  ): void;
  once(
    event: "EmergencyProposalExecuted",
    options: EventOptions,
    cb: Callback<EmergencyProposalExecuted>
  ): void;

  once(
    event: "EmergencyProposalRemoved",
    cb: Callback<EmergencyProposalRemoved>
  ): void;
  once(
    event: "EmergencyProposalRemoved",
    options: EventOptions,
    cb: Callback<EmergencyProposalRemoved>
  ): void;

  once(
    event: "EmergencyProposalSlashed",
    cb: Callback<EmergencyProposalSlashed>
  ): void;
  once(
    event: "EmergencyProposalSlashed",
    options: EventOptions,
    cb: Callback<EmergencyProposalSlashed>
  ): void;

  once(
    event: "EmergencyTransactionsProposed",
    cb: Callback<EmergencyTransactionsProposed>
  ): void;
  once(
    event: "EmergencyTransactionsProposed",
    options: EventOptions,
    cb: Callback<EmergencyTransactionsProposed>
  ): void;

  once(event: "ExecutorSet", cb: Callback<ExecutorSet>): void;
  once(
    event: "ExecutorSet",
    options: EventOptions,
    cb: Callback<ExecutorSet>
  ): void;

  once(event: "MinimumWaitTimeSet", cb: Callback<MinimumWaitTimeSet>): void;
  once(
    event: "MinimumWaitTimeSet",
    options: EventOptions,
    cb: Callback<MinimumWaitTimeSet>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "QuorumSet", cb: Callback<QuorumSet>): void;
  once(
    event: "QuorumSet",
    options: EventOptions,
    cb: Callback<QuorumSet>
  ): void;
}
