"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PerpetualMock__factory = void 0;
const ethers_1 = require("ethers");
const _abi = [
    {
        anonymous: false,
        inputs: [],
        name: "EndedSponsorPosition",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [],
        name: "LiquidationCreated",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "sponsor",
                type: "address",
            },
        ],
        name: "NewSponsor",
        type: "event",
    },
    {
        inputs: [],
        name: "applyFundingRate",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [],
        name: "collateralRequirement",
        outputs: [
            {
                internalType: "uint256",
                name: "rawValue",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "cumulativeFeeMultiplier",
        outputs: [
            {
                internalType: "uint256",
                name: "rawValue",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "fundingRate",
        outputs: [
            {
                components: [
                    {
                        internalType: "int256",
                        name: "rawValue",
                        type: "int256",
                    },
                ],
                internalType: "struct FixedPoint.Signed",
                name: "rate",
                type: "tuple",
            },
            {
                internalType: "bytes32",
                name: "identifier",
                type: "bytes32",
            },
            {
                components: [
                    {
                        internalType: "uint256",
                        name: "rawValue",
                        type: "uint256",
                    },
                ],
                internalType: "struct FixedPoint.Unsigned",
                name: "cumulativeMultiplier",
                type: "tuple",
            },
            {
                internalType: "uint256",
                name: "updateTime",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "applicationTime",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "proposalTime",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "getCurrentTime",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "liquidationLiveness",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "",
                type: "address",
            },
        ],
        name: "liquidations",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "",
                type: "address",
            },
        ],
        name: "positions",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                components: [
                    {
                        components: [
                            {
                                internalType: "int256",
                                name: "rawValue",
                                type: "int256",
                            },
                        ],
                        internalType: "struct FixedPoint.Signed",
                        name: "rate",
                        type: "tuple",
                    },
                    {
                        internalType: "bytes32",
                        name: "identifier",
                        type: "bytes32",
                    },
                    {
                        components: [
                            {
                                internalType: "uint256",
                                name: "rawValue",
                                type: "uint256",
                            },
                        ],
                        internalType: "struct FixedPoint.Unsigned",
                        name: "cumulativeMultiplier",
                        type: "tuple",
                    },
                    {
                        internalType: "uint256",
                        name: "updateTime",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "applicationTime",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "proposalTime",
                        type: "uint256",
                    },
                ],
                internalType: "struct PerpetualMock.FundingRate",
                name: "_fundingRate",
                type: "tuple",
            },
        ],
        name: "setFundingRate",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
];
const _bytecode = "0x608060405234801561001057600080fd5b506106ab806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c806355f5751011610076578063937d4c421161005b578063937d4c4214610161578063beb4dada14610181578063dd0eef3d146101bf57600080fd5b806355f575101461013757806371f3c1b71461015757600080fd5b806329cb924d146100a85780632d5436cf146100bd57806341d3c84c146100c657806348e30c3f1461012d575b600080fd5b425b6040519081526020015b60405180910390f35b6100aa60075481565b60408051602080820183526000548252600154835191820190935260025481526003546004546005546100fa959392919086565b604080519651875260208701959095529251938501939093526060840152608083019190915260a082015260c0016100b4565b6006546100aa9081565b6100aa61014536600461037c565b60096020526000908152604090205481565b61015f6101c9565b005b6100aa61016f36600461037c565b600a6020526000908152604090205481565b61015f61018f366004610426565b80515160005560208101516001556040810151516002556060810151600355608081015160045560a00151600555565b6008546100aa9081565b4260045560408051602081019091526000548152610214906101fe906101f9906101f3600161021a565b9061024f565b610282565b6040805160208101909152600254815290610314565b51600255565b60408051602081019091526000815260408051602081019091528061024784670de0b6b3a7640000610351565b905292915050565b60408051602081019091526000815260408051602081019091528251845182916102799190610364565b90529392505050565b604080516020810190915260008152815160001315610301576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4e656761746976652076616c75652070726f7669646564000000000000000000604482015260640160405180910390fd5b5060408051602081019091529051815290565b6040805160208101909152600081526040805160208101909152825184518291670de0b6b3a76400009161034791610370565b6102799190610519565b600061035d8284610554565b9392505050565b600061035d8284610610565b600061035d8284610638565b60006020828403121561038e57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461035d57600080fd5b6040516020810167ffffffffffffffff811182821017156103fc577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405290565b60006020828403121561041457600080fd5b61041c6103b2565b9135825250919050565b600081830360c081121561043957600080fd5b60405160c0810181811067ffffffffffffffff82111715610483577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604052602082121561049457600080fd5b61049c6103b2565b915083358252818152602084013560208201526104bc8560408601610402565b6040820152606084013560608201526080840135608082015260a084013560a0820152809250505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008261054f577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600084136000841385830485118282161615610595576105956104ea565b7f800000000000000000000000000000000000000000000000000000000000000060008712868205881281841616156105d0576105d06104ea565b600087129250878205871284841616156105ec576105ec6104ea565b87850587128184161615610602576106026104ea565b505050929093029392505050565b8082018281126000831280158216821582161715610630576106306104ea565b505092915050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610670576106706104ea565b50029056fea2646970667358221220c5b2e7c0af86180e090dd8991ec81812cd3016a2f105217586aca27c0d2d9ec164736f6c63430008100033";
class PerpetualMock__factory extends ethers_1.ContractFactory {
    constructor(...args) {
        if (args.length === 1) {
            super(_abi, _bytecode, args[0]);
        }
        else {
            super(...args);
        }
    }
    deploy(overrides) {
        return super.deploy(overrides || {});
    }
    getDeployTransaction(overrides) {
        return super.getDeployTransaction(overrides || {});
    }
    attach(address) {
        return super.attach(address);
    }
    connect(signer) {
        return super.connect(signer);
    }
    static createInterface() {
        return new ethers_1.utils.Interface(_abi);
    }
    static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    }
}
exports.PerpetualMock__factory = PerpetualMock__factory;
PerpetualMock__factory.bytecode = _bytecode;
PerpetualMock__factory.abi = _abi;
