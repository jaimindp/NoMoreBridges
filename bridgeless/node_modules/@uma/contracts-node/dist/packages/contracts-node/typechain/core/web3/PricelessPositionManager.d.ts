/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type ContractExpired = ContractEventLog<{
  caller: string;
  0: string;
}>;
export type Deposit = ContractEventLog<{
  sponsor: string;
  collateralAmount: string;
  0: string;
  1: string;
}>;
export type EmergencyShutdown = ContractEventLog<{
  caller: string;
  originalExpirationTimestamp: string;
  shutdownTimestamp: string;
  0: string;
  1: string;
  2: string;
}>;
export type EndedSponsorPosition = ContractEventLog<{
  sponsor: string;
  0: string;
}>;
export type FinalFeesPaid = ContractEventLog<{
  amount: string;
  0: string;
}>;
export type NewSponsor = ContractEventLog<{
  sponsor: string;
  0: string;
}>;
export type PositionCreated = ContractEventLog<{
  sponsor: string;
  collateralAmount: string;
  tokenAmount: string;
  0: string;
  1: string;
  2: string;
}>;
export type Redeem = ContractEventLog<{
  sponsor: string;
  collateralAmount: string;
  tokenAmount: string;
  0: string;
  1: string;
  2: string;
}>;
export type RegularFeesPaid = ContractEventLog<{
  regularFee: string;
  lateFee: string;
  0: string;
  1: string;
}>;
export type Repay = ContractEventLog<{
  sponsor: string;
  numTokensRepaid: string;
  newTokenCount: string;
  0: string;
  1: string;
  2: string;
}>;
export type RequestTransferPosition = ContractEventLog<{
  oldSponsor: string;
  0: string;
}>;
export type RequestTransferPositionCanceled = ContractEventLog<{
  oldSponsor: string;
  0: string;
}>;
export type RequestTransferPositionExecuted = ContractEventLog<{
  oldSponsor: string;
  newSponsor: string;
  0: string;
  1: string;
}>;
export type RequestWithdrawal = ContractEventLog<{
  sponsor: string;
  collateralAmount: string;
  0: string;
  1: string;
}>;
export type RequestWithdrawalCanceled = ContractEventLog<{
  sponsor: string;
  collateralAmount: string;
  0: string;
  1: string;
}>;
export type RequestWithdrawalExecuted = ContractEventLog<{
  sponsor: string;
  collateralAmount: string;
  0: string;
  1: string;
}>;
export type SettleExpiredPosition = ContractEventLog<{
  caller: string;
  collateralReturned: string;
  tokensBurned: string;
  0: string;
  1: string;
  2: string;
}>;
export type Withdrawal = ContractEventLog<{
  sponsor: string;
  collateralAmount: string;
  0: string;
  1: string;
}>;

export interface PricelessPositionManager extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): PricelessPositionManager;
  clone(): PricelessPositionManager;
  methods: {
    _getSyntheticDecimals(
      _collateralAddress: string
    ): NonPayableTransactionObject<string>;

    cancelTransferPosition(): NonPayableTransactionObject<void>;

    cancelWithdrawal(): NonPayableTransactionObject<void>;

    collateralCurrency(): NonPayableTransactionObject<string>;

    contractState(): NonPayableTransactionObject<string>;

    create(
      collateralAmount: [number | string | BN],
      numTokens: [number | string | BN]
    ): NonPayableTransactionObject<void>;

    cumulativeFeeMultiplier(): NonPayableTransactionObject<string>;

    deposit(
      collateralAmount: [number | string | BN]
    ): NonPayableTransactionObject<void>;

    depositTo(
      sponsor: string,
      collateralAmount: [number | string | BN]
    ): NonPayableTransactionObject<void>;

    emergencyShutdown(): NonPayableTransactionObject<void>;

    expirationTimestamp(): NonPayableTransactionObject<string>;

    expire(): NonPayableTransactionObject<void>;

    expiryPrice(): NonPayableTransactionObject<string>;

    financialProductLibrary(): NonPayableTransactionObject<string>;

    finder(): NonPayableTransactionObject<string>;

    getCollateral(sponsor: string): NonPayableTransactionObject<[string]>;

    getCurrentTime(): NonPayableTransactionObject<string>;

    getOutstandingRegularFees(
      time: number | string | BN
    ): NonPayableTransactionObject<{
      regularFee: [string];
      latePenalty: [string];
      totalPaid: [string];
      0: [string];
      1: [string];
      2: [string];
    }>;

    gulp(): NonPayableTransactionObject<void>;

    minSponsorTokens(): NonPayableTransactionObject<string>;

    payRegularFees(): NonPayableTransactionObject<[string]>;

    pfc(): NonPayableTransactionObject<[string]>;

    positions(arg0: string): NonPayableTransactionObject<{
      tokensOutstanding: [string];
      withdrawalRequestPassTimestamp: string;
      withdrawalRequestAmount: [string];
      rawCollateral: [string];
      transferPositionRequestPassTimestamp: string;
      0: [string];
      1: string;
      2: [string];
      3: [string];
      4: string;
    }>;

    priceIdentifier(): NonPayableTransactionObject<string>;

    rawTotalPositionCollateral(): NonPayableTransactionObject<string>;

    redeem(
      numTokens: [number | string | BN]
    ): NonPayableTransactionObject<[string]>;

    remargin(): NonPayableTransactionObject<void>;

    repay(numTokens: [number | string | BN]): NonPayableTransactionObject<void>;

    requestTransferPosition(): NonPayableTransactionObject<void>;

    requestWithdrawal(
      collateralAmount: [number | string | BN]
    ): NonPayableTransactionObject<void>;

    setCurrentTime(
      time: number | string | BN
    ): NonPayableTransactionObject<void>;

    settleExpired(): NonPayableTransactionObject<[string]>;

    timerAddress(): NonPayableTransactionObject<string>;

    tokenCurrency(): NonPayableTransactionObject<string>;

    totalPositionCollateral(): NonPayableTransactionObject<[string]>;

    totalTokensOutstanding(): NonPayableTransactionObject<string>;

    transferPositionPassedRequest(
      newSponsorAddress: string
    ): NonPayableTransactionObject<void>;

    transformPrice(
      price: [number | string | BN],
      requestTime: number | string | BN
    ): NonPayableTransactionObject<[string]>;

    transformPriceIdentifier(
      requestTime: number | string | BN
    ): NonPayableTransactionObject<string>;

    withdraw(
      collateralAmount: [number | string | BN]
    ): NonPayableTransactionObject<[string]>;

    withdrawPassedRequest(): NonPayableTransactionObject<[string]>;

    withdrawalLiveness(): NonPayableTransactionObject<string>;
  };
  events: {
    ContractExpired(cb?: Callback<ContractExpired>): EventEmitter;
    ContractExpired(
      options?: EventOptions,
      cb?: Callback<ContractExpired>
    ): EventEmitter;

    Deposit(cb?: Callback<Deposit>): EventEmitter;
    Deposit(options?: EventOptions, cb?: Callback<Deposit>): EventEmitter;

    EmergencyShutdown(cb?: Callback<EmergencyShutdown>): EventEmitter;
    EmergencyShutdown(
      options?: EventOptions,
      cb?: Callback<EmergencyShutdown>
    ): EventEmitter;

    EndedSponsorPosition(cb?: Callback<EndedSponsorPosition>): EventEmitter;
    EndedSponsorPosition(
      options?: EventOptions,
      cb?: Callback<EndedSponsorPosition>
    ): EventEmitter;

    FinalFeesPaid(cb?: Callback<FinalFeesPaid>): EventEmitter;
    FinalFeesPaid(
      options?: EventOptions,
      cb?: Callback<FinalFeesPaid>
    ): EventEmitter;

    NewSponsor(cb?: Callback<NewSponsor>): EventEmitter;
    NewSponsor(options?: EventOptions, cb?: Callback<NewSponsor>): EventEmitter;

    PositionCreated(cb?: Callback<PositionCreated>): EventEmitter;
    PositionCreated(
      options?: EventOptions,
      cb?: Callback<PositionCreated>
    ): EventEmitter;

    Redeem(cb?: Callback<Redeem>): EventEmitter;
    Redeem(options?: EventOptions, cb?: Callback<Redeem>): EventEmitter;

    RegularFeesPaid(cb?: Callback<RegularFeesPaid>): EventEmitter;
    RegularFeesPaid(
      options?: EventOptions,
      cb?: Callback<RegularFeesPaid>
    ): EventEmitter;

    Repay(cb?: Callback<Repay>): EventEmitter;
    Repay(options?: EventOptions, cb?: Callback<Repay>): EventEmitter;

    RequestTransferPosition(
      cb?: Callback<RequestTransferPosition>
    ): EventEmitter;
    RequestTransferPosition(
      options?: EventOptions,
      cb?: Callback<RequestTransferPosition>
    ): EventEmitter;

    RequestTransferPositionCanceled(
      cb?: Callback<RequestTransferPositionCanceled>
    ): EventEmitter;
    RequestTransferPositionCanceled(
      options?: EventOptions,
      cb?: Callback<RequestTransferPositionCanceled>
    ): EventEmitter;

    RequestTransferPositionExecuted(
      cb?: Callback<RequestTransferPositionExecuted>
    ): EventEmitter;
    RequestTransferPositionExecuted(
      options?: EventOptions,
      cb?: Callback<RequestTransferPositionExecuted>
    ): EventEmitter;

    RequestWithdrawal(cb?: Callback<RequestWithdrawal>): EventEmitter;
    RequestWithdrawal(
      options?: EventOptions,
      cb?: Callback<RequestWithdrawal>
    ): EventEmitter;

    RequestWithdrawalCanceled(
      cb?: Callback<RequestWithdrawalCanceled>
    ): EventEmitter;
    RequestWithdrawalCanceled(
      options?: EventOptions,
      cb?: Callback<RequestWithdrawalCanceled>
    ): EventEmitter;

    RequestWithdrawalExecuted(
      cb?: Callback<RequestWithdrawalExecuted>
    ): EventEmitter;
    RequestWithdrawalExecuted(
      options?: EventOptions,
      cb?: Callback<RequestWithdrawalExecuted>
    ): EventEmitter;

    SettleExpiredPosition(cb?: Callback<SettleExpiredPosition>): EventEmitter;
    SettleExpiredPosition(
      options?: EventOptions,
      cb?: Callback<SettleExpiredPosition>
    ): EventEmitter;

    Withdrawal(cb?: Callback<Withdrawal>): EventEmitter;
    Withdrawal(options?: EventOptions, cb?: Callback<Withdrawal>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "ContractExpired", cb: Callback<ContractExpired>): void;
  once(
    event: "ContractExpired",
    options: EventOptions,
    cb: Callback<ContractExpired>
  ): void;

  once(event: "Deposit", cb: Callback<Deposit>): void;
  once(event: "Deposit", options: EventOptions, cb: Callback<Deposit>): void;

  once(event: "EmergencyShutdown", cb: Callback<EmergencyShutdown>): void;
  once(
    event: "EmergencyShutdown",
    options: EventOptions,
    cb: Callback<EmergencyShutdown>
  ): void;

  once(event: "EndedSponsorPosition", cb: Callback<EndedSponsorPosition>): void;
  once(
    event: "EndedSponsorPosition",
    options: EventOptions,
    cb: Callback<EndedSponsorPosition>
  ): void;

  once(event: "FinalFeesPaid", cb: Callback<FinalFeesPaid>): void;
  once(
    event: "FinalFeesPaid",
    options: EventOptions,
    cb: Callback<FinalFeesPaid>
  ): void;

  once(event: "NewSponsor", cb: Callback<NewSponsor>): void;
  once(
    event: "NewSponsor",
    options: EventOptions,
    cb: Callback<NewSponsor>
  ): void;

  once(event: "PositionCreated", cb: Callback<PositionCreated>): void;
  once(
    event: "PositionCreated",
    options: EventOptions,
    cb: Callback<PositionCreated>
  ): void;

  once(event: "Redeem", cb: Callback<Redeem>): void;
  once(event: "Redeem", options: EventOptions, cb: Callback<Redeem>): void;

  once(event: "RegularFeesPaid", cb: Callback<RegularFeesPaid>): void;
  once(
    event: "RegularFeesPaid",
    options: EventOptions,
    cb: Callback<RegularFeesPaid>
  ): void;

  once(event: "Repay", cb: Callback<Repay>): void;
  once(event: "Repay", options: EventOptions, cb: Callback<Repay>): void;

  once(
    event: "RequestTransferPosition",
    cb: Callback<RequestTransferPosition>
  ): void;
  once(
    event: "RequestTransferPosition",
    options: EventOptions,
    cb: Callback<RequestTransferPosition>
  ): void;

  once(
    event: "RequestTransferPositionCanceled",
    cb: Callback<RequestTransferPositionCanceled>
  ): void;
  once(
    event: "RequestTransferPositionCanceled",
    options: EventOptions,
    cb: Callback<RequestTransferPositionCanceled>
  ): void;

  once(
    event: "RequestTransferPositionExecuted",
    cb: Callback<RequestTransferPositionExecuted>
  ): void;
  once(
    event: "RequestTransferPositionExecuted",
    options: EventOptions,
    cb: Callback<RequestTransferPositionExecuted>
  ): void;

  once(event: "RequestWithdrawal", cb: Callback<RequestWithdrawal>): void;
  once(
    event: "RequestWithdrawal",
    options: EventOptions,
    cb: Callback<RequestWithdrawal>
  ): void;

  once(
    event: "RequestWithdrawalCanceled",
    cb: Callback<RequestWithdrawalCanceled>
  ): void;
  once(
    event: "RequestWithdrawalCanceled",
    options: EventOptions,
    cb: Callback<RequestWithdrawalCanceled>
  ): void;

  once(
    event: "RequestWithdrawalExecuted",
    cb: Callback<RequestWithdrawalExecuted>
  ): void;
  once(
    event: "RequestWithdrawalExecuted",
    options: EventOptions,
    cb: Callback<RequestWithdrawalExecuted>
  ): void;

  once(
    event: "SettleExpiredPosition",
    cb: Callback<SettleExpiredPosition>
  ): void;
  once(
    event: "SettleExpiredPosition",
    options: EventOptions,
    cb: Callback<SettleExpiredPosition>
  ): void;

  once(event: "Withdrawal", cb: Callback<Withdrawal>): void;
  once(
    event: "Withdrawal",
    options: EventOptions,
    cb: Callback<Withdrawal>
  ): void;
}
