"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
Object.defineProperty(exports, "__esModule", { value: true });
exports.BridgeAdminInterface__factory = void 0;
const ethers_1 = require("ethers");
const _abi = [
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "address[]",
                name: "bridgePools",
                type: "address[]",
            },
            {
                indexed: true,
                internalType: "address",
                name: "newAdmin",
                type: "address",
            },
        ],
        name: "BridgePoolsAdminTransferred",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "uint256",
                name: "chainId",
                type: "uint256",
            },
            {
                indexed: true,
                internalType: "address",
                name: "l2Token",
                type: "address",
            },
            {
                indexed: false,
                internalType: "bool",
                name: "depositsEnabled",
                type: "bool",
            },
        ],
        name: "DepositsEnabled",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "uint256",
                name: "chainId",
                type: "uint256",
            },
            {
                indexed: true,
                internalType: "address",
                name: "newAdmin",
                type: "address",
            },
        ],
        name: "SetCrossDomainAdmin",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "uint256",
                name: "chainId",
                type: "uint256",
            },
            {
                indexed: true,
                internalType: "address",
                name: "l2DepositContract",
                type: "address",
            },
            {
                indexed: true,
                internalType: "address",
                name: "l2MessengerContract",
                type: "address",
            },
        ],
        name: "SetDepositContracts",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "bridgePool",
                type: "address",
            },
            {
                indexed: false,
                internalType: "uint64",
                name: "newLpFeeRatePerSecond",
                type: "uint64",
            },
        ],
        name: "SetLpFeeRate",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "uint256",
                name: "chainId",
                type: "uint256",
            },
            {
                indexed: false,
                internalType: "uint64",
                name: "newMinimumBridgingDelay",
                type: "uint64",
            },
        ],
        name: "SetMinimumBridgingDelay",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "uint32",
                name: "liveness",
                type: "uint32",
            },
        ],
        name: "SetOptimisticOracleLiveness",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "uint64",
                name: "proposerBondPct",
                type: "uint64",
            },
        ],
        name: "SetProposerBondPct",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "bytes32",
                name: "identifier",
                type: "bytes32",
            },
        ],
        name: "SetRelayIdentifier",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "uint256",
                name: "chainId",
                type: "uint256",
            },
            {
                indexed: true,
                internalType: "address",
                name: "l1Token",
                type: "address",
            },
            {
                indexed: true,
                internalType: "address",
                name: "l2Token",
                type: "address",
            },
            {
                indexed: true,
                internalType: "address",
                name: "bridgePool",
                type: "address",
            },
        ],
        name: "WhitelistToken",
        type: "event",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        name: "depositContracts",
        outputs: [
            {
                components: [
                    {
                        internalType: "address",
                        name: "depositContract",
                        type: "address",
                    },
                    {
                        internalType: "address",
                        name: "messengerContract",
                        type: "address",
                    },
                ],
                internalType: "struct BridgeAdminInterface.DepositUtilityContracts",
                name: "",
                type: "tuple",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "finder",
        outputs: [
            {
                internalType: "address",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "identifier",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "optimisticOracleLiveness",
        outputs: [
            {
                internalType: "uint32",
                name: "",
                type: "uint32",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "proposerBondPct",
        outputs: [
            {
                internalType: "uint64",
                name: "",
                type: "uint64",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        name: "whitelistedTokens",
        outputs: [
            {
                internalType: "address",
                name: "l2Token",
                type: "address",
            },
            {
                internalType: "address",
                name: "bridgePool",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
];
class BridgeAdminInterface__factory {
    static createInterface() {
        return new ethers_1.utils.Interface(_abi);
    }
    static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    }
}
exports.BridgeAdminInterface__factory = BridgeAdminInterface__factory;
BridgeAdminInterface__factory.abi = _abi;
