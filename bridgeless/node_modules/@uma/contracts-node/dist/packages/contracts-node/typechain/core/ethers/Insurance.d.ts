/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface InsuranceInterface extends ethers.utils.Interface {
  functions: {
    "assertedPolicies(bytes32)": FunctionFragment;
    "assertionDisputedCallback(bytes32)": FunctionFragment;
    "assertionLiveness()": FunctionFragment;
    "assertionResolvedCallback(bytes32,bool)": FunctionFragment;
    "defaultCurrency()": FunctionFragment;
    "defaultIdentifier()": FunctionFragment;
    "issueInsurance(uint256,address,bytes)": FunctionFragment;
    "oo()": FunctionFragment;
    "policies(bytes32)": FunctionFragment;
    "requestPayout(bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "assertedPolicies",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "assertionDisputedCallback",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "assertionLiveness",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assertionResolvedCallback",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultCurrency",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultIdentifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "issueInsurance",
    values: [BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "oo", values?: undefined): string;
  encodeFunctionData(functionFragment: "policies", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "requestPayout",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "assertedPolicies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assertionDisputedCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assertionLiveness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assertionResolvedCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultIdentifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "issueInsurance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "policies", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestPayout",
    data: BytesLike
  ): Result;

  events: {
    "InsuranceIssued(bytes32,bytes,uint256,address)": EventFragment;
    "InsurancePayoutRequested(bytes32,bytes32)": EventFragment;
    "InsurancePayoutSettled(bytes32,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "InsuranceIssued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InsurancePayoutRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InsurancePayoutSettled"): EventFragment;
}

export type InsuranceIssuedEvent = TypedEvent<
  [string, string, BigNumber, string] & {
    policyId: string;
    insuredEvent: string;
    insuranceAmount: BigNumber;
    payoutAddress: string;
  }
>;

export type InsurancePayoutRequestedEvent = TypedEvent<
  [string, string] & { policyId: string; assertionId: string }
>;

export type InsurancePayoutSettledEvent = TypedEvent<
  [string, string] & { policyId: string; assertionId: string }
>;

export class Insurance extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: InsuranceInterface;

  functions: {
    assertedPolicies(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    assertionDisputedCallback(
      assertionId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    assertionLiveness(overrides?: CallOverrides): Promise<[BigNumber]>;

    assertionResolvedCallback(
      assertionId: BytesLike,
      assertedTruthfully: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    defaultCurrency(overrides?: CallOverrides): Promise<[string]>;

    defaultIdentifier(overrides?: CallOverrides): Promise<[string]>;

    issueInsurance(
      insuranceAmount: BigNumberish,
      payoutAddress: string,
      insuredEvent: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    oo(overrides?: CallOverrides): Promise<[string]>;

    policies(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, boolean] & {
        insuranceAmount: BigNumber;
        payoutAddress: string;
        insuredEvent: string;
        settled: boolean;
      }
    >;

    requestPayout(
      policyId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  assertedPolicies(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  assertionDisputedCallback(
    assertionId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  assertionLiveness(overrides?: CallOverrides): Promise<BigNumber>;

  assertionResolvedCallback(
    assertionId: BytesLike,
    assertedTruthfully: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  defaultCurrency(overrides?: CallOverrides): Promise<string>;

  defaultIdentifier(overrides?: CallOverrides): Promise<string>;

  issueInsurance(
    insuranceAmount: BigNumberish,
    payoutAddress: string,
    insuredEvent: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  oo(overrides?: CallOverrides): Promise<string>;

  policies(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string, boolean] & {
      insuranceAmount: BigNumber;
      payoutAddress: string;
      insuredEvent: string;
      settled: boolean;
    }
  >;

  requestPayout(
    policyId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    assertedPolicies(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    assertionDisputedCallback(
      assertionId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    assertionLiveness(overrides?: CallOverrides): Promise<BigNumber>;

    assertionResolvedCallback(
      assertionId: BytesLike,
      assertedTruthfully: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    defaultCurrency(overrides?: CallOverrides): Promise<string>;

    defaultIdentifier(overrides?: CallOverrides): Promise<string>;

    issueInsurance(
      insuranceAmount: BigNumberish,
      payoutAddress: string,
      insuredEvent: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    oo(overrides?: CallOverrides): Promise<string>;

    policies(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, boolean] & {
        insuranceAmount: BigNumber;
        payoutAddress: string;
        insuredEvent: string;
        settled: boolean;
      }
    >;

    requestPayout(
      policyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "InsuranceIssued(bytes32,bytes,uint256,address)"(
      policyId?: BytesLike | null,
      insuredEvent?: null,
      insuranceAmount?: null,
      payoutAddress?: string | null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      {
        policyId: string;
        insuredEvent: string;
        insuranceAmount: BigNumber;
        payoutAddress: string;
      }
    >;

    InsuranceIssued(
      policyId?: BytesLike | null,
      insuredEvent?: null,
      insuranceAmount?: null,
      payoutAddress?: string | null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      {
        policyId: string;
        insuredEvent: string;
        insuranceAmount: BigNumber;
        payoutAddress: string;
      }
    >;

    "InsurancePayoutRequested(bytes32,bytes32)"(
      policyId?: BytesLike | null,
      assertionId?: BytesLike | null
    ): TypedEventFilter<
      [string, string],
      { policyId: string; assertionId: string }
    >;

    InsurancePayoutRequested(
      policyId?: BytesLike | null,
      assertionId?: BytesLike | null
    ): TypedEventFilter<
      [string, string],
      { policyId: string; assertionId: string }
    >;

    "InsurancePayoutSettled(bytes32,bytes32)"(
      policyId?: BytesLike | null,
      assertionId?: BytesLike | null
    ): TypedEventFilter<
      [string, string],
      { policyId: string; assertionId: string }
    >;

    InsurancePayoutSettled(
      policyId?: BytesLike | null,
      assertionId?: BytesLike | null
    ): TypedEventFilter<
      [string, string],
      { policyId: string; assertionId: string }
    >;
  };

  estimateGas: {
    assertedPolicies(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assertionDisputedCallback(
      assertionId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    assertionLiveness(overrides?: CallOverrides): Promise<BigNumber>;

    assertionResolvedCallback(
      assertionId: BytesLike,
      assertedTruthfully: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    defaultCurrency(overrides?: CallOverrides): Promise<BigNumber>;

    defaultIdentifier(overrides?: CallOverrides): Promise<BigNumber>;

    issueInsurance(
      insuranceAmount: BigNumberish,
      payoutAddress: string,
      insuredEvent: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    oo(overrides?: CallOverrides): Promise<BigNumber>;

    policies(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    requestPayout(
      policyId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    assertedPolicies(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    assertionDisputedCallback(
      assertionId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    assertionLiveness(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    assertionResolvedCallback(
      assertionId: BytesLike,
      assertedTruthfully: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    defaultCurrency(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    defaultIdentifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    issueInsurance(
      insuranceAmount: BigNumberish,
      payoutAddress: string,
      insuredEvent: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    oo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    policies(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requestPayout(
      policyId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
