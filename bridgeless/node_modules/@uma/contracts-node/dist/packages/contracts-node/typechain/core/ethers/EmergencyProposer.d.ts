/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface EmergencyProposerInterface extends ethers.utils.Interface {
  functions: {
    "emergencyProposals(uint256)": FunctionFragment;
    "emergencyPropose(tuple[])": FunctionFragment;
    "executeEmergencyProposal(uint256)": FunctionFragment;
    "executor()": FunctionFragment;
    "getCurrentTime()": FunctionFragment;
    "governor()": FunctionFragment;
    "minimumWaitTime()": FunctionFragment;
    "multicall(bytes[])": FunctionFragment;
    "owner()": FunctionFragment;
    "quorum()": FunctionFragment;
    "removeProposal(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setExecutor(address)": FunctionFragment;
    "setMinimumWaitTime(uint64)": FunctionFragment;
    "setQuorum(uint256)": FunctionFragment;
    "slashProposal(uint256)": FunctionFragment;
    "token()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "emergencyProposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyPropose",
    values: [{ to: string; value: BigNumberish; data: BytesLike }[]]
  ): string;
  encodeFunctionData(
    functionFragment: "executeEmergencyProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "executor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCurrentTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "minimumWaitTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "quorum", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setExecutor", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setMinimumWaitTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setQuorum",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "slashProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "emergencyProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyPropose",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeEmergencyProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "executor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minimumWaitTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "quorum", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumWaitTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setQuorum", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "slashProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "EmergencyProposalExecuted(uint256,address,address,uint64,uint256,tuple[])": EventFragment;
    "EmergencyProposalRemoved(uint256,address,address,uint64,uint256,tuple[])": EventFragment;
    "EmergencyProposalSlashed(uint256,address,address,uint64,uint256,tuple[])": EventFragment;
    "EmergencyTransactionsProposed(uint256,address,address,uint64,uint256,tuple[])": EventFragment;
    "ExecutorSet(address)": EventFragment;
    "MinimumWaitTimeSet(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "QuorumSet(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EmergencyProposalExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyProposalRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyProposalSlashed"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "EmergencyTransactionsProposed"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecutorSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinimumWaitTimeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QuorumSet"): EventFragment;
}

export type EmergencyProposalExecutedEvent = TypedEvent<
  [
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    ([string, BigNumber, string] & {
      to: string;
      value: BigNumber;
      data: string;
    })[]
  ] & {
    id: BigNumber;
    sender: string;
    caller: string;
    expiryTime: BigNumber;
    lockedTokens: BigNumber;
    transactions: ([string, BigNumber, string] & {
      to: string;
      value: BigNumber;
      data: string;
    })[];
  }
>;

export type EmergencyProposalRemovedEvent = TypedEvent<
  [
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    ([string, BigNumber, string] & {
      to: string;
      value: BigNumber;
      data: string;
    })[]
  ] & {
    id: BigNumber;
    sender: string;
    caller: string;
    expiryTime: BigNumber;
    lockedTokens: BigNumber;
    transactions: ([string, BigNumber, string] & {
      to: string;
      value: BigNumber;
      data: string;
    })[];
  }
>;

export type EmergencyProposalSlashedEvent = TypedEvent<
  [
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    ([string, BigNumber, string] & {
      to: string;
      value: BigNumber;
      data: string;
    })[]
  ] & {
    id: BigNumber;
    sender: string;
    caller: string;
    expiryTime: BigNumber;
    lockedTokens: BigNumber;
    transactions: ([string, BigNumber, string] & {
      to: string;
      value: BigNumber;
      data: string;
    })[];
  }
>;

export type EmergencyTransactionsProposedEvent = TypedEvent<
  [
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    ([string, BigNumber, string] & {
      to: string;
      value: BigNumber;
      data: string;
    })[]
  ] & {
    id: BigNumber;
    sender: string;
    caller: string;
    expiryTime: BigNumber;
    lockedTokens: BigNumber;
    transactions: ([string, BigNumber, string] & {
      to: string;
      value: BigNumber;
      data: string;
    })[];
  }
>;

export type ExecutorSetEvent = TypedEvent<[string] & { executor: string }>;

export type MinimumWaitTimeSetEvent = TypedEvent<
  [BigNumber] & { minimumWaitTime: BigNumber }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type QuorumSetEvent = TypedEvent<[BigNumber] & { quorum: BigNumber }>;

export class EmergencyProposer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: EmergencyProposerInterface;

  functions: {
    emergencyProposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        sender: string;
        expiryTime: BigNumber;
        lockedTokens: BigNumber;
      }
    >;

    emergencyPropose(
      transactions: { to: string; value: BigNumberish; data: BytesLike }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeEmergencyProposal(
      id: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executor(overrides?: CallOverrides): Promise<[string]>;

    getCurrentTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    governor(overrides?: CallOverrides): Promise<[string]>;

    minimumWaitTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    quorum(overrides?: CallOverrides): Promise<[BigNumber]>;

    removeProposal(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setExecutor(
      newExecutor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinimumWaitTime(
      newMinimumWaitTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setQuorum(
      newQuorum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    slashProposal(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    token(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  emergencyProposals(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      sender: string;
      expiryTime: BigNumber;
      lockedTokens: BigNumber;
    }
  >;

  emergencyPropose(
    transactions: { to: string; value: BigNumberish; data: BytesLike }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeEmergencyProposal(
    id: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executor(overrides?: CallOverrides): Promise<string>;

  getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

  governor(overrides?: CallOverrides): Promise<string>;

  minimumWaitTime(overrides?: CallOverrides): Promise<BigNumber>;

  multicall(
    data: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  quorum(overrides?: CallOverrides): Promise<BigNumber>;

  removeProposal(
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setExecutor(
    newExecutor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinimumWaitTime(
    newMinimumWaitTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setQuorum(
    newQuorum: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  slashProposal(
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    emergencyProposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        sender: string;
        expiryTime: BigNumber;
        lockedTokens: BigNumber;
      }
    >;

    emergencyPropose(
      transactions: { to: string; value: BigNumberish; data: BytesLike }[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeEmergencyProposal(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    executor(overrides?: CallOverrides): Promise<string>;

    getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<string>;

    minimumWaitTime(overrides?: CallOverrides): Promise<BigNumber>;

    multicall(data: BytesLike[], overrides?: CallOverrides): Promise<string[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    quorum(overrides?: CallOverrides): Promise<BigNumber>;

    removeProposal(id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setExecutor(newExecutor: string, overrides?: CallOverrides): Promise<void>;

    setMinimumWaitTime(
      newMinimumWaitTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setQuorum(
      newQuorum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    slashProposal(id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    token(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "EmergencyProposalExecuted(uint256,address,address,uint64,uint256,tuple[])"(
      id?: BigNumberish | null,
      sender?: string | null,
      caller?: string | null,
      expiryTime?: null,
      lockedTokens?: null,
      transactions?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        ([string, BigNumber, string] & {
          to: string;
          value: BigNumber;
          data: string;
        })[]
      ],
      {
        id: BigNumber;
        sender: string;
        caller: string;
        expiryTime: BigNumber;
        lockedTokens: BigNumber;
        transactions: ([string, BigNumber, string] & {
          to: string;
          value: BigNumber;
          data: string;
        })[];
      }
    >;

    EmergencyProposalExecuted(
      id?: BigNumberish | null,
      sender?: string | null,
      caller?: string | null,
      expiryTime?: null,
      lockedTokens?: null,
      transactions?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        ([string, BigNumber, string] & {
          to: string;
          value: BigNumber;
          data: string;
        })[]
      ],
      {
        id: BigNumber;
        sender: string;
        caller: string;
        expiryTime: BigNumber;
        lockedTokens: BigNumber;
        transactions: ([string, BigNumber, string] & {
          to: string;
          value: BigNumber;
          data: string;
        })[];
      }
    >;

    "EmergencyProposalRemoved(uint256,address,address,uint64,uint256,tuple[])"(
      id?: BigNumberish | null,
      sender?: string | null,
      caller?: string | null,
      expiryTime?: null,
      lockedTokens?: null,
      transactions?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        ([string, BigNumber, string] & {
          to: string;
          value: BigNumber;
          data: string;
        })[]
      ],
      {
        id: BigNumber;
        sender: string;
        caller: string;
        expiryTime: BigNumber;
        lockedTokens: BigNumber;
        transactions: ([string, BigNumber, string] & {
          to: string;
          value: BigNumber;
          data: string;
        })[];
      }
    >;

    EmergencyProposalRemoved(
      id?: BigNumberish | null,
      sender?: string | null,
      caller?: string | null,
      expiryTime?: null,
      lockedTokens?: null,
      transactions?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        ([string, BigNumber, string] & {
          to: string;
          value: BigNumber;
          data: string;
        })[]
      ],
      {
        id: BigNumber;
        sender: string;
        caller: string;
        expiryTime: BigNumber;
        lockedTokens: BigNumber;
        transactions: ([string, BigNumber, string] & {
          to: string;
          value: BigNumber;
          data: string;
        })[];
      }
    >;

    "EmergencyProposalSlashed(uint256,address,address,uint64,uint256,tuple[])"(
      id?: BigNumberish | null,
      sender?: string | null,
      caller?: string | null,
      expiryTime?: null,
      lockedTokens?: null,
      transactions?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        ([string, BigNumber, string] & {
          to: string;
          value: BigNumber;
          data: string;
        })[]
      ],
      {
        id: BigNumber;
        sender: string;
        caller: string;
        expiryTime: BigNumber;
        lockedTokens: BigNumber;
        transactions: ([string, BigNumber, string] & {
          to: string;
          value: BigNumber;
          data: string;
        })[];
      }
    >;

    EmergencyProposalSlashed(
      id?: BigNumberish | null,
      sender?: string | null,
      caller?: string | null,
      expiryTime?: null,
      lockedTokens?: null,
      transactions?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        ([string, BigNumber, string] & {
          to: string;
          value: BigNumber;
          data: string;
        })[]
      ],
      {
        id: BigNumber;
        sender: string;
        caller: string;
        expiryTime: BigNumber;
        lockedTokens: BigNumber;
        transactions: ([string, BigNumber, string] & {
          to: string;
          value: BigNumber;
          data: string;
        })[];
      }
    >;

    "EmergencyTransactionsProposed(uint256,address,address,uint64,uint256,tuple[])"(
      id?: BigNumberish | null,
      sender?: string | null,
      caller?: string | null,
      expiryTime?: null,
      lockedTokens?: null,
      transactions?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        ([string, BigNumber, string] & {
          to: string;
          value: BigNumber;
          data: string;
        })[]
      ],
      {
        id: BigNumber;
        sender: string;
        caller: string;
        expiryTime: BigNumber;
        lockedTokens: BigNumber;
        transactions: ([string, BigNumber, string] & {
          to: string;
          value: BigNumber;
          data: string;
        })[];
      }
    >;

    EmergencyTransactionsProposed(
      id?: BigNumberish | null,
      sender?: string | null,
      caller?: string | null,
      expiryTime?: null,
      lockedTokens?: null,
      transactions?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        ([string, BigNumber, string] & {
          to: string;
          value: BigNumber;
          data: string;
        })[]
      ],
      {
        id: BigNumber;
        sender: string;
        caller: string;
        expiryTime: BigNumber;
        lockedTokens: BigNumber;
        transactions: ([string, BigNumber, string] & {
          to: string;
          value: BigNumber;
          data: string;
        })[];
      }
    >;

    "ExecutorSet(address)"(
      executor?: null
    ): TypedEventFilter<[string], { executor: string }>;

    ExecutorSet(
      executor?: null
    ): TypedEventFilter<[string], { executor: string }>;

    "MinimumWaitTimeSet(uint256)"(
      minimumWaitTime?: null
    ): TypedEventFilter<[BigNumber], { minimumWaitTime: BigNumber }>;

    MinimumWaitTimeSet(
      minimumWaitTime?: null
    ): TypedEventFilter<[BigNumber], { minimumWaitTime: BigNumber }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "QuorumSet(uint256)"(
      quorum?: null
    ): TypedEventFilter<[BigNumber], { quorum: BigNumber }>;

    QuorumSet(
      quorum?: null
    ): TypedEventFilter<[BigNumber], { quorum: BigNumber }>;
  };

  estimateGas: {
    emergencyProposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    emergencyPropose(
      transactions: { to: string; value: BigNumberish; data: BytesLike }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeEmergencyProposal(
      id: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executor(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    minimumWaitTime(overrides?: CallOverrides): Promise<BigNumber>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    quorum(overrides?: CallOverrides): Promise<BigNumber>;

    removeProposal(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setExecutor(
      newExecutor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinimumWaitTime(
      newMinimumWaitTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setQuorum(
      newQuorum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    slashProposal(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    emergencyProposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emergencyPropose(
      transactions: { to: string; value: BigNumberish; data: BytesLike }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeEmergencyProposal(
      id: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minimumWaitTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quorum(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeProposal(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setExecutor(
      newExecutor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinimumWaitTime(
      newMinimumWaitTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setQuorum(
      newQuorum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    slashProposal(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
