/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ConfigStoreInterface extends ethers.utils.Interface {
  functions: {
    "getCurrentTime()": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingConfig()": FunctionFragment;
    "pendingPassedTimestamp()": FunctionFragment;
    "proposeNewConfig((uint256,(uint256),(uint256),(int256),(int256),uint256))": FunctionFragment;
    "publishPendingConfig()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setCurrentTime(uint256)": FunctionFragment;
    "timerAddress()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateAndGetCurrentConfig()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getCurrentTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingPassedTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposeNewConfig",
    values: [
      {
        timelockLiveness: BigNumberish;
        rewardRatePerSecond: { rawValue: BigNumberish };
        proposerBondPercentage: { rawValue: BigNumberish };
        maxFundingRate: { rawValue: BigNumberish };
        minFundingRate: { rawValue: BigNumberish };
        proposalTimePastLimit: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "publishPendingConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCurrentTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "timerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAndGetCurrentConfig",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getCurrentTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingPassedTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeNewConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publishPendingConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCurrentTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAndGetCurrentConfig",
    data: BytesLike
  ): Result;

  events: {
    "ChangedConfigSettings(uint256,uint256,uint256,int256,int256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ProposedNewConfigSettings(address,uint256,uint256,uint256,int256,int256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChangedConfigSettings"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposedNewConfigSettings"): EventFragment;
}

export type ChangedConfigSettingsEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
    rewardRatePerSecond: BigNumber;
    proposerBondPercentage: BigNumber;
    timelockLiveness: BigNumber;
    maxFundingRate: BigNumber;
    minFundingRate: BigNumber;
    proposalTimePastLimit: BigNumber;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type ProposedNewConfigSettingsEvent = TypedEvent<
  [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    proposer: string;
    rewardRatePerSecond: BigNumber;
    proposerBondPercentage: BigNumber;
    timelockLiveness: BigNumber;
    maxFundingRate: BigNumber;
    minFundingRate: BigNumber;
    proposalTimePastLimit: BigNumber;
    proposalPassedTimestamp: BigNumber;
  }
>;

export class ConfigStore extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ConfigStoreInterface;

  functions: {
    getCurrentTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingConfig(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        BigNumber
      ] & {
        timelockLiveness: BigNumber;
        rewardRatePerSecond: [BigNumber] & { rawValue: BigNumber };
        proposerBondPercentage: [BigNumber] & { rawValue: BigNumber };
        maxFundingRate: [BigNumber] & { rawValue: BigNumber };
        minFundingRate: [BigNumber] & { rawValue: BigNumber };
        proposalTimePastLimit: BigNumber;
      }
    >;

    pendingPassedTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    proposeNewConfig(
      newConfig: {
        timelockLiveness: BigNumberish;
        rewardRatePerSecond: { rawValue: BigNumberish };
        proposerBondPercentage: { rawValue: BigNumberish };
        maxFundingRate: { rawValue: BigNumberish };
        minFundingRate: { rawValue: BigNumberish };
        proposalTimePastLimit: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    publishPendingConfig(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCurrentTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    timerAddress(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateAndGetCurrentConfig(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingConfig(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      [BigNumber] & { rawValue: BigNumber },
      [BigNumber] & { rawValue: BigNumber },
      [BigNumber] & { rawValue: BigNumber },
      [BigNumber] & { rawValue: BigNumber },
      BigNumber
    ] & {
      timelockLiveness: BigNumber;
      rewardRatePerSecond: [BigNumber] & { rawValue: BigNumber };
      proposerBondPercentage: [BigNumber] & { rawValue: BigNumber };
      maxFundingRate: [BigNumber] & { rawValue: BigNumber };
      minFundingRate: [BigNumber] & { rawValue: BigNumber };
      proposalTimePastLimit: BigNumber;
    }
  >;

  pendingPassedTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  proposeNewConfig(
    newConfig: {
      timelockLiveness: BigNumberish;
      rewardRatePerSecond: { rawValue: BigNumberish };
      proposerBondPercentage: { rawValue: BigNumberish };
      maxFundingRate: { rawValue: BigNumberish };
      minFundingRate: { rawValue: BigNumberish };
      proposalTimePastLimit: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  publishPendingConfig(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCurrentTime(
    time: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  timerAddress(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateAndGetCurrentConfig(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingConfig(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        BigNumber
      ] & {
        timelockLiveness: BigNumber;
        rewardRatePerSecond: [BigNumber] & { rawValue: BigNumber };
        proposerBondPercentage: [BigNumber] & { rawValue: BigNumber };
        maxFundingRate: [BigNumber] & { rawValue: BigNumber };
        minFundingRate: [BigNumber] & { rawValue: BigNumber };
        proposalTimePastLimit: BigNumber;
      }
    >;

    pendingPassedTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    proposeNewConfig(
      newConfig: {
        timelockLiveness: BigNumberish;
        rewardRatePerSecond: { rawValue: BigNumberish };
        proposerBondPercentage: { rawValue: BigNumberish };
        maxFundingRate: { rawValue: BigNumberish };
        minFundingRate: { rawValue: BigNumberish };
        proposalTimePastLimit: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    publishPendingConfig(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setCurrentTime(
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    timerAddress(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAndGetCurrentConfig(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        BigNumber
      ] & {
        timelockLiveness: BigNumber;
        rewardRatePerSecond: [BigNumber] & { rawValue: BigNumber };
        proposerBondPercentage: [BigNumber] & { rawValue: BigNumber };
        maxFundingRate: [BigNumber] & { rawValue: BigNumber };
        minFundingRate: [BigNumber] & { rawValue: BigNumber };
        proposalTimePastLimit: BigNumber;
      }
    >;
  };

  filters: {
    "ChangedConfigSettings(uint256,uint256,uint256,int256,int256,uint256)"(
      rewardRatePerSecond?: null,
      proposerBondPercentage?: null,
      timelockLiveness?: null,
      maxFundingRate?: null,
      minFundingRate?: null,
      proposalTimePastLimit?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        rewardRatePerSecond: BigNumber;
        proposerBondPercentage: BigNumber;
        timelockLiveness: BigNumber;
        maxFundingRate: BigNumber;
        minFundingRate: BigNumber;
        proposalTimePastLimit: BigNumber;
      }
    >;

    ChangedConfigSettings(
      rewardRatePerSecond?: null,
      proposerBondPercentage?: null,
      timelockLiveness?: null,
      maxFundingRate?: null,
      minFundingRate?: null,
      proposalTimePastLimit?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        rewardRatePerSecond: BigNumber;
        proposerBondPercentage: BigNumber;
        timelockLiveness: BigNumber;
        maxFundingRate: BigNumber;
        minFundingRate: BigNumber;
        proposalTimePastLimit: BigNumber;
      }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "ProposedNewConfigSettings(address,uint256,uint256,uint256,int256,int256,uint256,uint256)"(
      proposer?: string | null,
      rewardRatePerSecond?: null,
      proposerBondPercentage?: null,
      timelockLiveness?: null,
      maxFundingRate?: null,
      minFundingRate?: null,
      proposalTimePastLimit?: null,
      proposalPassedTimestamp?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        proposer: string;
        rewardRatePerSecond: BigNumber;
        proposerBondPercentage: BigNumber;
        timelockLiveness: BigNumber;
        maxFundingRate: BigNumber;
        minFundingRate: BigNumber;
        proposalTimePastLimit: BigNumber;
        proposalPassedTimestamp: BigNumber;
      }
    >;

    ProposedNewConfigSettings(
      proposer?: string | null,
      rewardRatePerSecond?: null,
      proposerBondPercentage?: null,
      timelockLiveness?: null,
      maxFundingRate?: null,
      minFundingRate?: null,
      proposalTimePastLimit?: null,
      proposalPassedTimestamp?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        proposer: string;
        rewardRatePerSecond: BigNumber;
        proposerBondPercentage: BigNumber;
        timelockLiveness: BigNumber;
        maxFundingRate: BigNumber;
        minFundingRate: BigNumber;
        proposalTimePastLimit: BigNumber;
        proposalPassedTimestamp: BigNumber;
      }
    >;
  };

  estimateGas: {
    getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingConfig(overrides?: CallOverrides): Promise<BigNumber>;

    pendingPassedTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    proposeNewConfig(
      newConfig: {
        timelockLiveness: BigNumberish;
        rewardRatePerSecond: { rawValue: BigNumberish };
        proposerBondPercentage: { rawValue: BigNumberish };
        maxFundingRate: { rawValue: BigNumberish };
        minFundingRate: { rawValue: BigNumberish };
        proposalTimePastLimit: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    publishPendingConfig(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCurrentTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    timerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateAndGetCurrentConfig(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getCurrentTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingPassedTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposeNewConfig(
      newConfig: {
        timelockLiveness: BigNumberish;
        rewardRatePerSecond: { rawValue: BigNumberish };
        proposerBondPercentage: { rawValue: BigNumberish };
        maxFundingRate: { rawValue: BigNumberish };
        minFundingRate: { rawValue: BigNumberish };
        proposalTimePastLimit: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    publishPendingConfig(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCurrentTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    timerAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateAndGetCurrentConfig(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
