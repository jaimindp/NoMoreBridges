import { Signer, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ArbitrumOutboxMock, ArbitrumOutboxMockInterface } from "../ArbitrumOutboxMock";
export declare class ArbitrumOutboxMock__factory extends ContractFactory {
    constructor(...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>);
    deploy(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ArbitrumOutboxMock>;
    getDeployTransaction(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): TransactionRequest;
    attach(address: string): ArbitrumOutboxMock;
    connect(signer: Signer): ArbitrumOutboxMock__factory;
    static readonly bytecode = "0x6080604052348015600f57600080fd5b50607680601d6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806380648b0214602d575b600080fd5b6040805130815290519081900360200190f3fea26469706673582212205cdea914f371aee322da3e29bfaa8d576adb0373fc10a43a74faf9d0db93e22664736f6c63430008100033";
    static readonly abi: {
        inputs: never[];
        name: string;
        outputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        stateMutability: string;
        type: string;
    }[];
    static createInterface(): ArbitrumOutboxMockInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): ArbitrumOutboxMock;
}
