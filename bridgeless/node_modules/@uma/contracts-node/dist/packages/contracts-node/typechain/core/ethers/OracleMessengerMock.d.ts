/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface OracleMessengerMockInterface extends ethers.utils.Interface {
  functions: {
    "getL1CallValue()": FunctionFragment;
    "latestAncillaryData()": FunctionFragment;
    "latestIdentifier()": FunctionFragment;
    "latestPrice()": FunctionFragment;
    "latestTime()": FunctionFragment;
    "messageCount()": FunctionFragment;
    "publishPrice(address,bytes32,uint256,bytes,int256)": FunctionFragment;
    "requestPrice(address,uint256,bytes32,uint256,bytes)": FunctionFragment;
    "sendMessageToChild(bytes)": FunctionFragment;
    "sendMessageToParent(bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getL1CallValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestAncillaryData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestIdentifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "messageCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "publishPrice",
    values: [string, BytesLike, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestPrice",
    values: [string, BigNumberish, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sendMessageToChild",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sendMessageToParent",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getL1CallValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestAncillaryData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestIdentifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "latestTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "messageCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publishPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendMessageToChild",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendMessageToParent",
    data: BytesLike
  ): Result;

  events: {};
}

export class OracleMessengerMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: OracleMessengerMockInterface;

  functions: {
    getL1CallValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    latestAncillaryData(overrides?: CallOverrides): Promise<[string]>;

    latestIdentifier(overrides?: CallOverrides): Promise<[string]>;

    latestPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    latestTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    messageCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    publishPrice(
      oracleSpoke: string,
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestPrice(
      oracleHub: string,
      chainId: BigNumberish,
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendMessageToChild(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendMessageToParent(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getL1CallValue(overrides?: CallOverrides): Promise<BigNumber>;

  latestAncillaryData(overrides?: CallOverrides): Promise<string>;

  latestIdentifier(overrides?: CallOverrides): Promise<string>;

  latestPrice(overrides?: CallOverrides): Promise<BigNumber>;

  latestTime(overrides?: CallOverrides): Promise<BigNumber>;

  messageCount(overrides?: CallOverrides): Promise<BigNumber>;

  publishPrice(
    oracleSpoke: string,
    identifier: BytesLike,
    time: BigNumberish,
    ancillaryData: BytesLike,
    price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestPrice(
    oracleHub: string,
    chainId: BigNumberish,
    identifier: BytesLike,
    time: BigNumberish,
    ancillaryData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendMessageToChild(
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendMessageToParent(
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getL1CallValue(overrides?: CallOverrides): Promise<BigNumber>;

    latestAncillaryData(overrides?: CallOverrides): Promise<string>;

    latestIdentifier(overrides?: CallOverrides): Promise<string>;

    latestPrice(overrides?: CallOverrides): Promise<BigNumber>;

    latestTime(overrides?: CallOverrides): Promise<BigNumber>;

    messageCount(overrides?: CallOverrides): Promise<BigNumber>;

    publishPrice(
      oracleSpoke: string,
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    requestPrice(
      oracleHub: string,
      chainId: BigNumberish,
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    sendMessageToChild(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    sendMessageToParent(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getL1CallValue(overrides?: CallOverrides): Promise<BigNumber>;

    latestAncillaryData(overrides?: CallOverrides): Promise<BigNumber>;

    latestIdentifier(overrides?: CallOverrides): Promise<BigNumber>;

    latestPrice(overrides?: CallOverrides): Promise<BigNumber>;

    latestTime(overrides?: CallOverrides): Promise<BigNumber>;

    messageCount(overrides?: CallOverrides): Promise<BigNumber>;

    publishPrice(
      oracleSpoke: string,
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestPrice(
      oracleHub: string,
      chainId: BigNumberish,
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendMessageToChild(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendMessageToParent(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getL1CallValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    latestAncillaryData(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    latestIdentifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    latestPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    latestTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    messageCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    publishPrice(
      oracleSpoke: string,
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestPrice(
      oracleHub: string,
      chainId: BigNumberish,
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendMessageToChild(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendMessageToParent(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
