/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface OptimisticDistributorInterface extends ethers.utils.Interface {
  functions: {
    "ANCILLARY_BYTES_RESERVE()": FunctionFragment;
    "MAXIMUM_LIVENESS()": FunctionFragment;
    "MINIMUM_LIVENESS()": FunctionFragment;
    "ancillaryBytesLimit()": FunctionFragment;
    "bondToken()": FunctionFragment;
    "createReward(uint256,uint256,uint256,uint256,bytes32,address,bytes)": FunctionFragment;
    "executeDistribution(bytes32)": FunctionFragment;
    "finder()": FunctionFragment;
    "getCurrentTime()": FunctionFragment;
    "increaseReward(uint256,uint256)": FunctionFragment;
    "maximumFundingPeriod()": FunctionFragment;
    "maximumProposerBond()": FunctionFragment;
    "merkleDistributor()": FunctionFragment;
    "multicall(bytes[])": FunctionFragment;
    "optimisticOracle()": FunctionFragment;
    "proposals(bytes32)": FunctionFragment;
    "proposeDistribution(uint256,bytes32,string)": FunctionFragment;
    "rewards(uint256)": FunctionFragment;
    "setCurrentTime(uint256)": FunctionFragment;
    "syncUmaEcosystemParams()": FunctionFragment;
    "timerAddress()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ANCILLARY_BYTES_RESERVE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAXIMUM_LIVENESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINIMUM_LIVENESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ancillaryBytesLimit",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "bondToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createReward",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      string,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeDistribution",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "finder", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCurrentTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseReward",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "maximumFundingPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maximumProposerBond",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "merkleDistributor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "optimisticOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeDistribution",
    values: [BigNumberish, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCurrentTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "syncUmaEcosystemParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timerAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "ANCILLARY_BYTES_RESERVE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAXIMUM_LIVENESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINIMUM_LIVENESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ancillaryBytesLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bondToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "finder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maximumFundingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maximumProposerBond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "merkleDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "optimisticOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposeDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCurrentTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "syncUmaEcosystemParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timerAddress",
    data: BytesLike
  ): Result;

  events: {
    "ProposalCreated(address,address,uint256,uint256,uint256,bytes32,bytes32,string)": EventFragment;
    "ProposalRejected(uint256,bytes32)": EventFragment;
    "RewardCreated(address,address,uint256,uint256,uint256,uint256,uint256,bytes32,bytes)": EventFragment;
    "RewardDistributed(address,address,uint256,uint256,bytes32,bytes32,string)": EventFragment;
    "RewardIncreased(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ProposalCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalRejected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardDistributed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardIncreased"): EventFragment;
}

export type ProposalCreatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, string, string, string] & {
    sponsor: string;
    rewardToken: string;
    rewardIndex: BigNumber;
    proposalTimestamp: BigNumber;
    maximumRewardAmount: BigNumber;
    proposalId: string;
    merkleRoot: string;
    ipfsHash: string;
  }
>;

export type ProposalRejectedEvent = TypedEvent<
  [BigNumber, string] & { rewardIndex: BigNumber; proposalId: string }
>;

export type RewardCreatedEvent = TypedEvent<
  [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string
  ] & {
    sponsor: string;
    rewardToken: string;
    rewardIndex: BigNumber;
    maximumRewardAmount: BigNumber;
    earliestProposalTimestamp: BigNumber;
    optimisticOracleProposerBond: BigNumber;
    optimisticOracleLivenessTime: BigNumber;
    priceIdentifier: string;
    customAncillaryData: string;
  }
>;

export type RewardDistributedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, string, string, string] & {
    sponsor: string;
    rewardToken: string;
    rewardIndex: BigNumber;
    maximumRewardAmount: BigNumber;
    proposalId: string;
    merkleRoot: string;
    ipfsHash: string;
  }
>;

export type RewardIncreasedEvent = TypedEvent<
  [BigNumber, BigNumber] & {
    rewardIndex: BigNumber;
    newMaximumRewardAmount: BigNumber;
  }
>;

export class OptimisticDistributor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: OptimisticDistributorInterface;

  functions: {
    ANCILLARY_BYTES_RESERVE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAXIMUM_LIVENESS(overrides?: CallOverrides): Promise<[BigNumber]>;

    MINIMUM_LIVENESS(overrides?: CallOverrides): Promise<[BigNumber]>;

    ancillaryBytesLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    bondToken(overrides?: CallOverrides): Promise<[string]>;

    createReward(
      maximumRewardAmount: BigNumberish,
      earliestProposalTimestamp: BigNumberish,
      optimisticOracleProposerBond: BigNumberish,
      optimisticOracleLivenessTime: BigNumberish,
      priceIdentifier: BytesLike,
      rewardToken: string,
      customAncillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeDistribution(
      proposalId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    finder(overrides?: CallOverrides): Promise<[string]>;

    getCurrentTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    increaseReward(
      rewardIndex: BigNumberish,
      additionalRewardAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    maximumFundingPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    maximumProposerBond(overrides?: CallOverrides): Promise<[BigNumber]>;

    merkleDistributor(overrides?: CallOverrides): Promise<[string]>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    optimisticOracle(overrides?: CallOverrides): Promise<[string]>;

    proposals(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string] & {
        rewardIndex: BigNumber;
        timestamp: BigNumber;
        merkleRoot: string;
        ipfsHash: string;
      }
    >;

    proposeDistribution(
      rewardIndex: BigNumberish,
      merkleRoot: BytesLike,
      ipfsHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewards(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string
      ] & {
        distributionExecuted: boolean;
        sponsor: string;
        rewardToken: string;
        maximumRewardAmount: BigNumber;
        earliestProposalTimestamp: BigNumber;
        optimisticOracleProposerBond: BigNumber;
        optimisticOracleLivenessTime: BigNumber;
        previousProposalTimestamp: BigNumber;
        priceIdentifier: string;
        customAncillaryData: string;
      }
    >;

    setCurrentTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    syncUmaEcosystemParams(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    timerAddress(overrides?: CallOverrides): Promise<[string]>;
  };

  ANCILLARY_BYTES_RESERVE(overrides?: CallOverrides): Promise<BigNumber>;

  MAXIMUM_LIVENESS(overrides?: CallOverrides): Promise<BigNumber>;

  MINIMUM_LIVENESS(overrides?: CallOverrides): Promise<BigNumber>;

  ancillaryBytesLimit(overrides?: CallOverrides): Promise<BigNumber>;

  bondToken(overrides?: CallOverrides): Promise<string>;

  createReward(
    maximumRewardAmount: BigNumberish,
    earliestProposalTimestamp: BigNumberish,
    optimisticOracleProposerBond: BigNumberish,
    optimisticOracleLivenessTime: BigNumberish,
    priceIdentifier: BytesLike,
    rewardToken: string,
    customAncillaryData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeDistribution(
    proposalId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  finder(overrides?: CallOverrides): Promise<string>;

  getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

  increaseReward(
    rewardIndex: BigNumberish,
    additionalRewardAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  maximumFundingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  maximumProposerBond(overrides?: CallOverrides): Promise<BigNumber>;

  merkleDistributor(overrides?: CallOverrides): Promise<string>;

  multicall(
    data: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  optimisticOracle(overrides?: CallOverrides): Promise<string>;

  proposals(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, string] & {
      rewardIndex: BigNumber;
      timestamp: BigNumber;
      merkleRoot: string;
      ipfsHash: string;
    }
  >;

  proposeDistribution(
    rewardIndex: BigNumberish,
    merkleRoot: BytesLike,
    ipfsHash: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewards(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string
    ] & {
      distributionExecuted: boolean;
      sponsor: string;
      rewardToken: string;
      maximumRewardAmount: BigNumber;
      earliestProposalTimestamp: BigNumber;
      optimisticOracleProposerBond: BigNumber;
      optimisticOracleLivenessTime: BigNumber;
      previousProposalTimestamp: BigNumber;
      priceIdentifier: string;
      customAncillaryData: string;
    }
  >;

  setCurrentTime(
    time: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  syncUmaEcosystemParams(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  timerAddress(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    ANCILLARY_BYTES_RESERVE(overrides?: CallOverrides): Promise<BigNumber>;

    MAXIMUM_LIVENESS(overrides?: CallOverrides): Promise<BigNumber>;

    MINIMUM_LIVENESS(overrides?: CallOverrides): Promise<BigNumber>;

    ancillaryBytesLimit(overrides?: CallOverrides): Promise<BigNumber>;

    bondToken(overrides?: CallOverrides): Promise<string>;

    createReward(
      maximumRewardAmount: BigNumberish,
      earliestProposalTimestamp: BigNumberish,
      optimisticOracleProposerBond: BigNumberish,
      optimisticOracleLivenessTime: BigNumberish,
      priceIdentifier: BytesLike,
      rewardToken: string,
      customAncillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    executeDistribution(
      proposalId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    finder(overrides?: CallOverrides): Promise<string>;

    getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

    increaseReward(
      rewardIndex: BigNumberish,
      additionalRewardAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    maximumFundingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    maximumProposerBond(overrides?: CallOverrides): Promise<BigNumber>;

    merkleDistributor(overrides?: CallOverrides): Promise<string>;

    multicall(data: BytesLike[], overrides?: CallOverrides): Promise<string[]>;

    optimisticOracle(overrides?: CallOverrides): Promise<string>;

    proposals(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string] & {
        rewardIndex: BigNumber;
        timestamp: BigNumber;
        merkleRoot: string;
        ipfsHash: string;
      }
    >;

    proposeDistribution(
      rewardIndex: BigNumberish,
      merkleRoot: BytesLike,
      ipfsHash: string,
      overrides?: CallOverrides
    ): Promise<void>;

    rewards(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string
      ] & {
        distributionExecuted: boolean;
        sponsor: string;
        rewardToken: string;
        maximumRewardAmount: BigNumber;
        earliestProposalTimestamp: BigNumber;
        optimisticOracleProposerBond: BigNumber;
        optimisticOracleLivenessTime: BigNumber;
        previousProposalTimestamp: BigNumber;
        priceIdentifier: string;
        customAncillaryData: string;
      }
    >;

    setCurrentTime(
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    syncUmaEcosystemParams(overrides?: CallOverrides): Promise<void>;

    timerAddress(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "ProposalCreated(address,address,uint256,uint256,uint256,bytes32,bytes32,string)"(
      sponsor?: string | null,
      rewardToken?: null,
      rewardIndex?: BigNumberish | null,
      proposalTimestamp?: null,
      maximumRewardAmount?: null,
      proposalId?: BytesLike | null,
      merkleRoot?: null,
      ipfsHash?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, string, string, string],
      {
        sponsor: string;
        rewardToken: string;
        rewardIndex: BigNumber;
        proposalTimestamp: BigNumber;
        maximumRewardAmount: BigNumber;
        proposalId: string;
        merkleRoot: string;
        ipfsHash: string;
      }
    >;

    ProposalCreated(
      sponsor?: string | null,
      rewardToken?: null,
      rewardIndex?: BigNumberish | null,
      proposalTimestamp?: null,
      maximumRewardAmount?: null,
      proposalId?: BytesLike | null,
      merkleRoot?: null,
      ipfsHash?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, string, string, string],
      {
        sponsor: string;
        rewardToken: string;
        rewardIndex: BigNumber;
        proposalTimestamp: BigNumber;
        maximumRewardAmount: BigNumber;
        proposalId: string;
        merkleRoot: string;
        ipfsHash: string;
      }
    >;

    "ProposalRejected(uint256,bytes32)"(
      rewardIndex?: BigNumberish | null,
      proposalId?: BytesLike | null
    ): TypedEventFilter<
      [BigNumber, string],
      { rewardIndex: BigNumber; proposalId: string }
    >;

    ProposalRejected(
      rewardIndex?: BigNumberish | null,
      proposalId?: BytesLike | null
    ): TypedEventFilter<
      [BigNumber, string],
      { rewardIndex: BigNumber; proposalId: string }
    >;

    "RewardCreated(address,address,uint256,uint256,uint256,uint256,uint256,bytes32,bytes)"(
      sponsor?: string | null,
      rewardToken?: null,
      rewardIndex?: BigNumberish | null,
      maximumRewardAmount?: null,
      earliestProposalTimestamp?: null,
      optimisticOracleProposerBond?: null,
      optimisticOracleLivenessTime?: null,
      priceIdentifier?: BytesLike | null,
      customAncillaryData?: null
    ): TypedEventFilter<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string
      ],
      {
        sponsor: string;
        rewardToken: string;
        rewardIndex: BigNumber;
        maximumRewardAmount: BigNumber;
        earliestProposalTimestamp: BigNumber;
        optimisticOracleProposerBond: BigNumber;
        optimisticOracleLivenessTime: BigNumber;
        priceIdentifier: string;
        customAncillaryData: string;
      }
    >;

    RewardCreated(
      sponsor?: string | null,
      rewardToken?: null,
      rewardIndex?: BigNumberish | null,
      maximumRewardAmount?: null,
      earliestProposalTimestamp?: null,
      optimisticOracleProposerBond?: null,
      optimisticOracleLivenessTime?: null,
      priceIdentifier?: BytesLike | null,
      customAncillaryData?: null
    ): TypedEventFilter<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string
      ],
      {
        sponsor: string;
        rewardToken: string;
        rewardIndex: BigNumber;
        maximumRewardAmount: BigNumber;
        earliestProposalTimestamp: BigNumber;
        optimisticOracleProposerBond: BigNumber;
        optimisticOracleLivenessTime: BigNumber;
        priceIdentifier: string;
        customAncillaryData: string;
      }
    >;

    "RewardDistributed(address,address,uint256,uint256,bytes32,bytes32,string)"(
      sponsor?: string | null,
      rewardToken?: null,
      rewardIndex?: BigNumberish | null,
      maximumRewardAmount?: null,
      proposalId?: BytesLike | null,
      merkleRoot?: null,
      ipfsHash?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, string, string, string],
      {
        sponsor: string;
        rewardToken: string;
        rewardIndex: BigNumber;
        maximumRewardAmount: BigNumber;
        proposalId: string;
        merkleRoot: string;
        ipfsHash: string;
      }
    >;

    RewardDistributed(
      sponsor?: string | null,
      rewardToken?: null,
      rewardIndex?: BigNumberish | null,
      maximumRewardAmount?: null,
      proposalId?: BytesLike | null,
      merkleRoot?: null,
      ipfsHash?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, string, string, string],
      {
        sponsor: string;
        rewardToken: string;
        rewardIndex: BigNumber;
        maximumRewardAmount: BigNumber;
        proposalId: string;
        merkleRoot: string;
        ipfsHash: string;
      }
    >;

    "RewardIncreased(uint256,uint256)"(
      rewardIndex?: BigNumberish | null,
      newMaximumRewardAmount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { rewardIndex: BigNumber; newMaximumRewardAmount: BigNumber }
    >;

    RewardIncreased(
      rewardIndex?: BigNumberish | null,
      newMaximumRewardAmount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { rewardIndex: BigNumber; newMaximumRewardAmount: BigNumber }
    >;
  };

  estimateGas: {
    ANCILLARY_BYTES_RESERVE(overrides?: CallOverrides): Promise<BigNumber>;

    MAXIMUM_LIVENESS(overrides?: CallOverrides): Promise<BigNumber>;

    MINIMUM_LIVENESS(overrides?: CallOverrides): Promise<BigNumber>;

    ancillaryBytesLimit(overrides?: CallOverrides): Promise<BigNumber>;

    bondToken(overrides?: CallOverrides): Promise<BigNumber>;

    createReward(
      maximumRewardAmount: BigNumberish,
      earliestProposalTimestamp: BigNumberish,
      optimisticOracleProposerBond: BigNumberish,
      optimisticOracleLivenessTime: BigNumberish,
      priceIdentifier: BytesLike,
      rewardToken: string,
      customAncillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeDistribution(
      proposalId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    finder(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

    increaseReward(
      rewardIndex: BigNumberish,
      additionalRewardAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    maximumFundingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    maximumProposerBond(overrides?: CallOverrides): Promise<BigNumber>;

    merkleDistributor(overrides?: CallOverrides): Promise<BigNumber>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    optimisticOracle(overrides?: CallOverrides): Promise<BigNumber>;

    proposals(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    proposeDistribution(
      rewardIndex: BigNumberish,
      merkleRoot: BytesLike,
      ipfsHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewards(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    setCurrentTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    syncUmaEcosystemParams(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    timerAddress(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ANCILLARY_BYTES_RESERVE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAXIMUM_LIVENESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MINIMUM_LIVENESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ancillaryBytesLimit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bondToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createReward(
      maximumRewardAmount: BigNumberish,
      earliestProposalTimestamp: BigNumberish,
      optimisticOracleProposerBond: BigNumberish,
      optimisticOracleLivenessTime: BigNumberish,
      priceIdentifier: BytesLike,
      rewardToken: string,
      customAncillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeDistribution(
      proposalId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    finder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseReward(
      rewardIndex: BigNumberish,
      additionalRewardAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    maximumFundingPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maximumProposerBond(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    merkleDistributor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    optimisticOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposals(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposeDistribution(
      rewardIndex: BigNumberish,
      merkleRoot: BytesLike,
      ipfsHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewards(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setCurrentTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    syncUmaEcosystemParams(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    timerAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
