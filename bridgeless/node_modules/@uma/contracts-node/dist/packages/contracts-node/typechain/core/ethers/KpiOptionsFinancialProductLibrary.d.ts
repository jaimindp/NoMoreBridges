/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface KpiOptionsFinancialProductLibraryInterface
  extends ethers.utils.Interface {
  functions: {
    "transformCollateralRequirement((uint256),(uint256))": FunctionFragment;
    "transformPrice((uint256),uint256)": FunctionFragment;
    "transformPriceIdentifier(bytes32,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "transformCollateralRequirement",
    values: [{ rawValue: BigNumberish }, { rawValue: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "transformPrice",
    values: [{ rawValue: BigNumberish }, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transformPriceIdentifier",
    values: [BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "transformCollateralRequirement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transformPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transformPriceIdentifier",
    data: BytesLike
  ): Result;

  events: {};
}

export class KpiOptionsFinancialProductLibrary extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: KpiOptionsFinancialProductLibraryInterface;

  functions: {
    transformCollateralRequirement(
      arg0: { rawValue: BigNumberish },
      arg1: { rawValue: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { rawValue: BigNumber }]>;

    transformPrice(
      oraclePrice: { rawValue: BigNumberish },
      requestTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { rawValue: BigNumber }]>;

    transformPriceIdentifier(
      priceIdentifier: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  transformCollateralRequirement(
    arg0: { rawValue: BigNumberish },
    arg1: { rawValue: BigNumberish },
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { rawValue: BigNumber }>;

  transformPrice(
    oraclePrice: { rawValue: BigNumberish },
    requestTime: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { rawValue: BigNumber }>;

  transformPriceIdentifier(
    priceIdentifier: BytesLike,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    transformCollateralRequirement(
      arg0: { rawValue: BigNumberish },
      arg1: { rawValue: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    transformPrice(
      oraclePrice: { rawValue: BigNumberish },
      requestTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    transformPriceIdentifier(
      priceIdentifier: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    transformCollateralRequirement(
      arg0: { rawValue: BigNumberish },
      arg1: { rawValue: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transformPrice(
      oraclePrice: { rawValue: BigNumberish },
      requestTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transformPriceIdentifier(
      priceIdentifier: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    transformCollateralRequirement(
      arg0: { rawValue: BigNumberish },
      arg1: { rawValue: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transformPrice(
      oraclePrice: { rawValue: BigNumberish },
      requestTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transformPriceIdentifier(
      priceIdentifier: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
