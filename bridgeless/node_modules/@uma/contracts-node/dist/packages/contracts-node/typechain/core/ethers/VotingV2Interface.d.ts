/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface VotingV2InterfaceInterface extends ethers.utils.Interface {
  functions: {
    "commitAndEmitEncryptedVote(bytes32,uint256,bytes,bytes32,bytes)": FunctionFragment;
    "commitVote(bytes32,uint256,bytes,bytes32)": FunctionFragment;
    "getCurrentRoundId()": FunctionFragment;
    "getPendingRequests()": FunctionFragment;
    "getVotePhase()": FunctionFragment;
    "revealVote(bytes32,uint256,int256,bytes,int256)": FunctionFragment;
    "setGatAndSpat(uint128,uint64)": FunctionFragment;
    "setMaxRequestPerRound(uint32)": FunctionFragment;
    "setMaxRolls(uint32)": FunctionFragment;
    "setMigrated(address)": FunctionFragment;
    "setSlashingLibrary(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "commitAndEmitEncryptedVote",
    values: [BytesLike, BigNumberish, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "commitVote",
    values: [BytesLike, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentRoundId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingRequests",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVotePhase",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revealVote",
    values: [BytesLike, BigNumberish, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setGatAndSpat",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxRequestPerRound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxRolls",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setMigrated", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setSlashingLibrary",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "commitAndEmitEncryptedVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "commitVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentRoundId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVotePhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revealVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setGatAndSpat",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxRequestPerRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxRolls",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMigrated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSlashingLibrary",
    data: BytesLike
  ): Result;

  events: {};
}

export class VotingV2Interface extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: VotingV2InterfaceInterface;

  functions: {
    commitAndEmitEncryptedVote(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      hash: BytesLike,
      encryptedVote: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    commitVote(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      hash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCurrentRoundId(overrides?: CallOverrides): Promise<[number]>;

    getPendingRequests(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getVotePhase(overrides?: CallOverrides): Promise<[number]>;

    revealVote(
      identifier: BytesLike,
      time: BigNumberish,
      price: BigNumberish,
      ancillaryData: BytesLike,
      salt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGatAndSpat(
      newGat: BigNumberish,
      newSpat: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxRequestPerRound(
      newMaxRequestsPerRound: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxRolls(
      newMaxRolls: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMigrated(
      newVotingAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSlashingLibrary(
      _newSlashingLibrary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  commitAndEmitEncryptedVote(
    identifier: BytesLike,
    time: BigNumberish,
    ancillaryData: BytesLike,
    hash: BytesLike,
    encryptedVote: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  commitVote(
    identifier: BytesLike,
    time: BigNumberish,
    ancillaryData: BytesLike,
    hash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCurrentRoundId(overrides?: CallOverrides): Promise<number>;

  getPendingRequests(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getVotePhase(overrides?: CallOverrides): Promise<number>;

  revealVote(
    identifier: BytesLike,
    time: BigNumberish,
    price: BigNumberish,
    ancillaryData: BytesLike,
    salt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGatAndSpat(
    newGat: BigNumberish,
    newSpat: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxRequestPerRound(
    newMaxRequestsPerRound: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxRolls(
    newMaxRolls: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMigrated(
    newVotingAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSlashingLibrary(
    _newSlashingLibrary: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    commitAndEmitEncryptedVote(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      hash: BytesLike,
      encryptedVote: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    commitVote(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getCurrentRoundId(overrides?: CallOverrides): Promise<number>;

    getPendingRequests(
      overrides?: CallOverrides
    ): Promise<
      ([number, boolean, BigNumber, number, string, string] & {
        lastVotingRound: number;
        isGovernance: boolean;
        time: BigNumber;
        rollCount: number;
        identifier: string;
        ancillaryData: string;
      })[]
    >;

    getVotePhase(overrides?: CallOverrides): Promise<number>;

    revealVote(
      identifier: BytesLike,
      time: BigNumberish,
      price: BigNumberish,
      ancillaryData: BytesLike,
      salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setGatAndSpat(
      newGat: BigNumberish,
      newSpat: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxRequestPerRound(
      newMaxRequestsPerRound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxRolls(
      newMaxRolls: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMigrated(
      newVotingAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setSlashingLibrary(
      _newSlashingLibrary: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    commitAndEmitEncryptedVote(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      hash: BytesLike,
      encryptedVote: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    commitVote(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      hash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCurrentRoundId(overrides?: CallOverrides): Promise<BigNumber>;

    getPendingRequests(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getVotePhase(overrides?: CallOverrides): Promise<BigNumber>;

    revealVote(
      identifier: BytesLike,
      time: BigNumberish,
      price: BigNumberish,
      ancillaryData: BytesLike,
      salt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGatAndSpat(
      newGat: BigNumberish,
      newSpat: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxRequestPerRound(
      newMaxRequestsPerRound: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxRolls(
      newMaxRolls: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMigrated(
      newVotingAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSlashingLibrary(
      _newSlashingLibrary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    commitAndEmitEncryptedVote(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      hash: BytesLike,
      encryptedVote: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    commitVote(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      hash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCurrentRoundId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPendingRequests(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getVotePhase(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    revealVote(
      identifier: BytesLike,
      time: BigNumberish,
      price: BigNumberish,
      ancillaryData: BytesLike,
      salt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGatAndSpat(
      newGat: BigNumberish,
      newSpat: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxRequestPerRound(
      newMaxRequestsPerRound: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxRolls(
      newMaxRolls: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMigrated(
      newVotingAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSlashingLibrary(
      _newSlashingLibrary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
