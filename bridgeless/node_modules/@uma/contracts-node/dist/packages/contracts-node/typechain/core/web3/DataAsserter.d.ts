/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type DataAsserted = ContractEventLog<{
  dataId: string;
  data: string;
  asserter: string;
  assertionId: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type DataAssertionResolved = ContractEventLog<{
  dataId: string;
  data: string;
  asserter: string;
  assertionId: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;

export interface DataAsserter extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): DataAsserter;
  clone(): DataAsserter;
  methods: {
    assertDataFor(
      dataId: string | number[],
      data: string | number[],
      asserter: string
    ): NonPayableTransactionObject<string>;

    assertionDisputedCallback(
      assertionId: string | number[]
    ): NonPayableTransactionObject<void>;

    assertionLiveness(): NonPayableTransactionObject<string>;

    assertionResolvedCallback(
      assertionId: string | number[],
      assertedTruthfully: boolean
    ): NonPayableTransactionObject<void>;

    assertionsData(arg0: string | number[]): NonPayableTransactionObject<{
      dataId: string;
      data: string;
      asserter: string;
      resolved: boolean;
      0: string;
      1: string;
      2: string;
      3: boolean;
    }>;

    defaultCurrency(): NonPayableTransactionObject<string>;

    defaultIdentifier(): NonPayableTransactionObject<string>;

    getData(assertionId: string | number[]): NonPayableTransactionObject<{
      0: boolean;
      1: string;
    }>;

    oo(): NonPayableTransactionObject<string>;
  };
  events: {
    DataAsserted(cb?: Callback<DataAsserted>): EventEmitter;
    DataAsserted(
      options?: EventOptions,
      cb?: Callback<DataAsserted>
    ): EventEmitter;

    DataAssertionResolved(cb?: Callback<DataAssertionResolved>): EventEmitter;
    DataAssertionResolved(
      options?: EventOptions,
      cb?: Callback<DataAssertionResolved>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "DataAsserted", cb: Callback<DataAsserted>): void;
  once(
    event: "DataAsserted",
    options: EventOptions,
    cb: Callback<DataAsserted>
  ): void;

  once(
    event: "DataAssertionResolved",
    cb: Callback<DataAssertionResolved>
  ): void;
  once(
    event: "DataAssertionResolved",
    options: EventOptions,
    cb: Callback<DataAssertionResolved>
  ): void;
}
