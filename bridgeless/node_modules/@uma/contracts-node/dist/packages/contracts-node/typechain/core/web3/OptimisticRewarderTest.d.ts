/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Approval = ContractEventLog<{
  owner: string;
  approved: string;
  tokenId: string;
  0: string;
  1: string;
  2: string;
}>;
export type ApprovalForAll = ContractEventLog<{
  owner: string;
  operator: string;
  approved: boolean;
  0: string;
  1: string;
  2: boolean;
}>;
export type Canceled = ContractEventLog<{
  tokenId: string;
  redemptionId: string;
  expiryTime: string;
  0: string;
  1: string;
  2: string;
}>;
export type Deposited = ContractEventLog<{
  depositor: string;
  token: string;
  amount: string;
  0: string;
  1: string;
  2: string;
}>;
export type Disputed = ContractEventLog<{
  tokenId: string;
  redemptionId: string;
  expiryTime: string;
  0: string;
  1: string;
  2: string;
}>;
export type Redeemed = ContractEventLog<{
  tokenId: string;
  redemptionId: string;
  expiryTime: string;
  0: string;
  1: string;
  2: string;
}>;
export type Requested = ContractEventLog<{
  tokenId: string;
  redemptionId: string;
  cumulativeRedemptions: [string, string][];
  expiryTime: string;
  0: string;
  1: string;
  2: [string, string][];
  3: string;
}>;
export type Transfer = ContractEventLog<{
  from: string;
  to: string;
  tokenId: string;
  0: string;
  1: string;
  2: string;
}>;
export type UpdateToken = ContractEventLog<{
  tokenId: string;
  caller: string;
  data: string;
  0: string;
  1: string;
  2: string;
}>;

export interface OptimisticRewarderTest extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): OptimisticRewarderTest;
  clone(): OptimisticRewarderTest;
  methods: {
    approve(
      to: string,
      tokenId: number | string | BN
    ): NonPayableTransactionObject<void>;

    balanceOf(owner: string): NonPayableTransactionObject<string>;

    baseUri(): NonPayableTransactionObject<string>;

    bond(): NonPayableTransactionObject<string>;

    bondToken(): NonPayableTransactionObject<string>;

    customAncillaryData(): NonPayableTransactionObject<string>;

    depositRewards(
      token: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    dispute(
      tokenId: number | string | BN,
      cumulativeRedemptions: [number | string | BN, string][]
    ): NonPayableTransactionObject<void>;

    finalFee(): NonPayableTransactionObject<string>;

    finder(): NonPayableTransactionObject<string>;

    getApproved(
      tokenId: number | string | BN
    ): NonPayableTransactionObject<string>;

    getCurrentTime(): NonPayableTransactionObject<string>;

    getRedemptionId(
      tokenId: number | string | BN,
      cumulativeRedemptions: [number | string | BN, string][]
    ): NonPayableTransactionObject<string>;

    identifier(): NonPayableTransactionObject<string>;

    isApprovedForAll(
      owner: string,
      operator: string
    ): NonPayableTransactionObject<boolean>;

    liveness(): NonPayableTransactionObject<string>;

    mint(
      receiver: string,
      data: string | number[]
    ): NonPayableTransactionObject<string>;

    mintNextToken(recipient: string): NonPayableTransactionObject<string>;

    multicall(
      data: (string | number[])[]
    ): NonPayableTransactionObject<string[]>;

    name(): NonPayableTransactionObject<string>;

    nextTokenId(): NonPayableTransactionObject<string>;

    optimisticOracle(): NonPayableTransactionObject<string>;

    ownerOf(tokenId: number | string | BN): NonPayableTransactionObject<string>;

    redeem(
      tokenId: number | string | BN,
      cumulativeRedemptions: [number | string | BN, string][]
    ): NonPayableTransactionObject<void>;

    redeemedAmounts(
      arg0: number | string | BN,
      arg1: string
    ): NonPayableTransactionObject<string>;

    redemptions(arg0: string | number[]): NonPayableTransactionObject<{
      finalFee: string;
      expiryTime: string;
      0: string;
      1: string;
    }>;

    requestRedemption(
      tokenId: number | string | BN,
      cumulativeRedemptions: [number | string | BN, string][]
    ): NonPayableTransactionObject<string>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: number | string | BN
    ): NonPayableTransactionObject<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: number | string | BN,
      data: string | number[]
    ): NonPayableTransactionObject<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean
    ): NonPayableTransactionObject<void>;

    setCurrentTime(
      time: number | string | BN
    ): NonPayableTransactionObject<void>;

    store(): NonPayableTransactionObject<string>;

    supportsInterface(
      interfaceId: string | number[]
    ): NonPayableTransactionObject<boolean>;

    symbol(): NonPayableTransactionObject<string>;

    sync(): NonPayableTransactionObject<void>;

    timerAddress(): NonPayableTransactionObject<string>;

    tokenURI(
      tokenId: number | string | BN
    ): NonPayableTransactionObject<string>;

    transferFrom(
      from: string,
      to: string,
      tokenId: number | string | BN
    ): NonPayableTransactionObject<void>;

    updateToken(
      tokenId: number | string | BN,
      data: string | number[]
    ): NonPayableTransactionObject<void>;
  };
  events: {
    Approval(cb?: Callback<Approval>): EventEmitter;
    Approval(options?: EventOptions, cb?: Callback<Approval>): EventEmitter;

    ApprovalForAll(cb?: Callback<ApprovalForAll>): EventEmitter;
    ApprovalForAll(
      options?: EventOptions,
      cb?: Callback<ApprovalForAll>
    ): EventEmitter;

    Canceled(cb?: Callback<Canceled>): EventEmitter;
    Canceled(options?: EventOptions, cb?: Callback<Canceled>): EventEmitter;

    Deposited(cb?: Callback<Deposited>): EventEmitter;
    Deposited(options?: EventOptions, cb?: Callback<Deposited>): EventEmitter;

    Disputed(cb?: Callback<Disputed>): EventEmitter;
    Disputed(options?: EventOptions, cb?: Callback<Disputed>): EventEmitter;

    Redeemed(cb?: Callback<Redeemed>): EventEmitter;
    Redeemed(options?: EventOptions, cb?: Callback<Redeemed>): EventEmitter;

    Requested(cb?: Callback<Requested>): EventEmitter;
    Requested(options?: EventOptions, cb?: Callback<Requested>): EventEmitter;

    Transfer(cb?: Callback<Transfer>): EventEmitter;
    Transfer(options?: EventOptions, cb?: Callback<Transfer>): EventEmitter;

    UpdateToken(cb?: Callback<UpdateToken>): EventEmitter;
    UpdateToken(
      options?: EventOptions,
      cb?: Callback<UpdateToken>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Approval", cb: Callback<Approval>): void;
  once(event: "Approval", options: EventOptions, cb: Callback<Approval>): void;

  once(event: "ApprovalForAll", cb: Callback<ApprovalForAll>): void;
  once(
    event: "ApprovalForAll",
    options: EventOptions,
    cb: Callback<ApprovalForAll>
  ): void;

  once(event: "Canceled", cb: Callback<Canceled>): void;
  once(event: "Canceled", options: EventOptions, cb: Callback<Canceled>): void;

  once(event: "Deposited", cb: Callback<Deposited>): void;
  once(
    event: "Deposited",
    options: EventOptions,
    cb: Callback<Deposited>
  ): void;

  once(event: "Disputed", cb: Callback<Disputed>): void;
  once(event: "Disputed", options: EventOptions, cb: Callback<Disputed>): void;

  once(event: "Redeemed", cb: Callback<Redeemed>): void;
  once(event: "Redeemed", options: EventOptions, cb: Callback<Redeemed>): void;

  once(event: "Requested", cb: Callback<Requested>): void;
  once(
    event: "Requested",
    options: EventOptions,
    cb: Callback<Requested>
  ): void;

  once(event: "Transfer", cb: Callback<Transfer>): void;
  once(event: "Transfer", options: EventOptions, cb: Callback<Transfer>): void;

  once(event: "UpdateToken", cb: Callback<UpdateToken>): void;
  once(
    event: "UpdateToken",
    options: EventOptions,
    cb: Callback<UpdateToken>
  ): void;
}
