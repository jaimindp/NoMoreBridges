/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type ArbitrationResolutionSet = ContractEventLog<{
  identifier: string;
  time: string;
  ancillaryData: string;
  resolution: boolean;
  0: string;
  1: string;
  2: string;
  3: boolean;
}>;
export type AsserterWhitelistSet = ContractEventLog<{
  asserter: string;
  whitelisted: boolean;
  0: string;
  1: boolean;
}>;
export type AssertingCallerWhitelistSet = ContractEventLog<{
  assertingCaller: string;
  whitelisted: boolean;
  0: string;
  1: boolean;
}>;
export type DisputeCallerWhitelistSet = ContractEventLog<{
  disputeCaller: string;
  whitelisted: boolean;
  0: string;
  1: boolean;
}>;
export type EscalationManagerConfigured = ContractEventLog<{
  blockByAssertingCaller: boolean;
  blockByAsserter: boolean;
  validateDisputers: boolean;
  arbitrateViaEscalationManager: boolean;
  discardOracle: boolean;
  0: boolean;
  1: boolean;
  2: boolean;
  3: boolean;
  4: boolean;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type PriceRequestAdded = ContractEventLog<{
  identifier: string;
  time: string;
  ancillaryData: string;
  0: string;
  1: string;
  2: string;
}>;

export interface FullPolicyEscalationManager extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): FullPolicyEscalationManager;
  clone(): FullPolicyEscalationManager;
  methods: {
    arbitrateViaEscalationManager(): NonPayableTransactionObject<boolean>;

    arbitrationResolutions(
      arg0: string | number[]
    ): NonPayableTransactionObject<{
      valueSet: boolean;
      resolution: boolean;
      0: boolean;
      1: boolean;
    }>;

    assertionDisputedCallback(
      assertionId: string | number[]
    ): NonPayableTransactionObject<void>;

    assertionResolvedCallback(
      assertionId: string | number[],
      assertedTruthfully: boolean
    ): NonPayableTransactionObject<void>;

    blockByAsserter(): NonPayableTransactionObject<boolean>;

    blockByAssertingCaller(): NonPayableTransactionObject<boolean>;

    configureEscalationManager(
      _blockByAssertingCaller: boolean,
      _blockByAsserter: boolean,
      _validateDisputers: boolean,
      _arbitrateViaEscalationManager: boolean,
      _discardOracle: boolean
    ): NonPayableTransactionObject<void>;

    discardOracle(): NonPayableTransactionObject<boolean>;

    getAssertionPolicy(
      assertionId: string | number[]
    ): NonPayableTransactionObject<[boolean, boolean, boolean, boolean]>;

    getPrice(
      identifier: string | number[],
      time: number | string | BN,
      ancillaryData: string | number[]
    ): NonPayableTransactionObject<string>;

    getRequestId(
      identifier: string | number[],
      time: number | string | BN,
      ancillaryData: string | number[]
    ): NonPayableTransactionObject<string>;

    isDisputeAllowed(
      assertionId: string | number[],
      disputeCaller: string
    ): NonPayableTransactionObject<boolean>;

    numericalTrue(): NonPayableTransactionObject<string>;

    optimisticOracleV3(): NonPayableTransactionObject<string>;

    owner(): NonPayableTransactionObject<string>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    requestPrice(
      identifier: string | number[],
      time: number | string | BN,
      ancillaryData: string | number[]
    ): NonPayableTransactionObject<void>;

    setArbitrationResolution(
      identifier: string | number[],
      time: number | string | BN,
      ancillaryData: string | number[],
      arbitrationResolution: boolean
    ): NonPayableTransactionObject<void>;

    setDisputeCallerInWhitelist(
      disputeCaller: string,
      value: boolean
    ): NonPayableTransactionObject<void>;

    setWhitelistedAsserters(
      asserter: string,
      value: boolean
    ): NonPayableTransactionObject<void>;

    setWhitelistedAssertingCallers(
      assertingCaller: string,
      value: boolean
    ): NonPayableTransactionObject<void>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    validateDisputers(): NonPayableTransactionObject<boolean>;

    whitelistedAsserters(arg0: string): NonPayableTransactionObject<boolean>;

    whitelistedAssertingCallers(
      arg0: string
    ): NonPayableTransactionObject<boolean>;

    whitelistedDisputeCallers(
      arg0: string
    ): NonPayableTransactionObject<boolean>;
  };
  events: {
    ArbitrationResolutionSet(
      cb?: Callback<ArbitrationResolutionSet>
    ): EventEmitter;
    ArbitrationResolutionSet(
      options?: EventOptions,
      cb?: Callback<ArbitrationResolutionSet>
    ): EventEmitter;

    AsserterWhitelistSet(cb?: Callback<AsserterWhitelistSet>): EventEmitter;
    AsserterWhitelistSet(
      options?: EventOptions,
      cb?: Callback<AsserterWhitelistSet>
    ): EventEmitter;

    AssertingCallerWhitelistSet(
      cb?: Callback<AssertingCallerWhitelistSet>
    ): EventEmitter;
    AssertingCallerWhitelistSet(
      options?: EventOptions,
      cb?: Callback<AssertingCallerWhitelistSet>
    ): EventEmitter;

    DisputeCallerWhitelistSet(
      cb?: Callback<DisputeCallerWhitelistSet>
    ): EventEmitter;
    DisputeCallerWhitelistSet(
      options?: EventOptions,
      cb?: Callback<DisputeCallerWhitelistSet>
    ): EventEmitter;

    EscalationManagerConfigured(
      cb?: Callback<EscalationManagerConfigured>
    ): EventEmitter;
    EscalationManagerConfigured(
      options?: EventOptions,
      cb?: Callback<EscalationManagerConfigured>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    PriceRequestAdded(cb?: Callback<PriceRequestAdded>): EventEmitter;
    PriceRequestAdded(
      options?: EventOptions,
      cb?: Callback<PriceRequestAdded>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(
    event: "ArbitrationResolutionSet",
    cb: Callback<ArbitrationResolutionSet>
  ): void;
  once(
    event: "ArbitrationResolutionSet",
    options: EventOptions,
    cb: Callback<ArbitrationResolutionSet>
  ): void;

  once(event: "AsserterWhitelistSet", cb: Callback<AsserterWhitelistSet>): void;
  once(
    event: "AsserterWhitelistSet",
    options: EventOptions,
    cb: Callback<AsserterWhitelistSet>
  ): void;

  once(
    event: "AssertingCallerWhitelistSet",
    cb: Callback<AssertingCallerWhitelistSet>
  ): void;
  once(
    event: "AssertingCallerWhitelistSet",
    options: EventOptions,
    cb: Callback<AssertingCallerWhitelistSet>
  ): void;

  once(
    event: "DisputeCallerWhitelistSet",
    cb: Callback<DisputeCallerWhitelistSet>
  ): void;
  once(
    event: "DisputeCallerWhitelistSet",
    options: EventOptions,
    cb: Callback<DisputeCallerWhitelistSet>
  ): void;

  once(
    event: "EscalationManagerConfigured",
    cb: Callback<EscalationManagerConfigured>
  ): void;
  once(
    event: "EscalationManagerConfigured",
    options: EventOptions,
    cb: Callback<EscalationManagerConfigured>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "PriceRequestAdded", cb: Callback<PriceRequestAdded>): void;
  once(
    event: "PriceRequestAdded",
    options: EventOptions,
    cb: Callback<PriceRequestAdded>
  ): void;
}
