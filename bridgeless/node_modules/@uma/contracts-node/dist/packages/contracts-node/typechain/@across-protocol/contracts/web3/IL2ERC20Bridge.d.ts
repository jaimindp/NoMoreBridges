/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type DepositFailed = ContractEventLog<{
  _l1Token: string;
  _l2Token: string;
  _from: string;
  _to: string;
  _amount: string;
  _data: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
}>;
export type DepositFinalized = ContractEventLog<{
  _l1Token: string;
  _l2Token: string;
  _from: string;
  _to: string;
  _amount: string;
  _data: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
}>;
export type WithdrawalInitiated = ContractEventLog<{
  _l1Token: string;
  _l2Token: string;
  _from: string;
  _to: string;
  _amount: string;
  _data: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
}>;

export interface IL2ERC20Bridge extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): IL2ERC20Bridge;
  clone(): IL2ERC20Bridge;
  methods: {
    finalizeDeposit(
      _l1Token: string,
      _l2Token: string,
      _from: string,
      _to: string,
      _amount: number | string | BN,
      _data: string | number[]
    ): NonPayableTransactionObject<void>;

    l1TokenBridge(): NonPayableTransactionObject<string>;

    withdraw(
      _l2Token: string,
      _amount: number | string | BN,
      _l1Gas: number | string | BN,
      _data: string | number[]
    ): NonPayableTransactionObject<void>;

    withdrawTo(
      _l2Token: string,
      _to: string,
      _amount: number | string | BN,
      _l1Gas: number | string | BN,
      _data: string | number[]
    ): NonPayableTransactionObject<void>;
  };
  events: {
    DepositFailed(cb?: Callback<DepositFailed>): EventEmitter;
    DepositFailed(
      options?: EventOptions,
      cb?: Callback<DepositFailed>
    ): EventEmitter;

    DepositFinalized(cb?: Callback<DepositFinalized>): EventEmitter;
    DepositFinalized(
      options?: EventOptions,
      cb?: Callback<DepositFinalized>
    ): EventEmitter;

    WithdrawalInitiated(cb?: Callback<WithdrawalInitiated>): EventEmitter;
    WithdrawalInitiated(
      options?: EventOptions,
      cb?: Callback<WithdrawalInitiated>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "DepositFailed", cb: Callback<DepositFailed>): void;
  once(
    event: "DepositFailed",
    options: EventOptions,
    cb: Callback<DepositFailed>
  ): void;

  once(event: "DepositFinalized", cb: Callback<DepositFinalized>): void;
  once(
    event: "DepositFinalized",
    options: EventOptions,
    cb: Callback<DepositFinalized>
  ): void;

  once(event: "WithdrawalInitiated", cb: Callback<WithdrawalInitiated>): void;
  once(
    event: "WithdrawalInitiated",
    options: EventOptions,
    cb: Callback<WithdrawalInitiated>
  ): void;
}
