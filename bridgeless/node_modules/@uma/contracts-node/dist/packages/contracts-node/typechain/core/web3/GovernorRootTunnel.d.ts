/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type RelayedGovernanceRequest = ContractEventLog<{
  to: string;
  data: string;
  0: string;
  1: string;
}>;

export interface GovernorRootTunnel extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): GovernorRootTunnel;
  clone(): GovernorRootTunnel;
  methods: {
    SEND_MESSAGE_EVENT_SIG(): NonPayableTransactionObject<string>;

    checkpointManager(): NonPayableTransactionObject<string>;

    fxChildTunnel(): NonPayableTransactionObject<string>;

    fxRoot(): NonPayableTransactionObject<string>;

    owner(): NonPayableTransactionObject<string>;

    processedExits(
      arg0: string | number[]
    ): NonPayableTransactionObject<boolean>;

    receiveMessage(
      inputData: string | number[]
    ): NonPayableTransactionObject<void>;

    relayGovernance(
      to: string,
      data: string | number[]
    ): NonPayableTransactionObject<void>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    setFxChildTunnel(_fxChildTunnel: string): NonPayableTransactionObject<void>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;
  };
  events: {
    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    RelayedGovernanceRequest(
      cb?: Callback<RelayedGovernanceRequest>
    ): EventEmitter;
    RelayedGovernanceRequest(
      options?: EventOptions,
      cb?: Callback<RelayedGovernanceRequest>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(
    event: "RelayedGovernanceRequest",
    cb: Callback<RelayedGovernanceRequest>
  ): void;
  once(
    event: "RelayedGovernanceRequest",
    options: EventOptions,
    cb: Callback<RelayedGovernanceRequest>
  ): void;
}
