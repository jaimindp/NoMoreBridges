/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface PolygonChildMessengerMockInterface extends ethers.utils.Interface {
  functions: {
    "finder()": FunctionFragment;
    "fxChild()": FunctionFragment;
    "fxRootTunnel()": FunctionFragment;
    "getOracleHub()": FunctionFragment;
    "getOracleSpoke()": FunctionFragment;
    "processMessageFromRoot(uint256,address,bytes)": FunctionFragment;
    "sendMessageToParent(bytes)": FunctionFragment;
    "setFxRootTunnel(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "finder", values?: undefined): string;
  encodeFunctionData(functionFragment: "fxChild", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fxRootTunnel",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOracleHub",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOracleSpoke",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "processMessageFromRoot",
    values: [BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sendMessageToParent",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFxRootTunnel",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "finder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fxChild", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fxRootTunnel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOracleHub",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOracleSpoke",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processMessageFromRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendMessageToParent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFxRootTunnel",
    data: BytesLike
  ): Result;

  events: {
    "MessageReceivedFromParent(address,bytes)": EventFragment;
    "MessageSent(bytes)": EventFragment;
    "MessageSentToParent(bytes,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MessageReceivedFromParent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MessageSent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MessageSentToParent"): EventFragment;
}

export type MessageReceivedFromParentEvent = TypedEvent<
  [string, string] & { targetSpoke: string; dataToSendToTarget: string }
>;

export type MessageSentEvent = TypedEvent<[string] & { message: string }>;

export type MessageSentToParentEvent = TypedEvent<
  [string, string, string] & {
    data: string;
    targetHub: string;
    oracleSpoke: string;
  }
>;

export class PolygonChildMessengerMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PolygonChildMessengerMockInterface;

  functions: {
    finder(overrides?: CallOverrides): Promise<[string]>;

    fxChild(overrides?: CallOverrides): Promise<[string]>;

    fxRootTunnel(overrides?: CallOverrides): Promise<[string]>;

    getOracleHub(overrides?: CallOverrides): Promise<[string]>;

    getOracleSpoke(overrides?: CallOverrides): Promise<[string]>;

    "processMessageFromRoot(uint256,address,bytes)"(
      stateId: BigNumberish,
      rootMessageSender: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "processMessageFromRoot(address,bytes)"(
      sender: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendMessageToParent(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFxRootTunnel(
      _fxRootTunnel: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  finder(overrides?: CallOverrides): Promise<string>;

  fxChild(overrides?: CallOverrides): Promise<string>;

  fxRootTunnel(overrides?: CallOverrides): Promise<string>;

  getOracleHub(overrides?: CallOverrides): Promise<string>;

  getOracleSpoke(overrides?: CallOverrides): Promise<string>;

  "processMessageFromRoot(uint256,address,bytes)"(
    stateId: BigNumberish,
    rootMessageSender: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "processMessageFromRoot(address,bytes)"(
    sender: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendMessageToParent(
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFxRootTunnel(
    _fxRootTunnel: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    finder(overrides?: CallOverrides): Promise<string>;

    fxChild(overrides?: CallOverrides): Promise<string>;

    fxRootTunnel(overrides?: CallOverrides): Promise<string>;

    getOracleHub(overrides?: CallOverrides): Promise<string>;

    getOracleSpoke(overrides?: CallOverrides): Promise<string>;

    "processMessageFromRoot(uint256,address,bytes)"(
      stateId: BigNumberish,
      rootMessageSender: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "processMessageFromRoot(address,bytes)"(
      sender: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    sendMessageToParent(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setFxRootTunnel(
      _fxRootTunnel: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "MessageReceivedFromParent(address,bytes)"(
      targetSpoke?: string | null,
      dataToSendToTarget?: null
    ): TypedEventFilter<
      [string, string],
      { targetSpoke: string; dataToSendToTarget: string }
    >;

    MessageReceivedFromParent(
      targetSpoke?: string | null,
      dataToSendToTarget?: null
    ): TypedEventFilter<
      [string, string],
      { targetSpoke: string; dataToSendToTarget: string }
    >;

    "MessageSent(bytes)"(
      message?: null
    ): TypedEventFilter<[string], { message: string }>;

    MessageSent(
      message?: null
    ): TypedEventFilter<[string], { message: string }>;

    "MessageSentToParent(bytes,address,address)"(
      data?: null,
      targetHub?: string | null,
      oracleSpoke?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { data: string; targetHub: string; oracleSpoke: string }
    >;

    MessageSentToParent(
      data?: null,
      targetHub?: string | null,
      oracleSpoke?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { data: string; targetHub: string; oracleSpoke: string }
    >;
  };

  estimateGas: {
    finder(overrides?: CallOverrides): Promise<BigNumber>;

    fxChild(overrides?: CallOverrides): Promise<BigNumber>;

    fxRootTunnel(overrides?: CallOverrides): Promise<BigNumber>;

    getOracleHub(overrides?: CallOverrides): Promise<BigNumber>;

    getOracleSpoke(overrides?: CallOverrides): Promise<BigNumber>;

    "processMessageFromRoot(uint256,address,bytes)"(
      stateId: BigNumberish,
      rootMessageSender: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "processMessageFromRoot(address,bytes)"(
      sender: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendMessageToParent(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFxRootTunnel(
      _fxRootTunnel: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    finder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fxChild(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fxRootTunnel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOracleHub(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOracleSpoke(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "processMessageFromRoot(uint256,address,bytes)"(
      stateId: BigNumberish,
      rootMessageSender: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "processMessageFromRoot(address,bytes)"(
      sender: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendMessageToParent(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFxRootTunnel(
      _fxRootTunnel: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
