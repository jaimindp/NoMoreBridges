import { Signer, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { OriginValidator, OriginValidatorInterface } from "../OriginValidator";
export declare class OriginValidator__factory extends ContractFactory {
    constructor(...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>);
    deploy(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<OriginValidator>;
    getDeployTransaction(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): TransactionRequest;
    attach(address: string): OriginValidator;
    connect(signer: Signer): OriginValidator__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b5060d38061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063207c64fb14602d575b600080fd5b603c60383660046062565b603e565b005b3273ffffffffffffffffffffffffffffffffffffffff821614605f57600080fd5b50565b600060208284031215607357600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114609657600080fd5b939250505056fea26469706673582212209a2a99b22a4a9d213ffcd88f176e6c1b7a93fbc5214a6dbfcc404d79774b1be564736f6c63430008100033";
    static readonly abi: {
        inputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        name: string;
        outputs: never[];
        stateMutability: string;
        type: string;
    }[];
    static createInterface(): OriginValidatorInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): OriginValidator;
}
