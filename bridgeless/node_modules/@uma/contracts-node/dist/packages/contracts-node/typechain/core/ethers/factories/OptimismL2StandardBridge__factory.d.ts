import { Signer, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { OptimismL2StandardBridge, OptimismL2StandardBridgeInterface } from "../OptimismL2StandardBridge";
export declare class OptimismL2StandardBridge__factory extends ContractFactory {
    constructor(...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>);
    deploy(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<OptimismL2StandardBridge>;
    getDeployTransaction(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): TransactionRequest;
    attach(address: string): OptimismL2StandardBridge;
    connect(signer: Signer): OptimismL2StandardBridge__factory;
    static readonly bytecode = "0x6080604052348015600f57600080fd5b5060ab8061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806336c717c114602d575b600080fd5b600054604c9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f3fea26469706673582212209f7089be9b00f88b8030efb25d5633a6cc40e251a42e0bb9404308845f9d030b64736f6c63430008100033";
    static readonly abi: {
        inputs: never[];
        name: string;
        outputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        stateMutability: string;
        type: string;
    }[];
    static createInterface(): OptimismL2StandardBridgeInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): OptimismL2StandardBridge;
}
