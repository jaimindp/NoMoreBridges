/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface BridgeDepositBoxInterface extends ethers.utils.Interface {
  functions: {
    "bridgeTokens(address,uint32)": FunctionFragment;
    "canBridge(address)": FunctionFragment;
    "chainId()": FunctionFragment;
    "deposit(address,address,uint256,uint64,uint64,uint64)": FunctionFragment;
    "getCurrentTime()": FunctionFragment;
    "isWhitelistToken(address)": FunctionFragment;
    "l1Weth()": FunctionFragment;
    "minimumBridgingDelay()": FunctionFragment;
    "numberOfDeposits()": FunctionFragment;
    "setCurrentTime(uint256)": FunctionFragment;
    "timerAddress()": FunctionFragment;
    "whitelistedTokens(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "bridgeTokens",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "canBridge", values: [string]): string;
  encodeFunctionData(functionFragment: "chainId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelistToken",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "l1Weth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "minimumBridgingDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfDeposits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCurrentTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "timerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistedTokens",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "bridgeTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canBridge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "chainId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelistToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "l1Weth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minimumBridgingDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberOfDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCurrentTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistedTokens",
    data: BytesLike
  ): Result;

  events: {
    "DepositsEnabled(address,bool)": EventFragment;
    "FundsDeposited(uint256,uint256,address,address,address,address,uint256,uint64,uint64,uint64)": EventFragment;
    "SetMinimumBridgingDelay(uint64)": EventFragment;
    "TokensBridged(address,uint256,uint256,address)": EventFragment;
    "WhitelistToken(address,address,uint64,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DepositsEnabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundsDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMinimumBridgingDelay"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensBridged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WhitelistToken"): EventFragment;
}

export class BridgeDepositBox extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BridgeDepositBoxInterface;

  functions: {
    bridgeTokens(
      l2Token: string,
      l2Gas: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    canBridge(l2Token: string, overrides?: CallOverrides): Promise<[boolean]>;

    chainId(overrides?: CallOverrides): Promise<[BigNumber]>;

    deposit(
      l1Recipient: string,
      l2Token: string,
      amount: BigNumberish,
      slowRelayFeePct: BigNumberish,
      instantRelayFeePct: BigNumberish,
      quoteTimestamp: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCurrentTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    isWhitelistToken(
      l2Token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    l1Weth(overrides?: CallOverrides): Promise<[string]>;

    minimumBridgingDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    numberOfDeposits(overrides?: CallOverrides): Promise<[BigNumber]>;

    setCurrentTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    timerAddress(overrides?: CallOverrides): Promise<[string]>;

    whitelistedTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, boolean] & {
        l1Token: string;
        l1BridgePool: string;
        lastBridgeTime: BigNumber;
        depositsEnabled: boolean;
      }
    >;
  };

  bridgeTokens(
    l2Token: string,
    l2Gas: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  canBridge(l2Token: string, overrides?: CallOverrides): Promise<boolean>;

  chainId(overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    l1Recipient: string,
    l2Token: string,
    amount: BigNumberish,
    slowRelayFeePct: BigNumberish,
    instantRelayFeePct: BigNumberish,
    quoteTimestamp: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

  isWhitelistToken(
    l2Token: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  l1Weth(overrides?: CallOverrides): Promise<string>;

  minimumBridgingDelay(overrides?: CallOverrides): Promise<BigNumber>;

  numberOfDeposits(overrides?: CallOverrides): Promise<BigNumber>;

  setCurrentTime(
    time: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  timerAddress(overrides?: CallOverrides): Promise<string>;

  whitelistedTokens(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, boolean] & {
      l1Token: string;
      l1BridgePool: string;
      lastBridgeTime: BigNumber;
      depositsEnabled: boolean;
    }
  >;

  callStatic: {
    bridgeTokens(
      l2Token: string,
      l2Gas: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    canBridge(l2Token: string, overrides?: CallOverrides): Promise<boolean>;

    chainId(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      l1Recipient: string,
      l2Token: string,
      amount: BigNumberish,
      slowRelayFeePct: BigNumberish,
      instantRelayFeePct: BigNumberish,
      quoteTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

    isWhitelistToken(
      l2Token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    l1Weth(overrides?: CallOverrides): Promise<string>;

    minimumBridgingDelay(overrides?: CallOverrides): Promise<BigNumber>;

    numberOfDeposits(overrides?: CallOverrides): Promise<BigNumber>;

    setCurrentTime(
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    timerAddress(overrides?: CallOverrides): Promise<string>;

    whitelistedTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, boolean] & {
        l1Token: string;
        l1BridgePool: string;
        lastBridgeTime: BigNumber;
        depositsEnabled: boolean;
      }
    >;
  };

  filters: {
    DepositsEnabled(
      l2Token?: null,
      depositsEnabled?: null
    ): TypedEventFilter<
      [string, boolean],
      { l2Token: string; depositsEnabled: boolean }
    >;

    FundsDeposited(
      chainId?: null,
      depositId?: null,
      l1Recipient?: null,
      l2Sender?: null,
      l1Token?: null,
      l2Token?: null,
      amount?: null,
      slowRelayFeePct?: null,
      instantRelayFeePct?: null,
      quoteTimestamp?: null
    ): TypedEventFilter<
      [
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        chainId: BigNumber;
        depositId: BigNumber;
        l1Recipient: string;
        l2Sender: string;
        l1Token: string;
        l2Token: string;
        amount: BigNumber;
        slowRelayFeePct: BigNumber;
        instantRelayFeePct: BigNumber;
        quoteTimestamp: BigNumber;
      }
    >;

    SetMinimumBridgingDelay(
      newMinimumBridgingDelay?: null
    ): TypedEventFilter<[BigNumber], { newMinimumBridgingDelay: BigNumber }>;

    TokensBridged(
      l2Token?: string | null,
      numberOfTokensBridged?: null,
      l1Gas?: null,
      caller?: string | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string],
      {
        l2Token: string;
        numberOfTokensBridged: BigNumber;
        l1Gas: BigNumber;
        caller: string;
      }
    >;

    WhitelistToken(
      l1Token?: null,
      l2Token?: null,
      lastBridgeTime?: null,
      bridgePool?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      {
        l1Token: string;
        l2Token: string;
        lastBridgeTime: BigNumber;
        bridgePool: string;
      }
    >;
  };

  estimateGas: {
    bridgeTokens(
      l2Token: string,
      l2Gas: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    canBridge(l2Token: string, overrides?: CallOverrides): Promise<BigNumber>;

    chainId(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      l1Recipient: string,
      l2Token: string,
      amount: BigNumberish,
      slowRelayFeePct: BigNumberish,
      instantRelayFeePct: BigNumberish,
      quoteTimestamp: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

    isWhitelistToken(
      l2Token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    l1Weth(overrides?: CallOverrides): Promise<BigNumber>;

    minimumBridgingDelay(overrides?: CallOverrides): Promise<BigNumber>;

    numberOfDeposits(overrides?: CallOverrides): Promise<BigNumber>;

    setCurrentTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    timerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    whitelistedTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bridgeTokens(
      l2Token: string,
      l2Gas: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    canBridge(
      l2Token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    chainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      l1Recipient: string,
      l2Token: string,
      amount: BigNumberish,
      slowRelayFeePct: BigNumberish,
      instantRelayFeePct: BigNumberish,
      quoteTimestamp: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCurrentTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isWhitelistToken(
      l2Token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    l1Weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minimumBridgingDelay(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numberOfDeposits(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setCurrentTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    timerAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    whitelistedTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
