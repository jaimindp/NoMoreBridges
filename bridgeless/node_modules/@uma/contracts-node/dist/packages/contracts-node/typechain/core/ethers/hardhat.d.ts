/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "CrossDomainEnabled",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CrossDomainEnabled__factory>;
    getContractFactory(
      name: "ICrossDomainMessenger",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICrossDomainMessenger__factory>;
    getContractFactory(
      name: "Module",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Module__factory>;
    getContractFactory(
      name: "FactoryFriendly",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FactoryFriendly__factory>;
    getContractFactory(
      name: "ModuleProxyFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ModuleProxyFactory__factory>;
    getContractFactory(
      name: "BaseGuard",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseGuard__factory>;
    getContractFactory(
      name: "Guardable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Guardable__factory>;
    getContractFactory(
      name: "IAvatar",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAvatar__factory>;
    getContractFactory(
      name: "IGuard",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGuard__factory>;
    getContractFactory(
      name: "FxBaseChildTunnel",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FxBaseChildTunnel__factory>;
    getContractFactory(
      name: "IFxMessageProcessor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFxMessageProcessor__factory>;
    getContractFactory(
      name: "FxBaseRootTunnel",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FxBaseRootTunnel__factory>;
    getContractFactory(
      name: "ICheckpointManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICheckpointManager__factory>;
    getContractFactory(
      name: "IFxStateSender",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFxStateSender__factory>;
    getContractFactory(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContextUpgradeable__factory>;
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Snapshot",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Snapshot__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "IUniswapV2Pair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Pair__factory>;
    getContractFactory(
      name: "IUniswapV2Router01",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router01__factory>;
    getContractFactory(
      name: "IUniswapV3SwapCallback",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3SwapCallback__factory>;
    getContractFactory(
      name: "IUniswapV3Pool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3Pool__factory>;
    getContractFactory(
      name: "IUniswapV3PoolActions",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3PoolActions__factory>;
    getContractFactory(
      name: "IUniswapV3PoolDerivedState",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3PoolDerivedState__factory>;
    getContractFactory(
      name: "IUniswapV3PoolEvents",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3PoolEvents__factory>;
    getContractFactory(
      name: "IUniswapV3PoolImmutables",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3PoolImmutables__factory>;
    getContractFactory(
      name: "IUniswapV3PoolOwnerActions",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3PoolOwnerActions__factory>;
    getContractFactory(
      name: "IUniswapV3PoolState",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3PoolState__factory>;
    getContractFactory(
      name: "ISwapRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISwapRouter__factory>;
    getContractFactory(
      name: "AddressWhitelist",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AddressWhitelist__factory>;
    getContractFactory(
      name: "DSAuth",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DSAuth__factory>;
    getContractFactory(
      name: "DSAuthEvents",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DSAuthEvents__factory>;
    getContractFactory(
      name: "DSAuthority",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DSAuthority__factory>;
    getContractFactory(
      name: "DSGuard",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DSGuard__factory>;
    getContractFactory(
      name: "DSGuardEvents",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DSGuardEvents__factory>;
    getContractFactory(
      name: "DSGuardFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DSGuardFactory__factory>;
    getContractFactory(
      name: "DSAuth",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DSAuth__factory>;
    getContractFactory(
      name: "DSAuthEvents",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DSAuthEvents__factory>;
    getContractFactory(
      name: "DSAuthority",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DSAuthority__factory>;
    getContractFactory(
      name: "DSNote",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DSNote__factory>;
    getContractFactory(
      name: "DSProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DSProxy__factory>;
    getContractFactory(
      name: "DSProxyCache",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DSProxyCache__factory>;
    getContractFactory(
      name: "DSProxyFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DSProxyFactory__factory>;
    getContractFactory(
      name: "ExpandedERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ExpandedERC20__factory>;
    getContractFactory(
      name: "HasFinder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HasFinder__factory>;
    getContractFactory(
      name: "Lockable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Lockable__factory>;
    getContractFactory(
      name: "Multicall3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Multicall3__factory>;
    getContractFactory(
      name: "MultiCaller",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MultiCaller__factory>;
    getContractFactory(
      name: "MultiRole",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MultiRole__factory>;
    getContractFactory(
      name: "Stakeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Stakeable__factory>;
    getContractFactory(
      name: "Testable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Testable__factory>;
    getContractFactory(
      name: "TestnetERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestnetERC20__factory>;
    getContractFactory(
      name: "Timer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Timer__factory>;
    getContractFactory(
      name: "Withdrawable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Withdrawable__factory>;
    getContractFactory(
      name: "AddressWhitelistInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AddressWhitelistInterface__factory>;
    getContractFactory(
      name: "Balancer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Balancer__factory>;
    getContractFactory(
      name: "ExpandedIERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ExpandedIERC20__factory>;
    getContractFactory(
      name: "HarvestVaultInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HarvestVaultInterface__factory>;
    getContractFactory(
      name: "IERC20Standard",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Standard__factory>;
    getContractFactory(
      name: "Multicall",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Multicall__factory>;
    getContractFactory(
      name: "Multicall2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Multicall2__factory>;
    getContractFactory(
      name: "TransactionBatcher",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TransactionBatcher__factory>;
    getContractFactory(
      name: "UniswapV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV2__factory>;
    getContractFactory(
      name: "UniswapV3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV3__factory>;
    getContractFactory(
      name: "VaultInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VaultInterface__factory>;
    getContractFactory(
      name: "AncillaryDataTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AncillaryDataTest__factory>;
    getContractFactory(
      name: "BalancerMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BalancerMock__factory>;
    getContractFactory(
      name: "BasicERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BasicERC20__factory>;
    getContractFactory(
      name: "HarvestVaultMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HarvestVaultMock__factory>;
    getContractFactory(
      name: "MintableERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MintableERC721__factory>;
    getContractFactory(
      name: "MultiCallerTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MultiCallerTest__factory>;
    getContractFactory(
      name: "MulticallMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MulticallMock__factory>;
    getContractFactory(
      name: "MultiRoleTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MultiRoleTest__factory>;
    getContractFactory(
      name: "PerpetualMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PerpetualMock__factory>;
    getContractFactory(
      name: "ReentrancyAttack",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrancyAttack__factory>;
    getContractFactory(
      name: "ReentrancyChecker",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrancyChecker__factory>;
    getContractFactory(
      name: "ReentrancyMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrancyMock__factory>;
    getContractFactory(
      name: "SignedFixedPointTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SignedFixedPointTest__factory>;
    getContractFactory(
      name: "TestableTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestableTest__factory>;
    getContractFactory(
      name: "UniswapV2Mock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV2Mock__factory>;
    getContractFactory(
      name: "UniswapV3Mock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV3Mock__factory>;
    getContractFactory(
      name: "UnsignedFixedPointTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UnsignedFixedPointTest__factory>;
    getContractFactory(
      name: "VaultMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VaultMock__factory>;
    getContractFactory(
      name: "WithdrawableTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WithdrawableTest__factory>;
    getContractFactory(
      name: "AdminChildMessenger",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AdminChildMessenger__factory>;
    getContractFactory(
      name: "ArbitrumChildMessenger",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArbitrumChildMessenger__factory>;
    getContractFactory(
      name: "ArbitrumParentMessenger",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArbitrumParentMessenger__factory>;
    getContractFactory(
      name: "OptimismChildMessenger",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OptimismChildMessenger__factory>;
    getContractFactory(
      name: "OptimismParentMessenger",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OptimismParentMessenger__factory>;
    getContractFactory(
      name: "ParentMessengerBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ParentMessengerBase__factory>;
    getContractFactory(
      name: "PolygonChildMessenger",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PolygonChildMessenger__factory>;
    getContractFactory(
      name: "PolygonParentMessenger",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PolygonParentMessenger__factory>;
    getContractFactory(
      name: "ArbitrumBridgeMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArbitrumBridgeMock__factory>;
    getContractFactory(
      name: "ArbitrumInboxMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArbitrumInboxMock__factory>;
    getContractFactory(
      name: "ArbitrumOutboxMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArbitrumOutboxMock__factory>;
    getContractFactory(
      name: "OVML1CrossDomainMessengerMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OVML1CrossDomainMessengerMock__factory>;
    getContractFactory(
      name: "ParentMessengerBaseMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ParentMessengerBaseMock__factory>;
    getContractFactory(
      name: "PolygonChildMessengerMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PolygonChildMessengerMock__factory>;
    getContractFactory(
      name: "PolygonParentMessengerMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PolygonParentMessengerMock__factory>;
    getContractFactory(
      name: "GovernorHub",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernorHub__factory>;
    getContractFactory(
      name: "GovernorSpoke",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernorSpoke__factory>;
    getContractFactory(
      name: "ChildMessengerConsumerInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ChildMessengerConsumerInterface__factory>;
    getContractFactory(
      name: "ChildMessengerInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ChildMessengerInterface__factory>;
    getContractFactory(
      name: "ParentMessengerConsumerInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ParentMessengerConsumerInterface__factory>;
    getContractFactory(
      name: "ParentMessengerInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ParentMessengerInterface__factory>;
    getContractFactory(
      name: "OracleBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OracleBase__factory>;
    getContractFactory(
      name: "OracleHub",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OracleHub__factory>;
    getContractFactory(
      name: "OracleSpoke",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OracleSpoke__factory>;
    getContractFactory(
      name: "SpokeBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SpokeBase__factory>;
    getContractFactory(
      name: "GovernorMessengerMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernorMessengerMock__factory>;
    getContractFactory(
      name: "OracleBaseMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OracleBaseMock__factory>;
    getContractFactory(
      name: "OracleMessengerMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OracleMessengerMock__factory>;
    getContractFactory(
      name: "OptimisticOracleConstraints",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OptimisticOracleConstraints__factory>;
    getContractFactory(
      name: "OracleInterfaces",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OracleInterfaces__factory>;
    getContractFactory(
      name: "DesignatedVoting",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DesignatedVoting__factory>;
    getContractFactory(
      name: "DesignatedVotingFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DesignatedVotingFactory__factory>;
    getContractFactory(
      name: "DesignatedVotingV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DesignatedVotingV2__factory>;
    getContractFactory(
      name: "DesignatedVotingV2Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DesignatedVotingV2Factory__factory>;
    getContractFactory(
      name: "EmergencyProposer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EmergencyProposer__factory>;
    getContractFactory(
      name: "FinancialContractsAdmin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FinancialContractsAdmin__factory>;
    getContractFactory(
      name: "Finder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Finder__factory>;
    getContractFactory(
      name: "FixedSlashSlashingLibrary",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FixedSlashSlashingLibrary__factory>;
    getContractFactory(
      name: "Governor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Governor__factory>;
    getContractFactory(
      name: "GovernorV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernorV2__factory>;
    getContractFactory(
      name: "IdentifierWhitelist",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IdentifierWhitelist__factory>;
    getContractFactory(
      name: "Proposer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proposer__factory>;
    getContractFactory(
      name: "ProposerV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProposerV2__factory>;
    getContractFactory(
      name: "Registry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Registry__factory>;
    getContractFactory(
      name: "Staker",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Staker__factory>;
    getContractFactory(
      name: "Store",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Store__factory>;
    getContractFactory(
      name: "EmergencyProposerTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EmergencyProposerTest__factory>;
    getContractFactory(
      name: "GovernorTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernorTest__factory>;
    getContractFactory(
      name: "GovernorV2Test",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernorV2Test__factory>;
    getContractFactory(
      name: "MockAdministratee",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockAdministratee__factory>;
    getContractFactory(
      name: "PriceIdentifierSlashingLibaryTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PriceIdentifierSlashingLibaryTest__factory>;
    getContractFactory(
      name: "ProposerV2Test",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProposerV2Test__factory>;
    getContractFactory(
      name: "PunitiveSlashingLibraryTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PunitiveSlashingLibraryTest__factory>;
    getContractFactory(
      name: "ResultComputationTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ResultComputationTest__factory>;
    getContractFactory(
      name: "StakerControlledTiming",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakerControlledTiming__factory>;
    getContractFactory(
      name: "StakerTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakerTest__factory>;
    getContractFactory(
      name: "VoteTimingTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VoteTimingTest__factory>;
    getContractFactory(
      name: "VotingTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VotingTest__factory>;
    getContractFactory(
      name: "VotingV2ControllableTiming",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VotingV2ControllableTiming__factory>;
    getContractFactory(
      name: "VotingV2Test",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VotingV2Test__factory>;
    getContractFactory(
      name: "ZeroedSlashingSlashingLibraryTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZeroedSlashingSlashingLibraryTest__factory>;
    getContractFactory(
      name: "TokenMigrator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenMigrator__factory>;
    getContractFactory(
      name: "Voting",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Voting__factory>;
    getContractFactory(
      name: "VotingToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VotingToken__factory>;
    getContractFactory(
      name: "VotingV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VotingV2__factory>;
    getContractFactory(
      name: "AdministrateeInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AdministrateeInterface__factory>;
    getContractFactory(
      name: "FinderInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FinderInterface__factory>;
    getContractFactory(
      name: "IdentifierWhitelistInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IdentifierWhitelistInterface__factory>;
    getContractFactory(
      name: "MinimumVotingAncillaryInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MinimumVotingAncillaryInterface__factory>;
    getContractFactory(
      name: "OracleAncillaryInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OracleAncillaryInterface__factory>;
    getContractFactory(
      name: "OracleGovernanceInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OracleGovernanceInterface__factory>;
    getContractFactory(
      name: "OracleInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OracleInterface__factory>;
    getContractFactory(
      name: "RegistryInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RegistryInterface__factory>;
    getContractFactory(
      name: "SlashingLibraryInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SlashingLibraryInterface__factory>;
    getContractFactory(
      name: "StakerInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakerInterface__factory>;
    getContractFactory(
      name: "StoreInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StoreInterface__factory>;
    getContractFactory(
      name: "VotingAncillaryInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VotingAncillaryInterface__factory>;
    getContractFactory(
      name: "VotingInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VotingInterface__factory>;
    getContractFactory(
      name: "VotingV2Interface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VotingV2Interface__factory>;
    getContractFactory(
      name: "MockOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockOracle__factory>;
    getContractFactory(
      name: "MockOracleAncillary",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockOracleAncillary__factory>;
    getContractFactory(
      name: "MockOracleCombined",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockOracleCombined__factory>;
    getContractFactory(
      name: "MockOracleGovernance",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockOracleGovernance__factory>;
    getContractFactory(
      name: "VotingAncillaryInterfaceTesting",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VotingAncillaryInterfaceTesting__factory>;
    getContractFactory(
      name: "VotingInterfaceTesting",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VotingInterfaceTesting__factory>;
    getContractFactory(
      name: "ArbitrumCrossDomainEnabled",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArbitrumCrossDomainEnabled__factory>;
    getContractFactory(
      name: "ArbitrumMessenger",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArbitrumMessenger__factory>;
    getContractFactory(
      name: "AVMCrossDomainEnabled",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AVMCrossDomainEnabled__factory>;
    getContractFactory(
      name: "ArbSys",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArbSys__factory>;
    getContractFactory(
      name: "IArbitrumInbox",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IArbitrumInbox__factory>;
    getContractFactory(
      name: "IBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBridge__factory>;
    getContractFactory(
      name: "IArbitrumOutbox",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IArbitrumOutbox__factory>;
    getContractFactory(
      name: "BobaAddressManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BobaAddressManager__factory>;
    getContractFactory(
      name: "Bridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Bridge__factory>;
    getContractFactory(
      name: "GenericHandler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GenericHandler__factory>;
    getContractFactory(
      name: "IBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBridge__factory>;
    getContractFactory(
      name: "IDepositExecute",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDepositExecute__factory>;
    getContractFactory(
      name: "IERCHandler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERCHandler__factory>;
    getContractFactory(
      name: "IGenericHandler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGenericHandler__factory>;
    getContractFactory(
      name: "OptimismL1StandardBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OptimismL1StandardBridge__factory>;
    getContractFactory(
      name: "OptimismL2StandardBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OptimismL2StandardBridge__factory>;
    getContractFactory(
      name: "OptimismL2StandardERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OptimismL2StandardERC20__factory>;
    getContractFactory(
      name: "EmergencyShutdownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EmergencyShutdownable__factory>;
    getContractFactory(
      name: "FeePayer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FeePayer__factory>;
    getContractFactory(
      name: "CoveredCallFinancialProductLibrary",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CoveredCallFinancialProductLibrary__factory>;
    getContractFactory(
      name: "ExpiringContractInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ExpiringContractInterface__factory>;
    getContractFactory(
      name: "FinancialProductLibrary",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FinancialProductLibrary__factory>;
    getContractFactory(
      name: "KpiOptionsFinancialProductLibrary",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.KpiOptionsFinancialProductLibrary__factory>;
    getContractFactory(
      name: "PostExpirationIdentifierTransformationFinancialProductLibrary",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PostExpirationIdentifierTransformationFinancialProductLibrary__factory>;
    getContractFactory(
      name: "PreExpirationIdentifierTransformationFinancialProductLibrary",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PreExpirationIdentifierTransformationFinancialProductLibrary__factory>;
    getContractFactory(
      name: "StructuredNoteFinancialProductLibrary",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StructuredNoteFinancialProductLibrary__factory>;
    getContractFactory(
      name: "BinaryOptionLongShortPairFinancialProductLibrary",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BinaryOptionLongShortPairFinancialProductLibrary__factory>;
    getContractFactory(
      name: "CappedYieldDollarLongShortPairFinancialProductLibrary",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CappedYieldDollarLongShortPairFinancialProductLibrary__factory>;
    getContractFactory(
      name: "CoveredCallLongShortPairFinancialProductLibrary",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CoveredCallLongShortPairFinancialProductLibrary__factory>;
    getContractFactory(
      name: "FlooredLinearLongShortPairFinancialProductLibrary",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FlooredLinearLongShortPairFinancialProductLibrary__factory>;
    getContractFactory(
      name: "LinearLongShortPairFinancialProductLibrary",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LinearLongShortPairFinancialProductLibrary__factory>;
    getContractFactory(
      name: "ExpiringContractInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ExpiringContractInterface__factory>;
    getContractFactory(
      name: "LongShortPairFinancialProductLibrary",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LongShortPairFinancialProductLibrary__factory>;
    getContractFactory(
      name: "RangeBondLongShortPairFinancialProductLibrary",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RangeBondLongShortPairFinancialProductLibrary__factory>;
    getContractFactory(
      name: "SimpleSuccessTokenLongShortPairFinancialProductLibrary",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SimpleSuccessTokenLongShortPairFinancialProductLibrary__factory>;
    getContractFactory(
      name: "SuccessTokenLongShortPairFinancialProductLibrary",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SuccessTokenLongShortPairFinancialProductLibrary__factory>;
    getContractFactory(
      name: "FundingRateApplier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FundingRateApplier__factory>;
    getContractFactory(
      name: "SyntheticToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SyntheticToken__factory>;
    getContractFactory(
      name: "TokenFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenFactory__factory>;
    getContractFactory(
      name: "WETH9",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WETH9__factory>;
    getContractFactory(
      name: "ExpiringMultiParty",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ExpiringMultiParty__factory>;
    getContractFactory(
      name: "ExpiringMultiPartyCreator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ExpiringMultiPartyCreator__factory>;
    getContractFactory(
      name: "Liquidatable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Liquidatable__factory>;
    getContractFactory(
      name: "PricelessPositionManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PricelessPositionManager__factory>;
    getContractFactory(
      name: "LongShortPair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LongShortPair__factory>;
    getContractFactory(
      name: "LongShortPairCreator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LongShortPairCreator__factory>;
    getContractFactory(
      name: "OptimisticDistributor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OptimisticDistributor__factory>;
    getContractFactory(
      name: "OptimisticRewarder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OptimisticRewarder__factory>;
    getContractFactory(
      name: "OptimisticRewarderNoToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OptimisticRewarderNoToken__factory>;
    getContractFactory(
      name: "OptimisticRewarderBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OptimisticRewarderBase__factory>;
    getContractFactory(
      name: "OptimisticRewarderCreator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OptimisticRewarderCreator__factory>;
    getContractFactory(
      name: "OptimisticRewarderToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OptimisticRewarderToken__factory>;
    getContractFactory(
      name: "OptimisticStaker",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OptimisticStaker__factory>;
    getContractFactory(
      name: "OptimisticRewarderNoTokenTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OptimisticRewarderNoTokenTest__factory>;
    getContractFactory(
      name: "OptimisticRewarderTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OptimisticRewarderTest__factory>;
    getContractFactory(
      name: "ConfigStore",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ConfigStore__factory>;
    getContractFactory(
      name: "ConfigStoreInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ConfigStoreInterface__factory>;
    getContractFactory(
      name: "Perpetual",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Perpetual__factory>;
    getContractFactory(
      name: "PerpetualCreator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PerpetualCreator__factory>;
    getContractFactory(
      name: "PerpetualLiquidatable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PerpetualLiquidatable__factory>;
    getContractFactory(
      name: "PerpetualPositionManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PerpetualPositionManager__factory>;
    getContractFactory(
      name: "ExpiringMultiPartyMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ExpiringMultiPartyMock__factory>;
    getContractFactory(
      name: "FinancialProductLibraryTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FinancialProductLibraryTest__factory>;
    getContractFactory(
      name: "FundingRateApplierTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FundingRateApplierTest__factory>;
    getContractFactory(
      name: "LongShortPairFinancialProjectLibraryTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LongShortPairFinancialProjectLibraryTest__factory>;
    getContractFactory(
      name: "LongShortPairMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LongShortPairMock__factory>;
    getContractFactory(
      name: "MerkleDistributor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MerkleDistributor__factory>;
    getContractFactory(
      name: "MerkleDistributorInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MerkleDistributorInterface__factory>;
    getContractFactory(
      name: "OptimisticGovernor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OptimisticGovernor__factory>;
    getContractFactory(
      name: "OptimisticGovernorTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OptimisticGovernorTest__factory>;
    getContractFactory(
      name: "TestAvatar",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestAvatar__factory>;
    getContractFactory(
      name: "TestModuleProxyFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestModuleProxyFactory__factory>;
    getContractFactory(
      name: "OptimisticOracleV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OptimisticOracleV2__factory>;
    getContractFactory(
      name: "OptimisticRequester",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OptimisticRequester__factory>;
    getContractFactory(
      name: "OptimisticRequesterV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OptimisticRequesterV2__factory>;
    getContractFactory(
      name: "SkinnyOptimisticOracleV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SkinnyOptimisticOracleV2__factory>;
    getContractFactory(
      name: "SkinnyOptimisticOracleV2Prod",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SkinnyOptimisticOracleV2Prod__factory>;
    getContractFactory(
      name: "OptimisticOracleInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OptimisticOracleInterface__factory>;
    getContractFactory(
      name: "OptimisticOracleV2Interface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OptimisticOracleV2Interface__factory>;
    getContractFactory(
      name: "SkinnyOptimisticOracleInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SkinnyOptimisticOracleInterface__factory>;
    getContractFactory(
      name: "SkinnyOptimisticOracleV2Interface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SkinnyOptimisticOracleV2Interface__factory>;
    getContractFactory(
      name: "OptimisticOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OptimisticOracle__factory>;
    getContractFactory(
      name: "OptimisticRequester",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OptimisticRequester__factory>;
    getContractFactory(
      name: "OptimisticRequester",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OptimisticRequester__factory>;
    getContractFactory(
      name: "SkinnyOptimisticOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SkinnyOptimisticOracle__factory>;
    getContractFactory(
      name: "SkinnyOptimisticOracleProd",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SkinnyOptimisticOracleProd__factory>;
    getContractFactory(
      name: "OptimisticRequesterTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OptimisticRequesterTest__factory>;
    getContractFactory(
      name: "SkinnyOptimisticRequesterTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SkinnyOptimisticRequesterTest__factory>;
    getContractFactory(
      name: "SkinnyOptimisticV2RequesterTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SkinnyOptimisticV2RequesterTest__factory>;
    getContractFactory(
      name: "BaseEscalationManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseEscalationManager__factory>;
    getContractFactory(
      name: "DisputeLimitingEscalationManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DisputeLimitingEscalationManager__factory>;
    getContractFactory(
      name: "FullPolicyEscalationManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FullPolicyEscalationManager__factory>;
    getContractFactory(
      name: "OwnerDiscardOracleEscalationManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnerDiscardOracleEscalationManager__factory>;
    getContractFactory(
      name: "OwnerSelectOracleEscalationManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnerSelectOracleEscalationManager__factory>;
    getContractFactory(
      name: "SuperbondEscalationManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SuperbondEscalationManager__factory>;
    getContractFactory(
      name: "WhitelistAsserterEscalationManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WhitelistAsserterEscalationManager__factory>;
    getContractFactory(
      name: "WhitelistCallerEscalationManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WhitelistCallerEscalationManager__factory>;
    getContractFactory(
      name: "WhitelistDisputerEscalationManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WhitelistDisputerEscalationManager__factory>;
    getContractFactory(
      name: "DataAsserter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DataAsserter__factory>;
    getContractFactory(
      name: "Insurance",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Insurance__factory>;
    getContractFactory(
      name: "PredictionMarket",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PredictionMarket__factory>;
    getContractFactory(
      name: "OptimisticOracleV3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OptimisticOracleV3__factory>;
    getContractFactory(
      name: "AssertingCallerTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AssertingCallerTest__factory>;
    getContractFactory(
      name: "OptimisticOracleV3Test",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OptimisticOracleV3Test__factory>;
    getContractFactory(
      name: "EscalationManagerInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EscalationManagerInterface__factory>;
    getContractFactory(
      name: "OptimisticOracleV3CallbackRecipientInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OptimisticOracleV3CallbackRecipientInterface__factory>;
    getContractFactory(
      name: "OptimisticOracleV3Interface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OptimisticOracleV3Interface__factory>;
    getContractFactory(
      name: "GovernorChildTunnel",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernorChildTunnel__factory>;
    getContractFactory(
      name: "GovernorRootTunnel",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernorRootTunnel__factory>;
    getContractFactory(
      name: "OracleBaseTunnel",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OracleBaseTunnel__factory>;
    getContractFactory(
      name: "OracleChildTunnel",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OracleChildTunnel__factory>;
    getContractFactory(
      name: "OracleRootTunnel",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OracleRootTunnel__factory>;
    getContractFactory(
      name: "FxChildMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FxChildMock__factory>;
    getContractFactory(
      name: "IFxMessageProcessor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFxMessageProcessor__factory>;
    getContractFactory(
      name: "IStateReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStateReceiver__factory>;
    getContractFactory(
      name: "FxRootMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FxRootMock__factory>;
    getContractFactory(
      name: "IFxStateSender",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFxStateSender__factory>;
    getContractFactory(
      name: "IStateSender",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStateSender__factory>;
    getContractFactory(
      name: "OracleBaseTunnelMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OracleBaseTunnelMock__factory>;
    getContractFactory(
      name: "OracleRootTunnelMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OracleRootTunnelMock__factory>;
    getContractFactory(
      name: "StateSyncMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StateSyncMock__factory>;
    getContractFactory(
      name: "IFinancialContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFinancialContract__factory>;
    getContractFactory(
      name: "ReserveCurrencyDisputer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReserveCurrencyDisputer__factory>;
    getContractFactory(
      name: "IFinancialContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFinancialContract__factory>;
    getContractFactory(
      name: "IFinder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFinder__factory>;
    getContractFactory(
      name: "IStore",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStore__factory>;
    getContractFactory(
      name: "ReserveCurrencyLiquidator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReserveCurrencyLiquidator__factory>;
    getContractFactory(
      name: "IFinancialContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFinancialContract__factory>;
    getContractFactory(
      name: "LiquidationWithdrawer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LiquidationWithdrawer__factory>;
    getContractFactory(
      name: "IFinancialContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFinancialContract__factory>;
    getContractFactory(
      name: "PositionSettler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PositionSettler__factory>;
    getContractFactory(
      name: "IFinancialContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFinancialContract__factory>;
    getContractFactory(
      name: "TokenRedeemer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenRedeemer__factory>;
    getContractFactory(
      name: "TokenSender",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenSender__factory>;
    getContractFactory(
      name: "LspUniswapV2Broker",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LspUniswapV2Broker__factory>;
    getContractFactory(
      name: "UniswapV2Broker",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV2Broker__factory>;
    getContractFactory(
      name: "UniswapV3Broker",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV3Broker__factory>;
    getContractFactory(
      name: "SnapshotVotingPower",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SnapshotVotingPower__factory>;
    getContractFactory(
      name: "VotingInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VotingInterface__factory>;
    getContractFactory(
      name: "OriginValidator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OriginValidator__factory>;
    getContractFactory(
      name: "Umip3Upgrader",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Umip3Upgrader__factory>;
    getContractFactory(
      name: "VotingUpgrader",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VotingUpgrader__factory>;
    getContractFactory(
      name: "VotingUpgraderV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VotingUpgraderV2__factory>;

    getContractAt(
      name: "CrossDomainEnabled",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CrossDomainEnabled>;
    getContractAt(
      name: "ICrossDomainMessenger",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICrossDomainMessenger>;
    getContractAt(
      name: "Module",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Module>;
    getContractAt(
      name: "FactoryFriendly",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FactoryFriendly>;
    getContractAt(
      name: "ModuleProxyFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ModuleProxyFactory>;
    getContractAt(
      name: "BaseGuard",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseGuard>;
    getContractAt(
      name: "Guardable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Guardable>;
    getContractAt(
      name: "IAvatar",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAvatar>;
    getContractAt(
      name: "IGuard",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGuard>;
    getContractAt(
      name: "FxBaseChildTunnel",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FxBaseChildTunnel>;
    getContractAt(
      name: "IFxMessageProcessor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFxMessageProcessor>;
    getContractAt(
      name: "FxBaseRootTunnel",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FxBaseRootTunnel>;
    getContractAt(
      name: "ICheckpointManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICheckpointManager>;
    getContractAt(
      name: "IFxStateSender",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFxStateSender>;
    getContractAt(
      name: "OwnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableUpgradeable>;
    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "ContextUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContextUpgradeable>;
    getContractAt(
      name: "AccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "IAccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Snapshot",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Snapshot>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721>;
    getContractAt(
      name: "IERC721Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "IUniswapV2Pair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Pair>;
    getContractAt(
      name: "IUniswapV2Router01",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router01>;
    getContractAt(
      name: "IUniswapV3SwapCallback",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3SwapCallback>;
    getContractAt(
      name: "IUniswapV3Pool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3Pool>;
    getContractAt(
      name: "IUniswapV3PoolActions",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3PoolActions>;
    getContractAt(
      name: "IUniswapV3PoolDerivedState",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3PoolDerivedState>;
    getContractAt(
      name: "IUniswapV3PoolEvents",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3PoolEvents>;
    getContractAt(
      name: "IUniswapV3PoolImmutables",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3PoolImmutables>;
    getContractAt(
      name: "IUniswapV3PoolOwnerActions",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3PoolOwnerActions>;
    getContractAt(
      name: "IUniswapV3PoolState",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3PoolState>;
    getContractAt(
      name: "ISwapRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISwapRouter>;
    getContractAt(
      name: "AddressWhitelist",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AddressWhitelist>;
    getContractAt(
      name: "DSAuth",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DSAuth>;
    getContractAt(
      name: "DSAuthEvents",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DSAuthEvents>;
    getContractAt(
      name: "DSAuthority",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DSAuthority>;
    getContractAt(
      name: "DSGuard",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DSGuard>;
    getContractAt(
      name: "DSGuardEvents",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DSGuardEvents>;
    getContractAt(
      name: "DSGuardFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DSGuardFactory>;
    getContractAt(
      name: "DSAuth",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DSAuth>;
    getContractAt(
      name: "DSAuthEvents",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DSAuthEvents>;
    getContractAt(
      name: "DSAuthority",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DSAuthority>;
    getContractAt(
      name: "DSNote",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DSNote>;
    getContractAt(
      name: "DSProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DSProxy>;
    getContractAt(
      name: "DSProxyCache",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DSProxyCache>;
    getContractAt(
      name: "DSProxyFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DSProxyFactory>;
    getContractAt(
      name: "ExpandedERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ExpandedERC20>;
    getContractAt(
      name: "HasFinder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.HasFinder>;
    getContractAt(
      name: "Lockable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Lockable>;
    getContractAt(
      name: "Multicall3",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Multicall3>;
    getContractAt(
      name: "MultiCaller",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MultiCaller>;
    getContractAt(
      name: "MultiRole",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MultiRole>;
    getContractAt(
      name: "Stakeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Stakeable>;
    getContractAt(
      name: "Testable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Testable>;
    getContractAt(
      name: "TestnetERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestnetERC20>;
    getContractAt(
      name: "Timer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Timer>;
    getContractAt(
      name: "Withdrawable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Withdrawable>;
    getContractAt(
      name: "AddressWhitelistInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AddressWhitelistInterface>;
    getContractAt(
      name: "Balancer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Balancer>;
    getContractAt(
      name: "ExpandedIERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ExpandedIERC20>;
    getContractAt(
      name: "HarvestVaultInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.HarvestVaultInterface>;
    getContractAt(
      name: "IERC20Standard",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Standard>;
    getContractAt(
      name: "Multicall",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Multicall>;
    getContractAt(
      name: "Multicall2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Multicall2>;
    getContractAt(
      name: "TransactionBatcher",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TransactionBatcher>;
    getContractAt(
      name: "UniswapV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV2>;
    getContractAt(
      name: "UniswapV3",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV3>;
    getContractAt(
      name: "VaultInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VaultInterface>;
    getContractAt(
      name: "AncillaryDataTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AncillaryDataTest>;
    getContractAt(
      name: "BalancerMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BalancerMock>;
    getContractAt(
      name: "BasicERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BasicERC20>;
    getContractAt(
      name: "HarvestVaultMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.HarvestVaultMock>;
    getContractAt(
      name: "MintableERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MintableERC721>;
    getContractAt(
      name: "MultiCallerTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MultiCallerTest>;
    getContractAt(
      name: "MulticallMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MulticallMock>;
    getContractAt(
      name: "MultiRoleTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MultiRoleTest>;
    getContractAt(
      name: "PerpetualMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PerpetualMock>;
    getContractAt(
      name: "ReentrancyAttack",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrancyAttack>;
    getContractAt(
      name: "ReentrancyChecker",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrancyChecker>;
    getContractAt(
      name: "ReentrancyMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrancyMock>;
    getContractAt(
      name: "SignedFixedPointTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SignedFixedPointTest>;
    getContractAt(
      name: "TestableTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestableTest>;
    getContractAt(
      name: "UniswapV2Mock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV2Mock>;
    getContractAt(
      name: "UniswapV3Mock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV3Mock>;
    getContractAt(
      name: "UnsignedFixedPointTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UnsignedFixedPointTest>;
    getContractAt(
      name: "VaultMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VaultMock>;
    getContractAt(
      name: "WithdrawableTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WithdrawableTest>;
    getContractAt(
      name: "AdminChildMessenger",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AdminChildMessenger>;
    getContractAt(
      name: "ArbitrumChildMessenger",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ArbitrumChildMessenger>;
    getContractAt(
      name: "ArbitrumParentMessenger",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ArbitrumParentMessenger>;
    getContractAt(
      name: "OptimismChildMessenger",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OptimismChildMessenger>;
    getContractAt(
      name: "OptimismParentMessenger",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OptimismParentMessenger>;
    getContractAt(
      name: "ParentMessengerBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ParentMessengerBase>;
    getContractAt(
      name: "PolygonChildMessenger",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PolygonChildMessenger>;
    getContractAt(
      name: "PolygonParentMessenger",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PolygonParentMessenger>;
    getContractAt(
      name: "ArbitrumBridgeMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ArbitrumBridgeMock>;
    getContractAt(
      name: "ArbitrumInboxMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ArbitrumInboxMock>;
    getContractAt(
      name: "ArbitrumOutboxMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ArbitrumOutboxMock>;
    getContractAt(
      name: "OVML1CrossDomainMessengerMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OVML1CrossDomainMessengerMock>;
    getContractAt(
      name: "ParentMessengerBaseMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ParentMessengerBaseMock>;
    getContractAt(
      name: "PolygonChildMessengerMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PolygonChildMessengerMock>;
    getContractAt(
      name: "PolygonParentMessengerMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PolygonParentMessengerMock>;
    getContractAt(
      name: "GovernorHub",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernorHub>;
    getContractAt(
      name: "GovernorSpoke",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernorSpoke>;
    getContractAt(
      name: "ChildMessengerConsumerInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ChildMessengerConsumerInterface>;
    getContractAt(
      name: "ChildMessengerInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ChildMessengerInterface>;
    getContractAt(
      name: "ParentMessengerConsumerInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ParentMessengerConsumerInterface>;
    getContractAt(
      name: "ParentMessengerInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ParentMessengerInterface>;
    getContractAt(
      name: "OracleBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OracleBase>;
    getContractAt(
      name: "OracleHub",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OracleHub>;
    getContractAt(
      name: "OracleSpoke",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OracleSpoke>;
    getContractAt(
      name: "SpokeBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SpokeBase>;
    getContractAt(
      name: "GovernorMessengerMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernorMessengerMock>;
    getContractAt(
      name: "OracleBaseMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OracleBaseMock>;
    getContractAt(
      name: "OracleMessengerMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OracleMessengerMock>;
    getContractAt(
      name: "OptimisticOracleConstraints",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OptimisticOracleConstraints>;
    getContractAt(
      name: "OracleInterfaces",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OracleInterfaces>;
    getContractAt(
      name: "DesignatedVoting",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DesignatedVoting>;
    getContractAt(
      name: "DesignatedVotingFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DesignatedVotingFactory>;
    getContractAt(
      name: "DesignatedVotingV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DesignatedVotingV2>;
    getContractAt(
      name: "DesignatedVotingV2Factory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DesignatedVotingV2Factory>;
    getContractAt(
      name: "EmergencyProposer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EmergencyProposer>;
    getContractAt(
      name: "FinancialContractsAdmin",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FinancialContractsAdmin>;
    getContractAt(
      name: "Finder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Finder>;
    getContractAt(
      name: "FixedSlashSlashingLibrary",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FixedSlashSlashingLibrary>;
    getContractAt(
      name: "Governor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Governor>;
    getContractAt(
      name: "GovernorV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernorV2>;
    getContractAt(
      name: "IdentifierWhitelist",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IdentifierWhitelist>;
    getContractAt(
      name: "Proposer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Proposer>;
    getContractAt(
      name: "ProposerV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProposerV2>;
    getContractAt(
      name: "Registry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Registry>;
    getContractAt(
      name: "Staker",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Staker>;
    getContractAt(
      name: "Store",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Store>;
    getContractAt(
      name: "EmergencyProposerTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EmergencyProposerTest>;
    getContractAt(
      name: "GovernorTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernorTest>;
    getContractAt(
      name: "GovernorV2Test",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernorV2Test>;
    getContractAt(
      name: "MockAdministratee",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockAdministratee>;
    getContractAt(
      name: "PriceIdentifierSlashingLibaryTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PriceIdentifierSlashingLibaryTest>;
    getContractAt(
      name: "ProposerV2Test",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProposerV2Test>;
    getContractAt(
      name: "PunitiveSlashingLibraryTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PunitiveSlashingLibraryTest>;
    getContractAt(
      name: "ResultComputationTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ResultComputationTest>;
    getContractAt(
      name: "StakerControlledTiming",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StakerControlledTiming>;
    getContractAt(
      name: "StakerTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StakerTest>;
    getContractAt(
      name: "VoteTimingTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VoteTimingTest>;
    getContractAt(
      name: "VotingTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VotingTest>;
    getContractAt(
      name: "VotingV2ControllableTiming",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VotingV2ControllableTiming>;
    getContractAt(
      name: "VotingV2Test",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VotingV2Test>;
    getContractAt(
      name: "ZeroedSlashingSlashingLibraryTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ZeroedSlashingSlashingLibraryTest>;
    getContractAt(
      name: "TokenMigrator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenMigrator>;
    getContractAt(
      name: "Voting",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Voting>;
    getContractAt(
      name: "VotingToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VotingToken>;
    getContractAt(
      name: "VotingV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VotingV2>;
    getContractAt(
      name: "AdministrateeInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AdministrateeInterface>;
    getContractAt(
      name: "FinderInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FinderInterface>;
    getContractAt(
      name: "IdentifierWhitelistInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IdentifierWhitelistInterface>;
    getContractAt(
      name: "MinimumVotingAncillaryInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MinimumVotingAncillaryInterface>;
    getContractAt(
      name: "OracleAncillaryInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OracleAncillaryInterface>;
    getContractAt(
      name: "OracleGovernanceInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OracleGovernanceInterface>;
    getContractAt(
      name: "OracleInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OracleInterface>;
    getContractAt(
      name: "RegistryInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RegistryInterface>;
    getContractAt(
      name: "SlashingLibraryInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SlashingLibraryInterface>;
    getContractAt(
      name: "StakerInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StakerInterface>;
    getContractAt(
      name: "StoreInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StoreInterface>;
    getContractAt(
      name: "VotingAncillaryInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VotingAncillaryInterface>;
    getContractAt(
      name: "VotingInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VotingInterface>;
    getContractAt(
      name: "VotingV2Interface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VotingV2Interface>;
    getContractAt(
      name: "MockOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockOracle>;
    getContractAt(
      name: "MockOracleAncillary",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockOracleAncillary>;
    getContractAt(
      name: "MockOracleCombined",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockOracleCombined>;
    getContractAt(
      name: "MockOracleGovernance",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockOracleGovernance>;
    getContractAt(
      name: "VotingAncillaryInterfaceTesting",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VotingAncillaryInterfaceTesting>;
    getContractAt(
      name: "VotingInterfaceTesting",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VotingInterfaceTesting>;
    getContractAt(
      name: "ArbitrumCrossDomainEnabled",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ArbitrumCrossDomainEnabled>;
    getContractAt(
      name: "ArbitrumMessenger",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ArbitrumMessenger>;
    getContractAt(
      name: "AVMCrossDomainEnabled",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AVMCrossDomainEnabled>;
    getContractAt(
      name: "ArbSys",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ArbSys>;
    getContractAt(
      name: "IArbitrumInbox",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IArbitrumInbox>;
    getContractAt(
      name: "IBridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBridge>;
    getContractAt(
      name: "IArbitrumOutbox",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IArbitrumOutbox>;
    getContractAt(
      name: "BobaAddressManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BobaAddressManager>;
    getContractAt(
      name: "Bridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Bridge>;
    getContractAt(
      name: "GenericHandler",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GenericHandler>;
    getContractAt(
      name: "IBridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBridge>;
    getContractAt(
      name: "IDepositExecute",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDepositExecute>;
    getContractAt(
      name: "IERCHandler",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERCHandler>;
    getContractAt(
      name: "IGenericHandler",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGenericHandler>;
    getContractAt(
      name: "OptimismL1StandardBridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OptimismL1StandardBridge>;
    getContractAt(
      name: "OptimismL2StandardBridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OptimismL2StandardBridge>;
    getContractAt(
      name: "OptimismL2StandardERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OptimismL2StandardERC20>;
    getContractAt(
      name: "EmergencyShutdownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EmergencyShutdownable>;
    getContractAt(
      name: "FeePayer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FeePayer>;
    getContractAt(
      name: "CoveredCallFinancialProductLibrary",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CoveredCallFinancialProductLibrary>;
    getContractAt(
      name: "ExpiringContractInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ExpiringContractInterface>;
    getContractAt(
      name: "FinancialProductLibrary",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FinancialProductLibrary>;
    getContractAt(
      name: "KpiOptionsFinancialProductLibrary",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.KpiOptionsFinancialProductLibrary>;
    getContractAt(
      name: "PostExpirationIdentifierTransformationFinancialProductLibrary",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PostExpirationIdentifierTransformationFinancialProductLibrary>;
    getContractAt(
      name: "PreExpirationIdentifierTransformationFinancialProductLibrary",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PreExpirationIdentifierTransformationFinancialProductLibrary>;
    getContractAt(
      name: "StructuredNoteFinancialProductLibrary",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StructuredNoteFinancialProductLibrary>;
    getContractAt(
      name: "BinaryOptionLongShortPairFinancialProductLibrary",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BinaryOptionLongShortPairFinancialProductLibrary>;
    getContractAt(
      name: "CappedYieldDollarLongShortPairFinancialProductLibrary",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CappedYieldDollarLongShortPairFinancialProductLibrary>;
    getContractAt(
      name: "CoveredCallLongShortPairFinancialProductLibrary",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CoveredCallLongShortPairFinancialProductLibrary>;
    getContractAt(
      name: "FlooredLinearLongShortPairFinancialProductLibrary",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FlooredLinearLongShortPairFinancialProductLibrary>;
    getContractAt(
      name: "LinearLongShortPairFinancialProductLibrary",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LinearLongShortPairFinancialProductLibrary>;
    getContractAt(
      name: "ExpiringContractInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ExpiringContractInterface>;
    getContractAt(
      name: "LongShortPairFinancialProductLibrary",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LongShortPairFinancialProductLibrary>;
    getContractAt(
      name: "RangeBondLongShortPairFinancialProductLibrary",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RangeBondLongShortPairFinancialProductLibrary>;
    getContractAt(
      name: "SimpleSuccessTokenLongShortPairFinancialProductLibrary",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SimpleSuccessTokenLongShortPairFinancialProductLibrary>;
    getContractAt(
      name: "SuccessTokenLongShortPairFinancialProductLibrary",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SuccessTokenLongShortPairFinancialProductLibrary>;
    getContractAt(
      name: "FundingRateApplier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FundingRateApplier>;
    getContractAt(
      name: "SyntheticToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SyntheticToken>;
    getContractAt(
      name: "TokenFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenFactory>;
    getContractAt(
      name: "WETH9",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WETH9>;
    getContractAt(
      name: "ExpiringMultiParty",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ExpiringMultiParty>;
    getContractAt(
      name: "ExpiringMultiPartyCreator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ExpiringMultiPartyCreator>;
    getContractAt(
      name: "Liquidatable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Liquidatable>;
    getContractAt(
      name: "PricelessPositionManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PricelessPositionManager>;
    getContractAt(
      name: "LongShortPair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LongShortPair>;
    getContractAt(
      name: "LongShortPairCreator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LongShortPairCreator>;
    getContractAt(
      name: "OptimisticDistributor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OptimisticDistributor>;
    getContractAt(
      name: "OptimisticRewarder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OptimisticRewarder>;
    getContractAt(
      name: "OptimisticRewarderNoToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OptimisticRewarderNoToken>;
    getContractAt(
      name: "OptimisticRewarderBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OptimisticRewarderBase>;
    getContractAt(
      name: "OptimisticRewarderCreator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OptimisticRewarderCreator>;
    getContractAt(
      name: "OptimisticRewarderToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OptimisticRewarderToken>;
    getContractAt(
      name: "OptimisticStaker",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OptimisticStaker>;
    getContractAt(
      name: "OptimisticRewarderNoTokenTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OptimisticRewarderNoTokenTest>;
    getContractAt(
      name: "OptimisticRewarderTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OptimisticRewarderTest>;
    getContractAt(
      name: "ConfigStore",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ConfigStore>;
    getContractAt(
      name: "ConfigStoreInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ConfigStoreInterface>;
    getContractAt(
      name: "Perpetual",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Perpetual>;
    getContractAt(
      name: "PerpetualCreator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PerpetualCreator>;
    getContractAt(
      name: "PerpetualLiquidatable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PerpetualLiquidatable>;
    getContractAt(
      name: "PerpetualPositionManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PerpetualPositionManager>;
    getContractAt(
      name: "ExpiringMultiPartyMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ExpiringMultiPartyMock>;
    getContractAt(
      name: "FinancialProductLibraryTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FinancialProductLibraryTest>;
    getContractAt(
      name: "FundingRateApplierTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FundingRateApplierTest>;
    getContractAt(
      name: "LongShortPairFinancialProjectLibraryTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LongShortPairFinancialProjectLibraryTest>;
    getContractAt(
      name: "LongShortPairMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LongShortPairMock>;
    getContractAt(
      name: "MerkleDistributor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MerkleDistributor>;
    getContractAt(
      name: "MerkleDistributorInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MerkleDistributorInterface>;
    getContractAt(
      name: "OptimisticGovernor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OptimisticGovernor>;
    getContractAt(
      name: "OptimisticGovernorTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OptimisticGovernorTest>;
    getContractAt(
      name: "TestAvatar",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestAvatar>;
    getContractAt(
      name: "TestModuleProxyFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestModuleProxyFactory>;
    getContractAt(
      name: "OptimisticOracleV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OptimisticOracleV2>;
    getContractAt(
      name: "OptimisticRequester",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OptimisticRequester>;
    getContractAt(
      name: "OptimisticRequesterV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OptimisticRequesterV2>;
    getContractAt(
      name: "SkinnyOptimisticOracleV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SkinnyOptimisticOracleV2>;
    getContractAt(
      name: "SkinnyOptimisticOracleV2Prod",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SkinnyOptimisticOracleV2Prod>;
    getContractAt(
      name: "OptimisticOracleInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OptimisticOracleInterface>;
    getContractAt(
      name: "OptimisticOracleV2Interface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OptimisticOracleV2Interface>;
    getContractAt(
      name: "SkinnyOptimisticOracleInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SkinnyOptimisticOracleInterface>;
    getContractAt(
      name: "SkinnyOptimisticOracleV2Interface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SkinnyOptimisticOracleV2Interface>;
    getContractAt(
      name: "OptimisticOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OptimisticOracle>;
    getContractAt(
      name: "OptimisticRequester",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OptimisticRequester>;
    getContractAt(
      name: "OptimisticRequester",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OptimisticRequester>;
    getContractAt(
      name: "SkinnyOptimisticOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SkinnyOptimisticOracle>;
    getContractAt(
      name: "SkinnyOptimisticOracleProd",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SkinnyOptimisticOracleProd>;
    getContractAt(
      name: "OptimisticRequesterTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OptimisticRequesterTest>;
    getContractAt(
      name: "SkinnyOptimisticRequesterTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SkinnyOptimisticRequesterTest>;
    getContractAt(
      name: "SkinnyOptimisticV2RequesterTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SkinnyOptimisticV2RequesterTest>;
    getContractAt(
      name: "BaseEscalationManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseEscalationManager>;
    getContractAt(
      name: "DisputeLimitingEscalationManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DisputeLimitingEscalationManager>;
    getContractAt(
      name: "FullPolicyEscalationManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FullPolicyEscalationManager>;
    getContractAt(
      name: "OwnerDiscardOracleEscalationManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnerDiscardOracleEscalationManager>;
    getContractAt(
      name: "OwnerSelectOracleEscalationManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnerSelectOracleEscalationManager>;
    getContractAt(
      name: "SuperbondEscalationManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SuperbondEscalationManager>;
    getContractAt(
      name: "WhitelistAsserterEscalationManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WhitelistAsserterEscalationManager>;
    getContractAt(
      name: "WhitelistCallerEscalationManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WhitelistCallerEscalationManager>;
    getContractAt(
      name: "WhitelistDisputerEscalationManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WhitelistDisputerEscalationManager>;
    getContractAt(
      name: "DataAsserter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DataAsserter>;
    getContractAt(
      name: "Insurance",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Insurance>;
    getContractAt(
      name: "PredictionMarket",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PredictionMarket>;
    getContractAt(
      name: "OptimisticOracleV3",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OptimisticOracleV3>;
    getContractAt(
      name: "AssertingCallerTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AssertingCallerTest>;
    getContractAt(
      name: "OptimisticOracleV3Test",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OptimisticOracleV3Test>;
    getContractAt(
      name: "EscalationManagerInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EscalationManagerInterface>;
    getContractAt(
      name: "OptimisticOracleV3CallbackRecipientInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OptimisticOracleV3CallbackRecipientInterface>;
    getContractAt(
      name: "OptimisticOracleV3Interface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OptimisticOracleV3Interface>;
    getContractAt(
      name: "GovernorChildTunnel",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernorChildTunnel>;
    getContractAt(
      name: "GovernorRootTunnel",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernorRootTunnel>;
    getContractAt(
      name: "OracleBaseTunnel",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OracleBaseTunnel>;
    getContractAt(
      name: "OracleChildTunnel",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OracleChildTunnel>;
    getContractAt(
      name: "OracleRootTunnel",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OracleRootTunnel>;
    getContractAt(
      name: "FxChildMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FxChildMock>;
    getContractAt(
      name: "IFxMessageProcessor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFxMessageProcessor>;
    getContractAt(
      name: "IStateReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStateReceiver>;
    getContractAt(
      name: "FxRootMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FxRootMock>;
    getContractAt(
      name: "IFxStateSender",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFxStateSender>;
    getContractAt(
      name: "IStateSender",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStateSender>;
    getContractAt(
      name: "OracleBaseTunnelMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OracleBaseTunnelMock>;
    getContractAt(
      name: "OracleRootTunnelMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OracleRootTunnelMock>;
    getContractAt(
      name: "StateSyncMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StateSyncMock>;
    getContractAt(
      name: "IFinancialContract",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFinancialContract>;
    getContractAt(
      name: "ReserveCurrencyDisputer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReserveCurrencyDisputer>;
    getContractAt(
      name: "IFinancialContract",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFinancialContract>;
    getContractAt(
      name: "IFinder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFinder>;
    getContractAt(
      name: "IStore",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStore>;
    getContractAt(
      name: "ReserveCurrencyLiquidator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReserveCurrencyLiquidator>;
    getContractAt(
      name: "IFinancialContract",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFinancialContract>;
    getContractAt(
      name: "LiquidationWithdrawer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LiquidationWithdrawer>;
    getContractAt(
      name: "IFinancialContract",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFinancialContract>;
    getContractAt(
      name: "PositionSettler",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PositionSettler>;
    getContractAt(
      name: "IFinancialContract",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFinancialContract>;
    getContractAt(
      name: "TokenRedeemer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenRedeemer>;
    getContractAt(
      name: "TokenSender",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenSender>;
    getContractAt(
      name: "LspUniswapV2Broker",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LspUniswapV2Broker>;
    getContractAt(
      name: "UniswapV2Broker",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV2Broker>;
    getContractAt(
      name: "UniswapV3Broker",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV3Broker>;
    getContractAt(
      name: "SnapshotVotingPower",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SnapshotVotingPower>;
    getContractAt(
      name: "VotingInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VotingInterface>;
    getContractAt(
      name: "OriginValidator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OriginValidator>;
    getContractAt(
      name: "Umip3Upgrader",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Umip3Upgrader>;
    getContractAt(
      name: "VotingUpgrader",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VotingUpgrader>;
    getContractAt(
      name: "VotingUpgraderV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VotingUpgraderV2>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
