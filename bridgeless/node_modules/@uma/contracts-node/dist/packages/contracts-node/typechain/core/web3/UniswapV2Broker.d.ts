/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export interface UniswapV2Broker extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): UniswapV2Broker;
  clone(): UniswapV2Broker;
  methods: {
    computeTradeToMoveMarket(
      truePriceTokenA: number | string | BN,
      truePriceTokenB: number | string | BN,
      reserveA: number | string | BN,
      reserveB: number | string | BN
    ): NonPayableTransactionObject<{
      aToB: boolean;
      amountIn: string;
      0: boolean;
      1: string;
    }>;

    getReserves(
      factory: string,
      tokenA: string,
      tokenB: string
    ): NonPayableTransactionObject<{
      reserveA: string;
      reserveB: string;
      0: string;
      1: string;
    }>;

    swapToPrice(
      tradingAsEOA: boolean,
      uniswapRouter: string,
      uniswapFactory: string,
      swappedTokens: string[],
      truePriceTokens: (number | string | BN)[],
      maxSpendTokens: (number | string | BN)[],
      to: string,
      deadline: number | string | BN
    ): NonPayableTransactionObject<void>;
  };
  events: {
    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };
}
