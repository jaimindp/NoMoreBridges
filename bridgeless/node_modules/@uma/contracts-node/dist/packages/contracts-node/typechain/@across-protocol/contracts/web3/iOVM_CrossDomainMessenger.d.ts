/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type FailedRelayedMessage = ContractEventLog<{
  msgHash: string;
  0: string;
}>;
export type RelayedMessage = ContractEventLog<{
  msgHash: string;
  0: string;
}>;
export type SentMessage = ContractEventLog<{
  message: string;
  0: string;
}>;

export interface IOVMCrossDomainMessenger extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): IOVMCrossDomainMessenger;
  clone(): IOVMCrossDomainMessenger;
  methods: {
    sendMessage(
      _target: string,
      _message: string | number[],
      _gasLimit: number | string | BN
    ): NonPayableTransactionObject<void>;

    xDomainMessageSender(): NonPayableTransactionObject<string>;
  };
  events: {
    FailedRelayedMessage(cb?: Callback<FailedRelayedMessage>): EventEmitter;
    FailedRelayedMessage(
      options?: EventOptions,
      cb?: Callback<FailedRelayedMessage>
    ): EventEmitter;

    RelayedMessage(cb?: Callback<RelayedMessage>): EventEmitter;
    RelayedMessage(
      options?: EventOptions,
      cb?: Callback<RelayedMessage>
    ): EventEmitter;

    SentMessage(cb?: Callback<SentMessage>): EventEmitter;
    SentMessage(
      options?: EventOptions,
      cb?: Callback<SentMessage>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "FailedRelayedMessage", cb: Callback<FailedRelayedMessage>): void;
  once(
    event: "FailedRelayedMessage",
    options: EventOptions,
    cb: Callback<FailedRelayedMessage>
  ): void;

  once(event: "RelayedMessage", cb: Callback<RelayedMessage>): void;
  once(
    event: "RelayedMessage",
    options: EventOptions,
    cb: Callback<RelayedMessage>
  ): void;

  once(event: "SentMessage", cb: Callback<SentMessage>): void;
  once(
    event: "SentMessage",
    options: EventOptions,
    cb: Callback<SentMessage>
  ): void;
}
