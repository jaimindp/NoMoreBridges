/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface StakerInterface extends ethers.utils.Interface {
  functions: {
    "cumulativeStake()": FunctionFragment;
    "delegateToStaker(address)": FunctionFragment;
    "emissionRate()": FunctionFragment;
    "executeUnstake()": FunctionFragment;
    "getCurrentTime()": FunctionFragment;
    "getVoterFromDelegate(address)": FunctionFragment;
    "getVoterPendingStake(address,uint32)": FunctionFragment;
    "getVoterStakePostUpdate(address)": FunctionFragment;
    "lastUpdateTime()": FunctionFragment;
    "multicall(bytes[])": FunctionFragment;
    "outstandingRewards(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "requestUnstake(uint128)": FunctionFragment;
    "rewardPerToken()": FunctionFragment;
    "rewardPerTokenStored()": FunctionFragment;
    "setDelegate(address)": FunctionFragment;
    "setDelegator(address)": FunctionFragment;
    "setEmissionRate(uint128)": FunctionFragment;
    "setUnstakeCoolDown(uint64)": FunctionFragment;
    "stake(uint128)": FunctionFragment;
    "stakeTo(address,uint128)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unstakeCoolDown()": FunctionFragment;
    "voterStakes(address)": FunctionFragment;
    "votingToken()": FunctionFragment;
    "withdrawAndRestake()": FunctionFragment;
    "withdrawRewards()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "cumulativeStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "delegateToStaker",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "emissionRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeUnstake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVoterFromDelegate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoterPendingStake",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoterStakePostUpdate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lastUpdateTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "outstandingRewards",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestUnstake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPerToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPerTokenStored",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setDelegate", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setDelegator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setEmissionRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUnstakeCoolDown",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "stakeTo",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unstakeCoolDown",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "voterStakes", values: [string]): string;
  encodeFunctionData(
    functionFragment: "votingToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAndRestake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawRewards",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "cumulativeStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegateToStaker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emissionRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeUnstake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoterFromDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoterPendingStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoterStakePostUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastUpdateTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "outstandingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestUnstake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerTokenStored",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDelegator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEmissionRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUnstakeCoolDown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unstakeCoolDown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voterStakes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAndRestake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRewards",
    data: BytesLike
  ): Result;

  events: {
    "DelegateSet(address,address)": EventFragment;
    "DelegatorSet(address,address)": EventFragment;
    "ExecutedUnstake(address,uint128,uint128)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RequestedUnstake(address,uint128,uint64,uint128)": EventFragment;
    "SetNewEmissionRate(uint128)": EventFragment;
    "SetNewUnstakeCoolDown(uint64)": EventFragment;
    "Staked(address,address,uint128,uint128,uint128,uint128)": EventFragment;
    "UpdatedReward(address,uint128,uint64)": EventFragment;
    "WithdrawnRewards(address,address,uint128)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DelegateSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DelegatorSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecutedUnstake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestedUnstake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetNewEmissionRate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetNewUnstakeCoolDown"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawnRewards"): EventFragment;
}

export type DelegateSetEvent = TypedEvent<
  [string, string] & { delegator: string; delegate: string }
>;

export type DelegatorSetEvent = TypedEvent<
  [string, string] & { delegate: string; delegator: string }
>;

export type ExecutedUnstakeEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    voter: string;
    tokensSent: BigNumber;
    voterStake: BigNumber;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type RequestedUnstakeEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber] & {
    voter: string;
    amount: BigNumber;
    unstakeTime: BigNumber;
    voterStake: BigNumber;
  }
>;

export type SetNewEmissionRateEvent = TypedEvent<
  [BigNumber] & { newEmissionRate: BigNumber }
>;

export type SetNewUnstakeCoolDownEvent = TypedEvent<
  [BigNumber] & { newUnstakeCoolDown: BigNumber }
>;

export type StakedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
    voter: string;
    from: string;
    amount: BigNumber;
    voterStake: BigNumber;
    voterPendingUnstake: BigNumber;
    cumulativeStake: BigNumber;
  }
>;

export type UpdatedRewardEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    voter: string;
    newReward: BigNumber;
    lastUpdateTime: BigNumber;
  }
>;

export type WithdrawnRewardsEvent = TypedEvent<
  [string, string, BigNumber] & {
    voter: string;
    delegate: string;
    tokensWithdrawn: BigNumber;
  }
>;

export class Staker extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: StakerInterface;

  functions: {
    cumulativeStake(overrides?: CallOverrides): Promise<[BigNumber]>;

    delegateToStaker(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    emissionRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    executeUnstake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCurrentTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    getVoterFromDelegate(
      caller: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getVoterPendingStake(
      voter: string,
      roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getVoterStakePostUpdate(
      voter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lastUpdateTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    outstandingRewards(
      voter: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestUnstake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardPerToken(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardPerTokenStored(overrides?: CallOverrides): Promise<[BigNumber]>;

    setDelegate(
      delegate: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDelegator(
      delegator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEmissionRate(
      newEmissionRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUnstakeCoolDown(
      newUnstakeCoolDown: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakeTo(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unstakeCoolDown(overrides?: CallOverrides): Promise<[BigNumber]>;

    voterStakes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        stake: BigNumber;
        pendingUnstake: BigNumber;
        rewardsPaidPerToken: BigNumber;
        outstandingRewards: BigNumber;
        unappliedSlash: BigNumber;
        nextIndexToProcess: BigNumber;
        unstakeTime: BigNumber;
        delegate: string;
      }
    >;

    votingToken(overrides?: CallOverrides): Promise<[string]>;

    withdrawAndRestake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  cumulativeStake(overrides?: CallOverrides): Promise<BigNumber>;

  delegateToStaker(arg0: string, overrides?: CallOverrides): Promise<string>;

  emissionRate(overrides?: CallOverrides): Promise<BigNumber>;

  executeUnstake(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

  getVoterFromDelegate(
    caller: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getVoterPendingStake(
    voter: string,
    roundId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVoterStakePostUpdate(
    voter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

  multicall(
    data: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  outstandingRewards(
    voter: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestUnstake(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardPerToken(overrides?: CallOverrides): Promise<BigNumber>;

  rewardPerTokenStored(overrides?: CallOverrides): Promise<BigNumber>;

  setDelegate(
    delegate: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDelegator(
    delegator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEmissionRate(
    newEmissionRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUnstakeCoolDown(
    newUnstakeCoolDown: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stake(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakeTo(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unstakeCoolDown(overrides?: CallOverrides): Promise<BigNumber>;

  voterStakes(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string
    ] & {
      stake: BigNumber;
      pendingUnstake: BigNumber;
      rewardsPaidPerToken: BigNumber;
      outstandingRewards: BigNumber;
      unappliedSlash: BigNumber;
      nextIndexToProcess: BigNumber;
      unstakeTime: BigNumber;
      delegate: string;
    }
  >;

  votingToken(overrides?: CallOverrides): Promise<string>;

  withdrawAndRestake(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawRewards(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    cumulativeStake(overrides?: CallOverrides): Promise<BigNumber>;

    delegateToStaker(arg0: string, overrides?: CallOverrides): Promise<string>;

    emissionRate(overrides?: CallOverrides): Promise<BigNumber>;

    executeUnstake(overrides?: CallOverrides): Promise<void>;

    getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

    getVoterFromDelegate(
      caller: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getVoterPendingStake(
      voter: string,
      roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoterStakePostUpdate(
      voter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

    multicall(data: BytesLike[], overrides?: CallOverrides): Promise<string[]>;

    outstandingRewards(
      voter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    requestUnstake(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    rewardPerToken(overrides?: CallOverrides): Promise<BigNumber>;

    rewardPerTokenStored(overrides?: CallOverrides): Promise<BigNumber>;

    setDelegate(delegate: string, overrides?: CallOverrides): Promise<void>;

    setDelegator(delegator: string, overrides?: CallOverrides): Promise<void>;

    setEmissionRate(
      newEmissionRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setUnstakeCoolDown(
      newUnstakeCoolDown: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    stakeTo(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unstakeCoolDown(overrides?: CallOverrides): Promise<BigNumber>;

    voterStakes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        stake: BigNumber;
        pendingUnstake: BigNumber;
        rewardsPaidPerToken: BigNumber;
        outstandingRewards: BigNumber;
        unappliedSlash: BigNumber;
        nextIndexToProcess: BigNumber;
        unstakeTime: BigNumber;
        delegate: string;
      }
    >;

    votingToken(overrides?: CallOverrides): Promise<string>;

    withdrawAndRestake(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawRewards(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "DelegateSet(address,address)"(
      delegator?: string | null,
      delegate?: string | null
    ): TypedEventFilter<
      [string, string],
      { delegator: string; delegate: string }
    >;

    DelegateSet(
      delegator?: string | null,
      delegate?: string | null
    ): TypedEventFilter<
      [string, string],
      { delegator: string; delegate: string }
    >;

    "DelegatorSet(address,address)"(
      delegate?: string | null,
      delegator?: string | null
    ): TypedEventFilter<
      [string, string],
      { delegate: string; delegator: string }
    >;

    DelegatorSet(
      delegate?: string | null,
      delegator?: string | null
    ): TypedEventFilter<
      [string, string],
      { delegate: string; delegator: string }
    >;

    "ExecutedUnstake(address,uint128,uint128)"(
      voter?: string | null,
      tokensSent?: null,
      voterStake?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { voter: string; tokensSent: BigNumber; voterStake: BigNumber }
    >;

    ExecutedUnstake(
      voter?: string | null,
      tokensSent?: null,
      voterStake?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { voter: string; tokensSent: BigNumber; voterStake: BigNumber }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "RequestedUnstake(address,uint128,uint64,uint128)"(
      voter?: string | null,
      amount?: null,
      unstakeTime?: null,
      voterStake?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        voter: string;
        amount: BigNumber;
        unstakeTime: BigNumber;
        voterStake: BigNumber;
      }
    >;

    RequestedUnstake(
      voter?: string | null,
      amount?: null,
      unstakeTime?: null,
      voterStake?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        voter: string;
        amount: BigNumber;
        unstakeTime: BigNumber;
        voterStake: BigNumber;
      }
    >;

    "SetNewEmissionRate(uint128)"(
      newEmissionRate?: null
    ): TypedEventFilter<[BigNumber], { newEmissionRate: BigNumber }>;

    SetNewEmissionRate(
      newEmissionRate?: null
    ): TypedEventFilter<[BigNumber], { newEmissionRate: BigNumber }>;

    "SetNewUnstakeCoolDown(uint64)"(
      newUnstakeCoolDown?: null
    ): TypedEventFilter<[BigNumber], { newUnstakeCoolDown: BigNumber }>;

    SetNewUnstakeCoolDown(
      newUnstakeCoolDown?: null
    ): TypedEventFilter<[BigNumber], { newUnstakeCoolDown: BigNumber }>;

    "Staked(address,address,uint128,uint128,uint128,uint128)"(
      voter?: string | null,
      from?: string | null,
      amount?: null,
      voterStake?: null,
      voterPendingUnstake?: null,
      cumulativeStake?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        voter: string;
        from: string;
        amount: BigNumber;
        voterStake: BigNumber;
        voterPendingUnstake: BigNumber;
        cumulativeStake: BigNumber;
      }
    >;

    Staked(
      voter?: string | null,
      from?: string | null,
      amount?: null,
      voterStake?: null,
      voterPendingUnstake?: null,
      cumulativeStake?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        voter: string;
        from: string;
        amount: BigNumber;
        voterStake: BigNumber;
        voterPendingUnstake: BigNumber;
        cumulativeStake: BigNumber;
      }
    >;

    "UpdatedReward(address,uint128,uint64)"(
      voter?: string | null,
      newReward?: null,
      lastUpdateTime?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { voter: string; newReward: BigNumber; lastUpdateTime: BigNumber }
    >;

    UpdatedReward(
      voter?: string | null,
      newReward?: null,
      lastUpdateTime?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { voter: string; newReward: BigNumber; lastUpdateTime: BigNumber }
    >;

    "WithdrawnRewards(address,address,uint128)"(
      voter?: string | null,
      delegate?: string | null,
      tokensWithdrawn?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { voter: string; delegate: string; tokensWithdrawn: BigNumber }
    >;

    WithdrawnRewards(
      voter?: string | null,
      delegate?: string | null,
      tokensWithdrawn?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { voter: string; delegate: string; tokensWithdrawn: BigNumber }
    >;
  };

  estimateGas: {
    cumulativeStake(overrides?: CallOverrides): Promise<BigNumber>;

    delegateToStaker(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    emissionRate(overrides?: CallOverrides): Promise<BigNumber>;

    executeUnstake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

    getVoterFromDelegate(
      caller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoterPendingStake(
      voter: string,
      roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoterStakePostUpdate(
      voter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    outstandingRewards(
      voter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestUnstake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardPerToken(overrides?: CallOverrides): Promise<BigNumber>;

    rewardPerTokenStored(overrides?: CallOverrides): Promise<BigNumber>;

    setDelegate(
      delegate: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDelegator(
      delegator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEmissionRate(
      newEmissionRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUnstakeCoolDown(
      newUnstakeCoolDown: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakeTo(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unstakeCoolDown(overrides?: CallOverrides): Promise<BigNumber>;

    voterStakes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    votingToken(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawAndRestake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cumulativeStake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delegateToStaker(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emissionRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executeUnstake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCurrentTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVoterFromDelegate(
      caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVoterPendingStake(
      voter: string,
      roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVoterStakePostUpdate(
      voter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lastUpdateTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    outstandingRewards(
      voter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestUnstake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardPerToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardPerTokenStored(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setDelegate(
      delegate: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDelegator(
      delegator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEmissionRate(
      newEmissionRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUnstakeCoolDown(
      newUnstakeCoolDown: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakeTo(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unstakeCoolDown(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    voterStakes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    votingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawAndRestake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
