/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface OptimisticOracleV3InterfaceInterface extends ethers.utils.Interface {
  functions: {
    "assertTruth(bytes,address,address,address,uint64,address,uint256,bytes32,bytes32)": FunctionFragment;
    "assertTruthWithDefaults(bytes,address)": FunctionFragment;
    "defaultIdentifier()": FunctionFragment;
    "getAssertion(bytes32)": FunctionFragment;
    "getAssertionResult(bytes32)": FunctionFragment;
    "getMinimumBond(address)": FunctionFragment;
    "settleAndGetAssertionResult(bytes32)": FunctionFragment;
    "settleAssertion(bytes32)": FunctionFragment;
    "syncUmaParams(bytes32,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "assertTruth",
    values: [
      BytesLike,
      string,
      string,
      string,
      BigNumberish,
      string,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "assertTruthWithDefaults",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultIdentifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAssertion",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAssertionResult",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinimumBond",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "settleAndGetAssertionResult",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "settleAssertion",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "syncUmaParams",
    values: [BytesLike, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "assertTruth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assertTruthWithDefaults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultIdentifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssertion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssertionResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinimumBond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleAndGetAssertionResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleAssertion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "syncUmaParams",
    data: BytesLike
  ): Result;

  events: {
    "AdminPropertiesSet(address,uint64,uint256)": EventFragment;
    "AssertionDisputed(bytes32,address,address)": EventFragment;
    "AssertionMade(bytes32,bytes32,bytes,address,address,address,address,uint64,address,uint256,bytes32)": EventFragment;
    "AssertionSettled(bytes32,address,bool,bool,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminPropertiesSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssertionDisputed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssertionMade"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssertionSettled"): EventFragment;
}

export type AdminPropertiesSetEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    defaultCurrency: string;
    defaultLiveness: BigNumber;
    burnedBondPercentage: BigNumber;
  }
>;

export type AssertionDisputedEvent = TypedEvent<
  [string, string, string] & {
    assertionId: string;
    caller: string;
    disputer: string;
  }
>;

export type AssertionMadeEvent = TypedEvent<
  [
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    BigNumber,
    string,
    BigNumber,
    string
  ] & {
    assertionId: string;
    domainId: string;
    claim: string;
    asserter: string;
    callbackRecipient: string;
    escalationManager: string;
    caller: string;
    expirationTime: BigNumber;
    currency: string;
    bond: BigNumber;
    identifier: string;
  }
>;

export type AssertionSettledEvent = TypedEvent<
  [string, string, boolean, boolean, string] & {
    assertionId: string;
    bondRecipient: string;
    disputed: boolean;
    settlementResolution: boolean;
    settleCaller: string;
  }
>;

export class OptimisticOracleV3Interface extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: OptimisticOracleV3InterfaceInterface;

  functions: {
    assertTruth(
      claim: BytesLike,
      asserter: string,
      callbackRecipient: string,
      escalationManager: string,
      liveness: BigNumberish,
      currency: string,
      bond: BigNumberish,
      identifier: BytesLike,
      domainId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    assertTruthWithDefaults(
      claim: BytesLike,
      asserter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    defaultIdentifier(overrides?: CallOverrides): Promise<[string]>;

    getAssertion(
      assertionId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [boolean, boolean, boolean, string, string] & {
            arbitrateViaEscalationManager: boolean;
            discardOracle: boolean;
            validateDisputers: boolean;
            assertingCaller: string;
            escalationManager: string;
          },
          string,
          BigNumber,
          boolean,
          string,
          BigNumber,
          boolean,
          string,
          string,
          BigNumber,
          string,
          string
        ] & {
          escalationManagerSettings: [
            boolean,
            boolean,
            boolean,
            string,
            string
          ] & {
            arbitrateViaEscalationManager: boolean;
            discardOracle: boolean;
            validateDisputers: boolean;
            assertingCaller: string;
            escalationManager: string;
          };
          asserter: string;
          assertionTime: BigNumber;
          settled: boolean;
          currency: string;
          expirationTime: BigNumber;
          settlementResolution: boolean;
          domainId: string;
          identifier: string;
          bond: BigNumber;
          callbackRecipient: string;
          disputer: string;
        }
      ]
    >;

    getAssertionResult(
      assertionId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getMinimumBond(
      currency: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    settleAndGetAssertionResult(
      assertionId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settleAssertion(
      assertionId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    syncUmaParams(
      identifier: BytesLike,
      currency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  assertTruth(
    claim: BytesLike,
    asserter: string,
    callbackRecipient: string,
    escalationManager: string,
    liveness: BigNumberish,
    currency: string,
    bond: BigNumberish,
    identifier: BytesLike,
    domainId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  assertTruthWithDefaults(
    claim: BytesLike,
    asserter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  defaultIdentifier(overrides?: CallOverrides): Promise<string>;

  getAssertion(
    assertionId: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      [boolean, boolean, boolean, string, string] & {
        arbitrateViaEscalationManager: boolean;
        discardOracle: boolean;
        validateDisputers: boolean;
        assertingCaller: string;
        escalationManager: string;
      },
      string,
      BigNumber,
      boolean,
      string,
      BigNumber,
      boolean,
      string,
      string,
      BigNumber,
      string,
      string
    ] & {
      escalationManagerSettings: [boolean, boolean, boolean, string, string] & {
        arbitrateViaEscalationManager: boolean;
        discardOracle: boolean;
        validateDisputers: boolean;
        assertingCaller: string;
        escalationManager: string;
      };
      asserter: string;
      assertionTime: BigNumber;
      settled: boolean;
      currency: string;
      expirationTime: BigNumber;
      settlementResolution: boolean;
      domainId: string;
      identifier: string;
      bond: BigNumber;
      callbackRecipient: string;
      disputer: string;
    }
  >;

  getAssertionResult(
    assertionId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getMinimumBond(
    currency: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  settleAndGetAssertionResult(
    assertionId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settleAssertion(
    assertionId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  syncUmaParams(
    identifier: BytesLike,
    currency: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    assertTruth(
      claim: BytesLike,
      asserter: string,
      callbackRecipient: string,
      escalationManager: string,
      liveness: BigNumberish,
      currency: string,
      bond: BigNumberish,
      identifier: BytesLike,
      domainId: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    assertTruthWithDefaults(
      claim: BytesLike,
      asserter: string,
      overrides?: CallOverrides
    ): Promise<string>;

    defaultIdentifier(overrides?: CallOverrides): Promise<string>;

    getAssertion(
      assertionId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [boolean, boolean, boolean, string, string] & {
          arbitrateViaEscalationManager: boolean;
          discardOracle: boolean;
          validateDisputers: boolean;
          assertingCaller: string;
          escalationManager: string;
        },
        string,
        BigNumber,
        boolean,
        string,
        BigNumber,
        boolean,
        string,
        string,
        BigNumber,
        string,
        string
      ] & {
        escalationManagerSettings: [
          boolean,
          boolean,
          boolean,
          string,
          string
        ] & {
          arbitrateViaEscalationManager: boolean;
          discardOracle: boolean;
          validateDisputers: boolean;
          assertingCaller: string;
          escalationManager: string;
        };
        asserter: string;
        assertionTime: BigNumber;
        settled: boolean;
        currency: string;
        expirationTime: BigNumber;
        settlementResolution: boolean;
        domainId: string;
        identifier: string;
        bond: BigNumber;
        callbackRecipient: string;
        disputer: string;
      }
    >;

    getAssertionResult(
      assertionId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getMinimumBond(
      currency: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    settleAndGetAssertionResult(
      assertionId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    settleAssertion(
      assertionId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    syncUmaParams(
      identifier: BytesLike,
      currency: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminPropertiesSet(address,uint64,uint256)"(
      defaultCurrency?: null,
      defaultLiveness?: null,
      burnedBondPercentage?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      {
        defaultCurrency: string;
        defaultLiveness: BigNumber;
        burnedBondPercentage: BigNumber;
      }
    >;

    AdminPropertiesSet(
      defaultCurrency?: null,
      defaultLiveness?: null,
      burnedBondPercentage?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      {
        defaultCurrency: string;
        defaultLiveness: BigNumber;
        burnedBondPercentage: BigNumber;
      }
    >;

    "AssertionDisputed(bytes32,address,address)"(
      assertionId?: BytesLike | null,
      caller?: string | null,
      disputer?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { assertionId: string; caller: string; disputer: string }
    >;

    AssertionDisputed(
      assertionId?: BytesLike | null,
      caller?: string | null,
      disputer?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { assertionId: string; caller: string; disputer: string }
    >;

    "AssertionMade(bytes32,bytes32,bytes,address,address,address,address,uint64,address,uint256,bytes32)"(
      assertionId?: BytesLike | null,
      domainId?: null,
      claim?: null,
      asserter?: string | null,
      callbackRecipient?: null,
      escalationManager?: null,
      caller?: null,
      expirationTime?: null,
      currency?: null,
      bond?: null,
      identifier?: BytesLike | null
    ): TypedEventFilter<
      [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        BigNumber,
        string,
        BigNumber,
        string
      ],
      {
        assertionId: string;
        domainId: string;
        claim: string;
        asserter: string;
        callbackRecipient: string;
        escalationManager: string;
        caller: string;
        expirationTime: BigNumber;
        currency: string;
        bond: BigNumber;
        identifier: string;
      }
    >;

    AssertionMade(
      assertionId?: BytesLike | null,
      domainId?: null,
      claim?: null,
      asserter?: string | null,
      callbackRecipient?: null,
      escalationManager?: null,
      caller?: null,
      expirationTime?: null,
      currency?: null,
      bond?: null,
      identifier?: BytesLike | null
    ): TypedEventFilter<
      [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        BigNumber,
        string,
        BigNumber,
        string
      ],
      {
        assertionId: string;
        domainId: string;
        claim: string;
        asserter: string;
        callbackRecipient: string;
        escalationManager: string;
        caller: string;
        expirationTime: BigNumber;
        currency: string;
        bond: BigNumber;
        identifier: string;
      }
    >;

    "AssertionSettled(bytes32,address,bool,bool,address)"(
      assertionId?: BytesLike | null,
      bondRecipient?: string | null,
      disputed?: null,
      settlementResolution?: null,
      settleCaller?: null
    ): TypedEventFilter<
      [string, string, boolean, boolean, string],
      {
        assertionId: string;
        bondRecipient: string;
        disputed: boolean;
        settlementResolution: boolean;
        settleCaller: string;
      }
    >;

    AssertionSettled(
      assertionId?: BytesLike | null,
      bondRecipient?: string | null,
      disputed?: null,
      settlementResolution?: null,
      settleCaller?: null
    ): TypedEventFilter<
      [string, string, boolean, boolean, string],
      {
        assertionId: string;
        bondRecipient: string;
        disputed: boolean;
        settlementResolution: boolean;
        settleCaller: string;
      }
    >;
  };

  estimateGas: {
    assertTruth(
      claim: BytesLike,
      asserter: string,
      callbackRecipient: string,
      escalationManager: string,
      liveness: BigNumberish,
      currency: string,
      bond: BigNumberish,
      identifier: BytesLike,
      domainId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    assertTruthWithDefaults(
      claim: BytesLike,
      asserter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    defaultIdentifier(overrides?: CallOverrides): Promise<BigNumber>;

    getAssertion(
      assertionId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAssertionResult(
      assertionId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinimumBond(
      currency: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    settleAndGetAssertionResult(
      assertionId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settleAssertion(
      assertionId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    syncUmaParams(
      identifier: BytesLike,
      currency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    assertTruth(
      claim: BytesLike,
      asserter: string,
      callbackRecipient: string,
      escalationManager: string,
      liveness: BigNumberish,
      currency: string,
      bond: BigNumberish,
      identifier: BytesLike,
      domainId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    assertTruthWithDefaults(
      claim: BytesLike,
      asserter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    defaultIdentifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAssertion(
      assertionId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAssertionResult(
      assertionId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinimumBond(
      currency: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    settleAndGetAssertionResult(
      assertionId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settleAssertion(
      assertionId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    syncUmaParams(
      identifier: BytesLike,
      currency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
