/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type InsuranceIssued = ContractEventLog<{
  policyId: string;
  insuredEvent: string;
  insuranceAmount: string;
  payoutAddress: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type InsurancePayoutRequested = ContractEventLog<{
  policyId: string;
  assertionId: string;
  0: string;
  1: string;
}>;
export type InsurancePayoutSettled = ContractEventLog<{
  policyId: string;
  assertionId: string;
  0: string;
  1: string;
}>;

export interface Insurance extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): Insurance;
  clone(): Insurance;
  methods: {
    assertedPolicies(
      arg0: string | number[]
    ): NonPayableTransactionObject<string>;

    assertionDisputedCallback(
      assertionId: string | number[]
    ): NonPayableTransactionObject<void>;

    assertionLiveness(): NonPayableTransactionObject<string>;

    assertionResolvedCallback(
      assertionId: string | number[],
      assertedTruthfully: boolean
    ): NonPayableTransactionObject<void>;

    defaultCurrency(): NonPayableTransactionObject<string>;

    defaultIdentifier(): NonPayableTransactionObject<string>;

    issueInsurance(
      insuranceAmount: number | string | BN,
      payoutAddress: string,
      insuredEvent: string | number[]
    ): NonPayableTransactionObject<string>;

    oo(): NonPayableTransactionObject<string>;

    policies(arg0: string | number[]): NonPayableTransactionObject<{
      insuranceAmount: string;
      payoutAddress: string;
      insuredEvent: string;
      settled: boolean;
      0: string;
      1: string;
      2: string;
      3: boolean;
    }>;

    requestPayout(
      policyId: string | number[]
    ): NonPayableTransactionObject<string>;
  };
  events: {
    InsuranceIssued(cb?: Callback<InsuranceIssued>): EventEmitter;
    InsuranceIssued(
      options?: EventOptions,
      cb?: Callback<InsuranceIssued>
    ): EventEmitter;

    InsurancePayoutRequested(
      cb?: Callback<InsurancePayoutRequested>
    ): EventEmitter;
    InsurancePayoutRequested(
      options?: EventOptions,
      cb?: Callback<InsurancePayoutRequested>
    ): EventEmitter;

    InsurancePayoutSettled(cb?: Callback<InsurancePayoutSettled>): EventEmitter;
    InsurancePayoutSettled(
      options?: EventOptions,
      cb?: Callback<InsurancePayoutSettled>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "InsuranceIssued", cb: Callback<InsuranceIssued>): void;
  once(
    event: "InsuranceIssued",
    options: EventOptions,
    cb: Callback<InsuranceIssued>
  ): void;

  once(
    event: "InsurancePayoutRequested",
    cb: Callback<InsurancePayoutRequested>
  ): void;
  once(
    event: "InsurancePayoutRequested",
    options: EventOptions,
    cb: Callback<InsurancePayoutRequested>
  ): void;

  once(
    event: "InsurancePayoutSettled",
    cb: Callback<InsurancePayoutSettled>
  ): void;
  once(
    event: "InsurancePayoutSettled",
    options: EventOptions,
    cb: Callback<InsurancePayoutSettled>
  ): void;
}
