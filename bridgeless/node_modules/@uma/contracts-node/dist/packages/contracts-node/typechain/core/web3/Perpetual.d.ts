/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Deposit = ContractEventLog<{
  sponsor: string;
  collateralAmount: string;
  0: string;
  1: string;
}>;
export type DisputeSettled = ContractEventLog<{
  caller: string;
  sponsor: string;
  liquidator: string;
  disputer: string;
  liquidationId: string;
  disputeSucceeded: boolean;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: boolean;
}>;
export type EmergencyShutdown = ContractEventLog<{
  caller: string;
  shutdownTimestamp: string;
  0: string;
  1: string;
}>;
export type EndedSponsorPosition = ContractEventLog<{
  sponsor: string;
  0: string;
}>;
export type FinalFeesPaid = ContractEventLog<{
  amount: string;
  0: string;
}>;
export type FundingRateUpdated = ContractEventLog<{
  newFundingRate: string;
  updateTime: string;
  reward: string;
  0: string;
  1: string;
  2: string;
}>;
export type LiquidationCreated = ContractEventLog<{
  sponsor: string;
  liquidator: string;
  liquidationId: string;
  tokensOutstanding: string;
  lockedCollateral: string;
  liquidatedCollateral: string;
  liquidationTime: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
  6: string;
}>;
export type LiquidationDisputed = ContractEventLog<{
  sponsor: string;
  liquidator: string;
  disputer: string;
  liquidationId: string;
  disputeBondAmount: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;
export type LiquidationWithdrawn = ContractEventLog<{
  caller: string;
  paidToLiquidator: string;
  paidToDisputer: string;
  paidToSponsor: string;
  liquidationStatus: string;
  settlementPrice: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
}>;
export type NewSponsor = ContractEventLog<{
  sponsor: string;
  0: string;
}>;
export type PositionCreated = ContractEventLog<{
  sponsor: string;
  collateralAmount: string;
  tokenAmount: string;
  0: string;
  1: string;
  2: string;
}>;
export type Redeem = ContractEventLog<{
  sponsor: string;
  collateralAmount: string;
  tokenAmount: string;
  0: string;
  1: string;
  2: string;
}>;
export type RegularFeesPaid = ContractEventLog<{
  regularFee: string;
  lateFee: string;
  0: string;
  1: string;
}>;
export type Repay = ContractEventLog<{
  sponsor: string;
  numTokensRepaid: string;
  newTokenCount: string;
  0: string;
  1: string;
  2: string;
}>;
export type RequestWithdrawal = ContractEventLog<{
  sponsor: string;
  collateralAmount: string;
  0: string;
  1: string;
}>;
export type RequestWithdrawalCanceled = ContractEventLog<{
  sponsor: string;
  collateralAmount: string;
  0: string;
  1: string;
}>;
export type RequestWithdrawalExecuted = ContractEventLog<{
  sponsor: string;
  collateralAmount: string;
  0: string;
  1: string;
}>;
export type SettleEmergencyShutdown = ContractEventLog<{
  caller: string;
  collateralReturned: string;
  tokensBurned: string;
  0: string;
  1: string;
  2: string;
}>;
export type Withdrawal = ContractEventLog<{
  sponsor: string;
  collateralAmount: string;
  0: string;
  1: string;
}>;

export interface Perpetual extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): Perpetual;
  clone(): Perpetual;
  methods: {
    applyFundingRate(): NonPayableTransactionObject<void>;

    cancelWithdrawal(): NonPayableTransactionObject<void>;

    collateralCurrency(): NonPayableTransactionObject<string>;

    collateralRequirement(): NonPayableTransactionObject<string>;

    configStore(): NonPayableTransactionObject<string>;

    create(
      collateralAmount: [number | string | BN],
      numTokens: [number | string | BN]
    ): NonPayableTransactionObject<void>;

    createLiquidation(
      sponsor: string,
      minCollateralPerToken: [number | string | BN],
      maxCollateralPerToken: [number | string | BN],
      maxTokensToLiquidate: [number | string | BN],
      deadline: number | string | BN
    ): NonPayableTransactionObject<{
      liquidationId: string;
      tokensLiquidated: [string];
      finalFeeBond: [string];
      0: string;
      1: [string];
      2: [string];
    }>;

    cumulativeFeeMultiplier(): NonPayableTransactionObject<string>;

    deposit(
      collateralAmount: [number | string | BN]
    ): NonPayableTransactionObject<void>;

    depositTo(
      sponsor: string,
      collateralAmount: [number | string | BN]
    ): NonPayableTransactionObject<void>;

    dispute(
      liquidationId: number | string | BN,
      sponsor: string
    ): NonPayableTransactionObject<[string]>;

    disputeBondPercentage(): NonPayableTransactionObject<string>;

    disputerDisputeRewardPercentage(): NonPayableTransactionObject<string>;

    emergencyShutdown(): NonPayableTransactionObject<void>;

    emergencyShutdownPrice(): NonPayableTransactionObject<string>;

    emergencyShutdownTimestamp(): NonPayableTransactionObject<string>;

    finder(): NonPayableTransactionObject<string>;

    fundingRate(): NonPayableTransactionObject<{
      rate: [string];
      identifier: string;
      cumulativeMultiplier: [string];
      updateTime: string;
      applicationTime: string;
      proposalTime: string;
      0: [string];
      1: string;
      2: [string];
      3: string;
      4: string;
      5: string;
    }>;

    getCollateral(sponsor: string): NonPayableTransactionObject<[string]>;

    getCurrentTime(): NonPayableTransactionObject<string>;

    getFundingRateAppliedTokenDebt(
      rawTokenDebt: [number | string | BN]
    ): NonPayableTransactionObject<[string]>;

    getLiquidations(
      sponsor: string
    ): NonPayableTransactionObject<
      [
        string,
        string,
        string,
        string,
        [string],
        [string],
        [string],
        [string],
        string,
        [string],
        [string]
      ][]
    >;

    getOutstandingRegularFees(
      time: number | string | BN
    ): NonPayableTransactionObject<{
      regularFee: [string];
      latePenalty: [string];
      totalPaid: [string];
      0: [string];
      1: [string];
      2: [string];
    }>;

    gulp(): NonPayableTransactionObject<void>;

    liquidationLiveness(): NonPayableTransactionObject<string>;

    liquidations(
      arg0: string,
      arg1: number | string | BN
    ): NonPayableTransactionObject<{
      sponsor: string;
      liquidator: string;
      state: string;
      liquidationTime: string;
      tokensOutstanding: [string];
      lockedCollateral: [string];
      liquidatedCollateral: [string];
      rawUnitCollateral: [string];
      disputer: string;
      settlementPrice: [string];
      finalFee: [string];
      0: string;
      1: string;
      2: string;
      3: string;
      4: [string];
      5: [string];
      6: [string];
      7: [string];
      8: string;
      9: [string];
      10: [string];
    }>;

    minSponsorTokens(): NonPayableTransactionObject<string>;

    payRegularFees(): NonPayableTransactionObject<[string]>;

    pfc(): NonPayableTransactionObject<[string]>;

    positions(arg0: string): NonPayableTransactionObject<{
      tokensOutstanding: [string];
      withdrawalRequestPassTimestamp: string;
      withdrawalRequestAmount: [string];
      rawCollateral: [string];
      0: [string];
      1: string;
      2: [string];
      3: [string];
    }>;

    priceIdentifier(): NonPayableTransactionObject<string>;

    proposeFundingRate(
      rate: [number | string | BN],
      timestamp: number | string | BN
    ): NonPayableTransactionObject<[string]>;

    rawLiquidationCollateral(): NonPayableTransactionObject<string>;

    rawTotalPositionCollateral(): NonPayableTransactionObject<string>;

    redeem(
      numTokens: [number | string | BN]
    ): NonPayableTransactionObject<[string]>;

    remargin(): NonPayableTransactionObject<void>;

    repay(numTokens: [number | string | BN]): NonPayableTransactionObject<void>;

    requestWithdrawal(
      collateralAmount: [number | string | BN]
    ): NonPayableTransactionObject<void>;

    setCurrentTime(
      time: number | string | BN
    ): NonPayableTransactionObject<void>;

    settleEmergencyShutdown(): NonPayableTransactionObject<[string]>;

    sponsorDisputeRewardPercentage(): NonPayableTransactionObject<string>;

    timerAddress(): NonPayableTransactionObject<string>;

    tokenCurrency(): NonPayableTransactionObject<string>;

    totalPositionCollateral(): NonPayableTransactionObject<[string]>;

    totalTokensOutstanding(): NonPayableTransactionObject<string>;

    withdraw(
      collateralAmount: [number | string | BN]
    ): NonPayableTransactionObject<[string]>;

    withdrawLiquidation(
      liquidationId: number | string | BN,
      sponsor: string
    ): NonPayableTransactionObject<
      [[string], [string], [string], [string], [string], [string]]
    >;

    withdrawPassedRequest(): NonPayableTransactionObject<[string]>;

    withdrawalLiveness(): NonPayableTransactionObject<string>;
  };
  events: {
    Deposit(cb?: Callback<Deposit>): EventEmitter;
    Deposit(options?: EventOptions, cb?: Callback<Deposit>): EventEmitter;

    DisputeSettled(cb?: Callback<DisputeSettled>): EventEmitter;
    DisputeSettled(
      options?: EventOptions,
      cb?: Callback<DisputeSettled>
    ): EventEmitter;

    EmergencyShutdown(cb?: Callback<EmergencyShutdown>): EventEmitter;
    EmergencyShutdown(
      options?: EventOptions,
      cb?: Callback<EmergencyShutdown>
    ): EventEmitter;

    EndedSponsorPosition(cb?: Callback<EndedSponsorPosition>): EventEmitter;
    EndedSponsorPosition(
      options?: EventOptions,
      cb?: Callback<EndedSponsorPosition>
    ): EventEmitter;

    FinalFeesPaid(cb?: Callback<FinalFeesPaid>): EventEmitter;
    FinalFeesPaid(
      options?: EventOptions,
      cb?: Callback<FinalFeesPaid>
    ): EventEmitter;

    FundingRateUpdated(cb?: Callback<FundingRateUpdated>): EventEmitter;
    FundingRateUpdated(
      options?: EventOptions,
      cb?: Callback<FundingRateUpdated>
    ): EventEmitter;

    LiquidationCreated(cb?: Callback<LiquidationCreated>): EventEmitter;
    LiquidationCreated(
      options?: EventOptions,
      cb?: Callback<LiquidationCreated>
    ): EventEmitter;

    LiquidationDisputed(cb?: Callback<LiquidationDisputed>): EventEmitter;
    LiquidationDisputed(
      options?: EventOptions,
      cb?: Callback<LiquidationDisputed>
    ): EventEmitter;

    LiquidationWithdrawn(cb?: Callback<LiquidationWithdrawn>): EventEmitter;
    LiquidationWithdrawn(
      options?: EventOptions,
      cb?: Callback<LiquidationWithdrawn>
    ): EventEmitter;

    NewSponsor(cb?: Callback<NewSponsor>): EventEmitter;
    NewSponsor(options?: EventOptions, cb?: Callback<NewSponsor>): EventEmitter;

    PositionCreated(cb?: Callback<PositionCreated>): EventEmitter;
    PositionCreated(
      options?: EventOptions,
      cb?: Callback<PositionCreated>
    ): EventEmitter;

    Redeem(cb?: Callback<Redeem>): EventEmitter;
    Redeem(options?: EventOptions, cb?: Callback<Redeem>): EventEmitter;

    RegularFeesPaid(cb?: Callback<RegularFeesPaid>): EventEmitter;
    RegularFeesPaid(
      options?: EventOptions,
      cb?: Callback<RegularFeesPaid>
    ): EventEmitter;

    Repay(cb?: Callback<Repay>): EventEmitter;
    Repay(options?: EventOptions, cb?: Callback<Repay>): EventEmitter;

    RequestWithdrawal(cb?: Callback<RequestWithdrawal>): EventEmitter;
    RequestWithdrawal(
      options?: EventOptions,
      cb?: Callback<RequestWithdrawal>
    ): EventEmitter;

    RequestWithdrawalCanceled(
      cb?: Callback<RequestWithdrawalCanceled>
    ): EventEmitter;
    RequestWithdrawalCanceled(
      options?: EventOptions,
      cb?: Callback<RequestWithdrawalCanceled>
    ): EventEmitter;

    RequestWithdrawalExecuted(
      cb?: Callback<RequestWithdrawalExecuted>
    ): EventEmitter;
    RequestWithdrawalExecuted(
      options?: EventOptions,
      cb?: Callback<RequestWithdrawalExecuted>
    ): EventEmitter;

    SettleEmergencyShutdown(
      cb?: Callback<SettleEmergencyShutdown>
    ): EventEmitter;
    SettleEmergencyShutdown(
      options?: EventOptions,
      cb?: Callback<SettleEmergencyShutdown>
    ): EventEmitter;

    Withdrawal(cb?: Callback<Withdrawal>): EventEmitter;
    Withdrawal(options?: EventOptions, cb?: Callback<Withdrawal>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Deposit", cb: Callback<Deposit>): void;
  once(event: "Deposit", options: EventOptions, cb: Callback<Deposit>): void;

  once(event: "DisputeSettled", cb: Callback<DisputeSettled>): void;
  once(
    event: "DisputeSettled",
    options: EventOptions,
    cb: Callback<DisputeSettled>
  ): void;

  once(event: "EmergencyShutdown", cb: Callback<EmergencyShutdown>): void;
  once(
    event: "EmergencyShutdown",
    options: EventOptions,
    cb: Callback<EmergencyShutdown>
  ): void;

  once(event: "EndedSponsorPosition", cb: Callback<EndedSponsorPosition>): void;
  once(
    event: "EndedSponsorPosition",
    options: EventOptions,
    cb: Callback<EndedSponsorPosition>
  ): void;

  once(event: "FinalFeesPaid", cb: Callback<FinalFeesPaid>): void;
  once(
    event: "FinalFeesPaid",
    options: EventOptions,
    cb: Callback<FinalFeesPaid>
  ): void;

  once(event: "FundingRateUpdated", cb: Callback<FundingRateUpdated>): void;
  once(
    event: "FundingRateUpdated",
    options: EventOptions,
    cb: Callback<FundingRateUpdated>
  ): void;

  once(event: "LiquidationCreated", cb: Callback<LiquidationCreated>): void;
  once(
    event: "LiquidationCreated",
    options: EventOptions,
    cb: Callback<LiquidationCreated>
  ): void;

  once(event: "LiquidationDisputed", cb: Callback<LiquidationDisputed>): void;
  once(
    event: "LiquidationDisputed",
    options: EventOptions,
    cb: Callback<LiquidationDisputed>
  ): void;

  once(event: "LiquidationWithdrawn", cb: Callback<LiquidationWithdrawn>): void;
  once(
    event: "LiquidationWithdrawn",
    options: EventOptions,
    cb: Callback<LiquidationWithdrawn>
  ): void;

  once(event: "NewSponsor", cb: Callback<NewSponsor>): void;
  once(
    event: "NewSponsor",
    options: EventOptions,
    cb: Callback<NewSponsor>
  ): void;

  once(event: "PositionCreated", cb: Callback<PositionCreated>): void;
  once(
    event: "PositionCreated",
    options: EventOptions,
    cb: Callback<PositionCreated>
  ): void;

  once(event: "Redeem", cb: Callback<Redeem>): void;
  once(event: "Redeem", options: EventOptions, cb: Callback<Redeem>): void;

  once(event: "RegularFeesPaid", cb: Callback<RegularFeesPaid>): void;
  once(
    event: "RegularFeesPaid",
    options: EventOptions,
    cb: Callback<RegularFeesPaid>
  ): void;

  once(event: "Repay", cb: Callback<Repay>): void;
  once(event: "Repay", options: EventOptions, cb: Callback<Repay>): void;

  once(event: "RequestWithdrawal", cb: Callback<RequestWithdrawal>): void;
  once(
    event: "RequestWithdrawal",
    options: EventOptions,
    cb: Callback<RequestWithdrawal>
  ): void;

  once(
    event: "RequestWithdrawalCanceled",
    cb: Callback<RequestWithdrawalCanceled>
  ): void;
  once(
    event: "RequestWithdrawalCanceled",
    options: EventOptions,
    cb: Callback<RequestWithdrawalCanceled>
  ): void;

  once(
    event: "RequestWithdrawalExecuted",
    cb: Callback<RequestWithdrawalExecuted>
  ): void;
  once(
    event: "RequestWithdrawalExecuted",
    options: EventOptions,
    cb: Callback<RequestWithdrawalExecuted>
  ): void;

  once(
    event: "SettleEmergencyShutdown",
    cb: Callback<SettleEmergencyShutdown>
  ): void;
  once(
    event: "SettleEmergencyShutdown",
    options: EventOptions,
    cb: Callback<SettleEmergencyShutdown>
  ): void;

  once(event: "Withdrawal", cb: Callback<Withdrawal>): void;
  once(
    event: "Withdrawal",
    options: EventOptions,
    cb: Callback<Withdrawal>
  ): void;
}
