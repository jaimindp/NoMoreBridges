/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface LspUniswapV2BrokerInterface extends ethers.utils.Interface {
  functions: {
    "atomicMintAddLiquidity(bool,address,address,uint256,uint256,uint256)": FunctionFragment;
    "atomicMintSellOneSide(bool,bool,address,address,uint256,address[],uint256)": FunctionFragment;
    "getReserves(address,address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "atomicMintAddLiquidity",
    values: [boolean, string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "atomicMintSellOneSide",
    values: [
      boolean,
      boolean,
      string,
      string,
      BigNumberish,
      string[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserves",
    values: [string, string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "atomicMintAddLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "atomicMintSellOneSide",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserves",
    data: BytesLike
  ): Result;

  events: {};
}

export class LspUniswapV2Broker extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LspUniswapV2BrokerInterface;

  functions: {
    atomicMintAddLiquidity(
      callingAsEOA: boolean,
      longShortPair: string,
      router: string,
      amountCollateral: BigNumberish,
      minLpTokens: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    atomicMintSellOneSide(
      callingAsEOA: boolean,
      sellLong: boolean,
      longShortPair: string,
      router: string,
      amountCollateral: BigNumberish,
      swapPath: string[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getReserves(
      factory: string,
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { reserveA: BigNumber; reserveB: BigNumber }
    >;
  };

  atomicMintAddLiquidity(
    callingAsEOA: boolean,
    longShortPair: string,
    router: string,
    amountCollateral: BigNumberish,
    minLpTokens: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  atomicMintSellOneSide(
    callingAsEOA: boolean,
    sellLong: boolean,
    longShortPair: string,
    router: string,
    amountCollateral: BigNumberish,
    swapPath: string[],
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getReserves(
    factory: string,
    tokenA: string,
    tokenB: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { reserveA: BigNumber; reserveB: BigNumber }
  >;

  callStatic: {
    atomicMintAddLiquidity(
      callingAsEOA: boolean,
      longShortPair: string,
      router: string,
      amountCollateral: BigNumberish,
      minLpTokens: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    atomicMintSellOneSide(
      callingAsEOA: boolean,
      sellLong: boolean,
      longShortPair: string,
      router: string,
      amountCollateral: BigNumberish,
      swapPath: string[],
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getReserves(
      factory: string,
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { reserveA: BigNumber; reserveB: BigNumber }
    >;
  };

  filters: {};

  estimateGas: {
    atomicMintAddLiquidity(
      callingAsEOA: boolean,
      longShortPair: string,
      router: string,
      amountCollateral: BigNumberish,
      minLpTokens: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    atomicMintSellOneSide(
      callingAsEOA: boolean,
      sellLong: boolean,
      longShortPair: string,
      router: string,
      amountCollateral: BigNumberish,
      swapPath: string[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getReserves(
      factory: string,
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    atomicMintAddLiquidity(
      callingAsEOA: boolean,
      longShortPair: string,
      router: string,
      amountCollateral: BigNumberish,
      minLpTokens: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    atomicMintSellOneSide(
      callingAsEOA: boolean,
      sellLong: boolean,
      longShortPair: string,
      router: string,
      amountCollateral: BigNumberish,
      swapPath: string[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getReserves(
      factory: string,
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
