/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type AvatarSet = ContractEventLog<{
  previousAvatar: string;
  newAvatar: string;
  0: string;
  1: string;
}>;
export type ChangedGuard = ContractEventLog<{
  guard: string;
  0: string;
}>;
export type Initialized = ContractEventLog<{
  version: string;
  0: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type TargetSet = ContractEventLog<{
  previousTarget: string;
  newTarget: string;
  0: string;
  1: string;
}>;

export interface Module extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): Module;
  clone(): Module;
  methods: {
    avatar(): NonPayableTransactionObject<string>;

    getGuard(): NonPayableTransactionObject<string>;

    guard(): NonPayableTransactionObject<string>;

    owner(): NonPayableTransactionObject<string>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    setAvatar(_avatar: string): NonPayableTransactionObject<void>;

    setGuard(_guard: string): NonPayableTransactionObject<void>;

    setTarget(_target: string): NonPayableTransactionObject<void>;

    setUp(
      initializeParams: string | number[]
    ): NonPayableTransactionObject<void>;

    target(): NonPayableTransactionObject<string>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;
  };
  events: {
    AvatarSet(cb?: Callback<AvatarSet>): EventEmitter;
    AvatarSet(options?: EventOptions, cb?: Callback<AvatarSet>): EventEmitter;

    ChangedGuard(cb?: Callback<ChangedGuard>): EventEmitter;
    ChangedGuard(
      options?: EventOptions,
      cb?: Callback<ChangedGuard>
    ): EventEmitter;

    Initialized(cb?: Callback<Initialized>): EventEmitter;
    Initialized(
      options?: EventOptions,
      cb?: Callback<Initialized>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    TargetSet(cb?: Callback<TargetSet>): EventEmitter;
    TargetSet(options?: EventOptions, cb?: Callback<TargetSet>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "AvatarSet", cb: Callback<AvatarSet>): void;
  once(
    event: "AvatarSet",
    options: EventOptions,
    cb: Callback<AvatarSet>
  ): void;

  once(event: "ChangedGuard", cb: Callback<ChangedGuard>): void;
  once(
    event: "ChangedGuard",
    options: EventOptions,
    cb: Callback<ChangedGuard>
  ): void;

  once(event: "Initialized", cb: Callback<Initialized>): void;
  once(
    event: "Initialized",
    options: EventOptions,
    cb: Callback<Initialized>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "TargetSet", cb: Callback<TargetSet>): void;
  once(
    event: "TargetSet",
    options: EventOptions,
    cb: Callback<TargetSet>
  ): void;
}
