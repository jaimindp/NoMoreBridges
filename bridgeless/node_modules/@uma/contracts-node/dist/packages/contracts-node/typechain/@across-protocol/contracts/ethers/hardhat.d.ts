/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "IL2ERC20Bridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IL2ERC20Bridge__factory>;
    getContractFactory(
      name: "CrossDomainEnabled",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CrossDomainEnabled__factory>;
    getContractFactory(
      name: "ICrossDomainMessenger",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICrossDomainMessenger__factory>;
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "Lockable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Lockable__factory>;
    getContractFactory(
      name: "ArbitrumParentMessenger",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArbitrumParentMessenger__factory>;
    getContractFactory(
      name: "ParentMessengerBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ParentMessengerBase__factory>;
    getContractFactory(
      name: "ParentMessengerConsumerInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ParentMessengerConsumerInterface__factory>;
    getContractFactory(
      name: "ParentMessengerInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ParentMessengerInterface__factory>;
    getContractFactory(
      name: "IArbitrumInbox",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IArbitrumInbox__factory>;
    getContractFactory(
      name: "IBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBridge__factory>;
    getContractFactory(
      name: "IArbitrumOutbox",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IArbitrumOutbox__factory>;
    getContractFactory(
      name: "ArbitrumCrossDomainEnabled",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArbitrumCrossDomainEnabled__factory>;
    getContractFactory(
      name: "Lockable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Lockable__factory>;
    getContractFactory(
      name: "MultiCaller",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MultiCaller__factory>;
    getContractFactory(
      name: "Testable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Testable__factory>;
    getContractFactory(
      name: "Timer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Timer__factory>;
    getContractFactory(
      name: "AddressWhitelistInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AddressWhitelistInterface__factory>;
    getContractFactory(
      name: "AVMCrossDomainEnabled",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AVMCrossDomainEnabled__factory>;
    getContractFactory(
      name: "ArbSys",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArbSys__factory>;
    getContractFactory(
      name: "IArbitrumInbox",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IArbitrumInbox__factory>;
    getContractFactory(
      name: "IBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBridge__factory>;
    getContractFactory(
      name: "IArbitrumOutbox",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IArbitrumOutbox__factory>;
    getContractFactory(
      name: "Bridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Bridge__factory>;
    getContractFactory(
      name: "GenericHandler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GenericHandler__factory>;
    getContractFactory(
      name: "IBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBridge__factory>;
    getContractFactory(
      name: "IDepositExecute",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDepositExecute__factory>;
    getContractFactory(
      name: "IERCHandler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERCHandler__factory>;
    getContractFactory(
      name: "IGenericHandler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGenericHandler__factory>;
    getContractFactory(
      name: "IOVMCrossDomainMessenger",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOVMCrossDomainMessenger__factory>;
    getContractFactory(
      name: "OVMCrossDomainEnabled",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OVMCrossDomainEnabled__factory>;
    getContractFactory(
      name: "FxChildMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FxChildMock__factory>;
    getContractFactory(
      name: "IFxMessageProcessor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFxMessageProcessor__factory>;
    getContractFactory(
      name: "IStateReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStateReceiver__factory>;
    getContractFactory(
      name: "FxRootMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FxRootMock__factory>;
    getContractFactory(
      name: "IFxStateSender",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFxStateSender__factory>;
    getContractFactory(
      name: "IStateSender",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStateSender__factory>;
    getContractFactory(
      name: "StateSyncMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StateSyncMock__factory>;
    getContractFactory(
      name: "FxBaseChildTunnel",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FxBaseChildTunnel__factory>;
    getContractFactory(
      name: "IFxMessageProcessor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFxMessageProcessor__factory>;
    getContractFactory(
      name: "FxBaseRootTunnel",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FxBaseRootTunnel__factory>;
    getContractFactory(
      name: "ICheckpointManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICheckpointManager__factory>;
    getContractFactory(
      name: "IFxStateSender",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFxStateSender__factory>;
    getContractFactory(
      name: "ArbitrumCrossDomainEnabled",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArbitrumCrossDomainEnabled__factory>;
    getContractFactory(
      name: "ArbitrumMessenger",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArbitrumMessenger__factory>;
    getContractFactory(
      name: "AVMBridgeDepositBox",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AVMBridgeDepositBox__factory>;
    getContractFactory(
      name: "StandardBridgeLike",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StandardBridgeLike__factory>;
    getContractFactory(
      name: "BridgeAdmin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BridgeAdmin__factory>;
    getContractFactory(
      name: "BridgeDepositBox",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BridgeDepositBox__factory>;
    getContractFactory(
      name: "TokenLike",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenLike__factory>;
    getContractFactory(
      name: "WETH9Like",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WETH9Like__factory>;
    getContractFactory(
      name: "BridgePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BridgePool__factory>;
    getContractFactory(
      name: "BridgePoolProd",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BridgePoolProd__factory>;
    getContractFactory(
      name: "WETH9Like",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WETH9Like__factory>;
    getContractFactory(
      name: "BridgeAdminInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BridgeAdminInterface__factory>;
    getContractFactory(
      name: "BridgePoolInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BridgePoolInterface__factory>;
    getContractFactory(
      name: "MessengerInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MessengerInterface__factory>;
    getContractFactory(
      name: "IOVMCrossDomainMessenger",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOVMCrossDomainMessenger__factory>;
    getContractFactory(
      name: "OptimismMessenger",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OptimismMessenger__factory>;
    getContractFactory(
      name: "OptimismWrapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OptimismWrapper__factory>;
    getContractFactory(
      name: "WETH9Like",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WETH9Like__factory>;
    getContractFactory(
      name: "OVMBridgeDepositBox",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OVMBridgeDepositBox__factory>;
    getContractFactory(
      name: "OVMCrossDomainEnabled",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OVMCrossDomainEnabled__factory>;
    getContractFactory(
      name: "OVMOETHBridgeDepositBox",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OVMOETHBridgeDepositBox__factory>;
    getContractFactory(
      name: "RateModelStore",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RateModelStore__factory>;
    getContractFactory(
      name: "ArbitrumBridgeMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArbitrumBridgeMock__factory>;
    getContractFactory(
      name: "ArbitrumInboxMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArbitrumInboxMock__factory>;
    getContractFactory(
      name: "ArbitrumOutboxMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArbitrumOutboxMock__factory>;
    getContractFactory(
      name: "BridgeDepositBoxMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BridgeDepositBoxMock__factory>;
    getContractFactory(
      name: "MessengerMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MessengerMock__factory>;
    getContractFactory(
      name: "OVML1CrossDomainMessengerMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OVML1CrossDomainMessengerMock__factory>;
    getContractFactory(
      name: "OptimisticOracleConstraints",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OptimisticOracleConstraints__factory>;
    getContractFactory(
      name: "OracleInterfaces",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OracleInterfaces__factory>;
    getContractFactory(
      name: "FinderInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FinderInterface__factory>;
    getContractFactory(
      name: "IdentifierWhitelistInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IdentifierWhitelistInterface__factory>;
    getContractFactory(
      name: "OptimisticOracleInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OptimisticOracleInterface__factory>;
    getContractFactory(
      name: "SkinnyOptimisticOracleInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SkinnyOptimisticOracleInterface__factory>;
    getContractFactory(
      name: "StoreInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StoreInterface__factory>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
  }
}
