"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Multicall3Ethers__factory = exports.MultiRoleEthers__factory = exports.MultiCallerEthers__factory = exports.LockableEthers__factory = exports.HasFinderEthers__factory = exports.ExpandedERC20Ethers__factory = exports.AddressWhitelistEthers__factory = exports.ISwapRouterEthers__factory = exports.IUniswapV3PoolStateEthers__factory = exports.IUniswapV3PoolOwnerActionsEthers__factory = exports.IUniswapV3PoolImmutablesEthers__factory = exports.IUniswapV3PoolEventsEthers__factory = exports.IUniswapV3PoolDerivedStateEthers__factory = exports.IUniswapV3PoolActionsEthers__factory = exports.IUniswapV3SwapCallbackEthers__factory = exports.IUniswapV3PoolEthers__factory = exports.IUniswapV2Router01Ethers__factory = exports.IUniswapV2PairEthers__factory = exports.IERC165Ethers__factory = exports.ERC165Ethers__factory = exports.IERC721MetadataEthers__factory = exports.IERC721ReceiverEthers__factory = exports.IERC721Ethers__factory = exports.ERC721Ethers__factory = exports.IERC20PermitEthers__factory = exports.IERC20MetadataEthers__factory = exports.ERC20SnapshotEthers__factory = exports.IERC20Ethers__factory = exports.ERC20Ethers__factory = exports.PausableEthers__factory = exports.OwnableEthers__factory = exports.IAccessControlEthers__factory = exports.AccessControlEthers__factory = exports.ContextUpgradeableEthers__factory = exports.InitializableEthers__factory = exports.OwnableUpgradeableEthers__factory = exports.IFxStateSenderEthers__factory = exports.ICheckpointManagerEthers__factory = exports.FxBaseRootTunnelEthers__factory = exports.IFxMessageProcessorEthers__factory = exports.FxBaseChildTunnelEthers__factory = exports.IGuardEthers__factory = exports.IAvatarEthers__factory = exports.GuardableEthers__factory = exports.BaseGuardEthers__factory = exports.ModuleProxyFactoryEthers__factory = exports.FactoryFriendlyEthers__factory = exports.ModuleEthers__factory = exports.ICrossDomainMessengerEthers__factory = exports.CrossDomainEnabledEthers__factory = void 0;
exports.OracleSpokeEthers__factory = exports.OracleHubEthers__factory = exports.OracleBaseEthers__factory = exports.GovernorSpokeEthers__factory = exports.GovernorHubEthers__factory = exports.WithdrawableTestEthers__factory = exports.VaultMockEthers__factory = exports.UnsignedFixedPointTestEthers__factory = exports.UniswapV3MockEthers__factory = exports.UniswapV2MockEthers__factory = exports.TestableTestEthers__factory = exports.SignedFixedPointTestEthers__factory = exports.ReentrancyMockEthers__factory = exports.ReentrancyCheckerEthers__factory = exports.ReentrancyAttackEthers__factory = exports.PerpetualMockEthers__factory = exports.MulticallMockEthers__factory = exports.MultiRoleTestEthers__factory = exports.MultiCallerTestEthers__factory = exports.MintableERC721Ethers__factory = exports.HarvestVaultMockEthers__factory = exports.BasicERC20Ethers__factory = exports.BalancerMockEthers__factory = exports.AncillaryDataTestEthers__factory = exports.VaultInterfaceEthers__factory = exports.UniswapV3Ethers__factory = exports.UniswapV2Ethers__factory = exports.TransactionBatcherEthers__factory = exports.Multicall2Ethers__factory = exports.MulticallEthers__factory = exports.IERC20StandardEthers__factory = exports.HarvestVaultInterfaceEthers__factory = exports.ExpandedIERC20Ethers__factory = exports.BalancerEthers__factory = exports.AddressWhitelistInterfaceEthers__factory = exports.DSProxyFactoryEthers__factory = exports.DSProxyCacheEthers__factory = exports.DSProxyEthers__factory = exports.DSNoteEthers__factory = exports.DSGuardFactoryEthers__factory = exports.DSGuardEventsEthers__factory = exports.DSGuardEthers__factory = exports.DSAuthorityEthers__factory = exports.DSAuthEventsEthers__factory = exports.DSAuthEthers__factory = exports.WithdrawableEthers__factory = exports.TimerEthers__factory = exports.TestnetERC20Ethers__factory = exports.TestableEthers__factory = exports.StakeableEthers__factory = void 0;
exports.IdentifierWhitelistInterfaceEthers__factory = exports.FinderInterfaceEthers__factory = exports.AdministrateeInterfaceEthers__factory = exports.ZeroedSlashingSlashingLibraryTestEthers__factory = exports.VotingV2TestEthers__factory = exports.VotingV2ControllableTimingEthers__factory = exports.VotingTestEthers__factory = exports.VoteTimingTestEthers__factory = exports.StakerTestEthers__factory = exports.StakerControlledTimingEthers__factory = exports.ResultComputationTestEthers__factory = exports.PunitiveSlashingLibraryTestEthers__factory = exports.ProposerV2TestEthers__factory = exports.PriceIdentifierSlashingLibaryTestEthers__factory = exports.MockAdministrateeEthers__factory = exports.GovernorV2TestEthers__factory = exports.GovernorTestEthers__factory = exports.EmergencyProposerTestEthers__factory = exports.VotingV2Ethers__factory = exports.VotingTokenEthers__factory = exports.VotingEthers__factory = exports.TokenMigratorEthers__factory = exports.StoreEthers__factory = exports.StakerEthers__factory = exports.RegistryEthers__factory = exports.ProposerV2Ethers__factory = exports.ProposerEthers__factory = exports.IdentifierWhitelistEthers__factory = exports.GovernorV2Ethers__factory = exports.GovernorEthers__factory = exports.FixedSlashSlashingLibraryEthers__factory = exports.FinderEthers__factory = exports.FinancialContractsAdminEthers__factory = exports.EmergencyProposerEthers__factory = exports.DesignatedVotingV2FactoryEthers__factory = exports.DesignatedVotingV2Ethers__factory = exports.DesignatedVotingFactoryEthers__factory = exports.DesignatedVotingEthers__factory = exports.OracleInterfacesEthers__factory = exports.OptimisticOracleConstraintsEthers__factory = exports.OracleMessengerMockEthers__factory = exports.OracleBaseMockEthers__factory = exports.GovernorMessengerMockEthers__factory = exports.ParentMessengerInterfaceEthers__factory = exports.ParentMessengerConsumerInterfaceEthers__factory = exports.ChildMessengerInterfaceEthers__factory = exports.ChildMessengerConsumerInterfaceEthers__factory = exports.ParentMessengerBaseMockEthers__factory = exports.ParentMessengerBaseEthers__factory = exports.SpokeBaseEthers__factory = void 0;
exports.SuccessTokenLongShortPairFinancialProductLibraryEthers__factory = exports.SimpleSuccessTokenLongShortPairFinancialProductLibraryEthers__factory = exports.RangeBondLongShortPairFinancialProductLibraryEthers__factory = exports.LongShortPairFinancialProductLibraryEthers__factory = exports.LinearLongShortPairFinancialProductLibraryEthers__factory = exports.FlooredLinearLongShortPairFinancialProductLibraryEthers__factory = exports.CoveredCallLongShortPairFinancialProductLibraryEthers__factory = exports.CappedYieldDollarLongShortPairFinancialProductLibraryEthers__factory = exports.BinaryOptionLongShortPairFinancialProductLibraryEthers__factory = exports.StructuredNoteFinancialProductLibraryEthers__factory = exports.PreExpirationIdentifierTransformationFinancialProductLibraryEthers__factory = exports.PostExpirationIdentifierTransformationFinancialProductLibraryEthers__factory = exports.KpiOptionsFinancialProductLibraryEthers__factory = exports.FinancialProductLibraryEthers__factory = exports.ExpiringContractInterfaceEthers__factory = exports.CoveredCallFinancialProductLibraryEthers__factory = exports.WETH9Ethers__factory = exports.TokenFactoryEthers__factory = exports.SyntheticTokenEthers__factory = exports.FundingRateApplierEthers__factory = exports.FeePayerEthers__factory = exports.EmergencyShutdownableEthers__factory = exports.OptimismL2StandardERC20Ethers__factory = exports.OptimismL2StandardBridgeEthers__factory = exports.OptimismL1StandardBridgeEthers__factory = exports.IGenericHandlerEthers__factory = exports.IERCHandlerEthers__factory = exports.IDepositExecuteEthers__factory = exports.GenericHandlerEthers__factory = exports.BridgeEthers__factory = exports.BobaAddressManagerEthers__factory = exports.IBridgeEthers__factory = exports.ArbSysEthers__factory = exports.VotingInterfaceTestingEthers__factory = exports.VotingAncillaryInterfaceTestingEthers__factory = exports.MockOracleGovernanceEthers__factory = exports.MockOracleCombinedEthers__factory = exports.MockOracleAncillaryEthers__factory = exports.MockOracleEthers__factory = exports.VotingV2InterfaceEthers__factory = exports.VotingInterfaceEthers__factory = exports.VotingAncillaryInterfaceEthers__factory = exports.StoreInterfaceEthers__factory = exports.StakerInterfaceEthers__factory = exports.SlashingLibraryInterfaceEthers__factory = exports.RegistryInterfaceEthers__factory = exports.OracleInterfaceEthers__factory = exports.OracleGovernanceInterfaceEthers__factory = exports.OracleAncillaryInterfaceEthers__factory = exports.MinimumVotingAncillaryInterfaceEthers__factory = void 0;
exports.DisputeLimitingEscalationManagerEthers__factory = exports.BaseEscalationManagerEthers__factory = exports.OptimisticOracleV3Ethers__factory = exports.SkinnyOptimisticV2RequesterTestEthers__factory = exports.SkinnyOptimisticRequesterTestEthers__factory = exports.OptimisticRequesterTestEthers__factory = exports.SkinnyOptimisticOracleProdEthers__factory = exports.SkinnyOptimisticOracleEthers__factory = exports.OptimisticOracleEthers__factory = exports.SkinnyOptimisticOracleV2InterfaceEthers__factory = exports.SkinnyOptimisticOracleInterfaceEthers__factory = exports.OptimisticOracleV2InterfaceEthers__factory = exports.OptimisticOracleInterfaceEthers__factory = exports.SkinnyOptimisticOracleV2ProdEthers__factory = exports.SkinnyOptimisticOracleV2Ethers__factory = exports.OptimisticRequesterV2Ethers__factory = exports.OptimisticRequesterEthers__factory = exports.OptimisticOracleV2Ethers__factory = exports.TestModuleProxyFactoryEthers__factory = exports.TestAvatarEthers__factory = exports.OptimisticGovernorTestEthers__factory = exports.OptimisticGovernorEthers__factory = exports.MerkleDistributorInterfaceEthers__factory = exports.MerkleDistributorEthers__factory = exports.LongShortPairMockEthers__factory = exports.LongShortPairFinancialProjectLibraryTestEthers__factory = exports.FundingRateApplierTestEthers__factory = exports.FinancialProductLibraryTestEthers__factory = exports.ExpiringMultiPartyMockEthers__factory = exports.PerpetualPositionManagerEthers__factory = exports.PerpetualLiquidatableEthers__factory = exports.PerpetualCreatorEthers__factory = exports.PerpetualEthers__factory = exports.ConfigStoreInterfaceEthers__factory = exports.ConfigStoreEthers__factory = exports.OptimisticRewarderTestEthers__factory = exports.OptimisticRewarderNoTokenTestEthers__factory = exports.OptimisticStakerEthers__factory = exports.OptimisticRewarderTokenEthers__factory = exports.OptimisticRewarderCreatorEthers__factory = exports.OptimisticRewarderBaseEthers__factory = exports.OptimisticRewarderNoTokenEthers__factory = exports.OptimisticRewarderEthers__factory = exports.OptimisticDistributorEthers__factory = exports.LongShortPairCreatorEthers__factory = exports.LongShortPairEthers__factory = exports.PricelessPositionManagerEthers__factory = exports.LiquidatableEthers__factory = exports.ExpiringMultiPartyCreatorEthers__factory = exports.ExpiringMultiPartyEthers__factory = void 0;
exports.BridgePoolEthers__factory = exports.WETH9LikeEthers__factory = exports.TokenLikeEthers__factory = exports.BridgeDepositBoxEthers__factory = exports.BridgeAdminEthers__factory = exports.IL2ERC20BridgeEthers__factory = exports.VotingUpgraderV2Ethers__factory = exports.VotingUpgraderEthers__factory = exports.Umip3UpgraderEthers__factory = exports.OriginValidatorEthers__factory = exports.SnapshotVotingPowerEthers__factory = exports.UniswapV3BrokerEthers__factory = exports.UniswapV2BrokerEthers__factory = exports.LspUniswapV2BrokerEthers__factory = exports.TokenSenderEthers__factory = exports.TokenRedeemerEthers__factory = exports.PositionSettlerEthers__factory = exports.LiquidationWithdrawerEthers__factory = exports.ReserveCurrencyLiquidatorEthers__factory = exports.IStoreEthers__factory = exports.IFinderEthers__factory = exports.ReserveCurrencyDisputerEthers__factory = exports.IFinancialContractEthers__factory = exports.StateSyncMockEthers__factory = exports.OracleRootTunnelMockEthers__factory = exports.OracleBaseTunnelMockEthers__factory = exports.IStateSenderEthers__factory = exports.FxRootMockEthers__factory = exports.IStateReceiverEthers__factory = exports.FxChildMockEthers__factory = exports.OracleRootTunnelEthers__factory = exports.OracleChildTunnelEthers__factory = exports.OracleBaseTunnelEthers__factory = exports.GovernorRootTunnelEthers__factory = exports.GovernorChildTunnelEthers__factory = exports.OptimisticOracleV3InterfaceEthers__factory = exports.OptimisticOracleV3CallbackRecipientInterfaceEthers__factory = exports.EscalationManagerInterfaceEthers__factory = exports.OptimisticOracleV3TestEthers__factory = exports.AssertingCallerTestEthers__factory = exports.PredictionMarketEthers__factory = exports.InsuranceEthers__factory = exports.DataAsserterEthers__factory = exports.WhitelistDisputerEscalationManagerEthers__factory = exports.WhitelistCallerEscalationManagerEthers__factory = exports.WhitelistAsserterEscalationManagerEthers__factory = exports.SuperbondEscalationManagerEthers__factory = exports.OwnerSelectOracleEscalationManagerEthers__factory = exports.OwnerDiscardOracleEscalationManagerEthers__factory = exports.FullPolicyEscalationManagerEthers__factory = void 0;
exports.getLinearLongShortPairFinancialProductLibraryStaticAddress = exports.getCoveredCallLongShortPairFinancialProductLibraryStaticAddress = exports.getBinaryOptionLongShortPairFinancialProductLibraryStaticAddress = exports.getLongShortPairCreatorStaticAddress = exports.getGovernorRootTunnelStaticAddress = exports.getOracleRootTunnelStaticAddress = exports.getMockOracleAncillaryStaticAddress = exports.getDSGuardFactoryStaticAddress = exports.getDSProxyFactoryStaticAddress = exports.getPerpetualCreatorStaticAddress = exports.getPerpetualLibStaticAddress = exports.getOptimisticOracleV2StaticAddress = exports.getOptimisticOracleStaticAddress = exports.getExpiringMultiPartyCreatorStaticAddress = exports.getExpiringMultiPartyLibStaticAddress = exports.getAddressWhitelistStaticAddress = exports.getTokenFactoryStaticAddress = exports.getWETH9StaticAddress = exports.getDesignatedVotingV2FactoryStaticAddress = exports.getDesignatedVotingFactoryStaticAddress = exports.getGovernorStaticAddress = exports.getStoreStaticAddress = exports.getFinancialContractsAdminStaticAddress = exports.getRegistryStaticAddress = exports.getVotingStaticAddress = exports.getIdentifierWhitelistStaticAddress = exports.getVotingTokenStaticAddress = exports.getFinderStaticAddress = exports.getAVM_BridgeDepositBoxStaticAddress = exports.getOVM_OETH_BridgeDepositBoxStaticAddress = exports.getRateModelStoreStaticAddress = exports.getOptimism_WrapperStaticAddress = exports.getOptimism_MessengerStaticAddress = exports.getArbitrum_MessengerStaticAddress = exports.getWBTC_BridgePoolStaticAddress = exports.getBADGER_BridgePoolStaticAddress = exports.getUMA_BridgePoolStaticAddress = exports.getUSDC_BridgePoolStaticAddress = exports.getWETH_BridgePoolStaticAddress = exports.getBridgeAdminStaticAddress = exports.getBytecode = exports.getAbi = exports.MessengerMockEthers__factory = exports.BridgeDepositBoxMockEthers__factory = exports.MessengerInterfaceEthers__factory = exports.BridgePoolInterfaceEthers__factory = exports.BridgeAdminInterfaceEthers__factory = exports.StandardBridgeLikeEthers__factory = exports.RateModelStoreEthers__factory = exports.BridgePoolProdEthers__factory = void 0;
exports.getMerkleAbi = exports.getExitPayloadReaderAbi = exports.getIGuardAbi = exports.getIAvatarAbi = exports.getGuardableAbi = exports.getBaseGuardAbi = exports.getModuleProxyFactoryAbi = exports.getFactoryFriendlyAbi = exports.getModuleAbi = exports.getEnumAbi = exports.getLib_PredeployAddressesAbi = exports.getICrossDomainMessengerAbi = exports.getCrossDomainEnabledAbi = exports.getAddress = exports.getPolygon_ChildMessengerStaticAddress = exports.getSkinnyOptimisticOracleV2StaticAddress = exports.getPolygon_ParentMessengerStaticAddress = exports.getArbitrum_ChildMessengerStaticAddress = exports.getTestnetERC20StaticAddress = exports.getGenericHandlerStaticAddress = exports.getBridgeStaticAddress = exports.getBoba_ChildMessengerStaticAddress = exports.getMulticall3StaticAddress = exports.getGovernorChildTunnelStaticAddress = exports.getOracleChildTunnelStaticAddress = exports.getAdmin_ChildMessengerStaticAddress = exports.getOptimism_ChildMessengerStaticAddress = exports.getGovernorSpokeStaticAddress = exports.getOracleSpokeStaticAddress = exports.getOriginValidatorStaticAddress = exports.getOptimisticGovernorStaticAddress = exports.getVotingUpgraderV2StaticAddress = exports.getEmergencyProposerStaticAddress = exports.getProposerV2StaticAddress = exports.getGovernorV2StaticAddress = exports.getVotingV2StaticAddress = exports.getFixedSlashSlashingLibraryStaticAddress = exports.getOptimisticOracleV3StaticAddress = exports.getProposerStaticAddress = exports.getOptimism_ParentMessengerStaticAddress = exports.getBoba_ParentMessengerStaticAddress = exports.getMulticall2StaticAddress = exports.getGovernorHubStaticAddress = exports.getOracleHubStaticAddress = exports.getArbitrum_ParentMessengerStaticAddress = exports.getSkinnyOptimisticOracleStaticAddress = exports.getSuccessTokenLongShortPairFinancialProductLibraryStaticAddress = exports.getSimpleSuccessTokenLongShortPairFinancialProductLibraryStaticAddress = exports.getCappedYieldDollarLongShortPairFinancialProductLibraryStaticAddress = exports.getRangeBondLongShortPairFinancialProductLibraryStaticAddress = void 0;
exports.getIUniswapV3PoolImmutablesAbi = exports.getIUniswapV3PoolEventsAbi = exports.getIUniswapV3PoolDerivedStateAbi = exports.getIUniswapV3PoolActionsAbi = exports.getIUniswapV3SwapCallbackAbi = exports.getIUniswapV3PoolAbi = exports.getIUniswapV2Router01Abi = exports.getIUniswapV2PairAbi = exports.getTransferHelperAbi = exports.getBabylonianAbi = exports.getSignedSafeMathAbi = exports.getSignedMathAbi = exports.getSafeMathAbi = exports.getSafeCastAbi = exports.getMathAbi = exports.getIERC165Abi = exports.getERC165Abi = exports.getMerkleProofAbi = exports.getECDSAAbi = exports.getStringsAbi = exports.getStorageSlotAbi = exports.getCountersAbi = exports.getContextAbi = exports.getArraysAbi = exports.getAddressAbi = exports.getIERC721MetadataAbi = exports.getIERC721ReceiverAbi = exports.getIERC721Abi = exports.getERC721Abi = exports.getSafeERC20Abi = exports.getIERC20PermitAbi = exports.getIERC20MetadataAbi = exports.getERC20SnapshotAbi = exports.getIERC20Abi = exports.getERC20Abi = exports.getPausableAbi = exports.getOwnableAbi = exports.getIAccessControlAbi = exports.getAccessControlAbi = exports.getContextUpgradeableAbi = exports.getAddressUpgradeableAbi = exports.getInitializableAbi = exports.getOwnableUpgradeableAbi = exports.getIFxStateSenderAbi = exports.getICheckpointManagerAbi = exports.getFxBaseRootTunnelAbi = exports.getIFxMessageProcessorAbi = exports.getFxBaseChildTunnelAbi = exports.getRLPReaderAbi = exports.getMerklePatriciaProofAbi = void 0;
exports.getMultiCallerTestAbi = exports.getMintableERC721Abi = exports.getHarvestVaultMockAbi = exports.getBasicERC20Abi = exports.getBalancerMockAbi = exports.getAncillaryDataTestAbi = exports.getVaultInterfaceAbi = exports.getUniswapV3Abi = exports.getUniswapV2Abi = exports.getTransactionBatcherAbi = exports.getMulticall2Abi = exports.getMulticallAbi = exports.getIERC20StandardAbi = exports.getHarvestVaultInterfaceAbi = exports.getExpandedIERC20Abi = exports.getBalancerAbi = exports.getAddressWhitelistInterfaceAbi = exports.getDSProxyFactoryAbi = exports.getDSProxyCacheAbi = exports.getDSProxyAbi = exports.getDSNoteAbi = exports.getDSGuardFactoryAbi = exports.getDSGuardEventsAbi = exports.getDSGuardAbi = exports.getDSAuthorityAbi = exports.getDSAuthEventsAbi = exports.getDSAuthAbi = exports.getWithdrawableAbi = exports.getTimerAbi = exports.getTestnetERC20Abi = exports.getTestableAbi = exports.getStakeableAbi = exports.getMulticall3Abi = exports.getSharedAbi = exports.getMultiRoleAbi = exports.getExclusiveAbi = exports.getMultiCallerAbi = exports.getLockableAbi = exports.getHasFinderAbi = exports.getFixedPointAbi = exports.getExpandedERC20Abi = exports.getAncillaryDataAbi = exports.getAddressWhitelistAbi = exports.getISwapRouterAbi = exports.getUnsafeMathAbi = exports.getLowGasSafeMathAbi = exports.getLiquidityMathAbi = exports.getBitMathAbi = exports.getIUniswapV3PoolStateAbi = exports.getIUniswapV3PoolOwnerActionsAbi = void 0;
exports.getEmergencyProposerAbi = exports.getDesignatedVotingV2FactoryAbi = exports.getDesignatedVotingV2Abi = exports.getDesignatedVotingFactoryAbi = exports.getDesignatedVotingAbi = exports.getContractCreatorAbi = exports.getOracleInterfacesAbi = exports.getOptimisticOracleConstraintsAbi = exports.getAdminIdentifierLibAbi = exports.getOracleMessengerMockAbi = exports.getOracleBaseMockAbi = exports.getGovernorMessengerMockAbi = exports.getParentMessengerInterfaceAbi = exports.getParentMessengerConsumerInterfaceAbi = exports.getChildMessengerInterfaceAbi = exports.getChildMessengerConsumerInterfaceAbi = exports.getPolygon_ParentMessengerMockAbi = exports.getPolygon_ChildMessengerMockAbi = exports.getParentMessengerBaseMockAbi = exports.getOVM_L1CrossDomainMessengerMockAbi = exports.getArbitrum_OutboxMockAbi = exports.getArbitrum_InboxMockAbi = exports.getArbitrum_BridgeMockAbi = exports.getPolygon_ParentMessengerAbi = exports.getPolygon_ChildMessengerAbi = exports.getParentMessengerBaseAbi = exports.getOptimism_ParentMessengerAbi = exports.getOptimism_ChildMessengerAbi = exports.getArbitrum_ParentMessengerAbi = exports.getArbitrum_ChildMessengerAbi = exports.getAdmin_ChildMessengerAbi = exports.getSpokeBaseAbi = exports.getOracleSpokeAbi = exports.getOracleHubAbi = exports.getOracleBaseAbi = exports.getGovernorSpokeAbi = exports.getGovernorHubAbi = exports.getWithdrawableTestAbi = exports.getVaultMockAbi = exports.getUnsignedFixedPointTestAbi = exports.getUniswapV3MockAbi = exports.getUniswapV2MockAbi = exports.getTestableTestAbi = exports.getSignedFixedPointTestAbi = exports.getReentrancyMockAbi = exports.getReentrancyCheckerAbi = exports.getReentrancyAttackAbi = exports.getPerpetualMockAbi = exports.getMulticallMockAbi = exports.getMultiRoleTestAbi = void 0;
exports.getMockOracleCombinedAbi = exports.getMockOracleAncillaryAbi = exports.getMockOracleAbi = exports.getVotingV2InterfaceAbi = exports.getVotingInterfaceAbi = exports.getVotingAncillaryInterfaceAbi = exports.getStoreInterfaceAbi = exports.getStakerInterfaceAbi = exports.getSlashingLibraryInterfaceAbi = exports.getRegistryInterfaceAbi = exports.getOracleInterfaceAbi = exports.getOracleGovernanceInterfaceAbi = exports.getOracleAncillaryInterfaceAbi = exports.getMinimumVotingAncillaryInterfaceAbi = exports.getIdentifierWhitelistInterfaceAbi = exports.getFinderInterfaceAbi = exports.getAdministrateeInterfaceAbi = exports.getZeroedSlashingSlashingLibraryTestAbi = exports.getVotingV2TestAbi = exports.getVotingV2ControllableTimingAbi = exports.getVotingTestAbi = exports.getVoteTimingTestAbi = exports.getStakerTestAbi = exports.getStakerControlledTimingAbi = exports.getResultComputationTestAbi = exports.getPunitiveSlashingLibraryTestAbi = exports.getProposerV2TestAbi = exports.getPriceIdentifierSlashingLibaryTestAbi = exports.getMockAdministrateeAbi = exports.getGovernorV2TestAbi = exports.getGovernorTestAbi = exports.getEmergencyProposerTestAbi = exports.getVotingV2Abi = exports.getVotingTokenAbi = exports.getVotingAbi = exports.getVoteTimingAbi = exports.getTokenMigratorAbi = exports.getStoreAbi = exports.getStakerAbi = exports.getResultComputationV2Abi = exports.getResultComputationAbi = exports.getRegistryAbi = exports.getProposerV2Abi = exports.getProposerAbi = exports.getIdentifierWhitelistAbi = exports.getGovernorV2Abi = exports.getGovernorAbi = exports.getFixedSlashSlashingLibraryAbi = exports.getFinderAbi = exports.getFinancialContractsAdminAbi = void 0;
exports.getOptimisticRewarderAbi = exports.getOptimisticDistributorAbi = exports.getLongShortPairCreatorAbi = exports.getLongShortPairAbi = exports.getPricelessPositionManagerAbi = exports.getLiquidatableAbi = exports.getExpiringMultiPartyLibAbi = exports.getExpiringMultiPartyCreatorAbi = exports.getExpiringMultiPartyAbi = exports.getSuccessTokenLongShortPairFinancialProductLibraryAbi = exports.getSimpleSuccessTokenLongShortPairFinancialProductLibraryAbi = exports.getRangeBondLongShortPairFinancialProductLibraryAbi = exports.getLongShortPairFinancialProductLibraryAbi = exports.getLinearLongShortPairFinancialProductLibraryAbi = exports.getFlooredLinearLongShortPairFinancialProductLibraryAbi = exports.getCoveredCallLongShortPairFinancialProductLibraryAbi = exports.getCappedYieldDollarLongShortPairFinancialProductLibraryAbi = exports.getBinaryOptionLongShortPairFinancialProductLibraryAbi = exports.getStructuredNoteFinancialProductLibraryAbi = exports.getPreExpirationIdentifierTransformationFinancialProductLibraryAbi = exports.getPostExpirationIdentifierTransformationFinancialProductLibraryAbi = exports.getKpiOptionsFinancialProductLibraryAbi = exports.getFinancialProductLibraryAbi = exports.getExpiringContractInterfaceAbi = exports.getCoveredCallFinancialProductLibraryAbi = exports.getWETH9Abi = exports.getTokenFactoryAbi = exports.getSyntheticTokenAbi = exports.getFundingRateApplierAbi = exports.getFeePayerAbi = exports.getEmergencyShutdownableAbi = exports.getOptimismL2StandardERC20Abi = exports.getOptimismL2StandardBridgeAbi = exports.getOptimismL1StandardBridgeAbi = exports.getIGenericHandlerAbi = exports.getIERCHandlerAbi = exports.getIDepositExecuteAbi = exports.getGenericHandlerAbi = exports.getBridgeAbi = exports.getBobaAddressManagerAbi = exports.getiArbitrum_OutboxAbi = exports.getiArbitrum_InboxAbi = exports.getIBridgeAbi = exports.getArbSysAbi = exports.getArbitrum_MessengerAbi = exports.getArbitrum_CrossDomainEnabledAbi = exports.getAVM_CrossDomainEnabledAbi = exports.getVotingInterfaceTestingAbi = exports.getVotingAncillaryInterfaceTestingAbi = exports.getMockOracleGovernanceAbi = void 0;
exports.getWhitelistDisputerEscalationManagerAbi = exports.getWhitelistCallerEscalationManagerAbi = exports.getWhitelistAsserterEscalationManagerAbi = exports.getSuperbondEscalationManagerAbi = exports.getOwnerSelectOracleEscalationManagerAbi = exports.getOwnerDiscardOracleEscalationManagerAbi = exports.getFullPolicyEscalationManagerAbi = exports.getDisputeLimitingEscalationManagerAbi = exports.getBaseEscalationManagerAbi = exports.getOptimisticOracleV3Abi = exports.getSkinnyOptimisticV2RequesterTestAbi = exports.getSkinnyOptimisticRequesterTestAbi = exports.getOptimisticRequesterTestAbi = exports.getSkinnyOptimisticOracleProdAbi = exports.getSkinnyOptimisticOracleAbi = exports.getOptimisticOracleAbi = exports.getSkinnyOptimisticOracleV2InterfaceAbi = exports.getSkinnyOptimisticOracleInterfaceAbi = exports.getOptimisticOracleV2InterfaceAbi = exports.getOptimisticOracleInterfaceAbi = exports.getSkinnyOptimisticOracleV2ProdAbi = exports.getSkinnyOptimisticOracleV2Abi = exports.getOptimisticRequesterV2Abi = exports.getOptimisticRequesterAbi = exports.getOptimisticOracleV2Abi = exports.getTestModuleProxyFactoryAbi = exports.getTestAvatarAbi = exports.getOptimisticGovernorTestAbi = exports.getOptimisticGovernorAbi = exports.getMerkleDistributorInterfaceAbi = exports.getMerkleDistributorAbi = exports.getLongShortPairMockAbi = exports.getLongShortPairFinancialProjectLibraryTestAbi = exports.getFundingRateApplierTestAbi = exports.getFinancialProductLibraryTestAbi = exports.getExpiringMultiPartyMockAbi = exports.getPerpetualPositionManagerAbi = exports.getPerpetualLiquidatableAbi = exports.getPerpetualLibAbi = exports.getPerpetualCreatorAbi = exports.getPerpetualAbi = exports.getConfigStoreInterfaceAbi = exports.getConfigStoreAbi = exports.getOptimisticRewarderTestAbi = exports.getOptimisticRewarderNoTokenTestAbi = exports.getOptimisticStakerAbi = exports.getOptimisticRewarderTokenAbi = exports.getOptimisticRewarderCreatorAbi = exports.getOptimisticRewarderBaseAbi = exports.getOptimisticRewarderNoTokenAbi = void 0;
exports.getBridgePoolAbi = exports.getWETH9LikeAbi = exports.getTokenLikeAbi = exports.getBridgeDepositBoxAbi = exports.getBridgeAdminAbi = exports.getiOVM_CrossDomainMessengerAbi = exports.getOVM_CrossDomainEnabledAbi = exports.getIL2ERC20BridgeAbi = exports.getVotingUpgraderV2Abi = exports.getVotingUpgraderAbi = exports.getUmip3UpgraderAbi = exports.getOriginValidatorAbi = exports.getSnapshotVotingPowerAbi = exports.getUniswapV3BrokerAbi = exports.getTickMathAbi = exports.getTickBitmapAbi = exports.getSqrtPriceMathAbi = exports.getFixedPoint96Abi = exports.getUniswapV2BrokerAbi = exports.getFullMathAbi = exports.getLspUniswapV2BrokerAbi = exports.getTokenSenderAbi = exports.getTokenRedeemerAbi = exports.getPositionSettlerAbi = exports.getLiquidationWithdrawerAbi = exports.getReserveCurrencyLiquidatorAbi = exports.getIStoreAbi = exports.getIFinderAbi = exports.getReserveCurrencyDisputerAbi = exports.getIFinancialContractAbi = exports.getStateSyncMockAbi = exports.getOracleRootTunnelMockAbi = exports.getOracleBaseTunnelMockAbi = exports.getIStateSenderAbi = exports.getFxRootMockAbi = exports.getIStateReceiverAbi = exports.getFxChildMockAbi = exports.getOracleRootTunnelAbi = exports.getOracleChildTunnelAbi = exports.getOracleBaseTunnelAbi = exports.getGovernorRootTunnelAbi = exports.getGovernorChildTunnelAbi = exports.getOptimisticOracleV3InterfaceAbi = exports.getOptimisticOracleV3CallbackRecipientInterfaceAbi = exports.getEscalationManagerInterfaceAbi = exports.getOptimisticOracleV3TestAbi = exports.getAssertingCallerTestAbi = exports.getPredictionMarketAbi = exports.getInsuranceAbi = exports.getDataAsserterAbi = void 0;
exports.getIERC721ReceiverBytecode = exports.getIERC721Bytecode = exports.getERC721Bytecode = exports.getSafeERC20Bytecode = exports.getIERC20PermitBytecode = exports.getIERC20MetadataBytecode = exports.getERC20SnapshotBytecode = exports.getIERC20Bytecode = exports.getERC20Bytecode = exports.getPausableBytecode = exports.getOwnableBytecode = exports.getIAccessControlBytecode = exports.getAccessControlBytecode = exports.getContextUpgradeableBytecode = exports.getAddressUpgradeableBytecode = exports.getInitializableBytecode = exports.getOwnableUpgradeableBytecode = exports.getIFxStateSenderBytecode = exports.getICheckpointManagerBytecode = exports.getFxBaseRootTunnelBytecode = exports.getIFxMessageProcessorBytecode = exports.getFxBaseChildTunnelBytecode = exports.getRLPReaderBytecode = exports.getMerklePatriciaProofBytecode = exports.getMerkleBytecode = exports.getExitPayloadReaderBytecode = exports.getIGuardBytecode = exports.getIAvatarBytecode = exports.getGuardableBytecode = exports.getBaseGuardBytecode = exports.getModuleProxyFactoryBytecode = exports.getFactoryFriendlyBytecode = exports.getModuleBytecode = exports.getEnumBytecode = exports.getLib_PredeployAddressesBytecode = exports.getICrossDomainMessengerBytecode = exports.getCrossDomainEnabledBytecode = exports.getMessengerMockAbi = exports.getBridgeDepositBoxMockAbi = exports.getOptimism_WrapperAbi = exports.getOptimism_MessengerAbi = exports.getOVM_OETH_BridgeDepositBoxAbi = exports.getOVM_BridgeDepositBoxAbi = exports.getMessengerInterfaceAbi = exports.getBridgePoolInterfaceAbi = exports.getBridgeAdminInterfaceAbi = exports.getStandardBridgeLikeAbi = exports.getAVM_BridgeDepositBoxAbi = exports.getRateModelStoreAbi = exports.getBridgePoolProdAbi = void 0;
exports.getDSAuthBytecode = exports.getWithdrawableBytecode = exports.getTimerBytecode = exports.getTestnetERC20Bytecode = exports.getTestableBytecode = exports.getStakeableBytecode = exports.getMulticall3Bytecode = exports.getSharedBytecode = exports.getMultiRoleBytecode = exports.getExclusiveBytecode = exports.getMultiCallerBytecode = exports.getLockableBytecode = exports.getHasFinderBytecode = exports.getFixedPointBytecode = exports.getExpandedERC20Bytecode = exports.getAncillaryDataBytecode = exports.getAddressWhitelistBytecode = exports.getISwapRouterBytecode = exports.getUnsafeMathBytecode = exports.getLowGasSafeMathBytecode = exports.getLiquidityMathBytecode = exports.getBitMathBytecode = exports.getIUniswapV3PoolStateBytecode = exports.getIUniswapV3PoolOwnerActionsBytecode = exports.getIUniswapV3PoolImmutablesBytecode = exports.getIUniswapV3PoolEventsBytecode = exports.getIUniswapV3PoolDerivedStateBytecode = exports.getIUniswapV3PoolActionsBytecode = exports.getIUniswapV3SwapCallbackBytecode = exports.getIUniswapV3PoolBytecode = exports.getIUniswapV2Router01Bytecode = exports.getIUniswapV2PairBytecode = exports.getTransferHelperBytecode = exports.getBabylonianBytecode = exports.getSignedSafeMathBytecode = exports.getSignedMathBytecode = exports.getSafeMathBytecode = exports.getSafeCastBytecode = exports.getMathBytecode = exports.getIERC165Bytecode = exports.getERC165Bytecode = exports.getMerkleProofBytecode = exports.getECDSABytecode = exports.getStringsBytecode = exports.getStorageSlotBytecode = exports.getCountersBytecode = exports.getContextBytecode = exports.getArraysBytecode = exports.getAddressBytecode = exports.getIERC721MetadataBytecode = void 0;
exports.getOptimism_ParentMessengerBytecode = exports.getOptimism_ChildMessengerBytecode = exports.getArbitrum_ParentMessengerBytecode = exports.getArbitrum_ChildMessengerBytecode = exports.getAdmin_ChildMessengerBytecode = exports.getSpokeBaseBytecode = exports.getOracleSpokeBytecode = exports.getOracleHubBytecode = exports.getOracleBaseBytecode = exports.getGovernorSpokeBytecode = exports.getGovernorHubBytecode = exports.getWithdrawableTestBytecode = exports.getVaultMockBytecode = exports.getUnsignedFixedPointTestBytecode = exports.getUniswapV3MockBytecode = exports.getUniswapV2MockBytecode = exports.getTestableTestBytecode = exports.getSignedFixedPointTestBytecode = exports.getReentrancyMockBytecode = exports.getReentrancyCheckerBytecode = exports.getReentrancyAttackBytecode = exports.getPerpetualMockBytecode = exports.getMulticallMockBytecode = exports.getMultiRoleTestBytecode = exports.getMultiCallerTestBytecode = exports.getMintableERC721Bytecode = exports.getHarvestVaultMockBytecode = exports.getBasicERC20Bytecode = exports.getBalancerMockBytecode = exports.getAncillaryDataTestBytecode = exports.getVaultInterfaceBytecode = exports.getUniswapV3Bytecode = exports.getUniswapV2Bytecode = exports.getTransactionBatcherBytecode = exports.getMulticall2Bytecode = exports.getMulticallBytecode = exports.getIERC20StandardBytecode = exports.getHarvestVaultInterfaceBytecode = exports.getExpandedIERC20Bytecode = exports.getBalancerBytecode = exports.getAddressWhitelistInterfaceBytecode = exports.getDSProxyFactoryBytecode = exports.getDSProxyCacheBytecode = exports.getDSProxyBytecode = exports.getDSNoteBytecode = exports.getDSGuardFactoryBytecode = exports.getDSGuardEventsBytecode = exports.getDSGuardBytecode = exports.getDSAuthorityBytecode = exports.getDSAuthEventsBytecode = void 0;
exports.getProposerV2TestBytecode = exports.getPriceIdentifierSlashingLibaryTestBytecode = exports.getMockAdministrateeBytecode = exports.getGovernorV2TestBytecode = exports.getGovernorTestBytecode = exports.getEmergencyProposerTestBytecode = exports.getVotingV2Bytecode = exports.getVotingTokenBytecode = exports.getVotingBytecode = exports.getVoteTimingBytecode = exports.getTokenMigratorBytecode = exports.getStoreBytecode = exports.getStakerBytecode = exports.getResultComputationV2Bytecode = exports.getResultComputationBytecode = exports.getRegistryBytecode = exports.getProposerV2Bytecode = exports.getProposerBytecode = exports.getIdentifierWhitelistBytecode = exports.getGovernorV2Bytecode = exports.getGovernorBytecode = exports.getFixedSlashSlashingLibraryBytecode = exports.getFinderBytecode = exports.getFinancialContractsAdminBytecode = exports.getEmergencyProposerBytecode = exports.getDesignatedVotingV2FactoryBytecode = exports.getDesignatedVotingV2Bytecode = exports.getDesignatedVotingFactoryBytecode = exports.getDesignatedVotingBytecode = exports.getContractCreatorBytecode = exports.getOracleInterfacesBytecode = exports.getOptimisticOracleConstraintsBytecode = exports.getAdminIdentifierLibBytecode = exports.getOracleMessengerMockBytecode = exports.getOracleBaseMockBytecode = exports.getGovernorMessengerMockBytecode = exports.getParentMessengerInterfaceBytecode = exports.getParentMessengerConsumerInterfaceBytecode = exports.getChildMessengerInterfaceBytecode = exports.getChildMessengerConsumerInterfaceBytecode = exports.getPolygon_ParentMessengerMockBytecode = exports.getPolygon_ChildMessengerMockBytecode = exports.getParentMessengerBaseMockBytecode = exports.getOVM_L1CrossDomainMessengerMockBytecode = exports.getArbitrum_OutboxMockBytecode = exports.getArbitrum_InboxMockBytecode = exports.getArbitrum_BridgeMockBytecode = exports.getPolygon_ParentMessengerBytecode = exports.getPolygon_ChildMessengerBytecode = exports.getParentMessengerBaseBytecode = void 0;
exports.getTokenFactoryBytecode = exports.getSyntheticTokenBytecode = exports.getFundingRateApplierBytecode = exports.getFeePayerBytecode = exports.getEmergencyShutdownableBytecode = exports.getOptimismL2StandardERC20Bytecode = exports.getOptimismL2StandardBridgeBytecode = exports.getOptimismL1StandardBridgeBytecode = exports.getIGenericHandlerBytecode = exports.getIERCHandlerBytecode = exports.getIDepositExecuteBytecode = exports.getGenericHandlerBytecode = exports.getBridgeBytecode = exports.getBobaAddressManagerBytecode = exports.getiArbitrum_OutboxBytecode = exports.getiArbitrum_InboxBytecode = exports.getIBridgeBytecode = exports.getArbSysBytecode = exports.getArbitrum_MessengerBytecode = exports.getArbitrum_CrossDomainEnabledBytecode = exports.getAVM_CrossDomainEnabledBytecode = exports.getVotingInterfaceTestingBytecode = exports.getVotingAncillaryInterfaceTestingBytecode = exports.getMockOracleGovernanceBytecode = exports.getMockOracleCombinedBytecode = exports.getMockOracleAncillaryBytecode = exports.getMockOracleBytecode = exports.getVotingV2InterfaceBytecode = exports.getVotingInterfaceBytecode = exports.getVotingAncillaryInterfaceBytecode = exports.getStoreInterfaceBytecode = exports.getStakerInterfaceBytecode = exports.getSlashingLibraryInterfaceBytecode = exports.getRegistryInterfaceBytecode = exports.getOracleInterfaceBytecode = exports.getOracleGovernanceInterfaceBytecode = exports.getOracleAncillaryInterfaceBytecode = exports.getMinimumVotingAncillaryInterfaceBytecode = exports.getIdentifierWhitelistInterfaceBytecode = exports.getFinderInterfaceBytecode = exports.getAdministrateeInterfaceBytecode = exports.getZeroedSlashingSlashingLibraryTestBytecode = exports.getVotingV2TestBytecode = exports.getVotingV2ControllableTimingBytecode = exports.getVotingTestBytecode = exports.getVoteTimingTestBytecode = exports.getStakerTestBytecode = exports.getStakerControlledTimingBytecode = exports.getResultComputationTestBytecode = exports.getPunitiveSlashingLibraryTestBytecode = void 0;
exports.getTestAvatarBytecode = exports.getOptimisticGovernorTestBytecode = exports.getOptimisticGovernorBytecode = exports.getMerkleDistributorInterfaceBytecode = exports.getMerkleDistributorBytecode = exports.getLongShortPairMockBytecode = exports.getLongShortPairFinancialProjectLibraryTestBytecode = exports.getFundingRateApplierTestBytecode = exports.getFinancialProductLibraryTestBytecode = exports.getExpiringMultiPartyMockBytecode = exports.getPerpetualPositionManagerBytecode = exports.getPerpetualLiquidatableBytecode = exports.getPerpetualLibBytecode = exports.getPerpetualCreatorBytecode = exports.getPerpetualBytecode = exports.getConfigStoreInterfaceBytecode = exports.getConfigStoreBytecode = exports.getOptimisticRewarderTestBytecode = exports.getOptimisticRewarderNoTokenTestBytecode = exports.getOptimisticStakerBytecode = exports.getOptimisticRewarderTokenBytecode = exports.getOptimisticRewarderCreatorBytecode = exports.getOptimisticRewarderBaseBytecode = exports.getOptimisticRewarderNoTokenBytecode = exports.getOptimisticRewarderBytecode = exports.getOptimisticDistributorBytecode = exports.getLongShortPairCreatorBytecode = exports.getLongShortPairBytecode = exports.getPricelessPositionManagerBytecode = exports.getLiquidatableBytecode = exports.getExpiringMultiPartyLibBytecode = exports.getExpiringMultiPartyCreatorBytecode = exports.getExpiringMultiPartyBytecode = exports.getSuccessTokenLongShortPairFinancialProductLibraryBytecode = exports.getSimpleSuccessTokenLongShortPairFinancialProductLibraryBytecode = exports.getRangeBondLongShortPairFinancialProductLibraryBytecode = exports.getLongShortPairFinancialProductLibraryBytecode = exports.getLinearLongShortPairFinancialProductLibraryBytecode = exports.getFlooredLinearLongShortPairFinancialProductLibraryBytecode = exports.getCoveredCallLongShortPairFinancialProductLibraryBytecode = exports.getCappedYieldDollarLongShortPairFinancialProductLibraryBytecode = exports.getBinaryOptionLongShortPairFinancialProductLibraryBytecode = exports.getStructuredNoteFinancialProductLibraryBytecode = exports.getPreExpirationIdentifierTransformationFinancialProductLibraryBytecode = exports.getPostExpirationIdentifierTransformationFinancialProductLibraryBytecode = exports.getKpiOptionsFinancialProductLibraryBytecode = exports.getFinancialProductLibraryBytecode = exports.getExpiringContractInterfaceBytecode = exports.getCoveredCallFinancialProductLibraryBytecode = exports.getWETH9Bytecode = void 0;
exports.getIStoreBytecode = exports.getIFinderBytecode = exports.getReserveCurrencyDisputerBytecode = exports.getIFinancialContractBytecode = exports.getStateSyncMockBytecode = exports.getOracleRootTunnelMockBytecode = exports.getOracleBaseTunnelMockBytecode = exports.getIStateSenderBytecode = exports.getFxRootMockBytecode = exports.getIStateReceiverBytecode = exports.getFxChildMockBytecode = exports.getOracleRootTunnelBytecode = exports.getOracleChildTunnelBytecode = exports.getOracleBaseTunnelBytecode = exports.getGovernorRootTunnelBytecode = exports.getGovernorChildTunnelBytecode = exports.getOptimisticOracleV3InterfaceBytecode = exports.getOptimisticOracleV3CallbackRecipientInterfaceBytecode = exports.getEscalationManagerInterfaceBytecode = exports.getOptimisticOracleV3TestBytecode = exports.getAssertingCallerTestBytecode = exports.getPredictionMarketBytecode = exports.getInsuranceBytecode = exports.getDataAsserterBytecode = exports.getWhitelistDisputerEscalationManagerBytecode = exports.getWhitelistCallerEscalationManagerBytecode = exports.getWhitelistAsserterEscalationManagerBytecode = exports.getSuperbondEscalationManagerBytecode = exports.getOwnerSelectOracleEscalationManagerBytecode = exports.getOwnerDiscardOracleEscalationManagerBytecode = exports.getFullPolicyEscalationManagerBytecode = exports.getDisputeLimitingEscalationManagerBytecode = exports.getBaseEscalationManagerBytecode = exports.getOptimisticOracleV3Bytecode = exports.getSkinnyOptimisticV2RequesterTestBytecode = exports.getSkinnyOptimisticRequesterTestBytecode = exports.getOptimisticRequesterTestBytecode = exports.getSkinnyOptimisticOracleProdBytecode = exports.getSkinnyOptimisticOracleBytecode = exports.getOptimisticOracleBytecode = exports.getSkinnyOptimisticOracleV2InterfaceBytecode = exports.getSkinnyOptimisticOracleInterfaceBytecode = exports.getOptimisticOracleV2InterfaceBytecode = exports.getOptimisticOracleInterfaceBytecode = exports.getSkinnyOptimisticOracleV2ProdBytecode = exports.getSkinnyOptimisticOracleV2Bytecode = exports.getOptimisticRequesterV2Bytecode = exports.getOptimisticRequesterBytecode = exports.getOptimisticOracleV2Bytecode = exports.getTestModuleProxyFactoryBytecode = void 0;
exports.getOVM_OETH_BridgeDepositBoxAddress = exports.getRateModelStoreAddress = exports.getOptimism_WrapperAddress = exports.getOptimism_MessengerAddress = exports.getArbitrum_MessengerAddress = exports.getWBTC_BridgePoolAddress = exports.getBADGER_BridgePoolAddress = exports.getUMA_BridgePoolAddress = exports.getUSDC_BridgePoolAddress = exports.getWETH_BridgePoolAddress = exports.getBridgeAdminAddress = exports.getMessengerMockBytecode = exports.getBridgeDepositBoxMockBytecode = exports.getOptimism_WrapperBytecode = exports.getOptimism_MessengerBytecode = exports.getOVM_OETH_BridgeDepositBoxBytecode = exports.getOVM_BridgeDepositBoxBytecode = exports.getMessengerInterfaceBytecode = exports.getBridgePoolInterfaceBytecode = exports.getBridgeAdminInterfaceBytecode = exports.getStandardBridgeLikeBytecode = exports.getAVM_BridgeDepositBoxBytecode = exports.getRateModelStoreBytecode = exports.getBridgePoolProdBytecode = exports.getBridgePoolBytecode = exports.getWETH9LikeBytecode = exports.getTokenLikeBytecode = exports.getBridgeDepositBoxBytecode = exports.getBridgeAdminBytecode = exports.getiOVM_CrossDomainMessengerBytecode = exports.getOVM_CrossDomainEnabledBytecode = exports.getIL2ERC20BridgeBytecode = exports.getVotingUpgraderV2Bytecode = exports.getVotingUpgraderBytecode = exports.getUmip3UpgraderBytecode = exports.getOriginValidatorBytecode = exports.getSnapshotVotingPowerBytecode = exports.getUniswapV3BrokerBytecode = exports.getTickMathBytecode = exports.getTickBitmapBytecode = exports.getSqrtPriceMathBytecode = exports.getFixedPoint96Bytecode = exports.getUniswapV2BrokerBytecode = exports.getFullMathBytecode = exports.getLspUniswapV2BrokerBytecode = exports.getTokenSenderBytecode = exports.getTokenRedeemerBytecode = exports.getPositionSettlerBytecode = exports.getLiquidationWithdrawerBytecode = exports.getReserveCurrencyLiquidatorBytecode = void 0;
exports.getOriginValidatorAddress = exports.getOptimisticGovernorAddress = exports.getVotingUpgraderV2Address = exports.getEmergencyProposerAddress = exports.getProposerV2Address = exports.getGovernorV2Address = exports.getVotingV2Address = exports.getFixedSlashSlashingLibraryAddress = exports.getOptimisticOracleV3Address = exports.getProposerAddress = exports.getOptimism_ParentMessengerAddress = exports.getBoba_ParentMessengerAddress = exports.getMulticall2Address = exports.getGovernorHubAddress = exports.getOracleHubAddress = exports.getArbitrum_ParentMessengerAddress = exports.getSkinnyOptimisticOracleAddress = exports.getSuccessTokenLongShortPairFinancialProductLibraryAddress = exports.getSimpleSuccessTokenLongShortPairFinancialProductLibraryAddress = exports.getCappedYieldDollarLongShortPairFinancialProductLibraryAddress = exports.getRangeBondLongShortPairFinancialProductLibraryAddress = exports.getLinearLongShortPairFinancialProductLibraryAddress = exports.getCoveredCallLongShortPairFinancialProductLibraryAddress = exports.getBinaryOptionLongShortPairFinancialProductLibraryAddress = exports.getLongShortPairCreatorAddress = exports.getGovernorRootTunnelAddress = exports.getOracleRootTunnelAddress = exports.getMockOracleAncillaryAddress = exports.getDSGuardFactoryAddress = exports.getDSProxyFactoryAddress = exports.getPerpetualCreatorAddress = exports.getPerpetualLibAddress = exports.getOptimisticOracleV2Address = exports.getOptimisticOracleAddress = exports.getExpiringMultiPartyCreatorAddress = exports.getExpiringMultiPartyLibAddress = exports.getAddressWhitelistAddress = exports.getTokenFactoryAddress = exports.getWETH9Address = exports.getDesignatedVotingV2FactoryAddress = exports.getDesignatedVotingFactoryAddress = exports.getGovernorAddress = exports.getStoreAddress = exports.getFinancialContractsAdminAddress = exports.getRegistryAddress = exports.getVotingAddress = exports.getIdentifierWhitelistAddress = exports.getVotingTokenAddress = exports.getFinderAddress = exports.getAVM_BridgeDepositBoxAddress = void 0;
exports.getContractNames = exports.getPolygon_ChildMessengerAddress = exports.getSkinnyOptimisticOracleV2Address = exports.getPolygon_ParentMessengerAddress = exports.getArbitrum_ChildMessengerAddress = exports.getTestnetERC20Address = exports.getGenericHandlerAddress = exports.getBridgeAddress = exports.getBoba_ChildMessengerAddress = exports.getMulticall3Address = exports.getGovernorChildTunnelAddress = exports.getOracleChildTunnelAddress = exports.getAdmin_ChildMessengerAddress = exports.getOptimism_ChildMessengerAddress = exports.getGovernorSpokeAddress = exports.getOracleSpokeAddress = void 0;
var ethers_1 = require("../typechain/core/ethers");
Object.defineProperty(exports, "CrossDomainEnabledEthers__factory", { enumerable: true, get: function () { return ethers_1.CrossDomainEnabled__factory; } });
var ethers_2 = require("../typechain/core/ethers");
Object.defineProperty(exports, "ICrossDomainMessengerEthers__factory", { enumerable: true, get: function () { return ethers_2.ICrossDomainMessenger__factory; } });
var ethers_3 = require("../typechain/core/ethers");
Object.defineProperty(exports, "ModuleEthers__factory", { enumerable: true, get: function () { return ethers_3.Module__factory; } });
var ethers_4 = require("../typechain/core/ethers");
Object.defineProperty(exports, "FactoryFriendlyEthers__factory", { enumerable: true, get: function () { return ethers_4.FactoryFriendly__factory; } });
var ethers_5 = require("../typechain/core/ethers");
Object.defineProperty(exports, "ModuleProxyFactoryEthers__factory", { enumerable: true, get: function () { return ethers_5.ModuleProxyFactory__factory; } });
var ethers_6 = require("../typechain/core/ethers");
Object.defineProperty(exports, "BaseGuardEthers__factory", { enumerable: true, get: function () { return ethers_6.BaseGuard__factory; } });
var ethers_7 = require("../typechain/core/ethers");
Object.defineProperty(exports, "GuardableEthers__factory", { enumerable: true, get: function () { return ethers_7.Guardable__factory; } });
var ethers_8 = require("../typechain/core/ethers");
Object.defineProperty(exports, "IAvatarEthers__factory", { enumerable: true, get: function () { return ethers_8.IAvatar__factory; } });
var ethers_9 = require("../typechain/core/ethers");
Object.defineProperty(exports, "IGuardEthers__factory", { enumerable: true, get: function () { return ethers_9.IGuard__factory; } });
var ethers_10 = require("../typechain/core/ethers");
Object.defineProperty(exports, "FxBaseChildTunnelEthers__factory", { enumerable: true, get: function () { return ethers_10.FxBaseChildTunnel__factory; } });
var ethers_11 = require("../typechain/core/ethers");
Object.defineProperty(exports, "IFxMessageProcessorEthers__factory", { enumerable: true, get: function () { return ethers_11.IFxMessageProcessor__factory; } });
var ethers_12 = require("../typechain/core/ethers");
Object.defineProperty(exports, "FxBaseRootTunnelEthers__factory", { enumerable: true, get: function () { return ethers_12.FxBaseRootTunnel__factory; } });
var ethers_13 = require("../typechain/core/ethers");
Object.defineProperty(exports, "ICheckpointManagerEthers__factory", { enumerable: true, get: function () { return ethers_13.ICheckpointManager__factory; } });
var ethers_14 = require("../typechain/core/ethers");
Object.defineProperty(exports, "IFxStateSenderEthers__factory", { enumerable: true, get: function () { return ethers_14.IFxStateSender__factory; } });
var ethers_15 = require("../typechain/core/ethers");
Object.defineProperty(exports, "OwnableUpgradeableEthers__factory", { enumerable: true, get: function () { return ethers_15.OwnableUpgradeable__factory; } });
var ethers_16 = require("../typechain/core/ethers");
Object.defineProperty(exports, "InitializableEthers__factory", { enumerable: true, get: function () { return ethers_16.Initializable__factory; } });
var ethers_17 = require("../typechain/core/ethers");
Object.defineProperty(exports, "ContextUpgradeableEthers__factory", { enumerable: true, get: function () { return ethers_17.ContextUpgradeable__factory; } });
var ethers_18 = require("../typechain/core/ethers");
Object.defineProperty(exports, "AccessControlEthers__factory", { enumerable: true, get: function () { return ethers_18.AccessControl__factory; } });
var ethers_19 = require("../typechain/core/ethers");
Object.defineProperty(exports, "IAccessControlEthers__factory", { enumerable: true, get: function () { return ethers_19.IAccessControl__factory; } });
var ethers_20 = require("../typechain/core/ethers");
Object.defineProperty(exports, "OwnableEthers__factory", { enumerable: true, get: function () { return ethers_20.Ownable__factory; } });
var ethers_21 = require("../typechain/core/ethers");
Object.defineProperty(exports, "PausableEthers__factory", { enumerable: true, get: function () { return ethers_21.Pausable__factory; } });
var ethers_22 = require("../typechain/core/ethers");
Object.defineProperty(exports, "ERC20Ethers__factory", { enumerable: true, get: function () { return ethers_22.ERC20__factory; } });
var ethers_23 = require("../typechain/core/ethers");
Object.defineProperty(exports, "IERC20Ethers__factory", { enumerable: true, get: function () { return ethers_23.IERC20__factory; } });
var ethers_24 = require("../typechain/core/ethers");
Object.defineProperty(exports, "ERC20SnapshotEthers__factory", { enumerable: true, get: function () { return ethers_24.ERC20Snapshot__factory; } });
var ethers_25 = require("../typechain/core/ethers");
Object.defineProperty(exports, "IERC20MetadataEthers__factory", { enumerable: true, get: function () { return ethers_25.IERC20Metadata__factory; } });
var ethers_26 = require("../typechain/core/ethers");
Object.defineProperty(exports, "IERC20PermitEthers__factory", { enumerable: true, get: function () { return ethers_26.IERC20Permit__factory; } });
var ethers_27 = require("../typechain/core/ethers");
Object.defineProperty(exports, "ERC721Ethers__factory", { enumerable: true, get: function () { return ethers_27.ERC721__factory; } });
var ethers_28 = require("../typechain/core/ethers");
Object.defineProperty(exports, "IERC721Ethers__factory", { enumerable: true, get: function () { return ethers_28.IERC721__factory; } });
var ethers_29 = require("../typechain/core/ethers");
Object.defineProperty(exports, "IERC721ReceiverEthers__factory", { enumerable: true, get: function () { return ethers_29.IERC721Receiver__factory; } });
var ethers_30 = require("../typechain/core/ethers");
Object.defineProperty(exports, "IERC721MetadataEthers__factory", { enumerable: true, get: function () { return ethers_30.IERC721Metadata__factory; } });
var ethers_31 = require("../typechain/core/ethers");
Object.defineProperty(exports, "ERC165Ethers__factory", { enumerable: true, get: function () { return ethers_31.ERC165__factory; } });
var ethers_32 = require("../typechain/core/ethers");
Object.defineProperty(exports, "IERC165Ethers__factory", { enumerable: true, get: function () { return ethers_32.IERC165__factory; } });
var ethers_33 = require("../typechain/core/ethers");
Object.defineProperty(exports, "IUniswapV2PairEthers__factory", { enumerable: true, get: function () { return ethers_33.IUniswapV2Pair__factory; } });
var ethers_34 = require("../typechain/core/ethers");
Object.defineProperty(exports, "IUniswapV2Router01Ethers__factory", { enumerable: true, get: function () { return ethers_34.IUniswapV2Router01__factory; } });
var ethers_35 = require("../typechain/core/ethers");
Object.defineProperty(exports, "IUniswapV3PoolEthers__factory", { enumerable: true, get: function () { return ethers_35.IUniswapV3Pool__factory; } });
var ethers_36 = require("../typechain/core/ethers");
Object.defineProperty(exports, "IUniswapV3SwapCallbackEthers__factory", { enumerable: true, get: function () { return ethers_36.IUniswapV3SwapCallback__factory; } });
var ethers_37 = require("../typechain/core/ethers");
Object.defineProperty(exports, "IUniswapV3PoolActionsEthers__factory", { enumerable: true, get: function () { return ethers_37.IUniswapV3PoolActions__factory; } });
var ethers_38 = require("../typechain/core/ethers");
Object.defineProperty(exports, "IUniswapV3PoolDerivedStateEthers__factory", { enumerable: true, get: function () { return ethers_38.IUniswapV3PoolDerivedState__factory; } });
var ethers_39 = require("../typechain/core/ethers");
Object.defineProperty(exports, "IUniswapV3PoolEventsEthers__factory", { enumerable: true, get: function () { return ethers_39.IUniswapV3PoolEvents__factory; } });
var ethers_40 = require("../typechain/core/ethers");
Object.defineProperty(exports, "IUniswapV3PoolImmutablesEthers__factory", { enumerable: true, get: function () { return ethers_40.IUniswapV3PoolImmutables__factory; } });
var ethers_41 = require("../typechain/core/ethers");
Object.defineProperty(exports, "IUniswapV3PoolOwnerActionsEthers__factory", { enumerable: true, get: function () { return ethers_41.IUniswapV3PoolOwnerActions__factory; } });
var ethers_42 = require("../typechain/core/ethers");
Object.defineProperty(exports, "IUniswapV3PoolStateEthers__factory", { enumerable: true, get: function () { return ethers_42.IUniswapV3PoolState__factory; } });
var ethers_43 = require("../typechain/core/ethers");
Object.defineProperty(exports, "ISwapRouterEthers__factory", { enumerable: true, get: function () { return ethers_43.ISwapRouter__factory; } });
var ethers_44 = require("../typechain/core/ethers");
Object.defineProperty(exports, "AddressWhitelistEthers__factory", { enumerable: true, get: function () { return ethers_44.AddressWhitelist__factory; } });
var ethers_45 = require("../typechain/core/ethers");
Object.defineProperty(exports, "ExpandedERC20Ethers__factory", { enumerable: true, get: function () { return ethers_45.ExpandedERC20__factory; } });
var ethers_46 = require("../typechain/core/ethers");
Object.defineProperty(exports, "HasFinderEthers__factory", { enumerable: true, get: function () { return ethers_46.HasFinder__factory; } });
var ethers_47 = require("../typechain/core/ethers");
Object.defineProperty(exports, "LockableEthers__factory", { enumerable: true, get: function () { return ethers_47.Lockable__factory; } });
var ethers_48 = require("../typechain/core/ethers");
Object.defineProperty(exports, "MultiCallerEthers__factory", { enumerable: true, get: function () { return ethers_48.MultiCaller__factory; } });
var ethers_49 = require("../typechain/core/ethers");
Object.defineProperty(exports, "MultiRoleEthers__factory", { enumerable: true, get: function () { return ethers_49.MultiRole__factory; } });
var ethers_50 = require("../typechain/core/ethers");
Object.defineProperty(exports, "Multicall3Ethers__factory", { enumerable: true, get: function () { return ethers_50.Multicall3__factory; } });
var ethers_51 = require("../typechain/core/ethers");
Object.defineProperty(exports, "StakeableEthers__factory", { enumerable: true, get: function () { return ethers_51.Stakeable__factory; } });
var ethers_52 = require("../typechain/core/ethers");
Object.defineProperty(exports, "TestableEthers__factory", { enumerable: true, get: function () { return ethers_52.Testable__factory; } });
var ethers_53 = require("../typechain/core/ethers");
Object.defineProperty(exports, "TestnetERC20Ethers__factory", { enumerable: true, get: function () { return ethers_53.TestnetERC20__factory; } });
var ethers_54 = require("../typechain/core/ethers");
Object.defineProperty(exports, "TimerEthers__factory", { enumerable: true, get: function () { return ethers_54.Timer__factory; } });
var ethers_55 = require("../typechain/core/ethers");
Object.defineProperty(exports, "WithdrawableEthers__factory", { enumerable: true, get: function () { return ethers_55.Withdrawable__factory; } });
var ethers_56 = require("../typechain/core/ethers");
Object.defineProperty(exports, "DSAuthEthers__factory", { enumerable: true, get: function () { return ethers_56.DSAuth__factory; } });
var ethers_57 = require("../typechain/core/ethers");
Object.defineProperty(exports, "DSAuthEventsEthers__factory", { enumerable: true, get: function () { return ethers_57.DSAuthEvents__factory; } });
var ethers_58 = require("../typechain/core/ethers");
Object.defineProperty(exports, "DSAuthorityEthers__factory", { enumerable: true, get: function () { return ethers_58.DSAuthority__factory; } });
var ethers_59 = require("../typechain/core/ethers");
Object.defineProperty(exports, "DSGuardEthers__factory", { enumerable: true, get: function () { return ethers_59.DSGuard__factory; } });
var ethers_60 = require("../typechain/core/ethers");
Object.defineProperty(exports, "DSGuardEventsEthers__factory", { enumerable: true, get: function () { return ethers_60.DSGuardEvents__factory; } });
var ethers_61 = require("../typechain/core/ethers");
Object.defineProperty(exports, "DSGuardFactoryEthers__factory", { enumerable: true, get: function () { return ethers_61.DSGuardFactory__factory; } });
var ethers_62 = require("../typechain/core/ethers");
Object.defineProperty(exports, "DSNoteEthers__factory", { enumerable: true, get: function () { return ethers_62.DSNote__factory; } });
var ethers_63 = require("../typechain/core/ethers");
Object.defineProperty(exports, "DSProxyEthers__factory", { enumerable: true, get: function () { return ethers_63.DSProxy__factory; } });
var ethers_64 = require("../typechain/core/ethers");
Object.defineProperty(exports, "DSProxyCacheEthers__factory", { enumerable: true, get: function () { return ethers_64.DSProxyCache__factory; } });
var ethers_65 = require("../typechain/core/ethers");
Object.defineProperty(exports, "DSProxyFactoryEthers__factory", { enumerable: true, get: function () { return ethers_65.DSProxyFactory__factory; } });
var ethers_66 = require("../typechain/core/ethers");
Object.defineProperty(exports, "AddressWhitelistInterfaceEthers__factory", { enumerable: true, get: function () { return ethers_66.AddressWhitelistInterface__factory; } });
var ethers_67 = require("../typechain/core/ethers");
Object.defineProperty(exports, "BalancerEthers__factory", { enumerable: true, get: function () { return ethers_67.Balancer__factory; } });
var ethers_68 = require("../typechain/core/ethers");
Object.defineProperty(exports, "ExpandedIERC20Ethers__factory", { enumerable: true, get: function () { return ethers_68.ExpandedIERC20__factory; } });
var ethers_69 = require("../typechain/core/ethers");
Object.defineProperty(exports, "HarvestVaultInterfaceEthers__factory", { enumerable: true, get: function () { return ethers_69.HarvestVaultInterface__factory; } });
var ethers_70 = require("../typechain/core/ethers");
Object.defineProperty(exports, "IERC20StandardEthers__factory", { enumerable: true, get: function () { return ethers_70.IERC20Standard__factory; } });
var ethers_71 = require("../typechain/core/ethers");
Object.defineProperty(exports, "MulticallEthers__factory", { enumerable: true, get: function () { return ethers_71.Multicall__factory; } });
var ethers_72 = require("../typechain/core/ethers");
Object.defineProperty(exports, "Multicall2Ethers__factory", { enumerable: true, get: function () { return ethers_72.Multicall2__factory; } });
var ethers_73 = require("../typechain/core/ethers");
Object.defineProperty(exports, "TransactionBatcherEthers__factory", { enumerable: true, get: function () { return ethers_73.TransactionBatcher__factory; } });
var ethers_74 = require("../typechain/core/ethers");
Object.defineProperty(exports, "UniswapV2Ethers__factory", { enumerable: true, get: function () { return ethers_74.UniswapV2__factory; } });
var ethers_75 = require("../typechain/core/ethers");
Object.defineProperty(exports, "UniswapV3Ethers__factory", { enumerable: true, get: function () { return ethers_75.UniswapV3__factory; } });
var ethers_76 = require("../typechain/core/ethers");
Object.defineProperty(exports, "VaultInterfaceEthers__factory", { enumerable: true, get: function () { return ethers_76.VaultInterface__factory; } });
var ethers_77 = require("../typechain/core/ethers");
Object.defineProperty(exports, "AncillaryDataTestEthers__factory", { enumerable: true, get: function () { return ethers_77.AncillaryDataTest__factory; } });
var ethers_78 = require("../typechain/core/ethers");
Object.defineProperty(exports, "BalancerMockEthers__factory", { enumerable: true, get: function () { return ethers_78.BalancerMock__factory; } });
var ethers_79 = require("../typechain/core/ethers");
Object.defineProperty(exports, "BasicERC20Ethers__factory", { enumerable: true, get: function () { return ethers_79.BasicERC20__factory; } });
var ethers_80 = require("../typechain/core/ethers");
Object.defineProperty(exports, "HarvestVaultMockEthers__factory", { enumerable: true, get: function () { return ethers_80.HarvestVaultMock__factory; } });
var ethers_81 = require("../typechain/core/ethers");
Object.defineProperty(exports, "MintableERC721Ethers__factory", { enumerable: true, get: function () { return ethers_81.MintableERC721__factory; } });
var ethers_82 = require("../typechain/core/ethers");
Object.defineProperty(exports, "MultiCallerTestEthers__factory", { enumerable: true, get: function () { return ethers_82.MultiCallerTest__factory; } });
var ethers_83 = require("../typechain/core/ethers");
Object.defineProperty(exports, "MultiRoleTestEthers__factory", { enumerable: true, get: function () { return ethers_83.MultiRoleTest__factory; } });
var ethers_84 = require("../typechain/core/ethers");
Object.defineProperty(exports, "MulticallMockEthers__factory", { enumerable: true, get: function () { return ethers_84.MulticallMock__factory; } });
var ethers_85 = require("../typechain/core/ethers");
Object.defineProperty(exports, "PerpetualMockEthers__factory", { enumerable: true, get: function () { return ethers_85.PerpetualMock__factory; } });
var ethers_86 = require("../typechain/core/ethers");
Object.defineProperty(exports, "ReentrancyAttackEthers__factory", { enumerable: true, get: function () { return ethers_86.ReentrancyAttack__factory; } });
var ethers_87 = require("../typechain/core/ethers");
Object.defineProperty(exports, "ReentrancyCheckerEthers__factory", { enumerable: true, get: function () { return ethers_87.ReentrancyChecker__factory; } });
var ethers_88 = require("../typechain/core/ethers");
Object.defineProperty(exports, "ReentrancyMockEthers__factory", { enumerable: true, get: function () { return ethers_88.ReentrancyMock__factory; } });
var ethers_89 = require("../typechain/core/ethers");
Object.defineProperty(exports, "SignedFixedPointTestEthers__factory", { enumerable: true, get: function () { return ethers_89.SignedFixedPointTest__factory; } });
var ethers_90 = require("../typechain/core/ethers");
Object.defineProperty(exports, "TestableTestEthers__factory", { enumerable: true, get: function () { return ethers_90.TestableTest__factory; } });
var ethers_91 = require("../typechain/core/ethers");
Object.defineProperty(exports, "UniswapV2MockEthers__factory", { enumerable: true, get: function () { return ethers_91.UniswapV2Mock__factory; } });
var ethers_92 = require("../typechain/core/ethers");
Object.defineProperty(exports, "UniswapV3MockEthers__factory", { enumerable: true, get: function () { return ethers_92.UniswapV3Mock__factory; } });
var ethers_93 = require("../typechain/core/ethers");
Object.defineProperty(exports, "UnsignedFixedPointTestEthers__factory", { enumerable: true, get: function () { return ethers_93.UnsignedFixedPointTest__factory; } });
var ethers_94 = require("../typechain/core/ethers");
Object.defineProperty(exports, "VaultMockEthers__factory", { enumerable: true, get: function () { return ethers_94.VaultMock__factory; } });
var ethers_95 = require("../typechain/core/ethers");
Object.defineProperty(exports, "WithdrawableTestEthers__factory", { enumerable: true, get: function () { return ethers_95.WithdrawableTest__factory; } });
var ethers_96 = require("../typechain/core/ethers");
Object.defineProperty(exports, "GovernorHubEthers__factory", { enumerable: true, get: function () { return ethers_96.GovernorHub__factory; } });
var ethers_97 = require("../typechain/core/ethers");
Object.defineProperty(exports, "GovernorSpokeEthers__factory", { enumerable: true, get: function () { return ethers_97.GovernorSpoke__factory; } });
var ethers_98 = require("../typechain/core/ethers");
Object.defineProperty(exports, "OracleBaseEthers__factory", { enumerable: true, get: function () { return ethers_98.OracleBase__factory; } });
var ethers_99 = require("../typechain/core/ethers");
Object.defineProperty(exports, "OracleHubEthers__factory", { enumerable: true, get: function () { return ethers_99.OracleHub__factory; } });
var ethers_100 = require("../typechain/core/ethers");
Object.defineProperty(exports, "OracleSpokeEthers__factory", { enumerable: true, get: function () { return ethers_100.OracleSpoke__factory; } });
var ethers_101 = require("../typechain/core/ethers");
Object.defineProperty(exports, "SpokeBaseEthers__factory", { enumerable: true, get: function () { return ethers_101.SpokeBase__factory; } });
var ethers_102 = require("../typechain/core/ethers");
Object.defineProperty(exports, "ParentMessengerBaseEthers__factory", { enumerable: true, get: function () { return ethers_102.ParentMessengerBase__factory; } });
var ethers_103 = require("../typechain/core/ethers");
Object.defineProperty(exports, "ParentMessengerBaseMockEthers__factory", { enumerable: true, get: function () { return ethers_103.ParentMessengerBaseMock__factory; } });
var ethers_104 = require("../typechain/core/ethers");
Object.defineProperty(exports, "ChildMessengerConsumerInterfaceEthers__factory", { enumerable: true, get: function () { return ethers_104.ChildMessengerConsumerInterface__factory; } });
var ethers_105 = require("../typechain/core/ethers");
Object.defineProperty(exports, "ChildMessengerInterfaceEthers__factory", { enumerable: true, get: function () { return ethers_105.ChildMessengerInterface__factory; } });
var ethers_106 = require("../typechain/core/ethers");
Object.defineProperty(exports, "ParentMessengerConsumerInterfaceEthers__factory", { enumerable: true, get: function () { return ethers_106.ParentMessengerConsumerInterface__factory; } });
var ethers_107 = require("../typechain/core/ethers");
Object.defineProperty(exports, "ParentMessengerInterfaceEthers__factory", { enumerable: true, get: function () { return ethers_107.ParentMessengerInterface__factory; } });
var ethers_108 = require("../typechain/core/ethers");
Object.defineProperty(exports, "GovernorMessengerMockEthers__factory", { enumerable: true, get: function () { return ethers_108.GovernorMessengerMock__factory; } });
var ethers_109 = require("../typechain/core/ethers");
Object.defineProperty(exports, "OracleBaseMockEthers__factory", { enumerable: true, get: function () { return ethers_109.OracleBaseMock__factory; } });
var ethers_110 = require("../typechain/core/ethers");
Object.defineProperty(exports, "OracleMessengerMockEthers__factory", { enumerable: true, get: function () { return ethers_110.OracleMessengerMock__factory; } });
var ethers_111 = require("../typechain/core/ethers");
Object.defineProperty(exports, "OptimisticOracleConstraintsEthers__factory", { enumerable: true, get: function () { return ethers_111.OptimisticOracleConstraints__factory; } });
var ethers_112 = require("../typechain/core/ethers");
Object.defineProperty(exports, "OracleInterfacesEthers__factory", { enumerable: true, get: function () { return ethers_112.OracleInterfaces__factory; } });
var ethers_113 = require("../typechain/core/ethers");
Object.defineProperty(exports, "DesignatedVotingEthers__factory", { enumerable: true, get: function () { return ethers_113.DesignatedVoting__factory; } });
var ethers_114 = require("../typechain/core/ethers");
Object.defineProperty(exports, "DesignatedVotingFactoryEthers__factory", { enumerable: true, get: function () { return ethers_114.DesignatedVotingFactory__factory; } });
var ethers_115 = require("../typechain/core/ethers");
Object.defineProperty(exports, "DesignatedVotingV2Ethers__factory", { enumerable: true, get: function () { return ethers_115.DesignatedVotingV2__factory; } });
var ethers_116 = require("../typechain/core/ethers");
Object.defineProperty(exports, "DesignatedVotingV2FactoryEthers__factory", { enumerable: true, get: function () { return ethers_116.DesignatedVotingV2Factory__factory; } });
var ethers_117 = require("../typechain/core/ethers");
Object.defineProperty(exports, "EmergencyProposerEthers__factory", { enumerable: true, get: function () { return ethers_117.EmergencyProposer__factory; } });
var ethers_118 = require("../typechain/core/ethers");
Object.defineProperty(exports, "FinancialContractsAdminEthers__factory", { enumerable: true, get: function () { return ethers_118.FinancialContractsAdmin__factory; } });
var ethers_119 = require("../typechain/core/ethers");
Object.defineProperty(exports, "FinderEthers__factory", { enumerable: true, get: function () { return ethers_119.Finder__factory; } });
var ethers_120 = require("../typechain/core/ethers");
Object.defineProperty(exports, "FixedSlashSlashingLibraryEthers__factory", { enumerable: true, get: function () { return ethers_120.FixedSlashSlashingLibrary__factory; } });
var ethers_121 = require("../typechain/core/ethers");
Object.defineProperty(exports, "GovernorEthers__factory", { enumerable: true, get: function () { return ethers_121.Governor__factory; } });
var ethers_122 = require("../typechain/core/ethers");
Object.defineProperty(exports, "GovernorV2Ethers__factory", { enumerable: true, get: function () { return ethers_122.GovernorV2__factory; } });
var ethers_123 = require("../typechain/core/ethers");
Object.defineProperty(exports, "IdentifierWhitelistEthers__factory", { enumerable: true, get: function () { return ethers_123.IdentifierWhitelist__factory; } });
var ethers_124 = require("../typechain/core/ethers");
Object.defineProperty(exports, "ProposerEthers__factory", { enumerable: true, get: function () { return ethers_124.Proposer__factory; } });
var ethers_125 = require("../typechain/core/ethers");
Object.defineProperty(exports, "ProposerV2Ethers__factory", { enumerable: true, get: function () { return ethers_125.ProposerV2__factory; } });
var ethers_126 = require("../typechain/core/ethers");
Object.defineProperty(exports, "RegistryEthers__factory", { enumerable: true, get: function () { return ethers_126.Registry__factory; } });
var ethers_127 = require("../typechain/core/ethers");
Object.defineProperty(exports, "StakerEthers__factory", { enumerable: true, get: function () { return ethers_127.Staker__factory; } });
var ethers_128 = require("../typechain/core/ethers");
Object.defineProperty(exports, "StoreEthers__factory", { enumerable: true, get: function () { return ethers_128.Store__factory; } });
var ethers_129 = require("../typechain/core/ethers");
Object.defineProperty(exports, "TokenMigratorEthers__factory", { enumerable: true, get: function () { return ethers_129.TokenMigrator__factory; } });
var ethers_130 = require("../typechain/core/ethers");
Object.defineProperty(exports, "VotingEthers__factory", { enumerable: true, get: function () { return ethers_130.Voting__factory; } });
var ethers_131 = require("../typechain/core/ethers");
Object.defineProperty(exports, "VotingTokenEthers__factory", { enumerable: true, get: function () { return ethers_131.VotingToken__factory; } });
var ethers_132 = require("../typechain/core/ethers");
Object.defineProperty(exports, "VotingV2Ethers__factory", { enumerable: true, get: function () { return ethers_132.VotingV2__factory; } });
var ethers_133 = require("../typechain/core/ethers");
Object.defineProperty(exports, "EmergencyProposerTestEthers__factory", { enumerable: true, get: function () { return ethers_133.EmergencyProposerTest__factory; } });
var ethers_134 = require("../typechain/core/ethers");
Object.defineProperty(exports, "GovernorTestEthers__factory", { enumerable: true, get: function () { return ethers_134.GovernorTest__factory; } });
var ethers_135 = require("../typechain/core/ethers");
Object.defineProperty(exports, "GovernorV2TestEthers__factory", { enumerable: true, get: function () { return ethers_135.GovernorV2Test__factory; } });
var ethers_136 = require("../typechain/core/ethers");
Object.defineProperty(exports, "MockAdministrateeEthers__factory", { enumerable: true, get: function () { return ethers_136.MockAdministratee__factory; } });
var ethers_137 = require("../typechain/core/ethers");
Object.defineProperty(exports, "PriceIdentifierSlashingLibaryTestEthers__factory", { enumerable: true, get: function () { return ethers_137.PriceIdentifierSlashingLibaryTest__factory; } });
var ethers_138 = require("../typechain/core/ethers");
Object.defineProperty(exports, "ProposerV2TestEthers__factory", { enumerable: true, get: function () { return ethers_138.ProposerV2Test__factory; } });
var ethers_139 = require("../typechain/core/ethers");
Object.defineProperty(exports, "PunitiveSlashingLibraryTestEthers__factory", { enumerable: true, get: function () { return ethers_139.PunitiveSlashingLibraryTest__factory; } });
var ethers_140 = require("../typechain/core/ethers");
Object.defineProperty(exports, "ResultComputationTestEthers__factory", { enumerable: true, get: function () { return ethers_140.ResultComputationTest__factory; } });
var ethers_141 = require("../typechain/core/ethers");
Object.defineProperty(exports, "StakerControlledTimingEthers__factory", { enumerable: true, get: function () { return ethers_141.StakerControlledTiming__factory; } });
var ethers_142 = require("../typechain/core/ethers");
Object.defineProperty(exports, "StakerTestEthers__factory", { enumerable: true, get: function () { return ethers_142.StakerTest__factory; } });
var ethers_143 = require("../typechain/core/ethers");
Object.defineProperty(exports, "VoteTimingTestEthers__factory", { enumerable: true, get: function () { return ethers_143.VoteTimingTest__factory; } });
var ethers_144 = require("../typechain/core/ethers");
Object.defineProperty(exports, "VotingTestEthers__factory", { enumerable: true, get: function () { return ethers_144.VotingTest__factory; } });
var ethers_145 = require("../typechain/core/ethers");
Object.defineProperty(exports, "VotingV2ControllableTimingEthers__factory", { enumerable: true, get: function () { return ethers_145.VotingV2ControllableTiming__factory; } });
var ethers_146 = require("../typechain/core/ethers");
Object.defineProperty(exports, "VotingV2TestEthers__factory", { enumerable: true, get: function () { return ethers_146.VotingV2Test__factory; } });
var ethers_147 = require("../typechain/core/ethers");
Object.defineProperty(exports, "ZeroedSlashingSlashingLibraryTestEthers__factory", { enumerable: true, get: function () { return ethers_147.ZeroedSlashingSlashingLibraryTest__factory; } });
var ethers_148 = require("../typechain/core/ethers");
Object.defineProperty(exports, "AdministrateeInterfaceEthers__factory", { enumerable: true, get: function () { return ethers_148.AdministrateeInterface__factory; } });
var ethers_149 = require("../typechain/core/ethers");
Object.defineProperty(exports, "FinderInterfaceEthers__factory", { enumerable: true, get: function () { return ethers_149.FinderInterface__factory; } });
var ethers_150 = require("../typechain/core/ethers");
Object.defineProperty(exports, "IdentifierWhitelistInterfaceEthers__factory", { enumerable: true, get: function () { return ethers_150.IdentifierWhitelistInterface__factory; } });
var ethers_151 = require("../typechain/core/ethers");
Object.defineProperty(exports, "MinimumVotingAncillaryInterfaceEthers__factory", { enumerable: true, get: function () { return ethers_151.MinimumVotingAncillaryInterface__factory; } });
var ethers_152 = require("../typechain/core/ethers");
Object.defineProperty(exports, "OracleAncillaryInterfaceEthers__factory", { enumerable: true, get: function () { return ethers_152.OracleAncillaryInterface__factory; } });
var ethers_153 = require("../typechain/core/ethers");
Object.defineProperty(exports, "OracleGovernanceInterfaceEthers__factory", { enumerable: true, get: function () { return ethers_153.OracleGovernanceInterface__factory; } });
var ethers_154 = require("../typechain/core/ethers");
Object.defineProperty(exports, "OracleInterfaceEthers__factory", { enumerable: true, get: function () { return ethers_154.OracleInterface__factory; } });
var ethers_155 = require("../typechain/core/ethers");
Object.defineProperty(exports, "RegistryInterfaceEthers__factory", { enumerable: true, get: function () { return ethers_155.RegistryInterface__factory; } });
var ethers_156 = require("../typechain/core/ethers");
Object.defineProperty(exports, "SlashingLibraryInterfaceEthers__factory", { enumerable: true, get: function () { return ethers_156.SlashingLibraryInterface__factory; } });
var ethers_157 = require("../typechain/core/ethers");
Object.defineProperty(exports, "StakerInterfaceEthers__factory", { enumerable: true, get: function () { return ethers_157.StakerInterface__factory; } });
var ethers_158 = require("../typechain/core/ethers");
Object.defineProperty(exports, "StoreInterfaceEthers__factory", { enumerable: true, get: function () { return ethers_158.StoreInterface__factory; } });
var ethers_159 = require("../typechain/core/ethers");
Object.defineProperty(exports, "VotingAncillaryInterfaceEthers__factory", { enumerable: true, get: function () { return ethers_159.VotingAncillaryInterface__factory; } });
var ethers_160 = require("../typechain/core/ethers");
Object.defineProperty(exports, "VotingInterfaceEthers__factory", { enumerable: true, get: function () { return ethers_160.VotingInterface__factory; } });
var ethers_161 = require("../typechain/core/ethers");
Object.defineProperty(exports, "VotingV2InterfaceEthers__factory", { enumerable: true, get: function () { return ethers_161.VotingV2Interface__factory; } });
var ethers_162 = require("../typechain/core/ethers");
Object.defineProperty(exports, "MockOracleEthers__factory", { enumerable: true, get: function () { return ethers_162.MockOracle__factory; } });
var ethers_163 = require("../typechain/core/ethers");
Object.defineProperty(exports, "MockOracleAncillaryEthers__factory", { enumerable: true, get: function () { return ethers_163.MockOracleAncillary__factory; } });
var ethers_164 = require("../typechain/core/ethers");
Object.defineProperty(exports, "MockOracleCombinedEthers__factory", { enumerable: true, get: function () { return ethers_164.MockOracleCombined__factory; } });
var ethers_165 = require("../typechain/core/ethers");
Object.defineProperty(exports, "MockOracleGovernanceEthers__factory", { enumerable: true, get: function () { return ethers_165.MockOracleGovernance__factory; } });
var ethers_166 = require("../typechain/core/ethers");
Object.defineProperty(exports, "VotingAncillaryInterfaceTestingEthers__factory", { enumerable: true, get: function () { return ethers_166.VotingAncillaryInterfaceTesting__factory; } });
var ethers_167 = require("../typechain/core/ethers");
Object.defineProperty(exports, "VotingInterfaceTestingEthers__factory", { enumerable: true, get: function () { return ethers_167.VotingInterfaceTesting__factory; } });
var ethers_168 = require("../typechain/core/ethers");
Object.defineProperty(exports, "ArbSysEthers__factory", { enumerable: true, get: function () { return ethers_168.ArbSys__factory; } });
var ethers_169 = require("../typechain/core/ethers");
Object.defineProperty(exports, "IBridgeEthers__factory", { enumerable: true, get: function () { return ethers_169.IBridge__factory; } });
var ethers_170 = require("../typechain/core/ethers");
Object.defineProperty(exports, "BobaAddressManagerEthers__factory", { enumerable: true, get: function () { return ethers_170.BobaAddressManager__factory; } });
var ethers_171 = require("../typechain/core/ethers");
Object.defineProperty(exports, "BridgeEthers__factory", { enumerable: true, get: function () { return ethers_171.Bridge__factory; } });
var ethers_172 = require("../typechain/core/ethers");
Object.defineProperty(exports, "GenericHandlerEthers__factory", { enumerable: true, get: function () { return ethers_172.GenericHandler__factory; } });
var ethers_173 = require("../typechain/core/ethers");
Object.defineProperty(exports, "IDepositExecuteEthers__factory", { enumerable: true, get: function () { return ethers_173.IDepositExecute__factory; } });
var ethers_174 = require("../typechain/core/ethers");
Object.defineProperty(exports, "IERCHandlerEthers__factory", { enumerable: true, get: function () { return ethers_174.IERCHandler__factory; } });
var ethers_175 = require("../typechain/core/ethers");
Object.defineProperty(exports, "IGenericHandlerEthers__factory", { enumerable: true, get: function () { return ethers_175.IGenericHandler__factory; } });
var ethers_176 = require("../typechain/core/ethers");
Object.defineProperty(exports, "OptimismL1StandardBridgeEthers__factory", { enumerable: true, get: function () { return ethers_176.OptimismL1StandardBridge__factory; } });
var ethers_177 = require("../typechain/core/ethers");
Object.defineProperty(exports, "OptimismL2StandardBridgeEthers__factory", { enumerable: true, get: function () { return ethers_177.OptimismL2StandardBridge__factory; } });
var ethers_178 = require("../typechain/core/ethers");
Object.defineProperty(exports, "OptimismL2StandardERC20Ethers__factory", { enumerable: true, get: function () { return ethers_178.OptimismL2StandardERC20__factory; } });
var ethers_179 = require("../typechain/core/ethers");
Object.defineProperty(exports, "EmergencyShutdownableEthers__factory", { enumerable: true, get: function () { return ethers_179.EmergencyShutdownable__factory; } });
var ethers_180 = require("../typechain/core/ethers");
Object.defineProperty(exports, "FeePayerEthers__factory", { enumerable: true, get: function () { return ethers_180.FeePayer__factory; } });
var ethers_181 = require("../typechain/core/ethers");
Object.defineProperty(exports, "FundingRateApplierEthers__factory", { enumerable: true, get: function () { return ethers_181.FundingRateApplier__factory; } });
var ethers_182 = require("../typechain/core/ethers");
Object.defineProperty(exports, "SyntheticTokenEthers__factory", { enumerable: true, get: function () { return ethers_182.SyntheticToken__factory; } });
var ethers_183 = require("../typechain/core/ethers");
Object.defineProperty(exports, "TokenFactoryEthers__factory", { enumerable: true, get: function () { return ethers_183.TokenFactory__factory; } });
var ethers_184 = require("../typechain/core/ethers");
Object.defineProperty(exports, "WETH9Ethers__factory", { enumerable: true, get: function () { return ethers_184.WETH9__factory; } });
var ethers_185 = require("../typechain/core/ethers");
Object.defineProperty(exports, "CoveredCallFinancialProductLibraryEthers__factory", { enumerable: true, get: function () { return ethers_185.CoveredCallFinancialProductLibrary__factory; } });
var ethers_186 = require("../typechain/core/ethers");
Object.defineProperty(exports, "ExpiringContractInterfaceEthers__factory", { enumerable: true, get: function () { return ethers_186.ExpiringContractInterface__factory; } });
var ethers_187 = require("../typechain/core/ethers");
Object.defineProperty(exports, "FinancialProductLibraryEthers__factory", { enumerable: true, get: function () { return ethers_187.FinancialProductLibrary__factory; } });
var ethers_188 = require("../typechain/core/ethers");
Object.defineProperty(exports, "KpiOptionsFinancialProductLibraryEthers__factory", { enumerable: true, get: function () { return ethers_188.KpiOptionsFinancialProductLibrary__factory; } });
var ethers_189 = require("../typechain/core/ethers");
Object.defineProperty(exports, "PostExpirationIdentifierTransformationFinancialProductLibraryEthers__factory", { enumerable: true, get: function () { return ethers_189.PostExpirationIdentifierTransformationFinancialProductLibrary__factory; } });
var ethers_190 = require("../typechain/core/ethers");
Object.defineProperty(exports, "PreExpirationIdentifierTransformationFinancialProductLibraryEthers__factory", { enumerable: true, get: function () { return ethers_190.PreExpirationIdentifierTransformationFinancialProductLibrary__factory; } });
var ethers_191 = require("../typechain/core/ethers");
Object.defineProperty(exports, "StructuredNoteFinancialProductLibraryEthers__factory", { enumerable: true, get: function () { return ethers_191.StructuredNoteFinancialProductLibrary__factory; } });
var ethers_192 = require("../typechain/core/ethers");
Object.defineProperty(exports, "BinaryOptionLongShortPairFinancialProductLibraryEthers__factory", { enumerable: true, get: function () { return ethers_192.BinaryOptionLongShortPairFinancialProductLibrary__factory; } });
var ethers_193 = require("../typechain/core/ethers");
Object.defineProperty(exports, "CappedYieldDollarLongShortPairFinancialProductLibraryEthers__factory", { enumerable: true, get: function () { return ethers_193.CappedYieldDollarLongShortPairFinancialProductLibrary__factory; } });
var ethers_194 = require("../typechain/core/ethers");
Object.defineProperty(exports, "CoveredCallLongShortPairFinancialProductLibraryEthers__factory", { enumerable: true, get: function () { return ethers_194.CoveredCallLongShortPairFinancialProductLibrary__factory; } });
var ethers_195 = require("../typechain/core/ethers");
Object.defineProperty(exports, "FlooredLinearLongShortPairFinancialProductLibraryEthers__factory", { enumerable: true, get: function () { return ethers_195.FlooredLinearLongShortPairFinancialProductLibrary__factory; } });
var ethers_196 = require("../typechain/core/ethers");
Object.defineProperty(exports, "LinearLongShortPairFinancialProductLibraryEthers__factory", { enumerable: true, get: function () { return ethers_196.LinearLongShortPairFinancialProductLibrary__factory; } });
var ethers_197 = require("../typechain/core/ethers");
Object.defineProperty(exports, "LongShortPairFinancialProductLibraryEthers__factory", { enumerable: true, get: function () { return ethers_197.LongShortPairFinancialProductLibrary__factory; } });
var ethers_198 = require("../typechain/core/ethers");
Object.defineProperty(exports, "RangeBondLongShortPairFinancialProductLibraryEthers__factory", { enumerable: true, get: function () { return ethers_198.RangeBondLongShortPairFinancialProductLibrary__factory; } });
var ethers_199 = require("../typechain/core/ethers");
Object.defineProperty(exports, "SimpleSuccessTokenLongShortPairFinancialProductLibraryEthers__factory", { enumerable: true, get: function () { return ethers_199.SimpleSuccessTokenLongShortPairFinancialProductLibrary__factory; } });
var ethers_200 = require("../typechain/core/ethers");
Object.defineProperty(exports, "SuccessTokenLongShortPairFinancialProductLibraryEthers__factory", { enumerable: true, get: function () { return ethers_200.SuccessTokenLongShortPairFinancialProductLibrary__factory; } });
var ethers_201 = require("../typechain/core/ethers");
Object.defineProperty(exports, "ExpiringMultiPartyEthers__factory", { enumerable: true, get: function () { return ethers_201.ExpiringMultiParty__factory; } });
var ethers_202 = require("../typechain/core/ethers");
Object.defineProperty(exports, "ExpiringMultiPartyCreatorEthers__factory", { enumerable: true, get: function () { return ethers_202.ExpiringMultiPartyCreator__factory; } });
var ethers_203 = require("../typechain/core/ethers");
Object.defineProperty(exports, "LiquidatableEthers__factory", { enumerable: true, get: function () { return ethers_203.Liquidatable__factory; } });
var ethers_204 = require("../typechain/core/ethers");
Object.defineProperty(exports, "PricelessPositionManagerEthers__factory", { enumerable: true, get: function () { return ethers_204.PricelessPositionManager__factory; } });
var ethers_205 = require("../typechain/core/ethers");
Object.defineProperty(exports, "LongShortPairEthers__factory", { enumerable: true, get: function () { return ethers_205.LongShortPair__factory; } });
var ethers_206 = require("../typechain/core/ethers");
Object.defineProperty(exports, "LongShortPairCreatorEthers__factory", { enumerable: true, get: function () { return ethers_206.LongShortPairCreator__factory; } });
var ethers_207 = require("../typechain/core/ethers");
Object.defineProperty(exports, "OptimisticDistributorEthers__factory", { enumerable: true, get: function () { return ethers_207.OptimisticDistributor__factory; } });
var ethers_208 = require("../typechain/core/ethers");
Object.defineProperty(exports, "OptimisticRewarderEthers__factory", { enumerable: true, get: function () { return ethers_208.OptimisticRewarder__factory; } });
var ethers_209 = require("../typechain/core/ethers");
Object.defineProperty(exports, "OptimisticRewarderNoTokenEthers__factory", { enumerable: true, get: function () { return ethers_209.OptimisticRewarderNoToken__factory; } });
var ethers_210 = require("../typechain/core/ethers");
Object.defineProperty(exports, "OptimisticRewarderBaseEthers__factory", { enumerable: true, get: function () { return ethers_210.OptimisticRewarderBase__factory; } });
var ethers_211 = require("../typechain/core/ethers");
Object.defineProperty(exports, "OptimisticRewarderCreatorEthers__factory", { enumerable: true, get: function () { return ethers_211.OptimisticRewarderCreator__factory; } });
var ethers_212 = require("../typechain/core/ethers");
Object.defineProperty(exports, "OptimisticRewarderTokenEthers__factory", { enumerable: true, get: function () { return ethers_212.OptimisticRewarderToken__factory; } });
var ethers_213 = require("../typechain/core/ethers");
Object.defineProperty(exports, "OptimisticStakerEthers__factory", { enumerable: true, get: function () { return ethers_213.OptimisticStaker__factory; } });
var ethers_214 = require("../typechain/core/ethers");
Object.defineProperty(exports, "OptimisticRewarderNoTokenTestEthers__factory", { enumerable: true, get: function () { return ethers_214.OptimisticRewarderNoTokenTest__factory; } });
var ethers_215 = require("../typechain/core/ethers");
Object.defineProperty(exports, "OptimisticRewarderTestEthers__factory", { enumerable: true, get: function () { return ethers_215.OptimisticRewarderTest__factory; } });
var ethers_216 = require("../typechain/core/ethers");
Object.defineProperty(exports, "ConfigStoreEthers__factory", { enumerable: true, get: function () { return ethers_216.ConfigStore__factory; } });
var ethers_217 = require("../typechain/core/ethers");
Object.defineProperty(exports, "ConfigStoreInterfaceEthers__factory", { enumerable: true, get: function () { return ethers_217.ConfigStoreInterface__factory; } });
var ethers_218 = require("../typechain/core/ethers");
Object.defineProperty(exports, "PerpetualEthers__factory", { enumerable: true, get: function () { return ethers_218.Perpetual__factory; } });
var ethers_219 = require("../typechain/core/ethers");
Object.defineProperty(exports, "PerpetualCreatorEthers__factory", { enumerable: true, get: function () { return ethers_219.PerpetualCreator__factory; } });
var ethers_220 = require("../typechain/core/ethers");
Object.defineProperty(exports, "PerpetualLiquidatableEthers__factory", { enumerable: true, get: function () { return ethers_220.PerpetualLiquidatable__factory; } });
var ethers_221 = require("../typechain/core/ethers");
Object.defineProperty(exports, "PerpetualPositionManagerEthers__factory", { enumerable: true, get: function () { return ethers_221.PerpetualPositionManager__factory; } });
var ethers_222 = require("../typechain/core/ethers");
Object.defineProperty(exports, "ExpiringMultiPartyMockEthers__factory", { enumerable: true, get: function () { return ethers_222.ExpiringMultiPartyMock__factory; } });
var ethers_223 = require("../typechain/core/ethers");
Object.defineProperty(exports, "FinancialProductLibraryTestEthers__factory", { enumerable: true, get: function () { return ethers_223.FinancialProductLibraryTest__factory; } });
var ethers_224 = require("../typechain/core/ethers");
Object.defineProperty(exports, "FundingRateApplierTestEthers__factory", { enumerable: true, get: function () { return ethers_224.FundingRateApplierTest__factory; } });
var ethers_225 = require("../typechain/core/ethers");
Object.defineProperty(exports, "LongShortPairFinancialProjectLibraryTestEthers__factory", { enumerable: true, get: function () { return ethers_225.LongShortPairFinancialProjectLibraryTest__factory; } });
var ethers_226 = require("../typechain/core/ethers");
Object.defineProperty(exports, "LongShortPairMockEthers__factory", { enumerable: true, get: function () { return ethers_226.LongShortPairMock__factory; } });
var ethers_227 = require("../typechain/core/ethers");
Object.defineProperty(exports, "MerkleDistributorEthers__factory", { enumerable: true, get: function () { return ethers_227.MerkleDistributor__factory; } });
var ethers_228 = require("../typechain/core/ethers");
Object.defineProperty(exports, "MerkleDistributorInterfaceEthers__factory", { enumerable: true, get: function () { return ethers_228.MerkleDistributorInterface__factory; } });
var ethers_229 = require("../typechain/core/ethers");
Object.defineProperty(exports, "OptimisticGovernorEthers__factory", { enumerable: true, get: function () { return ethers_229.OptimisticGovernor__factory; } });
var ethers_230 = require("../typechain/core/ethers");
Object.defineProperty(exports, "OptimisticGovernorTestEthers__factory", { enumerable: true, get: function () { return ethers_230.OptimisticGovernorTest__factory; } });
var ethers_231 = require("../typechain/core/ethers");
Object.defineProperty(exports, "TestAvatarEthers__factory", { enumerable: true, get: function () { return ethers_231.TestAvatar__factory; } });
var ethers_232 = require("../typechain/core/ethers");
Object.defineProperty(exports, "TestModuleProxyFactoryEthers__factory", { enumerable: true, get: function () { return ethers_232.TestModuleProxyFactory__factory; } });
var ethers_233 = require("../typechain/core/ethers");
Object.defineProperty(exports, "OptimisticOracleV2Ethers__factory", { enumerable: true, get: function () { return ethers_233.OptimisticOracleV2__factory; } });
var ethers_234 = require("../typechain/core/ethers");
Object.defineProperty(exports, "OptimisticRequesterEthers__factory", { enumerable: true, get: function () { return ethers_234.OptimisticRequester__factory; } });
var ethers_235 = require("../typechain/core/ethers");
Object.defineProperty(exports, "OptimisticRequesterV2Ethers__factory", { enumerable: true, get: function () { return ethers_235.OptimisticRequesterV2__factory; } });
var ethers_236 = require("../typechain/core/ethers");
Object.defineProperty(exports, "SkinnyOptimisticOracleV2Ethers__factory", { enumerable: true, get: function () { return ethers_236.SkinnyOptimisticOracleV2__factory; } });
var ethers_237 = require("../typechain/core/ethers");
Object.defineProperty(exports, "SkinnyOptimisticOracleV2ProdEthers__factory", { enumerable: true, get: function () { return ethers_237.SkinnyOptimisticOracleV2Prod__factory; } });
var ethers_238 = require("../typechain/core/ethers");
Object.defineProperty(exports, "OptimisticOracleInterfaceEthers__factory", { enumerable: true, get: function () { return ethers_238.OptimisticOracleInterface__factory; } });
var ethers_239 = require("../typechain/core/ethers");
Object.defineProperty(exports, "OptimisticOracleV2InterfaceEthers__factory", { enumerable: true, get: function () { return ethers_239.OptimisticOracleV2Interface__factory; } });
var ethers_240 = require("../typechain/core/ethers");
Object.defineProperty(exports, "SkinnyOptimisticOracleInterfaceEthers__factory", { enumerable: true, get: function () { return ethers_240.SkinnyOptimisticOracleInterface__factory; } });
var ethers_241 = require("../typechain/core/ethers");
Object.defineProperty(exports, "SkinnyOptimisticOracleV2InterfaceEthers__factory", { enumerable: true, get: function () { return ethers_241.SkinnyOptimisticOracleV2Interface__factory; } });
var ethers_242 = require("../typechain/core/ethers");
Object.defineProperty(exports, "OptimisticOracleEthers__factory", { enumerable: true, get: function () { return ethers_242.OptimisticOracle__factory; } });
var ethers_243 = require("../typechain/core/ethers");
Object.defineProperty(exports, "SkinnyOptimisticOracleEthers__factory", { enumerable: true, get: function () { return ethers_243.SkinnyOptimisticOracle__factory; } });
var ethers_244 = require("../typechain/core/ethers");
Object.defineProperty(exports, "SkinnyOptimisticOracleProdEthers__factory", { enumerable: true, get: function () { return ethers_244.SkinnyOptimisticOracleProd__factory; } });
var ethers_245 = require("../typechain/core/ethers");
Object.defineProperty(exports, "OptimisticRequesterTestEthers__factory", { enumerable: true, get: function () { return ethers_245.OptimisticRequesterTest__factory; } });
var ethers_246 = require("../typechain/core/ethers");
Object.defineProperty(exports, "SkinnyOptimisticRequesterTestEthers__factory", { enumerable: true, get: function () { return ethers_246.SkinnyOptimisticRequesterTest__factory; } });
var ethers_247 = require("../typechain/core/ethers");
Object.defineProperty(exports, "SkinnyOptimisticV2RequesterTestEthers__factory", { enumerable: true, get: function () { return ethers_247.SkinnyOptimisticV2RequesterTest__factory; } });
var ethers_248 = require("../typechain/core/ethers");
Object.defineProperty(exports, "OptimisticOracleV3Ethers__factory", { enumerable: true, get: function () { return ethers_248.OptimisticOracleV3__factory; } });
var ethers_249 = require("../typechain/core/ethers");
Object.defineProperty(exports, "BaseEscalationManagerEthers__factory", { enumerable: true, get: function () { return ethers_249.BaseEscalationManager__factory; } });
var ethers_250 = require("../typechain/core/ethers");
Object.defineProperty(exports, "DisputeLimitingEscalationManagerEthers__factory", { enumerable: true, get: function () { return ethers_250.DisputeLimitingEscalationManager__factory; } });
var ethers_251 = require("../typechain/core/ethers");
Object.defineProperty(exports, "FullPolicyEscalationManagerEthers__factory", { enumerable: true, get: function () { return ethers_251.FullPolicyEscalationManager__factory; } });
var ethers_252 = require("../typechain/core/ethers");
Object.defineProperty(exports, "OwnerDiscardOracleEscalationManagerEthers__factory", { enumerable: true, get: function () { return ethers_252.OwnerDiscardOracleEscalationManager__factory; } });
var ethers_253 = require("../typechain/core/ethers");
Object.defineProperty(exports, "OwnerSelectOracleEscalationManagerEthers__factory", { enumerable: true, get: function () { return ethers_253.OwnerSelectOracleEscalationManager__factory; } });
var ethers_254 = require("../typechain/core/ethers");
Object.defineProperty(exports, "SuperbondEscalationManagerEthers__factory", { enumerable: true, get: function () { return ethers_254.SuperbondEscalationManager__factory; } });
var ethers_255 = require("../typechain/core/ethers");
Object.defineProperty(exports, "WhitelistAsserterEscalationManagerEthers__factory", { enumerable: true, get: function () { return ethers_255.WhitelistAsserterEscalationManager__factory; } });
var ethers_256 = require("../typechain/core/ethers");
Object.defineProperty(exports, "WhitelistCallerEscalationManagerEthers__factory", { enumerable: true, get: function () { return ethers_256.WhitelistCallerEscalationManager__factory; } });
var ethers_257 = require("../typechain/core/ethers");
Object.defineProperty(exports, "WhitelistDisputerEscalationManagerEthers__factory", { enumerable: true, get: function () { return ethers_257.WhitelistDisputerEscalationManager__factory; } });
var ethers_258 = require("../typechain/core/ethers");
Object.defineProperty(exports, "DataAsserterEthers__factory", { enumerable: true, get: function () { return ethers_258.DataAsserter__factory; } });
var ethers_259 = require("../typechain/core/ethers");
Object.defineProperty(exports, "InsuranceEthers__factory", { enumerable: true, get: function () { return ethers_259.Insurance__factory; } });
var ethers_260 = require("../typechain/core/ethers");
Object.defineProperty(exports, "PredictionMarketEthers__factory", { enumerable: true, get: function () { return ethers_260.PredictionMarket__factory; } });
var ethers_261 = require("../typechain/core/ethers");
Object.defineProperty(exports, "AssertingCallerTestEthers__factory", { enumerable: true, get: function () { return ethers_261.AssertingCallerTest__factory; } });
var ethers_262 = require("../typechain/core/ethers");
Object.defineProperty(exports, "OptimisticOracleV3TestEthers__factory", { enumerable: true, get: function () { return ethers_262.OptimisticOracleV3Test__factory; } });
var ethers_263 = require("../typechain/core/ethers");
Object.defineProperty(exports, "EscalationManagerInterfaceEthers__factory", { enumerable: true, get: function () { return ethers_263.EscalationManagerInterface__factory; } });
var ethers_264 = require("../typechain/core/ethers");
Object.defineProperty(exports, "OptimisticOracleV3CallbackRecipientInterfaceEthers__factory", { enumerable: true, get: function () { return ethers_264.OptimisticOracleV3CallbackRecipientInterface__factory; } });
var ethers_265 = require("../typechain/core/ethers");
Object.defineProperty(exports, "OptimisticOracleV3InterfaceEthers__factory", { enumerable: true, get: function () { return ethers_265.OptimisticOracleV3Interface__factory; } });
var ethers_266 = require("../typechain/core/ethers");
Object.defineProperty(exports, "GovernorChildTunnelEthers__factory", { enumerable: true, get: function () { return ethers_266.GovernorChildTunnel__factory; } });
var ethers_267 = require("../typechain/core/ethers");
Object.defineProperty(exports, "GovernorRootTunnelEthers__factory", { enumerable: true, get: function () { return ethers_267.GovernorRootTunnel__factory; } });
var ethers_268 = require("../typechain/core/ethers");
Object.defineProperty(exports, "OracleBaseTunnelEthers__factory", { enumerable: true, get: function () { return ethers_268.OracleBaseTunnel__factory; } });
var ethers_269 = require("../typechain/core/ethers");
Object.defineProperty(exports, "OracleChildTunnelEthers__factory", { enumerable: true, get: function () { return ethers_269.OracleChildTunnel__factory; } });
var ethers_270 = require("../typechain/core/ethers");
Object.defineProperty(exports, "OracleRootTunnelEthers__factory", { enumerable: true, get: function () { return ethers_270.OracleRootTunnel__factory; } });
var ethers_271 = require("../typechain/core/ethers");
Object.defineProperty(exports, "FxChildMockEthers__factory", { enumerable: true, get: function () { return ethers_271.FxChildMock__factory; } });
var ethers_272 = require("../typechain/core/ethers");
Object.defineProperty(exports, "IStateReceiverEthers__factory", { enumerable: true, get: function () { return ethers_272.IStateReceiver__factory; } });
var ethers_273 = require("../typechain/core/ethers");
Object.defineProperty(exports, "FxRootMockEthers__factory", { enumerable: true, get: function () { return ethers_273.FxRootMock__factory; } });
var ethers_274 = require("../typechain/core/ethers");
Object.defineProperty(exports, "IStateSenderEthers__factory", { enumerable: true, get: function () { return ethers_274.IStateSender__factory; } });
var ethers_275 = require("../typechain/core/ethers");
Object.defineProperty(exports, "OracleBaseTunnelMockEthers__factory", { enumerable: true, get: function () { return ethers_275.OracleBaseTunnelMock__factory; } });
var ethers_276 = require("../typechain/core/ethers");
Object.defineProperty(exports, "OracleRootTunnelMockEthers__factory", { enumerable: true, get: function () { return ethers_276.OracleRootTunnelMock__factory; } });
var ethers_277 = require("../typechain/core/ethers");
Object.defineProperty(exports, "StateSyncMockEthers__factory", { enumerable: true, get: function () { return ethers_277.StateSyncMock__factory; } });
var ethers_278 = require("../typechain/core/ethers");
Object.defineProperty(exports, "IFinancialContractEthers__factory", { enumerable: true, get: function () { return ethers_278.IFinancialContract__factory; } });
var ethers_279 = require("../typechain/core/ethers");
Object.defineProperty(exports, "ReserveCurrencyDisputerEthers__factory", { enumerable: true, get: function () { return ethers_279.ReserveCurrencyDisputer__factory; } });
var ethers_280 = require("../typechain/core/ethers");
Object.defineProperty(exports, "IFinderEthers__factory", { enumerable: true, get: function () { return ethers_280.IFinder__factory; } });
var ethers_281 = require("../typechain/core/ethers");
Object.defineProperty(exports, "IStoreEthers__factory", { enumerable: true, get: function () { return ethers_281.IStore__factory; } });
var ethers_282 = require("../typechain/core/ethers");
Object.defineProperty(exports, "ReserveCurrencyLiquidatorEthers__factory", { enumerable: true, get: function () { return ethers_282.ReserveCurrencyLiquidator__factory; } });
var ethers_283 = require("../typechain/core/ethers");
Object.defineProperty(exports, "LiquidationWithdrawerEthers__factory", { enumerable: true, get: function () { return ethers_283.LiquidationWithdrawer__factory; } });
var ethers_284 = require("../typechain/core/ethers");
Object.defineProperty(exports, "PositionSettlerEthers__factory", { enumerable: true, get: function () { return ethers_284.PositionSettler__factory; } });
var ethers_285 = require("../typechain/core/ethers");
Object.defineProperty(exports, "TokenRedeemerEthers__factory", { enumerable: true, get: function () { return ethers_285.TokenRedeemer__factory; } });
var ethers_286 = require("../typechain/core/ethers");
Object.defineProperty(exports, "TokenSenderEthers__factory", { enumerable: true, get: function () { return ethers_286.TokenSender__factory; } });
var ethers_287 = require("../typechain/core/ethers");
Object.defineProperty(exports, "LspUniswapV2BrokerEthers__factory", { enumerable: true, get: function () { return ethers_287.LspUniswapV2Broker__factory; } });
var ethers_288 = require("../typechain/core/ethers");
Object.defineProperty(exports, "UniswapV2BrokerEthers__factory", { enumerable: true, get: function () { return ethers_288.UniswapV2Broker__factory; } });
var ethers_289 = require("../typechain/core/ethers");
Object.defineProperty(exports, "UniswapV3BrokerEthers__factory", { enumerable: true, get: function () { return ethers_289.UniswapV3Broker__factory; } });
var ethers_290 = require("../typechain/core/ethers");
Object.defineProperty(exports, "SnapshotVotingPowerEthers__factory", { enumerable: true, get: function () { return ethers_290.SnapshotVotingPower__factory; } });
var ethers_291 = require("../typechain/core/ethers");
Object.defineProperty(exports, "OriginValidatorEthers__factory", { enumerable: true, get: function () { return ethers_291.OriginValidator__factory; } });
var ethers_292 = require("../typechain/core/ethers");
Object.defineProperty(exports, "Umip3UpgraderEthers__factory", { enumerable: true, get: function () { return ethers_292.Umip3Upgrader__factory; } });
var ethers_293 = require("../typechain/core/ethers");
Object.defineProperty(exports, "VotingUpgraderEthers__factory", { enumerable: true, get: function () { return ethers_293.VotingUpgrader__factory; } });
var ethers_294 = require("../typechain/core/ethers");
Object.defineProperty(exports, "VotingUpgraderV2Ethers__factory", { enumerable: true, get: function () { return ethers_294.VotingUpgraderV2__factory; } });
var ethers_295 = require("../typechain/@across-protocol/contracts/ethers");
Object.defineProperty(exports, "IL2ERC20BridgeEthers__factory", { enumerable: true, get: function () { return ethers_295.IL2ERC20Bridge__factory; } });
var ethers_296 = require("../typechain/@across-protocol/contracts/ethers");
Object.defineProperty(exports, "BridgeAdminEthers__factory", { enumerable: true, get: function () { return ethers_296.BridgeAdmin__factory; } });
var ethers_297 = require("../typechain/@across-protocol/contracts/ethers");
Object.defineProperty(exports, "BridgeDepositBoxEthers__factory", { enumerable: true, get: function () { return ethers_297.BridgeDepositBox__factory; } });
var ethers_298 = require("../typechain/@across-protocol/contracts/ethers");
Object.defineProperty(exports, "TokenLikeEthers__factory", { enumerable: true, get: function () { return ethers_298.TokenLike__factory; } });
var ethers_299 = require("../typechain/@across-protocol/contracts/ethers");
Object.defineProperty(exports, "WETH9LikeEthers__factory", { enumerable: true, get: function () { return ethers_299.WETH9Like__factory; } });
var ethers_300 = require("../typechain/@across-protocol/contracts/ethers");
Object.defineProperty(exports, "BridgePoolEthers__factory", { enumerable: true, get: function () { return ethers_300.BridgePool__factory; } });
var ethers_301 = require("../typechain/@across-protocol/contracts/ethers");
Object.defineProperty(exports, "BridgePoolProdEthers__factory", { enumerable: true, get: function () { return ethers_301.BridgePoolProd__factory; } });
var ethers_302 = require("../typechain/@across-protocol/contracts/ethers");
Object.defineProperty(exports, "RateModelStoreEthers__factory", { enumerable: true, get: function () { return ethers_302.RateModelStore__factory; } });
var ethers_303 = require("../typechain/@across-protocol/contracts/ethers");
Object.defineProperty(exports, "StandardBridgeLikeEthers__factory", { enumerable: true, get: function () { return ethers_303.StandardBridgeLike__factory; } });
var ethers_304 = require("../typechain/@across-protocol/contracts/ethers");
Object.defineProperty(exports, "BridgeAdminInterfaceEthers__factory", { enumerable: true, get: function () { return ethers_304.BridgeAdminInterface__factory; } });
var ethers_305 = require("../typechain/@across-protocol/contracts/ethers");
Object.defineProperty(exports, "BridgePoolInterfaceEthers__factory", { enumerable: true, get: function () { return ethers_305.BridgePoolInterface__factory; } });
var ethers_306 = require("../typechain/@across-protocol/contracts/ethers");
Object.defineProperty(exports, "MessengerInterfaceEthers__factory", { enumerable: true, get: function () { return ethers_306.MessengerInterface__factory; } });
var ethers_307 = require("../typechain/@across-protocol/contracts/ethers");
Object.defineProperty(exports, "BridgeDepositBoxMockEthers__factory", { enumerable: true, get: function () { return ethers_307.BridgeDepositBoxMock__factory; } });
var ethers_308 = require("../typechain/@across-protocol/contracts/ethers");
Object.defineProperty(exports, "MessengerMockEthers__factory", { enumerable: true, get: function () { return ethers_308.MessengerMock__factory; } });
const artifactPaths = {
    CrossDomainEnabled: "./../../core/artifacts/@eth-optimism/contracts/libraries/bridge/CrossDomainEnabled.sol/CrossDomainEnabled.json",
    ICrossDomainMessenger: "./../../core/artifacts/@eth-optimism/contracts/libraries/bridge/ICrossDomainMessenger.sol/ICrossDomainMessenger.json",
    Lib_PredeployAddresses: "./../../core/artifacts/@eth-optimism/contracts/libraries/constants/Lib_PredeployAddresses.sol/Lib_PredeployAddresses.json",
    Enum: "./../../core/artifacts/@gnosis.pm/safe-contracts/contracts/common/Enum.sol/Enum.json",
    Module: "./../../core/artifacts/@gnosis.pm/zodiac/contracts/core/Module.sol/Module.json",
    FactoryFriendly: "./../../core/artifacts/@gnosis.pm/zodiac/contracts/factory/FactoryFriendly.sol/FactoryFriendly.json",
    ModuleProxyFactory: "./../../core/artifacts/@gnosis.pm/zodiac/contracts/factory/ModuleProxyFactory.sol/ModuleProxyFactory.json",
    BaseGuard: "./../../core/artifacts/@gnosis.pm/zodiac/contracts/guard/BaseGuard.sol/BaseGuard.json",
    Guardable: "./../../core/artifacts/@gnosis.pm/zodiac/contracts/guard/Guardable.sol/Guardable.json",
    IAvatar: "./../../core/artifacts/@gnosis.pm/zodiac/contracts/interfaces/IAvatar.sol/IAvatar.json",
    IGuard: "./../../core/artifacts/@gnosis.pm/zodiac/contracts/interfaces/IGuard.sol/IGuard.json",
    ExitPayloadReader: "./../../core/artifacts/@maticnetwork/fx-portal/contracts/lib/ExitPayloadReader.sol/ExitPayloadReader.json",
    Merkle: "./../../core/artifacts/@maticnetwork/fx-portal/contracts/lib/Merkle.sol/Merkle.json",
    MerklePatriciaProof: "./../../core/artifacts/@maticnetwork/fx-portal/contracts/lib/MerklePatriciaProof.sol/MerklePatriciaProof.json",
    RLPReader: "./../../core/artifacts/@maticnetwork/fx-portal/contracts/lib/RLPReader.sol/RLPReader.json",
    FxBaseChildTunnel: "./../../core/artifacts/@maticnetwork/fx-portal/contracts/tunnel/FxBaseChildTunnel.sol/FxBaseChildTunnel.json",
    IFxMessageProcessor: "./../../core/artifacts/@maticnetwork/fx-portal/contracts/tunnel/FxBaseChildTunnel.sol/IFxMessageProcessor.json",
    FxBaseRootTunnel: "./../../core/artifacts/@maticnetwork/fx-portal/contracts/tunnel/FxBaseRootTunnel.sol/FxBaseRootTunnel.json",
    ICheckpointManager: "./../../core/artifacts/@maticnetwork/fx-portal/contracts/tunnel/FxBaseRootTunnel.sol/ICheckpointManager.json",
    IFxStateSender: "./../../core/artifacts/@maticnetwork/fx-portal/contracts/tunnel/FxBaseRootTunnel.sol/IFxStateSender.json",
    OwnableUpgradeable: "./../../core/artifacts/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol/OwnableUpgradeable.json",
    Initializable: "./../../core/artifacts/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol/Initializable.json",
    AddressUpgradeable: "./../../core/artifacts/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol/AddressUpgradeable.json",
    ContextUpgradeable: "./../../core/artifacts/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol/ContextUpgradeable.json",
    AccessControl: "./../../core/artifacts/@openzeppelin/contracts/access/AccessControl.sol/AccessControl.json",
    IAccessControl: "./../../core/artifacts/@openzeppelin/contracts/access/IAccessControl.sol/IAccessControl.json",
    Ownable: "./../../core/artifacts/@openzeppelin/contracts/access/Ownable.sol/Ownable.json",
    Pausable: "./../../core/artifacts/@openzeppelin/contracts/security/Pausable.sol/Pausable.json",
    ERC20: "./../../core/artifacts/@openzeppelin/contracts/token/ERC20/ERC20.sol/ERC20.json",
    IERC20: "./../../core/artifacts/@openzeppelin/contracts/token/ERC20/IERC20.sol/IERC20.json",
    ERC20Snapshot: "./../../core/artifacts/@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol/ERC20Snapshot.json",
    IERC20Metadata: "./../../core/artifacts/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol/IERC20Metadata.json",
    IERC20Permit: "./../../core/artifacts/@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol/IERC20Permit.json",
    SafeERC20: "./../../core/artifacts/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol/SafeERC20.json",
    ERC721: "./../../core/artifacts/@openzeppelin/contracts/token/ERC721/ERC721.sol/ERC721.json",
    IERC721: "./../../core/artifacts/@openzeppelin/contracts/token/ERC721/IERC721.sol/IERC721.json",
    IERC721Receiver: "./../../core/artifacts/@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol/IERC721Receiver.json",
    IERC721Metadata: "./../../core/artifacts/@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol/IERC721Metadata.json",
    Address: "./../../core/artifacts/@openzeppelin/contracts/utils/Address.sol/Address.json",
    Arrays: "./../../core/artifacts/@openzeppelin/contracts/utils/Arrays.sol/Arrays.json",
    Context: "./../../core/artifacts/@openzeppelin/contracts/utils/Context.sol/Context.json",
    Counters: "./../../core/artifacts/@openzeppelin/contracts/utils/Counters.sol/Counters.json",
    StorageSlot: "./../../core/artifacts/@openzeppelin/contracts/utils/StorageSlot.sol/StorageSlot.json",
    Strings: "./../../core/artifacts/@openzeppelin/contracts/utils/Strings.sol/Strings.json",
    ECDSA: "./../../core/artifacts/@openzeppelin/contracts/utils/cryptography/ECDSA.sol/ECDSA.json",
    MerkleProof: "./../../core/artifacts/@openzeppelin/contracts/utils/cryptography/MerkleProof.sol/MerkleProof.json",
    ERC165: "./../../core/artifacts/@openzeppelin/contracts/utils/introspection/ERC165.sol/ERC165.json",
    IERC165: "./../../core/artifacts/@openzeppelin/contracts/utils/introspection/IERC165.sol/IERC165.json",
    Math: "./../../core/artifacts/@openzeppelin/contracts/utils/math/Math.sol/Math.json",
    SafeCast: "./../../core/artifacts/@openzeppelin/contracts/utils/math/SafeCast.sol/SafeCast.json",
    SafeMath: "./../../core/artifacts/@openzeppelin/contracts/utils/math/SafeMath.sol/SafeMath.json",
    SignedMath: "./../../core/artifacts/@openzeppelin/contracts/utils/math/SignedMath.sol/SignedMath.json",
    SignedSafeMath: "./../../core/artifacts/@openzeppelin/contracts/utils/math/SignedSafeMath.sol/SignedSafeMath.json",
    Babylonian: "./../../core/artifacts/@uniswap/lib/contracts/libraries/Babylonian.sol/Babylonian.json",
    TransferHelper: "./../../core/artifacts/@uniswap/lib/contracts/libraries/TransferHelper.sol/TransferHelper.json",
    IUniswapV2Pair: "./../../core/artifacts/@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol/IUniswapV2Pair.json",
    IUniswapV2Router01: "./../../core/artifacts/@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol/IUniswapV2Router01.json",
    IUniswapV3Pool: "./../../core/artifacts/@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol/IUniswapV3Pool.json",
    IUniswapV3SwapCallback: "./../../core/artifacts/@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol/IUniswapV3SwapCallback.json",
    IUniswapV3PoolActions: "./../../core/artifacts/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol/IUniswapV3PoolActions.json",
    IUniswapV3PoolDerivedState: "./../../core/artifacts/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol/IUniswapV3PoolDerivedState.json",
    IUniswapV3PoolEvents: "./../../core/artifacts/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol/IUniswapV3PoolEvents.json",
    IUniswapV3PoolImmutables: "./../../core/artifacts/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol/IUniswapV3PoolImmutables.json",
    IUniswapV3PoolOwnerActions: "./../../core/artifacts/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol/IUniswapV3PoolOwnerActions.json",
    IUniswapV3PoolState: "./../../core/artifacts/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol/IUniswapV3PoolState.json",
    BitMath: "./../../core/artifacts/@uniswap/v3-core/contracts/libraries/BitMath.sol/BitMath.json",
    LiquidityMath: "./../../core/artifacts/@uniswap/v3-core/contracts/libraries/LiquidityMath.sol/LiquidityMath.json",
    LowGasSafeMath: "./../../core/artifacts/@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol/LowGasSafeMath.json",
    UnsafeMath: "./../../core/artifacts/@uniswap/v3-core/contracts/libraries/UnsafeMath.sol/UnsafeMath.json",
    ISwapRouter: "./../../core/artifacts/@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol/ISwapRouter.json",
    AddressWhitelist: "./../../core/artifacts/contracts/common/implementation/AddressWhitelist.sol/AddressWhitelist.json",
    AncillaryData: "./../../core/artifacts/contracts/common/implementation/AncillaryData.sol/AncillaryData.json",
    ExpandedERC20: "./../../core/artifacts/contracts/common/implementation/ExpandedERC20.sol/ExpandedERC20.json",
    FixedPoint: "./../../core/artifacts/contracts/common/implementation/FixedPoint.sol/FixedPoint.json",
    HasFinder: "./../../core/artifacts/contracts/common/implementation/HasFinder.sol/HasFinder.json",
    Lockable: "./../../core/artifacts/contracts/common/implementation/Lockable.sol/Lockable.json",
    MultiCaller: "./../../core/artifacts/contracts/common/implementation/MultiCaller.sol/MultiCaller.json",
    Exclusive: "./../../core/artifacts/contracts/common/implementation/MultiRole.sol/Exclusive.json",
    MultiRole: "./../../core/artifacts/contracts/common/implementation/MultiRole.sol/MultiRole.json",
    Shared: "./../../core/artifacts/contracts/common/implementation/MultiRole.sol/Shared.json",
    Multicall3: "./../../core/artifacts/contracts/common/implementation/Multicall3.sol/Multicall3.json",
    Stakeable: "./../../core/artifacts/contracts/common/implementation/Stakeable.sol/Stakeable.json",
    Testable: "./../../core/artifacts/contracts/common/implementation/Testable.sol/Testable.json",
    TestnetERC20: "./../../core/artifacts/contracts/common/implementation/TestnetERC20.sol/TestnetERC20.json",
    Timer: "./../../core/artifacts/contracts/common/implementation/Timer.sol/Timer.json",
    Withdrawable: "./../../core/artifacts/contracts/common/implementation/Withdrawable.sol/Withdrawable.json",
    DSAuth: "./../../core/artifacts/contracts/common/implementation/dsproxy/DSGuardFactory.sol/DSAuth.json",
    DSAuthEvents: "./../../core/artifacts/contracts/common/implementation/dsproxy/DSGuardFactory.sol/DSAuthEvents.json",
    DSAuthority: "./../../core/artifacts/contracts/common/implementation/dsproxy/DSGuardFactory.sol/DSAuthority.json",
    DSGuard: "./../../core/artifacts/contracts/common/implementation/dsproxy/DSGuardFactory.sol/DSGuard.json",
    DSGuardEvents: "./../../core/artifacts/contracts/common/implementation/dsproxy/DSGuardFactory.sol/DSGuardEvents.json",
    DSGuardFactory: "./../../core/artifacts/contracts/common/implementation/dsproxy/DSGuardFactory.sol/DSGuardFactory.json",
    DSNote: "./../../core/artifacts/contracts/common/implementation/dsproxy/DSProxyFactory.sol/DSNote.json",
    DSProxy: "./../../core/artifacts/contracts/common/implementation/dsproxy/DSProxyFactory.sol/DSProxy.json",
    DSProxyCache: "./../../core/artifacts/contracts/common/implementation/dsproxy/DSProxyFactory.sol/DSProxyCache.json",
    DSProxyFactory: "./../../core/artifacts/contracts/common/implementation/dsproxy/DSProxyFactory.sol/DSProxyFactory.json",
    AddressWhitelistInterface: "./../../core/artifacts/contracts/common/interfaces/AddressWhitelistInterface.sol/AddressWhitelistInterface.json",
    Balancer: "./../../core/artifacts/contracts/common/interfaces/Balancer.sol/Balancer.json",
    ExpandedIERC20: "./../../core/artifacts/contracts/common/interfaces/ExpandedIERC20.sol/ExpandedIERC20.json",
    HarvestVaultInterface: "./../../core/artifacts/contracts/common/interfaces/HarvestVaultInterface.sol/HarvestVaultInterface.json",
    IERC20Standard: "./../../core/artifacts/contracts/common/interfaces/IERC20Standard.sol/IERC20Standard.json",
    Multicall: "./../../core/artifacts/contracts/common/interfaces/Multicall.sol/Multicall.json",
    Multicall2: "./../../core/artifacts/contracts/common/interfaces/Multicall2.sol/Multicall2.json",
    TransactionBatcher: "./../../core/artifacts/contracts/common/interfaces/TransactionBatcher.sol/TransactionBatcher.json",
    UniswapV2: "./../../core/artifacts/contracts/common/interfaces/UniswapV2.sol/UniswapV2.json",
    UniswapV3: "./../../core/artifacts/contracts/common/interfaces/UniswapV3.sol/UniswapV3.json",
    VaultInterface: "./../../core/artifacts/contracts/common/interfaces/VaultInterface.sol/VaultInterface.json",
    AncillaryDataTest: "./../../core/artifacts/contracts/common/test/AncillaryDataTest.sol/AncillaryDataTest.json",
    BalancerMock: "./../../core/artifacts/contracts/common/test/BalancerMock.sol/BalancerMock.json",
    BasicERC20: "./../../core/artifacts/contracts/common/test/BasicERC20.sol/BasicERC20.json",
    HarvestVaultMock: "./../../core/artifacts/contracts/common/test/HarvestVaultMock.sol/HarvestVaultMock.json",
    MintableERC721: "./../../core/artifacts/contracts/common/test/MintableERC721.sol/MintableERC721.json",
    MultiCallerTest: "./../../core/artifacts/contracts/common/test/MultiCallerTest.sol/MultiCallerTest.json",
    MultiRoleTest: "./../../core/artifacts/contracts/common/test/MultiRoleTest.sol/MultiRoleTest.json",
    MulticallMock: "./../../core/artifacts/contracts/common/test/MulticallMock.sol/MulticallMock.json",
    PerpetualMock: "./../../core/artifacts/contracts/common/test/PerpetualMock.sol/PerpetualMock.json",
    ReentrancyAttack: "./../../core/artifacts/contracts/common/test/ReentrancyAttack.sol/ReentrancyAttack.json",
    ReentrancyChecker: "./../../core/artifacts/contracts/common/test/ReentrancyChecker.sol/ReentrancyChecker.json",
    ReentrancyMock: "./../../core/artifacts/contracts/common/test/ReentrancyMock.sol/ReentrancyMock.json",
    SignedFixedPointTest: "./../../core/artifacts/contracts/common/test/SignedFixedPointTest.sol/SignedFixedPointTest.json",
    TestableTest: "./../../core/artifacts/contracts/common/test/TestableTest.sol/TestableTest.json",
    UniswapV2Mock: "./../../core/artifacts/contracts/common/test/UniswapV2Mock.sol/UniswapV2Mock.json",
    UniswapV3Mock: "./../../core/artifacts/contracts/common/test/UniswapV3Mock.sol/UniswapV3Mock.json",
    UnsignedFixedPointTest: "./../../core/artifacts/contracts/common/test/UnsignedFixedPointTest.sol/UnsignedFixedPointTest.json",
    VaultMock: "./../../core/artifacts/contracts/common/test/VaultMock.sol/VaultMock.json",
    WithdrawableTest: "./../../core/artifacts/contracts/common/test/WithdrawableTest.sol/WithdrawableTest.json",
    GovernorHub: "./../../core/artifacts/contracts/cross-chain-oracle/GovernorHub.sol/GovernorHub.json",
    GovernorSpoke: "./../../core/artifacts/contracts/cross-chain-oracle/GovernorSpoke.sol/GovernorSpoke.json",
    OracleBase: "./../../core/artifacts/contracts/cross-chain-oracle/OracleBase.sol/OracleBase.json",
    OracleHub: "./../../core/artifacts/contracts/cross-chain-oracle/OracleHub.sol/OracleHub.json",
    OracleSpoke: "./../../core/artifacts/contracts/cross-chain-oracle/OracleSpoke.sol/OracleSpoke.json",
    SpokeBase: "./../../core/artifacts/contracts/cross-chain-oracle/SpokeBase.sol/SpokeBase.json",
    Admin_ChildMessenger: "./../../core/artifacts/contracts/cross-chain-oracle/chain-adapters/Admin_ChildMessenger.sol/Admin_ChildMessenger.json",
    Arbitrum_ChildMessenger: "./../../core/artifacts/contracts/cross-chain-oracle/chain-adapters/Arbitrum_ChildMessenger.sol/Arbitrum_ChildMessenger.json",
    Arbitrum_ParentMessenger: "./../../core/artifacts/contracts/cross-chain-oracle/chain-adapters/Arbitrum_ParentMessenger.sol/Arbitrum_ParentMessenger.json",
    Optimism_ChildMessenger: "./../../core/artifacts/contracts/cross-chain-oracle/chain-adapters/Optimism_ChildMessenger.sol/Optimism_ChildMessenger.json",
    Optimism_ParentMessenger: "./../../core/artifacts/contracts/cross-chain-oracle/chain-adapters/Optimism_ParentMessenger.sol/Optimism_ParentMessenger.json",
    ParentMessengerBase: "./../../core/artifacts/contracts/cross-chain-oracle/chain-adapters/ParentMessengerBase.sol/ParentMessengerBase.json",
    Polygon_ChildMessenger: "./../../core/artifacts/contracts/cross-chain-oracle/chain-adapters/Polygon_ChildMessenger.sol/Polygon_ChildMessenger.json",
    Polygon_ParentMessenger: "./../../core/artifacts/contracts/cross-chain-oracle/chain-adapters/Polygon_ParentMessenger.sol/Polygon_ParentMessenger.json",
    Arbitrum_BridgeMock: "./../../core/artifacts/contracts/cross-chain-oracle/chain-adapters/test/Arbitrum_inboxMock.sol/Arbitrum_BridgeMock.json",
    Arbitrum_InboxMock: "./../../core/artifacts/contracts/cross-chain-oracle/chain-adapters/test/Arbitrum_inboxMock.sol/Arbitrum_InboxMock.json",
    Arbitrum_OutboxMock: "./../../core/artifacts/contracts/cross-chain-oracle/chain-adapters/test/Arbitrum_inboxMock.sol/Arbitrum_OutboxMock.json",
    OVM_L1CrossDomainMessengerMock: "./../../core/artifacts/contracts/cross-chain-oracle/chain-adapters/test/OVM_L1CrossDomainMessengerMock.sol/OVM_L1CrossDomainMessengerMock.json",
    ParentMessengerBaseMock: "./../../core/artifacts/contracts/cross-chain-oracle/chain-adapters/test/ParentMessengerBaseMock.sol/ParentMessengerBaseMock.json",
    Polygon_ChildMessengerMock: "./../../core/artifacts/contracts/cross-chain-oracle/chain-adapters/test/Polygon_ChildMessengerMock.sol/Polygon_ChildMessengerMock.json",
    Polygon_ParentMessengerMock: "./../../core/artifacts/contracts/cross-chain-oracle/chain-adapters/test/Polygon_ParentMessengerMock.sol/Polygon_ParentMessengerMock.json",
    ChildMessengerConsumerInterface: "./../../core/artifacts/contracts/cross-chain-oracle/interfaces/ChildMessengerConsumerInterface.sol/ChildMessengerConsumerInterface.json",
    ChildMessengerInterface: "./../../core/artifacts/contracts/cross-chain-oracle/interfaces/ChildMessengerInterface.sol/ChildMessengerInterface.json",
    ParentMessengerConsumerInterface: "./../../core/artifacts/contracts/cross-chain-oracle/interfaces/ParentMessengerConsumerInterface.sol/ParentMessengerConsumerInterface.json",
    ParentMessengerInterface: "./../../core/artifacts/contracts/cross-chain-oracle/interfaces/ParentMessengerInterface.sol/ParentMessengerInterface.json",
    GovernorMessengerMock: "./../../core/artifacts/contracts/cross-chain-oracle/test/GovernorMessengerMock.sol/GovernorMessengerMock.json",
    OracleBaseMock: "./../../core/artifacts/contracts/cross-chain-oracle/test/OracleBaseMock.sol/OracleBaseMock.json",
    OracleMessengerMock: "./../../core/artifacts/contracts/cross-chain-oracle/test/OracleMessengerMock.sol/OracleMessengerMock.json",
    AdminIdentifierLib: "./../../core/artifacts/contracts/data-verification-mechanism/implementation/AdminIdentifierLib.sol/AdminIdentifierLib.json",
    OptimisticOracleConstraints: "./../../core/artifacts/contracts/data-verification-mechanism/implementation/Constants.sol/OptimisticOracleConstraints.json",
    OracleInterfaces: "./../../core/artifacts/contracts/data-verification-mechanism/implementation/Constants.sol/OracleInterfaces.json",
    ContractCreator: "./../../core/artifacts/contracts/data-verification-mechanism/implementation/ContractCreator.sol/ContractCreator.json",
    DesignatedVoting: "./../../core/artifacts/contracts/data-verification-mechanism/implementation/DesignatedVoting.sol/DesignatedVoting.json",
    DesignatedVotingFactory: "./../../core/artifacts/contracts/data-verification-mechanism/implementation/DesignatedVotingFactory.sol/DesignatedVotingFactory.json",
    DesignatedVotingV2: "./../../core/artifacts/contracts/data-verification-mechanism/implementation/DesignatedVotingV2.sol/DesignatedVotingV2.json",
    DesignatedVotingV2Factory: "./../../core/artifacts/contracts/data-verification-mechanism/implementation/DesignatedVotingV2Factory.sol/DesignatedVotingV2Factory.json",
    EmergencyProposer: "./../../core/artifacts/contracts/data-verification-mechanism/implementation/EmergencyProposer.sol/EmergencyProposer.json",
    FinancialContractsAdmin: "./../../core/artifacts/contracts/data-verification-mechanism/implementation/FinancialContractsAdmin.sol/FinancialContractsAdmin.json",
    Finder: "./../../core/artifacts/contracts/data-verification-mechanism/implementation/Finder.sol/Finder.json",
    FixedSlashSlashingLibrary: "./../../core/artifacts/contracts/data-verification-mechanism/implementation/FixedSlashSlashingLibrary.sol/FixedSlashSlashingLibrary.json",
    Governor: "./../../core/artifacts/contracts/data-verification-mechanism/implementation/Governor.sol/Governor.json",
    GovernorV2: "./../../core/artifacts/contracts/data-verification-mechanism/implementation/GovernorV2.sol/GovernorV2.json",
    IdentifierWhitelist: "./../../core/artifacts/contracts/data-verification-mechanism/implementation/IdentifierWhitelist.sol/IdentifierWhitelist.json",
    Proposer: "./../../core/artifacts/contracts/data-verification-mechanism/implementation/Proposer.sol/Proposer.json",
    ProposerV2: "./../../core/artifacts/contracts/data-verification-mechanism/implementation/ProposerV2.sol/ProposerV2.json",
    Registry: "./../../core/artifacts/contracts/data-verification-mechanism/implementation/Registry.sol/Registry.json",
    ResultComputation: "./../../core/artifacts/contracts/data-verification-mechanism/implementation/ResultComputation.sol/ResultComputation.json",
    ResultComputationV2: "./../../core/artifacts/contracts/data-verification-mechanism/implementation/ResultComputationV2.sol/ResultComputationV2.json",
    Staker: "./../../core/artifacts/contracts/data-verification-mechanism/implementation/Staker.sol/Staker.json",
    Store: "./../../core/artifacts/contracts/data-verification-mechanism/implementation/Store.sol/Store.json",
    TokenMigrator: "./../../core/artifacts/contracts/data-verification-mechanism/implementation/TokenMigrator.sol/TokenMigrator.json",
    VoteTiming: "./../../core/artifacts/contracts/data-verification-mechanism/implementation/VoteTiming.sol/VoteTiming.json",
    Voting: "./../../core/artifacts/contracts/data-verification-mechanism/implementation/Voting.sol/Voting.json",
    VotingToken: "./../../core/artifacts/contracts/data-verification-mechanism/implementation/VotingToken.sol/VotingToken.json",
    VotingV2: "./../../core/artifacts/contracts/data-verification-mechanism/implementation/VotingV2.sol/VotingV2.json",
    EmergencyProposerTest: "./../../core/artifacts/contracts/data-verification-mechanism/implementation/test/EmergencyProposerTest.sol/EmergencyProposerTest.json",
    GovernorTest: "./../../core/artifacts/contracts/data-verification-mechanism/implementation/test/GovernorTest.sol/GovernorTest.json",
    GovernorV2Test: "./../../core/artifacts/contracts/data-verification-mechanism/implementation/test/GovernorV2Test.sol/GovernorV2Test.json",
    MockAdministratee: "./../../core/artifacts/contracts/data-verification-mechanism/implementation/test/MockAdministratee.sol/MockAdministratee.json",
    PriceIdentifierSlashingLibaryTest: "./../../core/artifacts/contracts/data-verification-mechanism/implementation/test/PriceIdentifierSlashingLibaryTest.sol/PriceIdentifierSlashingLibaryTest.json",
    ProposerV2Test: "./../../core/artifacts/contracts/data-verification-mechanism/implementation/test/ProposerV2Test.sol/ProposerV2Test.json",
    PunitiveSlashingLibraryTest: "./../../core/artifacts/contracts/data-verification-mechanism/implementation/test/PunitiveSlashingLibraryTest.sol/PunitiveSlashingLibraryTest.json",
    ResultComputationTest: "./../../core/artifacts/contracts/data-verification-mechanism/implementation/test/ResultComputationTest.sol/ResultComputationTest.json",
    StakerControlledTiming: "./../../core/artifacts/contracts/data-verification-mechanism/implementation/test/StakerTest.sol/StakerControlledTiming.json",
    StakerTest: "./../../core/artifacts/contracts/data-verification-mechanism/implementation/test/StakerTest.sol/StakerTest.json",
    VoteTimingTest: "./../../core/artifacts/contracts/data-verification-mechanism/implementation/test/VoteTimingTest.sol/VoteTimingTest.json",
    VotingTest: "./../../core/artifacts/contracts/data-verification-mechanism/implementation/test/VotingTest.sol/VotingTest.json",
    VotingV2ControllableTiming: "./../../core/artifacts/contracts/data-verification-mechanism/implementation/test/VotingV2Test.sol/VotingV2ControllableTiming.json",
    VotingV2Test: "./../../core/artifacts/contracts/data-verification-mechanism/implementation/test/VotingV2Test.sol/VotingV2Test.json",
    ZeroedSlashingSlashingLibraryTest: "./../../core/artifacts/contracts/data-verification-mechanism/implementation/test/ZeroedSlashingLibaryTest.sol/ZeroedSlashingSlashingLibraryTest.json",
    AdministrateeInterface: "./../../core/artifacts/contracts/data-verification-mechanism/interfaces/AdministrateeInterface.sol/AdministrateeInterface.json",
    FinderInterface: "./../../core/artifacts/contracts/data-verification-mechanism/interfaces/FinderInterface.sol/FinderInterface.json",
    IdentifierWhitelistInterface: "./../../core/artifacts/contracts/data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol/IdentifierWhitelistInterface.json",
    MinimumVotingAncillaryInterface: "./../../core/artifacts/contracts/data-verification-mechanism/interfaces/MinimumVotingAncillaryInterface.sol/MinimumVotingAncillaryInterface.json",
    OracleAncillaryInterface: "./../../core/artifacts/contracts/data-verification-mechanism/interfaces/OracleAncillaryInterface.sol/OracleAncillaryInterface.json",
    OracleGovernanceInterface: "./../../core/artifacts/contracts/data-verification-mechanism/interfaces/OracleGovernanceInterface.sol/OracleGovernanceInterface.json",
    OracleInterface: "./../../core/artifacts/contracts/data-verification-mechanism/interfaces/OracleInterface.sol/OracleInterface.json",
    RegistryInterface: "./../../core/artifacts/contracts/data-verification-mechanism/interfaces/RegistryInterface.sol/RegistryInterface.json",
    SlashingLibraryInterface: "./../../core/artifacts/contracts/data-verification-mechanism/interfaces/SlashingLibraryInterface.sol/SlashingLibraryInterface.json",
    StakerInterface: "./../../core/artifacts/contracts/data-verification-mechanism/interfaces/StakerInterface.sol/StakerInterface.json",
    StoreInterface: "./../../core/artifacts/contracts/data-verification-mechanism/interfaces/StoreInterface.sol/StoreInterface.json",
    VotingAncillaryInterface: "./../../core/artifacts/contracts/data-verification-mechanism/interfaces/VotingAncillaryInterface.sol/VotingAncillaryInterface.json",
    VotingInterface: "./../../core/artifacts/contracts/data-verification-mechanism/interfaces/VotingInterface.sol/VotingInterface.json",
    VotingV2Interface: "./../../core/artifacts/contracts/data-verification-mechanism/interfaces/VotingV2Interface.sol/VotingV2Interface.json",
    MockOracle: "./../../core/artifacts/contracts/data-verification-mechanism/test/MockOracle.sol/MockOracle.json",
    MockOracleAncillary: "./../../core/artifacts/contracts/data-verification-mechanism/test/MockOracleAncillary.sol/MockOracleAncillary.json",
    MockOracleCombined: "./../../core/artifacts/contracts/data-verification-mechanism/test/MockOracleCombined.sol/MockOracleCombined.json",
    MockOracleGovernance: "./../../core/artifacts/contracts/data-verification-mechanism/test/MockOracleGovernance.sol/MockOracleGovernance.json",
    VotingAncillaryInterfaceTesting: "./../../core/artifacts/contracts/data-verification-mechanism/test/VotingAncillaryInterfaceTest.sol/VotingAncillaryInterfaceTesting.json",
    VotingInterfaceTesting: "./../../core/artifacts/contracts/data-verification-mechanism/test/VotingInterfaceTest.sol/VotingInterfaceTesting.json",
    AVM_CrossDomainEnabled: "./../../core/artifacts/contracts/external/avm/AVM_CrossDomainEnabled.sol/AVM_CrossDomainEnabled.json",
    Arbitrum_CrossDomainEnabled: "./../../core/artifacts/contracts/external/avm/Arbitrum_CrossDomainEnabled.sol/Arbitrum_CrossDomainEnabled.json",
    Arbitrum_Messenger: "./../../core/artifacts/contracts/external/avm/Arbitrum_Messenger.sol/Arbitrum_Messenger.json",
    ArbSys: "./../../core/artifacts/contracts/external/avm/interfaces/ArbSys.sol/ArbSys.json",
    IBridge: "./../../core/artifacts/contracts/external/avm/interfaces/iArbitrum_Inbox.sol/IBridge.json",
    iArbitrum_Inbox: "./../../core/artifacts/contracts/external/avm/interfaces/iArbitrum_Inbox.sol/iArbitrum_Inbox.json",
    iArbitrum_Outbox: "./../../core/artifacts/contracts/external/avm/interfaces/iArbitrum_Outbox.sol/iArbitrum_Outbox.json",
    BobaAddressManager: "./../../core/artifacts/contracts/external/boba/BobaAddressManager.sol/BobaAddressManager.json",
    Bridge: "./../../core/artifacts/contracts/external/chainbridge/Bridge.sol/Bridge.json",
    GenericHandler: "./../../core/artifacts/contracts/external/chainbridge/handlers/GenericHandler.sol/GenericHandler.json",
    IDepositExecute: "./../../core/artifacts/contracts/external/chainbridge/interfaces/IDepositExecute.sol/IDepositExecute.json",
    IERCHandler: "./../../core/artifacts/contracts/external/chainbridge/interfaces/IERCHandler.sol/IERCHandler.json",
    IGenericHandler: "./../../core/artifacts/contracts/external/chainbridge/interfaces/IGenericHandler.sol/IGenericHandler.json",
    OptimismL1StandardBridge: "./../../core/artifacts/contracts/external/optimism-bridge/interfaces/OptimismL1StandardBridge.sol/OptimismL1StandardBridge.json",
    OptimismL2StandardBridge: "./../../core/artifacts/contracts/external/optimism-bridge/interfaces/OptimismL2StandardBridge.sol/OptimismL2StandardBridge.json",
    OptimismL2StandardERC20: "./../../core/artifacts/contracts/external/optimism-bridge/interfaces/OptimismL2StandardERC20.sol/OptimismL2StandardERC20.json",
    EmergencyShutdownable: "./../../core/artifacts/contracts/financial-templates/common/EmergencyShutdownable.sol/EmergencyShutdownable.json",
    FeePayer: "./../../core/artifacts/contracts/financial-templates/common/FeePayer.sol/FeePayer.json",
    FundingRateApplier: "./../../core/artifacts/contracts/financial-templates/common/FundingRateApplier.sol/FundingRateApplier.json",
    SyntheticToken: "./../../core/artifacts/contracts/financial-templates/common/SyntheticToken.sol/SyntheticToken.json",
    TokenFactory: "./../../core/artifacts/contracts/financial-templates/common/TokenFactory.sol/TokenFactory.json",
    WETH9: "./../../core/artifacts/contracts/financial-templates/common/WETH9.sol/WETH9.json",
    CoveredCallFinancialProductLibrary: "./../../core/artifacts/contracts/financial-templates/common/financial-product-libraries/expiring-multiparty-libraries/CoveredCallFinancialProductLibrary.sol/CoveredCallFinancialProductLibrary.json",
    ExpiringContractInterface: "./../../core/artifacts/contracts/financial-templates/common/financial-product-libraries/expiring-multiparty-libraries/FinancialProductLibrary.sol/ExpiringContractInterface.json",
    FinancialProductLibrary: "./../../core/artifacts/contracts/financial-templates/common/financial-product-libraries/expiring-multiparty-libraries/FinancialProductLibrary.sol/FinancialProductLibrary.json",
    KpiOptionsFinancialProductLibrary: "./../../core/artifacts/contracts/financial-templates/common/financial-product-libraries/expiring-multiparty-libraries/KpiOptionsFinancialProductLibrary.sol/KpiOptionsFinancialProductLibrary.json",
    PostExpirationIdentifierTransformationFinancialProductLibrary: "./../../core/artifacts/contracts/financial-templates/common/financial-product-libraries/expiring-multiparty-libraries/PostExpirationIdentifierTransformationFinancialProductLibrary.sol/PostExpirationIdentifierTransformationFinancialProductLibrary.json",
    PreExpirationIdentifierTransformationFinancialProductLibrary: "./../../core/artifacts/contracts/financial-templates/common/financial-product-libraries/expiring-multiparty-libraries/PreExpirationIdentifierTransformationFinancialProductLibrary.sol/PreExpirationIdentifierTransformationFinancialProductLibrary.json",
    StructuredNoteFinancialProductLibrary: "./../../core/artifacts/contracts/financial-templates/common/financial-product-libraries/expiring-multiparty-libraries/StructuredNoteFinancialProductLibrary.sol/StructuredNoteFinancialProductLibrary.json",
    BinaryOptionLongShortPairFinancialProductLibrary: "./../../core/artifacts/contracts/financial-templates/common/financial-product-libraries/long-short-pair-libraries/BinaryOptionLongShortPairFinancialProductLibrary.sol/BinaryOptionLongShortPairFinancialProductLibrary.json",
    CappedYieldDollarLongShortPairFinancialProductLibrary: "./../../core/artifacts/contracts/financial-templates/common/financial-product-libraries/long-short-pair-libraries/CappedYieldDollarLongShortPairFinancialProductLibrary.sol/CappedYieldDollarLongShortPairFinancialProductLibrary.json",
    CoveredCallLongShortPairFinancialProductLibrary: "./../../core/artifacts/contracts/financial-templates/common/financial-product-libraries/long-short-pair-libraries/CoveredCallLongShortPairFinancialProductLibrary.sol/CoveredCallLongShortPairFinancialProductLibrary.json",
    FlooredLinearLongShortPairFinancialProductLibrary: "./../../core/artifacts/contracts/financial-templates/common/financial-product-libraries/long-short-pair-libraries/FlooredLinearLongShortPairFinancialProductLibrary.sol/FlooredLinearLongShortPairFinancialProductLibrary.json",
    LinearLongShortPairFinancialProductLibrary: "./../../core/artifacts/contracts/financial-templates/common/financial-product-libraries/long-short-pair-libraries/LinearLongShortPairFinancialProductLibrary.sol/LinearLongShortPairFinancialProductLibrary.json",
    LongShortPairFinancialProductLibrary: "./../../core/artifacts/contracts/financial-templates/common/financial-product-libraries/long-short-pair-libraries/LongShortPairFinancialProductLibrary.sol/LongShortPairFinancialProductLibrary.json",
    RangeBondLongShortPairFinancialProductLibrary: "./../../core/artifacts/contracts/financial-templates/common/financial-product-libraries/long-short-pair-libraries/RangeBondLongShortPairFinancialProductLibrary.sol/RangeBondLongShortPairFinancialProductLibrary.json",
    SimpleSuccessTokenLongShortPairFinancialProductLibrary: "./../../core/artifacts/contracts/financial-templates/common/financial-product-libraries/long-short-pair-libraries/SimpleSuccessTokenLongShortPairFinancialProductLibrary.sol/SimpleSuccessTokenLongShortPairFinancialProductLibrary.json",
    SuccessTokenLongShortPairFinancialProductLibrary: "./../../core/artifacts/contracts/financial-templates/common/financial-product-libraries/long-short-pair-libraries/SuccessTokenLongShortPairFinancialProductLibrary.sol/SuccessTokenLongShortPairFinancialProductLibrary.json",
    ExpiringMultiParty: "./../../core/artifacts/contracts/financial-templates/expiring-multiparty/ExpiringMultiParty.sol/ExpiringMultiParty.json",
    ExpiringMultiPartyCreator: "./../../core/artifacts/contracts/financial-templates/expiring-multiparty/ExpiringMultiPartyCreator.sol/ExpiringMultiPartyCreator.json",
    ExpiringMultiPartyLib: "./../../core/artifacts/contracts/financial-templates/expiring-multiparty/ExpiringMultiPartyLib.sol/ExpiringMultiPartyLib.json",
    Liquidatable: "./../../core/artifacts/contracts/financial-templates/expiring-multiparty/Liquidatable.sol/Liquidatable.json",
    PricelessPositionManager: "./../../core/artifacts/contracts/financial-templates/expiring-multiparty/PricelessPositionManager.sol/PricelessPositionManager.json",
    LongShortPair: "./../../core/artifacts/contracts/financial-templates/long-short-pair/LongShortPair.sol/LongShortPair.json",
    LongShortPairCreator: "./../../core/artifacts/contracts/financial-templates/long-short-pair/LongShortPairCreator.sol/LongShortPairCreator.json",
    OptimisticDistributor: "./../../core/artifacts/contracts/financial-templates/optimistic-distributor/OptimisticDistributor.sol/OptimisticDistributor.json",
    OptimisticRewarder: "./../../core/artifacts/contracts/financial-templates/optimistic-rewarder/OptimisticRewarder.sol/OptimisticRewarder.json",
    OptimisticRewarderNoToken: "./../../core/artifacts/contracts/financial-templates/optimistic-rewarder/OptimisticRewarder.sol/OptimisticRewarderNoToken.json",
    OptimisticRewarderBase: "./../../core/artifacts/contracts/financial-templates/optimistic-rewarder/OptimisticRewarderBase.sol/OptimisticRewarderBase.json",
    OptimisticRewarderCreator: "./../../core/artifacts/contracts/financial-templates/optimistic-rewarder/OptimisticRewarderCreator.sol/OptimisticRewarderCreator.json",
    OptimisticRewarderToken: "./../../core/artifacts/contracts/financial-templates/optimistic-rewarder/OptimisticRewarderToken.sol/OptimisticRewarderToken.json",
    OptimisticStaker: "./../../core/artifacts/contracts/financial-templates/optimistic-rewarder/OptimisticStaker.sol/OptimisticStaker.json",
    OptimisticRewarderNoTokenTest: "./../../core/artifacts/contracts/financial-templates/optimistic-rewarder/test/OptimisticRewarderTest.sol/OptimisticRewarderNoTokenTest.json",
    OptimisticRewarderTest: "./../../core/artifacts/contracts/financial-templates/optimistic-rewarder/test/OptimisticRewarderTest.sol/OptimisticRewarderTest.json",
    ConfigStore: "./../../core/artifacts/contracts/financial-templates/perpetual-multiparty/ConfigStore.sol/ConfigStore.json",
    ConfigStoreInterface: "./../../core/artifacts/contracts/financial-templates/perpetual-multiparty/ConfigStoreInterface.sol/ConfigStoreInterface.json",
    Perpetual: "./../../core/artifacts/contracts/financial-templates/perpetual-multiparty/Perpetual.sol/Perpetual.json",
    PerpetualCreator: "./../../core/artifacts/contracts/financial-templates/perpetual-multiparty/PerpetualCreator.sol/PerpetualCreator.json",
    PerpetualLib: "./../../core/artifacts/contracts/financial-templates/perpetual-multiparty/PerpetualLib.sol/PerpetualLib.json",
    PerpetualLiquidatable: "./../../core/artifacts/contracts/financial-templates/perpetual-multiparty/PerpetualLiquidatable.sol/PerpetualLiquidatable.json",
    PerpetualPositionManager: "./../../core/artifacts/contracts/financial-templates/perpetual-multiparty/PerpetualPositionManager.sol/PerpetualPositionManager.json",
    ExpiringMultiPartyMock: "./../../core/artifacts/contracts/financial-templates/test/ExpiringMultiPartyMock.sol/ExpiringMultiPartyMock.json",
    FinancialProductLibraryTest: "./../../core/artifacts/contracts/financial-templates/test/FinancialProductLibraryTest.sol/FinancialProductLibraryTest.json",
    FundingRateApplierTest: "./../../core/artifacts/contracts/financial-templates/test/FundingRateApplierTest.sol/FundingRateApplierTest.json",
    LongShortPairFinancialProjectLibraryTest: "./../../core/artifacts/contracts/financial-templates/test/LongShortPairFinancialProjectLibraryTest.sol/LongShortPairFinancialProjectLibraryTest.json",
    LongShortPairMock: "./../../core/artifacts/contracts/financial-templates/test/LongShortPairMock.sol/LongShortPairMock.json",
    MerkleDistributor: "./../../core/artifacts/contracts/merkle-distributor/implementation/MerkleDistributor.sol/MerkleDistributor.json",
    MerkleDistributorInterface: "./../../core/artifacts/contracts/merkle-distributor/implementation/MerkleDistributorInterface.sol/MerkleDistributorInterface.json",
    OptimisticGovernor: "./../../core/artifacts/contracts/optimistic-governor/implementation/OptimisticGovernor.sol/OptimisticGovernor.json",
    OptimisticGovernorTest: "./../../core/artifacts/contracts/optimistic-governor/test/OptimisticGovernorTest.sol/OptimisticGovernorTest.json",
    TestAvatar: "./../../core/artifacts/contracts/optimistic-governor/test/TestAvatar.sol/TestAvatar.json",
    TestModuleProxyFactory: "./../../core/artifacts/contracts/optimistic-governor/test/TestModuleProxyFactory.sol/TestModuleProxyFactory.json",
    OptimisticOracleV2: "./../../core/artifacts/contracts/optimistic-oracle-v2/implementation/OptimisticOracleV2.sol/OptimisticOracleV2.json",
    OptimisticRequester: "./../../core/artifacts/contracts/optimistic-oracle-v2/implementation/OptimisticOracleV2.sol/OptimisticRequester.json",
    OptimisticRequesterV2: "./../../core/artifacts/contracts/optimistic-oracle-v2/implementation/SkinnyOptimisticOracleV2.sol/OptimisticRequesterV2.json",
    SkinnyOptimisticOracleV2: "./../../core/artifacts/contracts/optimistic-oracle-v2/implementation/SkinnyOptimisticOracleV2.sol/SkinnyOptimisticOracleV2.json",
    SkinnyOptimisticOracleV2Prod: "./../../core/artifacts/contracts/optimistic-oracle-v2/implementation/SkinnyOptimisticOracleV2.sol/SkinnyOptimisticOracleV2Prod.json",
    OptimisticOracleInterface: "./../../core/artifacts/contracts/optimistic-oracle-v2/interfaces/OptimisticOracleInterface.sol/OptimisticOracleInterface.json",
    OptimisticOracleV2Interface: "./../../core/artifacts/contracts/optimistic-oracle-v2/interfaces/OptimisticOracleV2Interface.sol/OptimisticOracleV2Interface.json",
    SkinnyOptimisticOracleInterface: "./../../core/artifacts/contracts/optimistic-oracle-v2/interfaces/SkinnyOptimisticOracleInterface.sol/SkinnyOptimisticOracleInterface.json",
    SkinnyOptimisticOracleV2Interface: "./../../core/artifacts/contracts/optimistic-oracle-v2/interfaces/SkinnyOptimisticOracleV2Interface.sol/SkinnyOptimisticOracleV2Interface.json",
    OptimisticOracle: "./../../core/artifacts/contracts/optimistic-oracle-v2/previous-versions/OptimisticOracle.sol/OptimisticOracle.json",
    SkinnyOptimisticOracle: "./../../core/artifacts/contracts/optimistic-oracle-v2/previous-versions/SkinnyOptimisticOracle.sol/SkinnyOptimisticOracle.json",
    SkinnyOptimisticOracleProd: "./../../core/artifacts/contracts/optimistic-oracle-v2/previous-versions/SkinnyOptimisticOracle.sol/SkinnyOptimisticOracleProd.json",
    OptimisticRequesterTest: "./../../core/artifacts/contracts/optimistic-oracle-v2/test/OptimisticRequesterTest.sol/OptimisticRequesterTest.json",
    SkinnyOptimisticRequesterTest: "./../../core/artifacts/contracts/optimistic-oracle-v2/test/SkinnyOptimisticRequesterTest.sol/SkinnyOptimisticRequesterTest.json",
    SkinnyOptimisticV2RequesterTest: "./../../core/artifacts/contracts/optimistic-oracle-v2/test/SkinnyOptimisticV2RequesterTest.sol/SkinnyOptimisticV2RequesterTest.json",
    OptimisticOracleV3: "./../../core/artifacts/contracts/optimistic-oracle-v3/implementation/OptimisticOracleV3.sol/OptimisticOracleV3.json",
    BaseEscalationManager: "./../../core/artifacts/contracts/optimistic-oracle-v3/implementation/escalation-manager/BaseEscalationManager.sol/BaseEscalationManager.json",
    DisputeLimitingEscalationManager: "./../../core/artifacts/contracts/optimistic-oracle-v3/implementation/escalation-manager/DisputeLimitingEscalationManager.sol/DisputeLimitingEscalationManager.json",
    FullPolicyEscalationManager: "./../../core/artifacts/contracts/optimistic-oracle-v3/implementation/escalation-manager/FullPolicyEscalationManager.sol/FullPolicyEscalationManager.json",
    OwnerDiscardOracleEscalationManager: "./../../core/artifacts/contracts/optimistic-oracle-v3/implementation/escalation-manager/OwnerDiscardOracleEscalationManager.sol/OwnerDiscardOracleEscalationManager.json",
    OwnerSelectOracleEscalationManager: "./../../core/artifacts/contracts/optimistic-oracle-v3/implementation/escalation-manager/OwnerSelectOracleEscalationManager.sol/OwnerSelectOracleEscalationManager.json",
    SuperbondEscalationManager: "./../../core/artifacts/contracts/optimistic-oracle-v3/implementation/escalation-manager/SuperbondEscalationManager.sol/SuperbondEscalationManager.json",
    WhitelistAsserterEscalationManager: "./../../core/artifacts/contracts/optimistic-oracle-v3/implementation/escalation-manager/WhitelistAsserterEscalationManager.sol/WhitelistAsserterEscalationManager.json",
    WhitelistCallerEscalationManager: "./../../core/artifacts/contracts/optimistic-oracle-v3/implementation/escalation-manager/WhitelistCallerEscalationManager.sol/WhitelistCallerEscalationManager.json",
    WhitelistDisputerEscalationManager: "./../../core/artifacts/contracts/optimistic-oracle-v3/implementation/escalation-manager/WhitelistDisputerEscalationManager.sol/WhitelistDisputerEscalationManager.json",
    DataAsserter: "./../../core/artifacts/contracts/optimistic-oracle-v3/implementation/examples/DataAsserter.sol/DataAsserter.json",
    Insurance: "./../../core/artifacts/contracts/optimistic-oracle-v3/implementation/examples/Insurance.sol/Insurance.json",
    PredictionMarket: "./../../core/artifacts/contracts/optimistic-oracle-v3/implementation/examples/PredictionMarket.sol/PredictionMarket.json",
    AssertingCallerTest: "./../../core/artifacts/contracts/optimistic-oracle-v3/implementation/test/AssertingCallerTest.sol/AssertingCallerTest.json",
    OptimisticOracleV3Test: "./../../core/artifacts/contracts/optimistic-oracle-v3/implementation/test/OptimisticOracleV3Test.sol/OptimisticOracleV3Test.json",
    EscalationManagerInterface: "./../../core/artifacts/contracts/optimistic-oracle-v3/interfaces/EscalationManagerInterface.sol/EscalationManagerInterface.json",
    OptimisticOracleV3CallbackRecipientInterface: "./../../core/artifacts/contracts/optimistic-oracle-v3/interfaces/OptimisticOracleV3CallbackRecipientInterface.sol/OptimisticOracleV3CallbackRecipientInterface.json",
    OptimisticOracleV3Interface: "./../../core/artifacts/contracts/optimistic-oracle-v3/interfaces/OptimisticOracleV3Interface.sol/OptimisticOracleV3Interface.json",
    GovernorChildTunnel: "./../../core/artifacts/contracts/polygon-cross-chain-oracle/GovernorChildTunnel.sol/GovernorChildTunnel.json",
    GovernorRootTunnel: "./../../core/artifacts/contracts/polygon-cross-chain-oracle/GovernorRootTunnel.sol/GovernorRootTunnel.json",
    OracleBaseTunnel: "./../../core/artifacts/contracts/polygon-cross-chain-oracle/OracleBaseTunnel.sol/OracleBaseTunnel.json",
    OracleChildTunnel: "./../../core/artifacts/contracts/polygon-cross-chain-oracle/OracleChildTunnel.sol/OracleChildTunnel.json",
    OracleRootTunnel: "./../../core/artifacts/contracts/polygon-cross-chain-oracle/OracleRootTunnel.sol/OracleRootTunnel.json",
    FxChildMock: "./../../core/artifacts/contracts/polygon-cross-chain-oracle/test/FxChildMock.sol/FxChildMock.json",
    IStateReceiver: "./../../core/artifacts/contracts/polygon-cross-chain-oracle/test/FxChildMock.sol/IStateReceiver.json",
    FxRootMock: "./../../core/artifacts/contracts/polygon-cross-chain-oracle/test/FxRootMock.sol/FxRootMock.json",
    IStateSender: "./../../core/artifacts/contracts/polygon-cross-chain-oracle/test/FxRootMock.sol/IStateSender.json",
    OracleBaseTunnelMock: "./../../core/artifacts/contracts/polygon-cross-chain-oracle/test/OracleBaseTunnelMock.sol/OracleBaseTunnelMock.json",
    OracleRootTunnelMock: "./../../core/artifacts/contracts/polygon-cross-chain-oracle/test/OracleRootTunnelMock.sol/OracleRootTunnelMock.json",
    StateSyncMock: "./../../core/artifacts/contracts/polygon-cross-chain-oracle/test/StateSyncMock.sol/StateSyncMock.json",
    IFinancialContract: "./../../core/artifacts/contracts/proxy-scripts/atomic-disputer/ReserveCurrencyDisputer.sol/IFinancialContract.json",
    ReserveCurrencyDisputer: "./../../core/artifacts/contracts/proxy-scripts/atomic-disputer/ReserveCurrencyDisputer.sol/ReserveCurrencyDisputer.json",
    IFinder: "./../../core/artifacts/contracts/proxy-scripts/atomic-liquidator/ReserveCurrencyLiquidator.sol/IFinder.json",
    IStore: "./../../core/artifacts/contracts/proxy-scripts/atomic-liquidator/ReserveCurrencyLiquidator.sol/IStore.json",
    ReserveCurrencyLiquidator: "./../../core/artifacts/contracts/proxy-scripts/atomic-liquidator/ReserveCurrencyLiquidator.sol/ReserveCurrencyLiquidator.json",
    LiquidationWithdrawer: "./../../core/artifacts/contracts/proxy-scripts/bot-action-wrappers/LiquidationWithdrawer.sol/LiquidationWithdrawer.json",
    PositionSettler: "./../../core/artifacts/contracts/proxy-scripts/bot-action-wrappers/PositionSettler.sol/PositionSettler.json",
    TokenRedeemer: "./../../core/artifacts/contracts/proxy-scripts/bot-action-wrappers/TokenRedeemer.sol/TokenRedeemer.json",
    TokenSender: "./../../core/artifacts/contracts/proxy-scripts/bot-action-wrappers/TokenSender.sol/TokenSender.json",
    LspUniswapV2Broker: "./../../core/artifacts/contracts/proxy-scripts/lsp-broker/LspUniswapV2Broker.sol/LspUniswapV2Broker.json",
    FullMath: "./../../core/artifacts/contracts/proxy-scripts/uniswap-broker/UniswapV2Broker.sol/FullMath.json",
    UniswapV2Broker: "./../../core/artifacts/contracts/proxy-scripts/uniswap-broker/UniswapV2Broker.sol/UniswapV2Broker.json",
    FixedPoint96: "./../../core/artifacts/contracts/proxy-scripts/uniswap-broker/UniswapV3Broker.sol/FixedPoint96.json",
    SqrtPriceMath: "./../../core/artifacts/contracts/proxy-scripts/uniswap-broker/UniswapV3Broker.sol/SqrtPriceMath.json",
    TickBitmap: "./../../core/artifacts/contracts/proxy-scripts/uniswap-broker/UniswapV3Broker.sol/TickBitmap.json",
    TickMath: "./../../core/artifacts/contracts/proxy-scripts/uniswap-broker/UniswapV3Broker.sol/TickMath.json",
    UniswapV3Broker: "./../../core/artifacts/contracts/proxy-scripts/uniswap-broker/UniswapV3Broker.sol/UniswapV3Broker.json",
    SnapshotVotingPower: "./../../core/artifacts/contracts/snapshot-helpers/SnapshotVotingPower.sol/SnapshotVotingPower.json",
    OriginValidator: "./../../core/artifacts/contracts/umip-helpers/OriginValidator.sol/OriginValidator.json",
    Umip3Upgrader: "./../../core/artifacts/contracts/umip-helpers/Umip3Upgrader.sol/Umip3Upgrader.json",
    VotingUpgrader: "./../../core/artifacts/contracts/umip-helpers/VotingUpgrader.sol/VotingUpgrader.json",
    VotingUpgraderV2: "./../../core/artifacts/contracts/umip-helpers/VotingUpgraderV2.sol/VotingUpgraderV2.json",
    IL2ERC20Bridge: "../../../node_modules/@across-protocol/contracts/artifacts/@eth-optimism/contracts/L2/messaging/IL2ERC20Bridge.sol/IL2ERC20Bridge.json",
    OVM_CrossDomainEnabled: "../../../node_modules/@across-protocol/contracts/artifacts/contracts/external/ovm/OVM_CrossDomainEnabled.sol/OVM_CrossDomainEnabled.json",
    iOVM_CrossDomainMessenger: "../../../node_modules/@across-protocol/contracts/artifacts/contracts/external/ovm/OVM_CrossDomainEnabled.sol/iOVM_CrossDomainMessenger.json",
    BridgeAdmin: "../../../node_modules/@across-protocol/contracts/artifacts/contracts/insured-bridge/BridgeAdmin.sol/BridgeAdmin.json",
    BridgeDepositBox: "../../../node_modules/@across-protocol/contracts/artifacts/contracts/insured-bridge/BridgeDepositBox.sol/BridgeDepositBox.json",
    TokenLike: "../../../node_modules/@across-protocol/contracts/artifacts/contracts/insured-bridge/BridgeDepositBox.sol/TokenLike.json",
    WETH9Like: "../../../node_modules/@across-protocol/contracts/artifacts/contracts/insured-bridge/BridgeDepositBox.sol/WETH9Like.json",
    BridgePool: "../../../node_modules/@across-protocol/contracts/artifacts/contracts/insured-bridge/BridgePool.sol/BridgePool.json",
    BridgePoolProd: "../../../node_modules/@across-protocol/contracts/artifacts/contracts/insured-bridge/BridgePool.sol/BridgePoolProd.json",
    RateModelStore: "../../../node_modules/@across-protocol/contracts/artifacts/contracts/insured-bridge/RateModelStore.sol/RateModelStore.json",
    AVM_BridgeDepositBox: "../../../node_modules/@across-protocol/contracts/artifacts/contracts/insured-bridge/avm/AVM_BridgeDepositBox.sol/AVM_BridgeDepositBox.json",
    StandardBridgeLike: "../../../node_modules/@across-protocol/contracts/artifacts/contracts/insured-bridge/avm/AVM_BridgeDepositBox.sol/StandardBridgeLike.json",
    BridgeAdminInterface: "../../../node_modules/@across-protocol/contracts/artifacts/contracts/insured-bridge/interfaces/BridgeAdminInterface.sol/BridgeAdminInterface.json",
    BridgePoolInterface: "../../../node_modules/@across-protocol/contracts/artifacts/contracts/insured-bridge/interfaces/BridgePoolInterface.sol/BridgePoolInterface.json",
    MessengerInterface: "../../../node_modules/@across-protocol/contracts/artifacts/contracts/insured-bridge/interfaces/MessengerInterface.sol/MessengerInterface.json",
    OVM_BridgeDepositBox: "../../../node_modules/@across-protocol/contracts/artifacts/contracts/insured-bridge/ovm/OVM_BridgeDepositBox.sol/OVM_BridgeDepositBox.json",
    OVM_OETH_BridgeDepositBox: "../../../node_modules/@across-protocol/contracts/artifacts/contracts/insured-bridge/ovm/OVM_OETH_BridgeDepositBox.sol/OVM_OETH_BridgeDepositBox.json",
    Optimism_Messenger: "../../../node_modules/@across-protocol/contracts/artifacts/contracts/insured-bridge/ovm/Optimism_Messenger.sol/Optimism_Messenger.json",
    Optimism_Wrapper: "../../../node_modules/@across-protocol/contracts/artifacts/contracts/insured-bridge/ovm/Optimism_Wrapper.sol/Optimism_Wrapper.json",
    BridgeDepositBoxMock: "../../../node_modules/@across-protocol/contracts/artifacts/contracts/insured-bridge/test/BridgeDepositBoxMock.sol/BridgeDepositBoxMock.json",
    MessengerMock: "../../../node_modules/@across-protocol/contracts/artifacts/contracts/insured-bridge/test/MessengerMock.sol/MessengerMock.json",
};
function getAbi(contractName) { return require(artifactPaths[contractName]).abi; }
exports.getAbi = getAbi;
function getBytecode(contractName) { return require(artifactPaths[contractName]).bytecode; }
exports.getBytecode = getBytecode;
function getBridgeAdminStaticAddress(chainId) {
    switch (chainId.toString()) {
        case "1":
            return "0x30B44C676A05F1264d1dE9cC31dB5F2A945186b6";
        default:
            throw new Error(`No address found for deployment BridgeAdmin on chainId ${chainId}`);
    }
}
exports.getBridgeAdminStaticAddress = getBridgeAdminStaticAddress;
function getWETH_BridgePoolStaticAddress(chainId) {
    switch (chainId.toString()) {
        case "1":
            return "0x7355Efc63Ae731f584380a9838292c7046c1e433";
        default:
            throw new Error(`No address found for deployment WETH_BridgePool on chainId ${chainId}`);
    }
}
exports.getWETH_BridgePoolStaticAddress = getWETH_BridgePoolStaticAddress;
function getUSDC_BridgePoolStaticAddress(chainId) {
    switch (chainId.toString()) {
        case "1":
            return "0x256C8919CE1AB0e33974CF6AA9c71561Ef3017b6";
        default:
            throw new Error(`No address found for deployment USDC_BridgePool on chainId ${chainId}`);
    }
}
exports.getUSDC_BridgePoolStaticAddress = getUSDC_BridgePoolStaticAddress;
function getUMA_BridgePoolStaticAddress(chainId) {
    switch (chainId.toString()) {
        case "1":
            return "0xdfe0ec39291e3b60ACa122908f86809c9eE64E90";
        default:
            throw new Error(`No address found for deployment UMA_BridgePool on chainId ${chainId}`);
    }
}
exports.getUMA_BridgePoolStaticAddress = getUMA_BridgePoolStaticAddress;
function getBADGER_BridgePoolStaticAddress(chainId) {
    switch (chainId.toString()) {
        case "1":
            return "0x43298F9f91a4545dF64748e78a2c777c580573d6";
        default:
            throw new Error(`No address found for deployment BADGER_BridgePool on chainId ${chainId}`);
    }
}
exports.getBADGER_BridgePoolStaticAddress = getBADGER_BridgePoolStaticAddress;
function getWBTC_BridgePoolStaticAddress(chainId) {
    switch (chainId.toString()) {
        case "1":
            return "0x02fbb64517E1c6ED69a6FAa3ABf37Db0482f1152";
        default:
            throw new Error(`No address found for deployment WBTC_BridgePool on chainId ${chainId}`);
    }
}
exports.getWBTC_BridgePoolStaticAddress = getWBTC_BridgePoolStaticAddress;
function getArbitrum_MessengerStaticAddress(chainId) {
    switch (chainId.toString()) {
        case "1":
            return "0x0D8563d3B8b3Fec542aaE50a530C606DAc4D1c4F";
        default:
            throw new Error(`No address found for deployment Arbitrum_Messenger on chainId ${chainId}`);
    }
}
exports.getArbitrum_MessengerStaticAddress = getArbitrum_MessengerStaticAddress;
function getOptimism_MessengerStaticAddress(chainId) {
    switch (chainId.toString()) {
        case "1":
            return "0xE59283f44c29c43C0c23E71C906077e49DF714b5";
        default:
            throw new Error(`No address found for deployment Optimism_Messenger on chainId ${chainId}`);
    }
}
exports.getOptimism_MessengerStaticAddress = getOptimism_MessengerStaticAddress;
function getOptimism_WrapperStaticAddress(chainId) {
    switch (chainId.toString()) {
        case "1":
            return "0xcFfB47DC5Bd4f6Dc475E98fF92647a583389Ee08";
        default:
            throw new Error(`No address found for deployment Optimism_Wrapper on chainId ${chainId}`);
    }
}
exports.getOptimism_WrapperStaticAddress = getOptimism_WrapperStaticAddress;
function getRateModelStoreStaticAddress(chainId) {
    switch (chainId.toString()) {
        case "1":
            return "0xd18fFeb5fdd1F2e122251eA7Bf357D8Af0B60B50";
        default:
            throw new Error(`No address found for deployment RateModelStore on chainId ${chainId}`);
    }
}
exports.getRateModelStoreStaticAddress = getRateModelStoreStaticAddress;
function getOVM_OETH_BridgeDepositBoxStaticAddress(chainId) {
    switch (chainId.toString()) {
        case "10":
            return "0x3baD7AD0728f9917d1Bf08af5782dCbD516cDd96";
        case "288":
            return "0xCD43CEa89DF8fE39031C03c24BC24480e942470B";
        default:
            throw new Error(`No address found for deployment OVM_OETH_BridgeDepositBox on chainId ${chainId}`);
    }
}
exports.getOVM_OETH_BridgeDepositBoxStaticAddress = getOVM_OETH_BridgeDepositBoxStaticAddress;
function getAVM_BridgeDepositBoxStaticAddress(chainId) {
    switch (chainId.toString()) {
        case "42161":
            return "0xD8c6dD978a3768F7DDfE3A9aAD2c3Fd75Fa9B6Fd";
        default:
            throw new Error(`No address found for deployment AVM_BridgeDepositBox on chainId ${chainId}`);
    }
}
exports.getAVM_BridgeDepositBoxStaticAddress = getAVM_BridgeDepositBoxStaticAddress;
function getFinderStaticAddress(chainId) {
    switch (chainId.toString()) {
        case "1":
            return "0x40f941E48A552bF496B154Af6bf55725f18D77c3";
        case "4":
            return "0xbb6206fb01fAad31e8aaFc3AD303cEA89D8c8157";
        case "5":
            return "0xE60dBa66B85E10E7Fd18a67a6859E241A243950e";
        case "10":
            return "0x278d6b1aA37d09769E519f05FcC5923161A8536D";
        case "42":
            return "0xeD0169a88d267063184b0853BaAAAe66c3c154B2";
        case "82":
            return "0x74f0D6b0Ea5B142052ca271f0087af20333304Bd";
        case "100":
            return "0xeF684C38F94F48775959ECf2012D7E864ffb9dd4";
        case "137":
            return "0x09aea4b2242abC8bb4BB78D537A67a245A7bEC64";
        case "288":
            return "0xad8fD1f418FB860A383c9D4647880af7f043Ef39";
        case "416":
            return "0x1340229DCF6e0bed7D9c2356929987C2A720F836";
        case "9001":
            return "0xeF684C38F94F48775959ECf2012D7E864ffb9dd4";
        case "42161":
            return "0xB0b9f73B424AD8dc58156C2AE0D7A1115D1EcCd1";
        case "43114":
            return "0xCFdC4d6FdeC25e339ef07e25C35a482A6bedcfE0";
        case "80001":
            return "0xb22033fF04AD01fbE8d78ef4622a20626834271B";
        case "84531":
            return "0x2BC84A3777469f67e040DAb9d00512a5D5258f39";
        case "421611":
            return "0x0d6b8752e5AdBafb3F75299aD15863a1fd02D565";
        default:
            throw new Error(`No address found for deployment Finder on chainId ${chainId}`);
    }
}
exports.getFinderStaticAddress = getFinderStaticAddress;
function getVotingTokenStaticAddress(chainId) {
    switch (chainId.toString()) {
        case "1":
            return "0x04Fa0d235C4abf4BcF4787aF4CF447DE572eF828";
        case "4":
            return "0x00526C1ede46255b752D280620318ab50B24c20e";
        case "5":
            return "0xBa950974AFdae520cEE596c98295150Cf8D9659c";
        case "42":
            return "0x489Bf230d4Ab5c2083556E394a28276C22c3B580";
        default:
            throw new Error(`No address found for deployment VotingToken on chainId ${chainId}`);
    }
}
exports.getVotingTokenStaticAddress = getVotingTokenStaticAddress;
function getIdentifierWhitelistStaticAddress(chainId) {
    switch (chainId.toString()) {
        case "1":
            return "0xcF649d9Da4D1362C4DAEa67573430Bd6f945e570";
        case "4":
            return "0x7242892cc4653f1214cf700ddcc50ad47ebff564";
        case "5":
            return "0x488211B646b909C490d942f456481BeAE52fde27";
        case "10":
            return "0xd90A27EaF88c81F50e30e0E0333036838814181e";
        case "42":
            return "0x7b3c4D3B6a4eB3259DAfc8416981131E870f85a7";
        case "82":
            return "0xBDF9833DB18966fFdbAffAFA65361bEbdCB58031";
        case "100":
            return "0x3Db06DA8F0a24A525f314eeC954fC5c6a973d40E";
        case "137":
            return "0x2271a5E74eA8A29764ab10523575b41AA52455f0";
        case "288":
            return "0x1E6C2aeB96FF40aE06f5045783688040df523910";
        case "416":
            return "0x93097B6d282a0BA755042a66Cf287843cADBCb53";
        case "9001":
            return "0x7E63A5f1a8F0B4d0934B2f2327DAED3F6bb2ee75";
        case "42161":
            return "0x2914BE6CD56276d208299D2062848b059FC10588";
        case "43114":
            return "0xbB8f0CAFf20a4775b422407Da6016B487aF6c5E9";
        case "80001":
            return "0xA011B82880D0235f845c9d1EA5610b965e0CD759";
        case "84531":
            return "0x278d6b1aA37d09769E519f05FcC5923161A8536D";
        default:
            throw new Error(`No address found for deployment IdentifierWhitelist on chainId ${chainId}`);
    }
}
exports.getIdentifierWhitelistStaticAddress = getIdentifierWhitelistStaticAddress;
function getVotingStaticAddress(chainId) {
    switch (chainId.toString()) {
        case "1":
            return "0x8B1631ab830d11531aE83725fDa4D86012eCCd77";
        case "4":
            return "0x5545092553Cf5Bf786e87a87192E902D50D8f022";
        case "5":
            return "0x9f444346FD853084158ce9cfa7e062BaBd51a577";
        case "42":
            return "0x0740C93a3D2B6088d0E345Da47c3B412b9874562";
        default:
            throw new Error(`No address found for deployment Voting on chainId ${chainId}`);
    }
}
exports.getVotingStaticAddress = getVotingStaticAddress;
function getRegistryStaticAddress(chainId) {
    switch (chainId.toString()) {
        case "1":
            return "0x3e532e6222afe9Bcf02DCB87216802c75D5113aE";
        case "4":
            return "0x35E63eA3eb0fb7A3bc543C71FB66412e1F6B0E04";
        case "5":
            return "0x9214454Ff30410a1558b8749Ab3FB0fD6F942539";
        case "10":
            return "0xa4199d73ae206d49c966cF16c58436851f87d47F";
        case "42":
            return "0x7b1c04D2826B140779e2B97d5783AF05cf00Fbab";
        case "82":
            return "0x226Ff26cDD5C539a90d0b25E2F2720815E9bB596";
        case "100":
            return "0x28077B47Cd03326De7838926A63699849DD4fa87";
        case "137":
            return "0x5f25b1647fa8eaea0e15edd413c7afcbe613b6f4";
        case "288":
            return "0xA011B82880D0235f845c9d1EA5610b965e0CD759";
        case "416":
            return "0x1251C69A4b91C2df1c1Af90CFFa65BEbC843BCfa";
        case "9001":
            return "0x2271a5E74eA8A29764ab10523575b41AA52455f0";
        case "42161":
            return "0xCdb25d0A6FfFE639BC591a565F2D99507837f2b7";
        case "43114":
            return "0x1340229DCF6e0bed7D9c2356929987C2A720F836";
        case "80001":
            return "0x52313039f1b849B49dce4bdf6a43AC76995bE366";
        case "421611":
            return "0xD8c6dD978a3768F7DDfE3A9aAD2c3Fd75Fa9B6Fd";
        default:
            throw new Error(`No address found for deployment Registry on chainId ${chainId}`);
    }
}
exports.getRegistryStaticAddress = getRegistryStaticAddress;
function getFinancialContractsAdminStaticAddress(chainId) {
    switch (chainId.toString()) {
        case "1":
            return "0x4E6CCB1dA3C7844887F9A5aF4e8450d9fd90317A";
        case "4":
            return "0xD8c6dD978a3768F7DDfE3A9aAD2c3Fd75Fa9B6Fd";
        case "42":
            return "0xe101B874431B5dc96f6d19fC1DE16eAD922D639b";
        case "137":
            return "0xd8866E76441df243fc98B892362Fc6264dC3ca80";
        case "80001":
            return "0xA4E6061cE6C6743839a24eE4b4FD0D9A0E377691";
        default:
            throw new Error(`No address found for deployment FinancialContractsAdmin on chainId ${chainId}`);
    }
}
exports.getFinancialContractsAdminStaticAddress = getFinancialContractsAdminStaticAddress;
function getStoreStaticAddress(chainId) {
    switch (chainId.toString()) {
        case "1":
            return "0x54f44eA3D2e7aA0ac089c4d8F7C93C27844057BF";
        case "4":
            return "0x9A50d72aB5E5336EA30D5D8e1FBA80ba3ebd151E";
        case "5":
            return "0x07417cA264170Fc5bD3568f93cFb956729752B61";
        case "10":
            return "0x5be04e53b465c6fD89ECfF3d36dDf666D198e31a";
        case "42":
            return "0x41AF40Eb92Bec4dD8DA77103597838b3dBBD3B6f";
        case "82":
            return "0x93ceD74a6FC9789d5413D90fD14069DD2ED3e31e";
        case "100":
            return "0xD29C85F15DF544bA632C9E25829fd29d767d7978";
        case "137":
            return "0xE58480CA74f1A819faFd777BEDED4E2D5629943d";
        case "288":
            return "0x21331016f2020B77528B690986ca0b7C6BE012e4";
        case "416":
            return "0x6Ff461b854F5349857c2Ad41e0f558C19953DF89";
        case "9001":
            return "0x38fAc33bD20D4c4Cce085C0f347153C06CbA2968";
        case "42161":
            return "0x2d6FAD39059f5FCe80bFf691F8f0Bb30D5d4f214";
        case "43114":
            return "0x93097B6d282a0BA755042a66Cf287843cADBCb53";
        case "80001":
            return "0xce9Cf0C8f8121b573f6212344F53BC7746846e71";
        case "84531":
            return "0xCD43CEa89DF8fE39031C03c24BC24480e942470B";
        default:
            throw new Error(`No address found for deployment Store on chainId ${chainId}`);
    }
}
exports.getStoreStaticAddress = getStoreStaticAddress;
function getGovernorStaticAddress(chainId) {
    switch (chainId.toString()) {
        case "1":
            return "0x592349F7DeDB2b75f9d4F194d4b7C16D82E507Dc";
        case "4":
            return "0x09AFD24Acc170c16f4fF64BDf2A4818C515440e8";
        case "42":
            return "0xca4575EE197308c9D2aBF813A5f064f44898b7a4";
        default:
            throw new Error(`No address found for deployment Governor on chainId ${chainId}`);
    }
}
exports.getGovernorStaticAddress = getGovernorStaticAddress;
function getDesignatedVotingFactoryStaticAddress(chainId) {
    switch (chainId.toString()) {
        case "1":
            return "0xDE7c02aD2b925587Bd16724810f994a2948c4a38";
        case "4":
            return "0xad7c5516b25661e0A204646b08024cD82ffe6C48";
        case "42":
            return "0xe6614f50Ea93A2497ae7a392E0BC36239845b9a4";
        default:
            throw new Error(`No address found for deployment DesignatedVotingFactory on chainId ${chainId}`);
    }
}
exports.getDesignatedVotingFactoryStaticAddress = getDesignatedVotingFactoryStaticAddress;
function getDesignatedVotingV2FactoryStaticAddress(chainId) {
    switch (chainId.toString()) {
        case "1":
            return "0x6B46a05f7f9F73d927abD99F5CB5c5652944C94F";
        case "5":
            return "0x2eb5def5cF9635F9D926788a26D424287a045b92";
        default:
            throw new Error(`No address found for deployment DesignatedVotingV2Factory on chainId ${chainId}`);
    }
}
exports.getDesignatedVotingV2FactoryStaticAddress = getDesignatedVotingV2FactoryStaticAddress;
function getWETH9StaticAddress(chainId) {
    switch (chainId.toString()) {
        case "1":
            return "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2";
        case "4":
            return "0xc778417E063141139Fce010982780140Aa0cD5Ab";
        case "42":
            return "0xd0A1E359811322d97991E03f863a0C30C2cF029C";
        default:
            throw new Error(`No address found for deployment WETH9 on chainId ${chainId}`);
    }
}
exports.getWETH9StaticAddress = getWETH9StaticAddress;
function getTokenFactoryStaticAddress(chainId) {
    switch (chainId.toString()) {
        case "1":
            return "0x52E60e859fe0e1a36F3d4cbaE1e2d6953f4b83B3";
        case "4":
            return "0xcB69d8dAb9b1F1D9dF8A42a1001fd0ce7A8fFB5B";
        case "5":
            return "0x96deacEA7A33F76EFf3549458cAfDE5427D64A12";
        case "10":
            return "0x2D509190Ed0172ba588407D4c2df918F955Cc6E1";
        case "42":
            return "0x29aBe06dB681c0effB6C8892E0028cfe24baAfdf";
        case "82":
            return "0xf593e4A6fa2724689d3183497542133A49991c89";
        case "137":
            return "0xE20FCDA4981c8A58417C5A2EF6804b0835faA0eC";
        case "288":
            return "0x84941D370CcB53488A98FC9d7AD66b1790f260b7";
        case "416":
            return "0x7de64fbc5eAbae2Cb5E9D110bA7D40933F9270b5";
        case "9001":
            return "0xF321C1007730A815ED25433c1F9B96cEc90B1021";
        case "42161":
            return "0xcA5BcA331b8137fD15c2fa6BA34655FA58de5a0B";
        case "43114":
            return "0x9b4A302A548c7e313c2b74C461db7b84d3074A84";
        case "80001":
            return "0x56f2c8353049270d3553773E680B0d6c632544b6";
        default:
            throw new Error(`No address found for deployment TokenFactory on chainId ${chainId}`);
    }
}
exports.getTokenFactoryStaticAddress = getTokenFactoryStaticAddress;
function getAddressWhitelistStaticAddress(chainId) {
    switch (chainId.toString()) {
        case "1":
            return "0xdBF90434dF0B98219f87d112F37d74B1D90758c7";
        case "4":
            return "0xbBD1B575BEE5A77d393973Fe79B1d6e1762BB1d0";
        case "5":
            return "0x63fDfF29EBBcf1a958032d1E64F7627c3C98A059";
        case "10":
            return "0xad7c5516b25661e0A204646b08024cD82ffe6C48";
        case "42":
            return "0xf8bdAb5d675F76eD863fF9Fa35B129A6e43e71cA";
        case "82":
            return "0x0a03D06B54EE0E027bA8533723EaFAa4F6116c3C";
        case "100":
            return "0x2271a5E74eA8A29764ab10523575b41AA52455f0";
        case "137":
            return "0x1020Ae36548ab28Bc0c41Fd2a08D24132C82cc55";
        case "288":
            return "0xC660C7e1b35998Fdf895404746d3bD5D8ed5A6C1";
        case "416":
            return "0xB0D89D3218374BD8FE60f5748a880e9E373fB818";
        case "9001":
            return "0x3baD7AD0728f9917d1Bf08af5782dCbD516cDd96";
        case "42161":
            return "0x02D65fb01d3d88127dF19838902ba42c6239c0Fd";
        case "43114":
            return "0x6Ff461b854F5349857c2Ad41e0f558C19953DF89";
        case "80001":
            return "0xa59E59112e3a0e96c97e2109004434C4125db80E";
        case "84531":
            return "0xa4199d73ae206d49c966cF16c58436851f87d47F";
        default:
            throw new Error(`No address found for deployment AddressWhitelist on chainId ${chainId}`);
    }
}
exports.getAddressWhitelistStaticAddress = getAddressWhitelistStaticAddress;
function getExpiringMultiPartyLibStaticAddress(chainId) {
    switch (chainId.toString()) {
        case "1":
            return "0xa10648Da824330d7C7670E26a234bEf442E77f20";
        case "42":
            return "0x89a469720D45ed82181cd6d5558d6E87855e9E96";
        case "137":
            return "0x35b7b0b2A7c545e6E8b944AaD07fD0F4dee8B4e1";
        case "80001":
            return "0x7825c24e94bD06B3CA5d08b75Dcb1786Ac34bAd0";
        default:
            throw new Error(`No address found for deployment ExpiringMultiPartyLib on chainId ${chainId}`);
    }
}
exports.getExpiringMultiPartyLibStaticAddress = getExpiringMultiPartyLibStaticAddress;
function getExpiringMultiPartyCreatorStaticAddress(chainId) {
    switch (chainId.toString()) {
        case "1":
            return "0xddfC7E3B4531158acf4C7a5d2c3cB0eE81d018A5";
        case "42":
            return "0x9a689BfD9f3a963b20d5ba4Ed7ed0b7bE16CfCcB";
        case "137":
            return "0xe3254a3aFce425fC7114B231b39C97ABa6a919D7";
        case "80001":
            return "0xF0E8EFFDb48f09e91D2d9124a7D8c327CaD94f30";
        default:
            throw new Error(`No address found for deployment ExpiringMultiPartyCreator on chainId ${chainId}`);
    }
}
exports.getExpiringMultiPartyCreatorStaticAddress = getExpiringMultiPartyCreatorStaticAddress;
function getOptimisticOracleStaticAddress(chainId) {
    switch (chainId.toString()) {
        case "1":
            return "0xc43767f4592df265b4a9f1a398b97ff24f38c6a6";
        case "4":
            return "0x3746badD4d6002666dacd5d7bEE19f60019A8433";
        case "5":
            return "0x6f26Bf09B1C792e3228e5467807a900A503c0281";
        case "10":
            return "0x56e2d1b8C7dE8D11B282E1b4C924C32D91f9102B";
        case "42":
            return "0xB1d3A89333BBC3F5e98A991d6d4C1910802986BC";
        case "82":
            return "0xd8343E437B946D40e4C53ce1e6fF39F64F334C36";
        case "100":
            return "0xd2ecb3afe598b746F8123CaE365a598DA831A449";
        case "137":
            return "0xBb1A8db2D4350976a11cdfA60A1d43f97710Da49";
        case "288":
            return "0x7da554228555C8Bf3748403573d48a2138C6b848";
        case "416":
            return "0x273CAC5468b7c50B9ab2ce598693c5f441750CC4";
        case "9001":
            return "0x09aea4b2242abC8bb4BB78D537A67a245A7bEC64";
        case "42161":
            return "0x031A7882cE3e8b4462b057EBb0c3F23Cd731D234";
        case "43114":
            return "0xB0D89D3218374BD8FE60f5748a880e9E373fB818";
        case "80001":
            return "0xAB75727d4e89A7f7F04f57C00234a35950527115";
        default:
            throw new Error(`No address found for deployment OptimisticOracle on chainId ${chainId}`);
    }
}
exports.getOptimisticOracleStaticAddress = getOptimisticOracleStaticAddress;
function getOptimisticOracleV2StaticAddress(chainId) {
    switch (chainId.toString()) {
        case "1":
            return "0xA0Ae6609447e57a42c51B50EAe921D701823FFAe";
        case "5":
            return "0xA5B9d8a0B0Fa04Ba71BDD68069661ED5C0848884";
        case "10":
            return "0x255483434aba5a75dc60c1391bB162BCd9DE2882";
        case "82":
            return "0x31C222e0D862827137ab5D4e8EE30c41Cc915a96";
        case "137":
            return "0xee3afe347d5c74317041e2618c49534daf887c24";
        case "288":
            return "0xb2b5C1b17B19d92CC4fC1f026B2133259e3ccd41";
        case "416":
            return "0x28077B47Cd03326De7838926A63699849DD4fa87";
        case "9001":
            return "0xd2ecb3afe598b746F8123CaE365a598DA831A449";
        case "42161":
            return "0x88Ad27C41AD06f01153E7Cd9b10cBEdF4616f4d5";
        case "43114":
            return "0x28077B47Cd03326De7838926A63699849DD4fa87";
        case "80001":
            return "0x60E6140330F8FE31e785190F39C1B5e5e833c2a9";
        default:
            throw new Error(`No address found for deployment OptimisticOracleV2 on chainId ${chainId}`);
    }
}
exports.getOptimisticOracleV2StaticAddress = getOptimisticOracleV2StaticAddress;
function getPerpetualLibStaticAddress(chainId) {
    switch (chainId.toString()) {
        case "1":
            return "0x026ed73A36b37B871Be7bfd25D1C62B9bfB358b5";
        case "42":
            return "0x3B18e629C56F496B0E4C156150eFAc16f2ccd1D9";
        default:
            throw new Error(`No address found for deployment PerpetualLib on chainId ${chainId}`);
    }
}
exports.getPerpetualLibStaticAddress = getPerpetualLibStaticAddress;
function getPerpetualCreatorStaticAddress(chainId) {
    switch (chainId.toString()) {
        case "1":
            return "0xE9f67235C1B0EE401e5F5e119fB9DFc9753F10F9";
        case "42":
            return "0x6b876861d2F15616a6C8ed8a3E3BAD071EAD3DDE";
        default:
            throw new Error(`No address found for deployment PerpetualCreator on chainId ${chainId}`);
    }
}
exports.getPerpetualCreatorStaticAddress = getPerpetualCreatorStaticAddress;
function getDSProxyFactoryStaticAddress(chainId) {
    switch (chainId.toString()) {
        case "1":
            return "0xAB75727d4e89A7f7F04f57C00234a35950527115";
        case "42":
            return "0xFB8da0B386F2Ab00B04c7f01f9faC19E21ECC405";
        default:
            throw new Error(`No address found for deployment DSProxyFactory on chainId ${chainId}`);
    }
}
exports.getDSProxyFactoryStaticAddress = getDSProxyFactoryStaticAddress;
function getDSGuardFactoryStaticAddress(chainId) {
    switch (chainId.toString()) {
        case "1":
            return "0x63200E25db9Af015d1e3240D30269d29D80830F6";
        default:
            throw new Error(`No address found for deployment DSGuardFactory on chainId ${chainId}`);
    }
}
exports.getDSGuardFactoryStaticAddress = getDSGuardFactoryStaticAddress;
function getMockOracleAncillaryStaticAddress(chainId) {
    switch (chainId.toString()) {
        case "1":
            return "0x514Ae88aB0d24088C0a9d8E76E66457DF200fEe3";
        case "4":
            return "0xd227E520A3328eAe29951DEc5aF8162A5Bfb7fB0";
        case "5":
            return "0x20570e9e27920ac5e2601e0bef7244deff7f0b28";
        case "137":
            return "0x0AD3176133d9C693217B8F8FF32e03C38CD8fA88";
        case "80001":
            return "0x2664447836a0d94Ed610cB76D85784Db291BFB5f";
        case "84531":
            return "0x55743451B0921B555B4AeAf878c2f3E37aA41755";
        default:
            throw new Error(`No address found for deployment MockOracleAncillary on chainId ${chainId}`);
    }
}
exports.getMockOracleAncillaryStaticAddress = getMockOracleAncillaryStaticAddress;
function getOracleRootTunnelStaticAddress(chainId) {
    switch (chainId.toString()) {
        case "1":
            return "0x34dF79AB1F3Cb70445834e71D725f83A6d3e03eb";
        default:
            throw new Error(`No address found for deployment OracleRootTunnel on chainId ${chainId}`);
    }
}
exports.getOracleRootTunnelStaticAddress = getOracleRootTunnelStaticAddress;
function getGovernorRootTunnelStaticAddress(chainId) {
    switch (chainId.toString()) {
        case "1":
            return "0x4F490F4835B3693A8874aee87D7CC242c25DCCAf";
        case "5":
            return "0x6883feb1c131f58c1cd629289da3de0051d2aa0d";
        default:
            throw new Error(`No address found for deployment GovernorRootTunnel on chainId ${chainId}`);
    }
}
exports.getGovernorRootTunnelStaticAddress = getGovernorRootTunnelStaticAddress;
function getLongShortPairCreatorStaticAddress(chainId) {
    switch (chainId.toString()) {
        case "1":
            return "0x439a990f83250FE2E5E6b8059F540af1dA1Ba04D";
        case "4":
            return "0x8f584beEd8371757d520f7CEC06fF07de225371D";
        case "5":
            return "0x5EcA3e8CA5B69279b3D075C52Bceff225570b4Ef";
        case "10":
            return "0xB44C433D2B071b95184CF25E1113cC2F1a903Cb1";
        case "42":
            return "0x440E830b0b1Babd2e7595A6998f7ab4D8b4444dF";
        case "82":
            return "0xf86d5AD5E122E064015bcA94A42cE11acdD8644A";
        case "137":
            return "0x4FbA8542080Ffb82a12E3b596125B1B02d213424";
        case "288":
            return "0xC064b1FE8CE7138dA4C07BfCA1F8EEd922D41f68";
        case "416":
            return "0x1e581855c52879a6B0E302E3798B94E51A09E0AF";
        case "9001":
            return "0x5ef6C01E11889d86803e0B23e3cB3F9E9d97B662";
        case "42161":
            return "0xEfd7eE5FC0BC42e41d800C4D9db912bC42A4530F";
        case "43114":
            return "0x3Db06DA8F0a24A525f314eeC954fC5c6a973d40E";
        case "80001":
            return "0xed3D3F90b8426E683b8d361ac7dDBbEa1a8A7Da8";
        default:
            throw new Error(`No address found for deployment LongShortPairCreator on chainId ${chainId}`);
    }
}
exports.getLongShortPairCreatorStaticAddress = getLongShortPairCreatorStaticAddress;
function getBinaryOptionLongShortPairFinancialProductLibraryStaticAddress(chainId) {
    switch (chainId.toString()) {
        case "1":
            return "0x072819Bb43B50E7A251c64411e7aA362ce82803B";
        case "4":
            return "0x7a974Eb1F7D4bB49170aaed39C693A8daFe9E5B5";
        case "5":
            return "0x765c9526CBaB89eBfB6328e7188502299Bf8eBdb";
        case "10":
            return "0xF2BE21C20e1bE52697D02AfE4270644BCb1F9Aa5";
        case "42":
            return "0x78DA11E049f21563824784126DfbF7B80d9A4B0d";
        case "82":
            return "0x3F791A77499a86718D08647398917591522e017d";
        case "137":
            return "0xda768D869f1e89ea005cde7e1dBf630ff9307F33";
        case "288":
            return "0x578272e1399dA8B0f0e766e751FeCAA2a97dE4c1";
        case "416":
            return "0xB82d59f9125EC77c2bcc1cd3bfC7AB179Bf153Db";
        case "9001":
            return "0x6063B42C9f587FC02E21B57f5055962677BDa002";
        case "42161":
            return "0xd2Aa779253c0Ab194d8c3e6708e5EB4697F13941";
        case "43114":
            return "0xd2ecb3afe598b746F8123CaE365a598DA831A449";
        case "80001":
            return "0x9a5de999108042946F59848E083e12690ff018C6";
        default:
            throw new Error(`No address found for deployment BinaryOptionLongShortPairFinancialProductLibrary on chainId ${chainId}`);
    }
}
exports.getBinaryOptionLongShortPairFinancialProductLibraryStaticAddress = getBinaryOptionLongShortPairFinancialProductLibraryStaticAddress;
function getCoveredCallLongShortPairFinancialProductLibraryStaticAddress(chainId) {
    switch (chainId.toString()) {
        case "1":
            return "0x37780b718c19F7f06D41f3c68C3A78ECB2Ca191f";
        case "4":
            return "0x01E5AD9B4Bc39504510C13C7A3B8352714011355";
        case "5":
            return "0xE08ede7eC8520F43973ab287688De5Fa1416F661";
        case "10":
            return "0x7cc13c5c3A38718aF2A7c36d8311F80AD47ef0Ab";
        case "42":
            return "0x914F9acDfB2231912AA43d30509A5Db27fdeD3CE";
        case "82":
            return "0xaF15Ee7c0F58F13dd175D6Ecd8Ad06c72764b08a";
        case "137":
            return "0x3F62D7F4Be7671cc93BCDFE7A3Dd900FEC4b5025";
        case "288":
            return "0x751190691A07acC3f43A7396AD87967bB685deEd";
        case "416":
            return "0x053a2c1428269633E00a1f83fE060007cfEe3637";
        case "9001":
            return "0xaf10C33dE0aEE6DF661B9bfb25E829871ab87a41";
        case "42161":
            return "0xBbc6009fEfFc27ce705322832Cb2068F8C1e0A58";
        case "43114":
            return "0xD29C85F15DF544bA632C9E25829fd29d767d7978";
        case "80001":
            return "0xc6aFa90Ebf5F7eC9Ce0409a0B2bF7b0E6E81b5F6";
        default:
            throw new Error(`No address found for deployment CoveredCallLongShortPairFinancialProductLibrary on chainId ${chainId}`);
    }
}
exports.getCoveredCallLongShortPairFinancialProductLibraryStaticAddress = getCoveredCallLongShortPairFinancialProductLibraryStaticAddress;
function getLinearLongShortPairFinancialProductLibraryStaticAddress(chainId) {
    switch (chainId.toString()) {
        case "1":
            return "0x488211B646b909C490d942f456481BeAE52fde27";
        case "4":
            return "0x55e6CDd418F5Cf9Ba34f967c0Edc90E6dA606f2D";
        case "5":
            return "0xA123aBaf76F5f4FB67f094e53e545474Ce597404";
        case "10":
            return "0x168144503BFDA917657A6CcD079d1B7d2e6BF0E2";
        case "42":
            return "0x3EE1EA84ad75913E02B341FE09630bAedca0658D";
        case "82":
            return "0x7109a33283D9dbbd9261B6B1cE5407793205D337";
        case "137":
            return "0xcFF28e9E83cEc1BCa8D8619dC7eA60244b433502";
        case "288":
            return "0x01eb880B005D7a3690A42246B5A8b7F384b45136";
        case "416":
            return "0xB5ae263c672B0E9c5187c7151982cF1A44F02eb2";
        case "9001":
            return "0x283c2fF4cc5BeEb28bBb5bcDF6aaAAdf0DD16531";
        case "42161":
            return "0x85F46e5aCf6309345D0d6cfe22fbBAF7c349fF84";
        case "43114":
            return "0x6999526e507Cc3b03b180BbE05E1Ff938259A874";
        case "80001":
            return "0xC7B7029373f504949553106c9eb2dAfDd48eF086";
        default:
            throw new Error(`No address found for deployment LinearLongShortPairFinancialProductLibrary on chainId ${chainId}`);
    }
}
exports.getLinearLongShortPairFinancialProductLibraryStaticAddress = getLinearLongShortPairFinancialProductLibraryStaticAddress;
function getRangeBondLongShortPairFinancialProductLibraryStaticAddress(chainId) {
    switch (chainId.toString()) {
        case "1":
            return "0xc1f4e05738E5a7B7CB1f22bB689359CCb1610DA4";
        case "4":
            return "0x03f4600858CABa1ccff9c12351B984d956F1bA76";
        case "5":
            return "0x03050b0c154E0C22A8153a1Fe83AD40747B4Ff87";
        case "10":
            return "0x2bcA5496F0067C1112A2E1F982D9655d26Adb8b9";
        case "42":
            return "0x09381C827438605B5ea3e760A27666Be3497602C";
        case "82":
            return "0x31b517Ac8BB80B5b459F15D46aeaF5fFc58C60E5";
        case "137":
            return "0x8245545845a664f25cE407ee2EFe73CE6b14a837";
        case "288":
            return "0x9F31A04709B3714654a3be0ac109e3Bb2341C9f8";
        case "416":
            return "0xbAc2A96a07071e77010970fC1539c1E8E2b060E8";
        case "9001":
            return "0xEeF373Cb82aE3c3Df7e5B97aeceBcD12Df1086F6";
        case "42161":
            return "0x129B61ce378B2B4b5Ebeac648019E2427b74527e";
        case "43114":
            return "0x2271a5E74eA8A29764ab10523575b41AA52455f0";
        case "80001":
            return "0xbe96050668dECb6FA0ef5Af919f37221658cfbEf";
        default:
            throw new Error(`No address found for deployment RangeBondLongShortPairFinancialProductLibrary on chainId ${chainId}`);
    }
}
exports.getRangeBondLongShortPairFinancialProductLibraryStaticAddress = getRangeBondLongShortPairFinancialProductLibraryStaticAddress;
function getCappedYieldDollarLongShortPairFinancialProductLibraryStaticAddress(chainId) {
    switch (chainId.toString()) {
        case "1":
            return "0x048bddE0E6D7340390B90C6d5019F8E73C1e1d8A";
        case "4":
            return "0xBDed7E526fC0D581D6F62796118e64D885Cdf07d";
        case "5":
            return "0x56e68853Bc173534F30a23E9De64B2BC4b64D61e";
        case "42":
            return "0x5e9131cbfFF5E4D0347256cf7A3D9e5bAF159e23";
        case "82":
            return "0xD46D1747C87eD43829caF4C0B26AB7524f147124";
        case "137":
            return "0x821B8aF8f616bd5C2B3ccF4392F5635CcA545307";
        case "416":
            return "0x2FB6850b35E902c97895a050c6008f3073b0F8D7";
        case "9001":
            return "0xEC6E1527948a1d6Bb3FdCd528D75844020B20a1D";
        case "43114":
            return "0x4e8E101924eDE233C13e2D8622DC8aED2872d505";
        case "80001":
            return "0xCc465a18517478532E8fd476663a8F03CD58E7f1";
        default:
            throw new Error(`No address found for deployment CappedYieldDollarLongShortPairFinancialProductLibrary on chainId ${chainId}`);
    }
}
exports.getCappedYieldDollarLongShortPairFinancialProductLibraryStaticAddress = getCappedYieldDollarLongShortPairFinancialProductLibraryStaticAddress;
function getSimpleSuccessTokenLongShortPairFinancialProductLibraryStaticAddress(chainId) {
    switch (chainId.toString()) {
        case "1":
            return "0xc803B46CD8d343dd583f56bbe742D2f600DccF13";
        case "4":
            return "0x46130BF31fde58587392396dAA11aBe7dE80Ea02";
        case "5":
            return "0x855afAa41c9393cc9D46C571fE22537E740CA027";
        case "42":
            return "0x906Bf04a36822299293e0ee8dE0dA557e183319B";
        case "82":
            return "0x0dA67fF335EA1e4ac1e4a2F03b90E41772cbF95e";
        case "137":
            return "0xC920dAbe5f40d0785Be9b4aCf5B4B8D662a5955A";
        case "416":
            return "0x3ADB01551C5433d8E951c0bBee486543e3762Ed3";
        case "9001":
            return "0x9565B669Ff9CFB5803FF9CF1Df6954cCCb6BADB1";
        case "43114":
            return "0xd85630E361cEbBC4c7f13e6eEd3587050fB81B86";
        case "80001":
            return "0x010364155812542781A03550C181e687933b69d9";
        default:
            throw new Error(`No address found for deployment SimpleSuccessTokenLongShortPairFinancialProductLibrary on chainId ${chainId}`);
    }
}
exports.getSimpleSuccessTokenLongShortPairFinancialProductLibraryStaticAddress = getSimpleSuccessTokenLongShortPairFinancialProductLibraryStaticAddress;
function getSuccessTokenLongShortPairFinancialProductLibraryStaticAddress(chainId) {
    switch (chainId.toString()) {
        case "1":
            return "0x67DE29D1A34FF2ea2b8C390B326456F4CBBE628F";
        case "4":
            return "0x40CD7eEc067279bDeb1a5069615569b5d43a3F0A";
        case "5":
            return "0xF7116b89854880F8C5c9BEfC063D454dfb3f0B39";
        case "42":
            return "0x62AfB7C96c9DC17A103e7999Ac1bad64427227fb";
        case "82":
            return "0x7df5A9666EB92C45a4FBB07AF439e0C81031685D";
        case "137":
            return "0xce9Cf0C8f8121b573f6212344F53BC7746846e71";
        case "416":
            return "0xcCDB59baaa3b01649bef7A75Ae739491C4724aD2";
        case "9001":
            return "0x240c4B8DBC6bc563ccC76728F26b6f21F911883A";
        case "43114":
            return "0x3CA11702f7c0F28e0b4e03C31F7492969862C569";
        case "80001":
            return "0x4500B1274617DD38aC619bAdcf4355D96ed46bB6";
        default:
            throw new Error(`No address found for deployment SuccessTokenLongShortPairFinancialProductLibrary on chainId ${chainId}`);
    }
}
exports.getSuccessTokenLongShortPairFinancialProductLibraryStaticAddress = getSuccessTokenLongShortPairFinancialProductLibraryStaticAddress;
function getSkinnyOptimisticOracleStaticAddress(chainId) {
    switch (chainId.toString()) {
        case "1":
            return "0xeE3Afe347D5C74317041E2618C49534dAf887c24";
        case "4":
            return "0xAbE04Ace666294aefD65F991d78CE9F9218aFC67";
        case "5":
            return "0xeDc52A961B5Ca2AC7B2e0bc36714dB60E5a115Ab";
        case "42":
            return "0xAa04b5D40574Fb8C001249B24d1c6B35a207F0bD";
        default:
            throw new Error(`No address found for deployment SkinnyOptimisticOracle on chainId ${chainId}`);
    }
}
exports.getSkinnyOptimisticOracleStaticAddress = getSkinnyOptimisticOracleStaticAddress;
function getArbitrum_ParentMessengerStaticAddress(chainId) {
    switch (chainId.toString()) {
        case "1":
            return "0x278C6e83876B6D7163a2141B0eB6404a07EBcAB7";
        case "4":
            return "0x0fe9C5A29d79e928B41642EEbB9590dB4667eD70";
        default:
            throw new Error(`No address found for deployment Arbitrum_ParentMessenger on chainId ${chainId}`);
    }
}
exports.getArbitrum_ParentMessengerStaticAddress = getArbitrum_ParentMessengerStaticAddress;
function getOracleHubStaticAddress(chainId) {
    switch (chainId.toString()) {
        case "1":
            return "0x8fE658AeB8d55fd1F3E157Ff8B316E232ffFF372";
        case "4":
            return "0x7927E5432E7f97E53470674a466565DE721F7AC0";
        case "5":
            return "0xd2Aa779253c0Ab194d8c3e6708e5EB4697F13941";
        default:
            throw new Error(`No address found for deployment OracleHub on chainId ${chainId}`);
    }
}
exports.getOracleHubStaticAddress = getOracleHubStaticAddress;
function getGovernorHubStaticAddress(chainId) {
    switch (chainId.toString()) {
        case "1":
            return "0x94520d90A4EBaA98e5A7B8D6809463f65198C104";
        case "4":
            return "0x5A361C68c0F6605F44e564469Ff68826DAA3A36E";
        case "5":
            return "0x85F46e5aCf6309345D0d6cfe22fbBAF7c349fF84";
        default:
            throw new Error(`No address found for deployment GovernorHub on chainId ${chainId}`);
    }
}
exports.getGovernorHubStaticAddress = getGovernorHubStaticAddress;
function getMulticall2StaticAddress(chainId) {
    switch (chainId.toString()) {
        case "1":
            return "0x5ba1e12693dc8f9c48aad8770482f4739beed696";
        case "4":
            return "0x5ba1e12693dc8f9c48aad8770482f4739beed696";
        case "5":
            return "0x5ba1e12693dc8f9c48aad8770482f4739beed696";
        case "42":
            return "0x5ba1e12693dc8f9c48aad8770482f4739beed696";
        default:
            throw new Error(`No address found for deployment Multicall2 on chainId ${chainId}`);
    }
}
exports.getMulticall2StaticAddress = getMulticall2StaticAddress;
function getBoba_ParentMessengerStaticAddress(chainId) {
    switch (chainId.toString()) {
        case "1":
            return "0x7Fc15F642B66D07BB0641cbCcA28cf624448B52B";
        default:
            throw new Error(`No address found for deployment Boba_ParentMessenger on chainId ${chainId}`);
    }
}
exports.getBoba_ParentMessengerStaticAddress = getBoba_ParentMessengerStaticAddress;
function getOptimism_ParentMessengerStaticAddress(chainId) {
    switch (chainId.toString()) {
        case "1":
            return "0x6455D800D1Dbf9B1C3a63c67CcF22B9308728dC4";
        default:
            throw new Error(`No address found for deployment Optimism_ParentMessenger on chainId ${chainId}`);
    }
}
exports.getOptimism_ParentMessengerStaticAddress = getOptimism_ParentMessengerStaticAddress;
function getProposerStaticAddress(chainId) {
    switch (chainId.toString()) {
        case "1":
            return "0x226726Ac52e6e948D1B7eA9168F9Ff2E27DbcbB5";
        default:
            throw new Error(`No address found for deployment Proposer on chainId ${chainId}`);
    }
}
exports.getProposerStaticAddress = getProposerStaticAddress;
function getOptimisticOracleV3StaticAddress(chainId) {
    switch (chainId.toString()) {
        case "1":
            return "0xfb55F43fB9F48F63f9269DB7Dde3BbBe1ebDC0dE";
        case "5":
            return "0x9923D42eF695B5dd9911D05Ac944d4cAca3c4EAB";
        case "10":
            return "0x072819Bb43B50E7A251c64411e7aA362ce82803B";
        case "100":
            return "0x22A9AaAC9c3184f68C7B7C95b1300C4B1D2fB95C";
        case "137":
            return "0x5953f2538F613E05bAED8A5AeFa8e6622467AD3D";
        case "288":
            return "0xe1C2587C1789f7D00F22931D4DBAD537405DFe1f";
        case "42161":
            return "0xa6147867264374F324524E30C02C331cF28aa879";
        case "43114":
            return "0xa4199d73ae206d49c966cF16c58436851f87d47F";
        case "80001":
            return "0x263351499f82C107e540B01F0Ca959843e22464a";
        case "84531":
            return "0x1F4dC6D69E3b4dAC139E149E213a7e863a813466";
        default:
            throw new Error(`No address found for deployment OptimisticOracleV3 on chainId ${chainId}`);
    }
}
exports.getOptimisticOracleV3StaticAddress = getOptimisticOracleV3StaticAddress;
function getFixedSlashSlashingLibraryStaticAddress(chainId) {
    switch (chainId.toString()) {
        case "1":
            return "0x9a406ba5a99983250fd663947b3c968d387ce5cd";
        case "5":
            return "0x012b697170f53053E4810E58a4497896fd8a7Bd2";
        default:
            throw new Error(`No address found for deployment FixedSlashSlashingLibrary on chainId ${chainId}`);
    }
}
exports.getFixedSlashSlashingLibraryStaticAddress = getFixedSlashSlashingLibraryStaticAddress;
function getVotingV2StaticAddress(chainId) {
    switch (chainId.toString()) {
        case "1":
            return "0x004395edb43EFca9885CEdad51EC9fAf93Bd34ac";
        case "5":
            return "0xc48F2d8491AffFc8eB21c85dEa1B4c0259c749a0";
        default:
            throw new Error(`No address found for deployment VotingV2 on chainId ${chainId}`);
    }
}
exports.getVotingV2StaticAddress = getVotingV2StaticAddress;
function getGovernorV2StaticAddress(chainId) {
    switch (chainId.toString()) {
        case "1":
            return "0x7b292034084A41B9D441B71b6E3557Edd0463fa8";
        case "5":
            return "0xaf5c7f4F07E3f7a9b92928FBb8a027F1adeF77a1";
        default:
            throw new Error(`No address found for deployment GovernorV2 on chainId ${chainId}`);
    }
}
exports.getGovernorV2StaticAddress = getGovernorV2StaticAddress;
function getProposerV2StaticAddress(chainId) {
    switch (chainId.toString()) {
        case "1":
            return "0x50efaC9619225d7fB4703C5872da978849B6E7cC";
        case "5":
            return "0x6772A8aB1Dd25d6A5975d5573030e117874b7b6c";
        default:
            throw new Error(`No address found for deployment ProposerV2 on chainId ${chainId}`);
    }
}
exports.getProposerV2StaticAddress = getProposerV2StaticAddress;
function getEmergencyProposerStaticAddress(chainId) {
    switch (chainId.toString()) {
        case "1":
            return "0x91F1804aCaf87C2D34A34A70be1bb16bB85D6748";
        case "5":
            return "0x931A43528779034ac9eb77df799d133557406176";
        default:
            throw new Error(`No address found for deployment EmergencyProposer on chainId ${chainId}`);
    }
}
exports.getEmergencyProposerStaticAddress = getEmergencyProposerStaticAddress;
function getVotingUpgraderV2StaticAddress(chainId) {
    switch (chainId.toString()) {
        case "1":
            return "0x13852D4AF390d8C3404c0577fd8B8E43389A290b";
        default:
            throw new Error(`No address found for deployment VotingUpgraderV2 on chainId ${chainId}`);
    }
}
exports.getVotingUpgraderV2StaticAddress = getVotingUpgraderV2StaticAddress;
function getOptimisticGovernorStaticAddress(chainId) {
    switch (chainId.toString()) {
        case "1":
            return "0x28CeBFE94a03DbCA9d17143e9d2Bd1155DC26D5d";
        case "5":
            return "0x07a7Be7AA4AaD42696A17e974486cb64A4daC47b";
        case "10":
            return "0x357fe84E438B3150d2F68AB9167bdb8f881f3b9A";
        case "100":
            return "0x972396Ab668cd11dc1F6321A5ae30c6A8d3759F0";
        case "137":
            return "0x3Cc4b597E9c3f51288c6Cd0c087DC14c3FfdD966";
        case "288":
            return "0x013604ce1FB573Dac669Bb2dFd24020ef7c8929e";
        case "42161":
            return "0x30679ca4ea452d3df8a6c255a806e08810321763";
        case "43114":
            return "0xEF8b46765ae805537053C59f826C3aD61924Db45";
        default:
            throw new Error(`No address found for deployment OptimisticGovernor on chainId ${chainId}`);
    }
}
exports.getOptimisticGovernorStaticAddress = getOptimisticGovernorStaticAddress;
function getOriginValidatorStaticAddress(chainId) {
    switch (chainId.toString()) {
        case "1":
            return "0xed883ce9bb10416FF3113FDB4Abcb9830617aD27";
        default:
            throw new Error(`No address found for deployment OriginValidator on chainId ${chainId}`);
    }
}
exports.getOriginValidatorStaticAddress = getOriginValidatorStaticAddress;
function getOracleSpokeStaticAddress(chainId) {
    switch (chainId.toString()) {
        case "10":
            return "0x55743451B0921B555B4AeAf878c2f3E37aA41755";
        case "82":
            return "0xa7bDa9CF96715a2967c19D929Cb1114EdB84846A";
        case "100":
            return "0x09aea4b2242abC8bb4BB78D537A67a245A7bEC64";
        case "288":
            return "0x119e9008882C4f6beCB42Eaf2C2502fBDb9D405A";
        case "416":
            return "0xCFdC4d6FdeC25e339ef07e25C35a482A6bedcfE0";
        case "9001":
            return "0x9b4A302A548c7e313c2b74C461db7b84d3074A84";
        case "42161":
            return "0x196767568F848fF7607145A7C1f3CDE44bb4Ce98";
        case "43114":
            return "0xc5E1687895A563a43d956EE1D71B4c9Fe9425a34";
        case "80001":
            return "0x255483434aba5a75dc60c1391bB162BCd9DE2882";
        case "421611":
            return "0xA011B82880D0235f845c9d1EA5610b965e0CD759";
        default:
            throw new Error(`No address found for deployment OracleSpoke on chainId ${chainId}`);
    }
}
exports.getOracleSpokeStaticAddress = getOracleSpokeStaticAddress;
function getGovernorSpokeStaticAddress(chainId) {
    switch (chainId.toString()) {
        case "10":
            return "0xEF8b46765ae805537053C59f826C3aD61924Db45";
        case "82":
            return "0xC6a9f29E24d31dC8f29f75921A7ac173a211EB4a";
        case "100":
            return "0x7E63A5f1a8F0B4d0934B2f2327DAED3F6bb2ee75";
        case "288":
            return "0x175b7d1D8F0c818ACb01874B43CA26A6258AaFe1";
        case "416":
            return "0xc5E1687895A563a43d956EE1D71B4c9Fe9425a34";
        case "9001":
            return "0x3Db06DA8F0a24A525f314eeC954fC5c6a973d40E";
        case "42161":
            return "0x1771c470d41b8c39338450C380bf2C080a2CEdD8";
        case "43114":
            return "0x39f9311F2DaB49147F3078a81212531D9507feDF";
        case "80001":
            return "0xAd5AA9F37d5BBfceE45BD9f43CbE0018ceEc7A4e";
        case "421611":
            return "0xe59E84570052D3A7aA84Fdc0dA78389206fba9fD";
        default:
            throw new Error(`No address found for deployment GovernorSpoke on chainId ${chainId}`);
    }
}
exports.getGovernorSpokeStaticAddress = getGovernorSpokeStaticAddress;
function getOptimism_ChildMessengerStaticAddress(chainId) {
    switch (chainId.toString()) {
        case "10":
            return "0x09AFD24Acc170c16f4fF64BDf2A4818C515440e8";
        default:
            throw new Error(`No address found for deployment Optimism_ChildMessenger on chainId ${chainId}`);
    }
}
exports.getOptimism_ChildMessengerStaticAddress = getOptimism_ChildMessengerStaticAddress;
function getAdmin_ChildMessengerStaticAddress(chainId) {
    switch (chainId.toString()) {
        case "82":
            return "0x32BdC966d58685EC6c771886421ee1528f21De4a";
        case "100":
            return "0x3baD7AD0728f9917d1Bf08af5782dCbD516cDd96";
        case "416":
            return "0x39f9311F2DaB49147F3078a81212531D9507feDF";
        case "9001":
            return "0xD29C85F15DF544bA632C9E25829fd29d767d7978";
        case "43114":
            return "0xBA13E7a43E71F6beCeB1Ff3dB1e870190c60e707";
        default:
            throw new Error(`No address found for deployment Admin_ChildMessenger on chainId ${chainId}`);
    }
}
exports.getAdmin_ChildMessengerStaticAddress = getAdmin_ChildMessengerStaticAddress;
function getOracleChildTunnelStaticAddress(chainId) {
    switch (chainId.toString()) {
        case "137":
            return "0xBEd4c1FC0FD95A2020EC351379b22d8582B904e3";
        case "80001":
            return "0x1Ae1d80e1725A478f5e653bF79f8Ee4aB5B34719";
        default:
            throw new Error(`No address found for deployment OracleChildTunnel on chainId ${chainId}`);
    }
}
exports.getOracleChildTunnelStaticAddress = getOracleChildTunnelStaticAddress;
function getGovernorChildTunnelStaticAddress(chainId) {
    switch (chainId.toString()) {
        case "137":
            return "0xb4AeaD497FCbEAA3C37919032d42C29682f46376";
        case "80001":
            return "0x9dd627a6FDeF9B5fB9E29edCC7EB75d6D79dC480";
        default:
            throw new Error(`No address found for deployment GovernorChildTunnel on chainId ${chainId}`);
    }
}
exports.getGovernorChildTunnelStaticAddress = getGovernorChildTunnelStaticAddress;
function getMulticall3StaticAddress(chainId) {
    switch (chainId.toString()) {
        case "137":
            return "0xcA11bde05977b3631167028862bE2a173976CA11";
        default:
            throw new Error(`No address found for deployment Multicall3 on chainId ${chainId}`);
    }
}
exports.getMulticall3StaticAddress = getMulticall3StaticAddress;
function getBoba_ChildMessengerStaticAddress(chainId) {
    switch (chainId.toString()) {
        case "288":
            return "0x62530b7D3DcbCb0699480094E29Cec181eC3ea6a";
        default:
            throw new Error(`No address found for deployment Boba_ChildMessenger on chainId ${chainId}`);
    }
}
exports.getBoba_ChildMessengerStaticAddress = getBoba_ChildMessengerStaticAddress;
function getBridgeStaticAddress(chainId) {
    switch (chainId.toString()) {
        case "4":
            return "0xeCe891697B17d129b660152232A485CdAf8fd0D8";
        default:
            throw new Error(`No address found for deployment Bridge on chainId ${chainId}`);
    }
}
exports.getBridgeStaticAddress = getBridgeStaticAddress;
function getGenericHandlerStaticAddress(chainId) {
    switch (chainId.toString()) {
        case "4":
            return "0x8a99A7B49740B2bF935Ce48e4fEE028DB332595d";
        default:
            throw new Error(`No address found for deployment GenericHandler on chainId ${chainId}`);
    }
}
exports.getGenericHandlerStaticAddress = getGenericHandlerStaticAddress;
function getTestnetERC20StaticAddress(chainId) {
    switch (chainId.toString()) {
        case "42":
            return "0xbF7A7169562078c96f0eC1A8aFD6aE50f12e5A99";
        case "84531":
            return "0xEF8b46765ae805537053C59f826C3aD61924Db45";
        default:
            throw new Error(`No address found for deployment TestnetERC20 on chainId ${chainId}`);
    }
}
exports.getTestnetERC20StaticAddress = getTestnetERC20StaticAddress;
function getArbitrum_ChildMessengerStaticAddress(chainId) {
    switch (chainId.toString()) {
        case "42161":
            return "0xe0Fe15CF22B9b52B6aE309C7384e03244A6DD985";
        case "421611":
            return "0x62530b7D3DcbCb0699480094E29Cec181eC3ea6a";
        default:
            throw new Error(`No address found for deployment Arbitrum_ChildMessenger on chainId ${chainId}`);
    }
}
exports.getArbitrum_ChildMessengerStaticAddress = getArbitrum_ChildMessengerStaticAddress;
function getPolygon_ParentMessengerStaticAddress(chainId) {
    switch (chainId.toString()) {
        case "5":
            return "0x56e58Ff5bd2A73eA80bBe365fc26048507f6DdF7";
        default:
            throw new Error(`No address found for deployment Polygon_ParentMessenger on chainId ${chainId}`);
    }
}
exports.getPolygon_ParentMessengerStaticAddress = getPolygon_ParentMessengerStaticAddress;
function getSkinnyOptimisticOracleV2StaticAddress(chainId) {
    switch (chainId.toString()) {
        case "5":
            return "0x5a9Ed5DaC741e20cA6587d0c5C39C0992Db305C1";
        default:
            throw new Error(`No address found for deployment SkinnyOptimisticOracleV2 on chainId ${chainId}`);
    }
}
exports.getSkinnyOptimisticOracleV2StaticAddress = getSkinnyOptimisticOracleV2StaticAddress;
function getPolygon_ChildMessengerStaticAddress(chainId) {
    switch (chainId.toString()) {
        case "80001":
            return "0x561C834B1Ca5883460D2E605B1d7F3e61714C6d8";
        default:
            throw new Error(`No address found for deployment Polygon_ChildMessenger on chainId ${chainId}`);
    }
}
exports.getPolygon_ChildMessengerStaticAddress = getPolygon_ChildMessengerStaticAddress;
const addressFunctions = {
    BridgeAdmin: getBridgeAdminStaticAddress,
    WETH_BridgePool: getWETH_BridgePoolStaticAddress,
    USDC_BridgePool: getUSDC_BridgePoolStaticAddress,
    UMA_BridgePool: getUMA_BridgePoolStaticAddress,
    BADGER_BridgePool: getBADGER_BridgePoolStaticAddress,
    WBTC_BridgePool: getWBTC_BridgePoolStaticAddress,
    Arbitrum_Messenger: getArbitrum_MessengerStaticAddress,
    Optimism_Messenger: getOptimism_MessengerStaticAddress,
    Optimism_Wrapper: getOptimism_WrapperStaticAddress,
    RateModelStore: getRateModelStoreStaticAddress,
    OVM_OETH_BridgeDepositBox: getOVM_OETH_BridgeDepositBoxStaticAddress,
    AVM_BridgeDepositBox: getAVM_BridgeDepositBoxStaticAddress,
    Finder: getFinderStaticAddress,
    VotingToken: getVotingTokenStaticAddress,
    IdentifierWhitelist: getIdentifierWhitelistStaticAddress,
    Voting: getVotingStaticAddress,
    Registry: getRegistryStaticAddress,
    FinancialContractsAdmin: getFinancialContractsAdminStaticAddress,
    Store: getStoreStaticAddress,
    Governor: getGovernorStaticAddress,
    DesignatedVotingFactory: getDesignatedVotingFactoryStaticAddress,
    DesignatedVotingV2Factory: getDesignatedVotingV2FactoryStaticAddress,
    WETH9: getWETH9StaticAddress,
    TokenFactory: getTokenFactoryStaticAddress,
    AddressWhitelist: getAddressWhitelistStaticAddress,
    ExpiringMultiPartyLib: getExpiringMultiPartyLibStaticAddress,
    ExpiringMultiPartyCreator: getExpiringMultiPartyCreatorStaticAddress,
    OptimisticOracle: getOptimisticOracleStaticAddress,
    OptimisticOracleV2: getOptimisticOracleV2StaticAddress,
    PerpetualLib: getPerpetualLibStaticAddress,
    PerpetualCreator: getPerpetualCreatorStaticAddress,
    DSProxyFactory: getDSProxyFactoryStaticAddress,
    DSGuardFactory: getDSGuardFactoryStaticAddress,
    MockOracleAncillary: getMockOracleAncillaryStaticAddress,
    OracleRootTunnel: getOracleRootTunnelStaticAddress,
    GovernorRootTunnel: getGovernorRootTunnelStaticAddress,
    LongShortPairCreator: getLongShortPairCreatorStaticAddress,
    BinaryOptionLongShortPairFinancialProductLibrary: getBinaryOptionLongShortPairFinancialProductLibraryStaticAddress,
    CoveredCallLongShortPairFinancialProductLibrary: getCoveredCallLongShortPairFinancialProductLibraryStaticAddress,
    LinearLongShortPairFinancialProductLibrary: getLinearLongShortPairFinancialProductLibraryStaticAddress,
    RangeBondLongShortPairFinancialProductLibrary: getRangeBondLongShortPairFinancialProductLibraryStaticAddress,
    CappedYieldDollarLongShortPairFinancialProductLibrary: getCappedYieldDollarLongShortPairFinancialProductLibraryStaticAddress,
    SimpleSuccessTokenLongShortPairFinancialProductLibrary: getSimpleSuccessTokenLongShortPairFinancialProductLibraryStaticAddress,
    SuccessTokenLongShortPairFinancialProductLibrary: getSuccessTokenLongShortPairFinancialProductLibraryStaticAddress,
    SkinnyOptimisticOracle: getSkinnyOptimisticOracleStaticAddress,
    Arbitrum_ParentMessenger: getArbitrum_ParentMessengerStaticAddress,
    OracleHub: getOracleHubStaticAddress,
    GovernorHub: getGovernorHubStaticAddress,
    Multicall2: getMulticall2StaticAddress,
    Boba_ParentMessenger: getBoba_ParentMessengerStaticAddress,
    Optimism_ParentMessenger: getOptimism_ParentMessengerStaticAddress,
    Proposer: getProposerStaticAddress,
    OptimisticOracleV3: getOptimisticOracleV3StaticAddress,
    FixedSlashSlashingLibrary: getFixedSlashSlashingLibraryStaticAddress,
    VotingV2: getVotingV2StaticAddress,
    GovernorV2: getGovernorV2StaticAddress,
    ProposerV2: getProposerV2StaticAddress,
    EmergencyProposer: getEmergencyProposerStaticAddress,
    VotingUpgraderV2: getVotingUpgraderV2StaticAddress,
    OptimisticGovernor: getOptimisticGovernorStaticAddress,
    OriginValidator: getOriginValidatorStaticAddress,
    OracleSpoke: getOracleSpokeStaticAddress,
    GovernorSpoke: getGovernorSpokeStaticAddress,
    Optimism_ChildMessenger: getOptimism_ChildMessengerStaticAddress,
    Admin_ChildMessenger: getAdmin_ChildMessengerStaticAddress,
    OracleChildTunnel: getOracleChildTunnelStaticAddress,
    GovernorChildTunnel: getGovernorChildTunnelStaticAddress,
    Multicall3: getMulticall3StaticAddress,
    Boba_ChildMessenger: getBoba_ChildMessengerStaticAddress,
    Bridge: getBridgeStaticAddress,
    GenericHandler: getGenericHandlerStaticAddress,
    TestnetERC20: getTestnetERC20StaticAddress,
    Arbitrum_ChildMessenger: getArbitrum_ChildMessengerStaticAddress,
    Polygon_ParentMessenger: getPolygon_ParentMessengerStaticAddress,
    SkinnyOptimisticOracleV2: getSkinnyOptimisticOracleV2StaticAddress,
    Polygon_ChildMessenger: getPolygon_ChildMessengerStaticAddress,
};
function isDeploymentName(name) { return addressFunctions.hasOwnProperty(name); }
async function getAddress(name, chainId) {
    if (typeof chainId !== "number")
        throw new Error("chainId must be a number");
    const { hre, hardhatTestingAddresses } = global;
    // The HRE address can be set in a few ways:
    // 1. If a global hre object declared, the global hre object matches the chainId passed in, and the global hre object has a deployment for this name.
    // 2. If a global hardhatTestingAddresses object is declared with a matching address for this name.
    // If an address is not set through the HRE (which should only be used in local testing), then it falls back to the addresses from the networks file.
    const hreAddress = (hre && parseInt(await hre.getChainId()) === chainId && (await hre.deployments.getOrNull(name))?.address) || hardhatTestingAddresses?.[name];
    if (hreAddress)
        return hreAddress;
    if (!isDeploymentName(name))
        throw new Error(`No deployments for name: ${name}`);
    const fn = addressFunctions[name];
    return fn(chainId);
}
exports.getAddress = getAddress;
function getCrossDomainEnabledAbi() { return require(artifactPaths["CrossDomainEnabled"]).abi; }
exports.getCrossDomainEnabledAbi = getCrossDomainEnabledAbi;
function getICrossDomainMessengerAbi() { return require(artifactPaths["ICrossDomainMessenger"]).abi; }
exports.getICrossDomainMessengerAbi = getICrossDomainMessengerAbi;
function getLib_PredeployAddressesAbi() { return require(artifactPaths["Lib_PredeployAddresses"]).abi; }
exports.getLib_PredeployAddressesAbi = getLib_PredeployAddressesAbi;
function getEnumAbi() { return require(artifactPaths["Enum"]).abi; }
exports.getEnumAbi = getEnumAbi;
function getModuleAbi() { return require(artifactPaths["Module"]).abi; }
exports.getModuleAbi = getModuleAbi;
function getFactoryFriendlyAbi() { return require(artifactPaths["FactoryFriendly"]).abi; }
exports.getFactoryFriendlyAbi = getFactoryFriendlyAbi;
function getModuleProxyFactoryAbi() { return require(artifactPaths["ModuleProxyFactory"]).abi; }
exports.getModuleProxyFactoryAbi = getModuleProxyFactoryAbi;
function getBaseGuardAbi() { return require(artifactPaths["BaseGuard"]).abi; }
exports.getBaseGuardAbi = getBaseGuardAbi;
function getGuardableAbi() { return require(artifactPaths["Guardable"]).abi; }
exports.getGuardableAbi = getGuardableAbi;
function getIAvatarAbi() { return require(artifactPaths["IAvatar"]).abi; }
exports.getIAvatarAbi = getIAvatarAbi;
function getIGuardAbi() { return require(artifactPaths["IGuard"]).abi; }
exports.getIGuardAbi = getIGuardAbi;
function getExitPayloadReaderAbi() { return require(artifactPaths["ExitPayloadReader"]).abi; }
exports.getExitPayloadReaderAbi = getExitPayloadReaderAbi;
function getMerkleAbi() { return require(artifactPaths["Merkle"]).abi; }
exports.getMerkleAbi = getMerkleAbi;
function getMerklePatriciaProofAbi() { return require(artifactPaths["MerklePatriciaProof"]).abi; }
exports.getMerklePatriciaProofAbi = getMerklePatriciaProofAbi;
function getRLPReaderAbi() { return require(artifactPaths["RLPReader"]).abi; }
exports.getRLPReaderAbi = getRLPReaderAbi;
function getFxBaseChildTunnelAbi() { return require(artifactPaths["FxBaseChildTunnel"]).abi; }
exports.getFxBaseChildTunnelAbi = getFxBaseChildTunnelAbi;
function getIFxMessageProcessorAbi() { return require(artifactPaths["IFxMessageProcessor"]).abi; }
exports.getIFxMessageProcessorAbi = getIFxMessageProcessorAbi;
function getFxBaseRootTunnelAbi() { return require(artifactPaths["FxBaseRootTunnel"]).abi; }
exports.getFxBaseRootTunnelAbi = getFxBaseRootTunnelAbi;
function getICheckpointManagerAbi() { return require(artifactPaths["ICheckpointManager"]).abi; }
exports.getICheckpointManagerAbi = getICheckpointManagerAbi;
function getIFxStateSenderAbi() { return require(artifactPaths["IFxStateSender"]).abi; }
exports.getIFxStateSenderAbi = getIFxStateSenderAbi;
function getOwnableUpgradeableAbi() { return require(artifactPaths["OwnableUpgradeable"]).abi; }
exports.getOwnableUpgradeableAbi = getOwnableUpgradeableAbi;
function getInitializableAbi() { return require(artifactPaths["Initializable"]).abi; }
exports.getInitializableAbi = getInitializableAbi;
function getAddressUpgradeableAbi() { return require(artifactPaths["AddressUpgradeable"]).abi; }
exports.getAddressUpgradeableAbi = getAddressUpgradeableAbi;
function getContextUpgradeableAbi() { return require(artifactPaths["ContextUpgradeable"]).abi; }
exports.getContextUpgradeableAbi = getContextUpgradeableAbi;
function getAccessControlAbi() { return require(artifactPaths["AccessControl"]).abi; }
exports.getAccessControlAbi = getAccessControlAbi;
function getIAccessControlAbi() { return require(artifactPaths["IAccessControl"]).abi; }
exports.getIAccessControlAbi = getIAccessControlAbi;
function getOwnableAbi() { return require(artifactPaths["Ownable"]).abi; }
exports.getOwnableAbi = getOwnableAbi;
function getPausableAbi() { return require(artifactPaths["Pausable"]).abi; }
exports.getPausableAbi = getPausableAbi;
function getERC20Abi() { return require(artifactPaths["ERC20"]).abi; }
exports.getERC20Abi = getERC20Abi;
function getIERC20Abi() { return require(artifactPaths["IERC20"]).abi; }
exports.getIERC20Abi = getIERC20Abi;
function getERC20SnapshotAbi() { return require(artifactPaths["ERC20Snapshot"]).abi; }
exports.getERC20SnapshotAbi = getERC20SnapshotAbi;
function getIERC20MetadataAbi() { return require(artifactPaths["IERC20Metadata"]).abi; }
exports.getIERC20MetadataAbi = getIERC20MetadataAbi;
function getIERC20PermitAbi() { return require(artifactPaths["IERC20Permit"]).abi; }
exports.getIERC20PermitAbi = getIERC20PermitAbi;
function getSafeERC20Abi() { return require(artifactPaths["SafeERC20"]).abi; }
exports.getSafeERC20Abi = getSafeERC20Abi;
function getERC721Abi() { return require(artifactPaths["ERC721"]).abi; }
exports.getERC721Abi = getERC721Abi;
function getIERC721Abi() { return require(artifactPaths["IERC721"]).abi; }
exports.getIERC721Abi = getIERC721Abi;
function getIERC721ReceiverAbi() { return require(artifactPaths["IERC721Receiver"]).abi; }
exports.getIERC721ReceiverAbi = getIERC721ReceiverAbi;
function getIERC721MetadataAbi() { return require(artifactPaths["IERC721Metadata"]).abi; }
exports.getIERC721MetadataAbi = getIERC721MetadataAbi;
function getAddressAbi() { return require(artifactPaths["Address"]).abi; }
exports.getAddressAbi = getAddressAbi;
function getArraysAbi() { return require(artifactPaths["Arrays"]).abi; }
exports.getArraysAbi = getArraysAbi;
function getContextAbi() { return require(artifactPaths["Context"]).abi; }
exports.getContextAbi = getContextAbi;
function getCountersAbi() { return require(artifactPaths["Counters"]).abi; }
exports.getCountersAbi = getCountersAbi;
function getStorageSlotAbi() { return require(artifactPaths["StorageSlot"]).abi; }
exports.getStorageSlotAbi = getStorageSlotAbi;
function getStringsAbi() { return require(artifactPaths["Strings"]).abi; }
exports.getStringsAbi = getStringsAbi;
function getECDSAAbi() { return require(artifactPaths["ECDSA"]).abi; }
exports.getECDSAAbi = getECDSAAbi;
function getMerkleProofAbi() { return require(artifactPaths["MerkleProof"]).abi; }
exports.getMerkleProofAbi = getMerkleProofAbi;
function getERC165Abi() { return require(artifactPaths["ERC165"]).abi; }
exports.getERC165Abi = getERC165Abi;
function getIERC165Abi() { return require(artifactPaths["IERC165"]).abi; }
exports.getIERC165Abi = getIERC165Abi;
function getMathAbi() { return require(artifactPaths["Math"]).abi; }
exports.getMathAbi = getMathAbi;
function getSafeCastAbi() { return require(artifactPaths["SafeCast"]).abi; }
exports.getSafeCastAbi = getSafeCastAbi;
function getSafeMathAbi() { return require(artifactPaths["SafeMath"]).abi; }
exports.getSafeMathAbi = getSafeMathAbi;
function getSignedMathAbi() { return require(artifactPaths["SignedMath"]).abi; }
exports.getSignedMathAbi = getSignedMathAbi;
function getSignedSafeMathAbi() { return require(artifactPaths["SignedSafeMath"]).abi; }
exports.getSignedSafeMathAbi = getSignedSafeMathAbi;
function getBabylonianAbi() { return require(artifactPaths["Babylonian"]).abi; }
exports.getBabylonianAbi = getBabylonianAbi;
function getTransferHelperAbi() { return require(artifactPaths["TransferHelper"]).abi; }
exports.getTransferHelperAbi = getTransferHelperAbi;
function getIUniswapV2PairAbi() { return require(artifactPaths["IUniswapV2Pair"]).abi; }
exports.getIUniswapV2PairAbi = getIUniswapV2PairAbi;
function getIUniswapV2Router01Abi() { return require(artifactPaths["IUniswapV2Router01"]).abi; }
exports.getIUniswapV2Router01Abi = getIUniswapV2Router01Abi;
function getIUniswapV3PoolAbi() { return require(artifactPaths["IUniswapV3Pool"]).abi; }
exports.getIUniswapV3PoolAbi = getIUniswapV3PoolAbi;
function getIUniswapV3SwapCallbackAbi() { return require(artifactPaths["IUniswapV3SwapCallback"]).abi; }
exports.getIUniswapV3SwapCallbackAbi = getIUniswapV3SwapCallbackAbi;
function getIUniswapV3PoolActionsAbi() { return require(artifactPaths["IUniswapV3PoolActions"]).abi; }
exports.getIUniswapV3PoolActionsAbi = getIUniswapV3PoolActionsAbi;
function getIUniswapV3PoolDerivedStateAbi() { return require(artifactPaths["IUniswapV3PoolDerivedState"]).abi; }
exports.getIUniswapV3PoolDerivedStateAbi = getIUniswapV3PoolDerivedStateAbi;
function getIUniswapV3PoolEventsAbi() { return require(artifactPaths["IUniswapV3PoolEvents"]).abi; }
exports.getIUniswapV3PoolEventsAbi = getIUniswapV3PoolEventsAbi;
function getIUniswapV3PoolImmutablesAbi() { return require(artifactPaths["IUniswapV3PoolImmutables"]).abi; }
exports.getIUniswapV3PoolImmutablesAbi = getIUniswapV3PoolImmutablesAbi;
function getIUniswapV3PoolOwnerActionsAbi() { return require(artifactPaths["IUniswapV3PoolOwnerActions"]).abi; }
exports.getIUniswapV3PoolOwnerActionsAbi = getIUniswapV3PoolOwnerActionsAbi;
function getIUniswapV3PoolStateAbi() { return require(artifactPaths["IUniswapV3PoolState"]).abi; }
exports.getIUniswapV3PoolStateAbi = getIUniswapV3PoolStateAbi;
function getBitMathAbi() { return require(artifactPaths["BitMath"]).abi; }
exports.getBitMathAbi = getBitMathAbi;
function getLiquidityMathAbi() { return require(artifactPaths["LiquidityMath"]).abi; }
exports.getLiquidityMathAbi = getLiquidityMathAbi;
function getLowGasSafeMathAbi() { return require(artifactPaths["LowGasSafeMath"]).abi; }
exports.getLowGasSafeMathAbi = getLowGasSafeMathAbi;
function getUnsafeMathAbi() { return require(artifactPaths["UnsafeMath"]).abi; }
exports.getUnsafeMathAbi = getUnsafeMathAbi;
function getISwapRouterAbi() { return require(artifactPaths["ISwapRouter"]).abi; }
exports.getISwapRouterAbi = getISwapRouterAbi;
function getAddressWhitelistAbi() { return require(artifactPaths["AddressWhitelist"]).abi; }
exports.getAddressWhitelistAbi = getAddressWhitelistAbi;
function getAncillaryDataAbi() { return require(artifactPaths["AncillaryData"]).abi; }
exports.getAncillaryDataAbi = getAncillaryDataAbi;
function getExpandedERC20Abi() { return require(artifactPaths["ExpandedERC20"]).abi; }
exports.getExpandedERC20Abi = getExpandedERC20Abi;
function getFixedPointAbi() { return require(artifactPaths["FixedPoint"]).abi; }
exports.getFixedPointAbi = getFixedPointAbi;
function getHasFinderAbi() { return require(artifactPaths["HasFinder"]).abi; }
exports.getHasFinderAbi = getHasFinderAbi;
function getLockableAbi() { return require(artifactPaths["Lockable"]).abi; }
exports.getLockableAbi = getLockableAbi;
function getMultiCallerAbi() { return require(artifactPaths["MultiCaller"]).abi; }
exports.getMultiCallerAbi = getMultiCallerAbi;
function getExclusiveAbi() { return require(artifactPaths["Exclusive"]).abi; }
exports.getExclusiveAbi = getExclusiveAbi;
function getMultiRoleAbi() { return require(artifactPaths["MultiRole"]).abi; }
exports.getMultiRoleAbi = getMultiRoleAbi;
function getSharedAbi() { return require(artifactPaths["Shared"]).abi; }
exports.getSharedAbi = getSharedAbi;
function getMulticall3Abi() { return require(artifactPaths["Multicall3"]).abi; }
exports.getMulticall3Abi = getMulticall3Abi;
function getStakeableAbi() { return require(artifactPaths["Stakeable"]).abi; }
exports.getStakeableAbi = getStakeableAbi;
function getTestableAbi() { return require(artifactPaths["Testable"]).abi; }
exports.getTestableAbi = getTestableAbi;
function getTestnetERC20Abi() { return require(artifactPaths["TestnetERC20"]).abi; }
exports.getTestnetERC20Abi = getTestnetERC20Abi;
function getTimerAbi() { return require(artifactPaths["Timer"]).abi; }
exports.getTimerAbi = getTimerAbi;
function getWithdrawableAbi() { return require(artifactPaths["Withdrawable"]).abi; }
exports.getWithdrawableAbi = getWithdrawableAbi;
function getDSAuthAbi() { return require(artifactPaths["DSAuth"]).abi; }
exports.getDSAuthAbi = getDSAuthAbi;
function getDSAuthEventsAbi() { return require(artifactPaths["DSAuthEvents"]).abi; }
exports.getDSAuthEventsAbi = getDSAuthEventsAbi;
function getDSAuthorityAbi() { return require(artifactPaths["DSAuthority"]).abi; }
exports.getDSAuthorityAbi = getDSAuthorityAbi;
function getDSGuardAbi() { return require(artifactPaths["DSGuard"]).abi; }
exports.getDSGuardAbi = getDSGuardAbi;
function getDSGuardEventsAbi() { return require(artifactPaths["DSGuardEvents"]).abi; }
exports.getDSGuardEventsAbi = getDSGuardEventsAbi;
function getDSGuardFactoryAbi() { return require(artifactPaths["DSGuardFactory"]).abi; }
exports.getDSGuardFactoryAbi = getDSGuardFactoryAbi;
function getDSNoteAbi() { return require(artifactPaths["DSNote"]).abi; }
exports.getDSNoteAbi = getDSNoteAbi;
function getDSProxyAbi() { return require(artifactPaths["DSProxy"]).abi; }
exports.getDSProxyAbi = getDSProxyAbi;
function getDSProxyCacheAbi() { return require(artifactPaths["DSProxyCache"]).abi; }
exports.getDSProxyCacheAbi = getDSProxyCacheAbi;
function getDSProxyFactoryAbi() { return require(artifactPaths["DSProxyFactory"]).abi; }
exports.getDSProxyFactoryAbi = getDSProxyFactoryAbi;
function getAddressWhitelistInterfaceAbi() { return require(artifactPaths["AddressWhitelistInterface"]).abi; }
exports.getAddressWhitelistInterfaceAbi = getAddressWhitelistInterfaceAbi;
function getBalancerAbi() { return require(artifactPaths["Balancer"]).abi; }
exports.getBalancerAbi = getBalancerAbi;
function getExpandedIERC20Abi() { return require(artifactPaths["ExpandedIERC20"]).abi; }
exports.getExpandedIERC20Abi = getExpandedIERC20Abi;
function getHarvestVaultInterfaceAbi() { return require(artifactPaths["HarvestVaultInterface"]).abi; }
exports.getHarvestVaultInterfaceAbi = getHarvestVaultInterfaceAbi;
function getIERC20StandardAbi() { return require(artifactPaths["IERC20Standard"]).abi; }
exports.getIERC20StandardAbi = getIERC20StandardAbi;
function getMulticallAbi() { return require(artifactPaths["Multicall"]).abi; }
exports.getMulticallAbi = getMulticallAbi;
function getMulticall2Abi() { return require(artifactPaths["Multicall2"]).abi; }
exports.getMulticall2Abi = getMulticall2Abi;
function getTransactionBatcherAbi() { return require(artifactPaths["TransactionBatcher"]).abi; }
exports.getTransactionBatcherAbi = getTransactionBatcherAbi;
function getUniswapV2Abi() { return require(artifactPaths["UniswapV2"]).abi; }
exports.getUniswapV2Abi = getUniswapV2Abi;
function getUniswapV3Abi() { return require(artifactPaths["UniswapV3"]).abi; }
exports.getUniswapV3Abi = getUniswapV3Abi;
function getVaultInterfaceAbi() { return require(artifactPaths["VaultInterface"]).abi; }
exports.getVaultInterfaceAbi = getVaultInterfaceAbi;
function getAncillaryDataTestAbi() { return require(artifactPaths["AncillaryDataTest"]).abi; }
exports.getAncillaryDataTestAbi = getAncillaryDataTestAbi;
function getBalancerMockAbi() { return require(artifactPaths["BalancerMock"]).abi; }
exports.getBalancerMockAbi = getBalancerMockAbi;
function getBasicERC20Abi() { return require(artifactPaths["BasicERC20"]).abi; }
exports.getBasicERC20Abi = getBasicERC20Abi;
function getHarvestVaultMockAbi() { return require(artifactPaths["HarvestVaultMock"]).abi; }
exports.getHarvestVaultMockAbi = getHarvestVaultMockAbi;
function getMintableERC721Abi() { return require(artifactPaths["MintableERC721"]).abi; }
exports.getMintableERC721Abi = getMintableERC721Abi;
function getMultiCallerTestAbi() { return require(artifactPaths["MultiCallerTest"]).abi; }
exports.getMultiCallerTestAbi = getMultiCallerTestAbi;
function getMultiRoleTestAbi() { return require(artifactPaths["MultiRoleTest"]).abi; }
exports.getMultiRoleTestAbi = getMultiRoleTestAbi;
function getMulticallMockAbi() { return require(artifactPaths["MulticallMock"]).abi; }
exports.getMulticallMockAbi = getMulticallMockAbi;
function getPerpetualMockAbi() { return require(artifactPaths["PerpetualMock"]).abi; }
exports.getPerpetualMockAbi = getPerpetualMockAbi;
function getReentrancyAttackAbi() { return require(artifactPaths["ReentrancyAttack"]).abi; }
exports.getReentrancyAttackAbi = getReentrancyAttackAbi;
function getReentrancyCheckerAbi() { return require(artifactPaths["ReentrancyChecker"]).abi; }
exports.getReentrancyCheckerAbi = getReentrancyCheckerAbi;
function getReentrancyMockAbi() { return require(artifactPaths["ReentrancyMock"]).abi; }
exports.getReentrancyMockAbi = getReentrancyMockAbi;
function getSignedFixedPointTestAbi() { return require(artifactPaths["SignedFixedPointTest"]).abi; }
exports.getSignedFixedPointTestAbi = getSignedFixedPointTestAbi;
function getTestableTestAbi() { return require(artifactPaths["TestableTest"]).abi; }
exports.getTestableTestAbi = getTestableTestAbi;
function getUniswapV2MockAbi() { return require(artifactPaths["UniswapV2Mock"]).abi; }
exports.getUniswapV2MockAbi = getUniswapV2MockAbi;
function getUniswapV3MockAbi() { return require(artifactPaths["UniswapV3Mock"]).abi; }
exports.getUniswapV3MockAbi = getUniswapV3MockAbi;
function getUnsignedFixedPointTestAbi() { return require(artifactPaths["UnsignedFixedPointTest"]).abi; }
exports.getUnsignedFixedPointTestAbi = getUnsignedFixedPointTestAbi;
function getVaultMockAbi() { return require(artifactPaths["VaultMock"]).abi; }
exports.getVaultMockAbi = getVaultMockAbi;
function getWithdrawableTestAbi() { return require(artifactPaths["WithdrawableTest"]).abi; }
exports.getWithdrawableTestAbi = getWithdrawableTestAbi;
function getGovernorHubAbi() { return require(artifactPaths["GovernorHub"]).abi; }
exports.getGovernorHubAbi = getGovernorHubAbi;
function getGovernorSpokeAbi() { return require(artifactPaths["GovernorSpoke"]).abi; }
exports.getGovernorSpokeAbi = getGovernorSpokeAbi;
function getOracleBaseAbi() { return require(artifactPaths["OracleBase"]).abi; }
exports.getOracleBaseAbi = getOracleBaseAbi;
function getOracleHubAbi() { return require(artifactPaths["OracleHub"]).abi; }
exports.getOracleHubAbi = getOracleHubAbi;
function getOracleSpokeAbi() { return require(artifactPaths["OracleSpoke"]).abi; }
exports.getOracleSpokeAbi = getOracleSpokeAbi;
function getSpokeBaseAbi() { return require(artifactPaths["SpokeBase"]).abi; }
exports.getSpokeBaseAbi = getSpokeBaseAbi;
function getAdmin_ChildMessengerAbi() { return require(artifactPaths["Admin_ChildMessenger"]).abi; }
exports.getAdmin_ChildMessengerAbi = getAdmin_ChildMessengerAbi;
function getArbitrum_ChildMessengerAbi() { return require(artifactPaths["Arbitrum_ChildMessenger"]).abi; }
exports.getArbitrum_ChildMessengerAbi = getArbitrum_ChildMessengerAbi;
function getArbitrum_ParentMessengerAbi() { return require(artifactPaths["Arbitrum_ParentMessenger"]).abi; }
exports.getArbitrum_ParentMessengerAbi = getArbitrum_ParentMessengerAbi;
function getOptimism_ChildMessengerAbi() { return require(artifactPaths["Optimism_ChildMessenger"]).abi; }
exports.getOptimism_ChildMessengerAbi = getOptimism_ChildMessengerAbi;
function getOptimism_ParentMessengerAbi() { return require(artifactPaths["Optimism_ParentMessenger"]).abi; }
exports.getOptimism_ParentMessengerAbi = getOptimism_ParentMessengerAbi;
function getParentMessengerBaseAbi() { return require(artifactPaths["ParentMessengerBase"]).abi; }
exports.getParentMessengerBaseAbi = getParentMessengerBaseAbi;
function getPolygon_ChildMessengerAbi() { return require(artifactPaths["Polygon_ChildMessenger"]).abi; }
exports.getPolygon_ChildMessengerAbi = getPolygon_ChildMessengerAbi;
function getPolygon_ParentMessengerAbi() { return require(artifactPaths["Polygon_ParentMessenger"]).abi; }
exports.getPolygon_ParentMessengerAbi = getPolygon_ParentMessengerAbi;
function getArbitrum_BridgeMockAbi() { return require(artifactPaths["Arbitrum_BridgeMock"]).abi; }
exports.getArbitrum_BridgeMockAbi = getArbitrum_BridgeMockAbi;
function getArbitrum_InboxMockAbi() { return require(artifactPaths["Arbitrum_InboxMock"]).abi; }
exports.getArbitrum_InboxMockAbi = getArbitrum_InboxMockAbi;
function getArbitrum_OutboxMockAbi() { return require(artifactPaths["Arbitrum_OutboxMock"]).abi; }
exports.getArbitrum_OutboxMockAbi = getArbitrum_OutboxMockAbi;
function getOVM_L1CrossDomainMessengerMockAbi() { return require(artifactPaths["OVM_L1CrossDomainMessengerMock"]).abi; }
exports.getOVM_L1CrossDomainMessengerMockAbi = getOVM_L1CrossDomainMessengerMockAbi;
function getParentMessengerBaseMockAbi() { return require(artifactPaths["ParentMessengerBaseMock"]).abi; }
exports.getParentMessengerBaseMockAbi = getParentMessengerBaseMockAbi;
function getPolygon_ChildMessengerMockAbi() { return require(artifactPaths["Polygon_ChildMessengerMock"]).abi; }
exports.getPolygon_ChildMessengerMockAbi = getPolygon_ChildMessengerMockAbi;
function getPolygon_ParentMessengerMockAbi() { return require(artifactPaths["Polygon_ParentMessengerMock"]).abi; }
exports.getPolygon_ParentMessengerMockAbi = getPolygon_ParentMessengerMockAbi;
function getChildMessengerConsumerInterfaceAbi() { return require(artifactPaths["ChildMessengerConsumerInterface"]).abi; }
exports.getChildMessengerConsumerInterfaceAbi = getChildMessengerConsumerInterfaceAbi;
function getChildMessengerInterfaceAbi() { return require(artifactPaths["ChildMessengerInterface"]).abi; }
exports.getChildMessengerInterfaceAbi = getChildMessengerInterfaceAbi;
function getParentMessengerConsumerInterfaceAbi() { return require(artifactPaths["ParentMessengerConsumerInterface"]).abi; }
exports.getParentMessengerConsumerInterfaceAbi = getParentMessengerConsumerInterfaceAbi;
function getParentMessengerInterfaceAbi() { return require(artifactPaths["ParentMessengerInterface"]).abi; }
exports.getParentMessengerInterfaceAbi = getParentMessengerInterfaceAbi;
function getGovernorMessengerMockAbi() { return require(artifactPaths["GovernorMessengerMock"]).abi; }
exports.getGovernorMessengerMockAbi = getGovernorMessengerMockAbi;
function getOracleBaseMockAbi() { return require(artifactPaths["OracleBaseMock"]).abi; }
exports.getOracleBaseMockAbi = getOracleBaseMockAbi;
function getOracleMessengerMockAbi() { return require(artifactPaths["OracleMessengerMock"]).abi; }
exports.getOracleMessengerMockAbi = getOracleMessengerMockAbi;
function getAdminIdentifierLibAbi() { return require(artifactPaths["AdminIdentifierLib"]).abi; }
exports.getAdminIdentifierLibAbi = getAdminIdentifierLibAbi;
function getOptimisticOracleConstraintsAbi() { return require(artifactPaths["OptimisticOracleConstraints"]).abi; }
exports.getOptimisticOracleConstraintsAbi = getOptimisticOracleConstraintsAbi;
function getOracleInterfacesAbi() { return require(artifactPaths["OracleInterfaces"]).abi; }
exports.getOracleInterfacesAbi = getOracleInterfacesAbi;
function getContractCreatorAbi() { return require(artifactPaths["ContractCreator"]).abi; }
exports.getContractCreatorAbi = getContractCreatorAbi;
function getDesignatedVotingAbi() { return require(artifactPaths["DesignatedVoting"]).abi; }
exports.getDesignatedVotingAbi = getDesignatedVotingAbi;
function getDesignatedVotingFactoryAbi() { return require(artifactPaths["DesignatedVotingFactory"]).abi; }
exports.getDesignatedVotingFactoryAbi = getDesignatedVotingFactoryAbi;
function getDesignatedVotingV2Abi() { return require(artifactPaths["DesignatedVotingV2"]).abi; }
exports.getDesignatedVotingV2Abi = getDesignatedVotingV2Abi;
function getDesignatedVotingV2FactoryAbi() { return require(artifactPaths["DesignatedVotingV2Factory"]).abi; }
exports.getDesignatedVotingV2FactoryAbi = getDesignatedVotingV2FactoryAbi;
function getEmergencyProposerAbi() { return require(artifactPaths["EmergencyProposer"]).abi; }
exports.getEmergencyProposerAbi = getEmergencyProposerAbi;
function getFinancialContractsAdminAbi() { return require(artifactPaths["FinancialContractsAdmin"]).abi; }
exports.getFinancialContractsAdminAbi = getFinancialContractsAdminAbi;
function getFinderAbi() { return require(artifactPaths["Finder"]).abi; }
exports.getFinderAbi = getFinderAbi;
function getFixedSlashSlashingLibraryAbi() { return require(artifactPaths["FixedSlashSlashingLibrary"]).abi; }
exports.getFixedSlashSlashingLibraryAbi = getFixedSlashSlashingLibraryAbi;
function getGovernorAbi() { return require(artifactPaths["Governor"]).abi; }
exports.getGovernorAbi = getGovernorAbi;
function getGovernorV2Abi() { return require(artifactPaths["GovernorV2"]).abi; }
exports.getGovernorV2Abi = getGovernorV2Abi;
function getIdentifierWhitelistAbi() { return require(artifactPaths["IdentifierWhitelist"]).abi; }
exports.getIdentifierWhitelistAbi = getIdentifierWhitelistAbi;
function getProposerAbi() { return require(artifactPaths["Proposer"]).abi; }
exports.getProposerAbi = getProposerAbi;
function getProposerV2Abi() { return require(artifactPaths["ProposerV2"]).abi; }
exports.getProposerV2Abi = getProposerV2Abi;
function getRegistryAbi() { return require(artifactPaths["Registry"]).abi; }
exports.getRegistryAbi = getRegistryAbi;
function getResultComputationAbi() { return require(artifactPaths["ResultComputation"]).abi; }
exports.getResultComputationAbi = getResultComputationAbi;
function getResultComputationV2Abi() { return require(artifactPaths["ResultComputationV2"]).abi; }
exports.getResultComputationV2Abi = getResultComputationV2Abi;
function getStakerAbi() { return require(artifactPaths["Staker"]).abi; }
exports.getStakerAbi = getStakerAbi;
function getStoreAbi() { return require(artifactPaths["Store"]).abi; }
exports.getStoreAbi = getStoreAbi;
function getTokenMigratorAbi() { return require(artifactPaths["TokenMigrator"]).abi; }
exports.getTokenMigratorAbi = getTokenMigratorAbi;
function getVoteTimingAbi() { return require(artifactPaths["VoteTiming"]).abi; }
exports.getVoteTimingAbi = getVoteTimingAbi;
function getVotingAbi() { return require(artifactPaths["Voting"]).abi; }
exports.getVotingAbi = getVotingAbi;
function getVotingTokenAbi() { return require(artifactPaths["VotingToken"]).abi; }
exports.getVotingTokenAbi = getVotingTokenAbi;
function getVotingV2Abi() { return require(artifactPaths["VotingV2"]).abi; }
exports.getVotingV2Abi = getVotingV2Abi;
function getEmergencyProposerTestAbi() { return require(artifactPaths["EmergencyProposerTest"]).abi; }
exports.getEmergencyProposerTestAbi = getEmergencyProposerTestAbi;
function getGovernorTestAbi() { return require(artifactPaths["GovernorTest"]).abi; }
exports.getGovernorTestAbi = getGovernorTestAbi;
function getGovernorV2TestAbi() { return require(artifactPaths["GovernorV2Test"]).abi; }
exports.getGovernorV2TestAbi = getGovernorV2TestAbi;
function getMockAdministrateeAbi() { return require(artifactPaths["MockAdministratee"]).abi; }
exports.getMockAdministrateeAbi = getMockAdministrateeAbi;
function getPriceIdentifierSlashingLibaryTestAbi() { return require(artifactPaths["PriceIdentifierSlashingLibaryTest"]).abi; }
exports.getPriceIdentifierSlashingLibaryTestAbi = getPriceIdentifierSlashingLibaryTestAbi;
function getProposerV2TestAbi() { return require(artifactPaths["ProposerV2Test"]).abi; }
exports.getProposerV2TestAbi = getProposerV2TestAbi;
function getPunitiveSlashingLibraryTestAbi() { return require(artifactPaths["PunitiveSlashingLibraryTest"]).abi; }
exports.getPunitiveSlashingLibraryTestAbi = getPunitiveSlashingLibraryTestAbi;
function getResultComputationTestAbi() { return require(artifactPaths["ResultComputationTest"]).abi; }
exports.getResultComputationTestAbi = getResultComputationTestAbi;
function getStakerControlledTimingAbi() { return require(artifactPaths["StakerControlledTiming"]).abi; }
exports.getStakerControlledTimingAbi = getStakerControlledTimingAbi;
function getStakerTestAbi() { return require(artifactPaths["StakerTest"]).abi; }
exports.getStakerTestAbi = getStakerTestAbi;
function getVoteTimingTestAbi() { return require(artifactPaths["VoteTimingTest"]).abi; }
exports.getVoteTimingTestAbi = getVoteTimingTestAbi;
function getVotingTestAbi() { return require(artifactPaths["VotingTest"]).abi; }
exports.getVotingTestAbi = getVotingTestAbi;
function getVotingV2ControllableTimingAbi() { return require(artifactPaths["VotingV2ControllableTiming"]).abi; }
exports.getVotingV2ControllableTimingAbi = getVotingV2ControllableTimingAbi;
function getVotingV2TestAbi() { return require(artifactPaths["VotingV2Test"]).abi; }
exports.getVotingV2TestAbi = getVotingV2TestAbi;
function getZeroedSlashingSlashingLibraryTestAbi() { return require(artifactPaths["ZeroedSlashingSlashingLibraryTest"]).abi; }
exports.getZeroedSlashingSlashingLibraryTestAbi = getZeroedSlashingSlashingLibraryTestAbi;
function getAdministrateeInterfaceAbi() { return require(artifactPaths["AdministrateeInterface"]).abi; }
exports.getAdministrateeInterfaceAbi = getAdministrateeInterfaceAbi;
function getFinderInterfaceAbi() { return require(artifactPaths["FinderInterface"]).abi; }
exports.getFinderInterfaceAbi = getFinderInterfaceAbi;
function getIdentifierWhitelistInterfaceAbi() { return require(artifactPaths["IdentifierWhitelistInterface"]).abi; }
exports.getIdentifierWhitelistInterfaceAbi = getIdentifierWhitelistInterfaceAbi;
function getMinimumVotingAncillaryInterfaceAbi() { return require(artifactPaths["MinimumVotingAncillaryInterface"]).abi; }
exports.getMinimumVotingAncillaryInterfaceAbi = getMinimumVotingAncillaryInterfaceAbi;
function getOracleAncillaryInterfaceAbi() { return require(artifactPaths["OracleAncillaryInterface"]).abi; }
exports.getOracleAncillaryInterfaceAbi = getOracleAncillaryInterfaceAbi;
function getOracleGovernanceInterfaceAbi() { return require(artifactPaths["OracleGovernanceInterface"]).abi; }
exports.getOracleGovernanceInterfaceAbi = getOracleGovernanceInterfaceAbi;
function getOracleInterfaceAbi() { return require(artifactPaths["OracleInterface"]).abi; }
exports.getOracleInterfaceAbi = getOracleInterfaceAbi;
function getRegistryInterfaceAbi() { return require(artifactPaths["RegistryInterface"]).abi; }
exports.getRegistryInterfaceAbi = getRegistryInterfaceAbi;
function getSlashingLibraryInterfaceAbi() { return require(artifactPaths["SlashingLibraryInterface"]).abi; }
exports.getSlashingLibraryInterfaceAbi = getSlashingLibraryInterfaceAbi;
function getStakerInterfaceAbi() { return require(artifactPaths["StakerInterface"]).abi; }
exports.getStakerInterfaceAbi = getStakerInterfaceAbi;
function getStoreInterfaceAbi() { return require(artifactPaths["StoreInterface"]).abi; }
exports.getStoreInterfaceAbi = getStoreInterfaceAbi;
function getVotingAncillaryInterfaceAbi() { return require(artifactPaths["VotingAncillaryInterface"]).abi; }
exports.getVotingAncillaryInterfaceAbi = getVotingAncillaryInterfaceAbi;
function getVotingInterfaceAbi() { return require(artifactPaths["VotingInterface"]).abi; }
exports.getVotingInterfaceAbi = getVotingInterfaceAbi;
function getVotingV2InterfaceAbi() { return require(artifactPaths["VotingV2Interface"]).abi; }
exports.getVotingV2InterfaceAbi = getVotingV2InterfaceAbi;
function getMockOracleAbi() { return require(artifactPaths["MockOracle"]).abi; }
exports.getMockOracleAbi = getMockOracleAbi;
function getMockOracleAncillaryAbi() { return require(artifactPaths["MockOracleAncillary"]).abi; }
exports.getMockOracleAncillaryAbi = getMockOracleAncillaryAbi;
function getMockOracleCombinedAbi() { return require(artifactPaths["MockOracleCombined"]).abi; }
exports.getMockOracleCombinedAbi = getMockOracleCombinedAbi;
function getMockOracleGovernanceAbi() { return require(artifactPaths["MockOracleGovernance"]).abi; }
exports.getMockOracleGovernanceAbi = getMockOracleGovernanceAbi;
function getVotingAncillaryInterfaceTestingAbi() { return require(artifactPaths["VotingAncillaryInterfaceTesting"]).abi; }
exports.getVotingAncillaryInterfaceTestingAbi = getVotingAncillaryInterfaceTestingAbi;
function getVotingInterfaceTestingAbi() { return require(artifactPaths["VotingInterfaceTesting"]).abi; }
exports.getVotingInterfaceTestingAbi = getVotingInterfaceTestingAbi;
function getAVM_CrossDomainEnabledAbi() { return require(artifactPaths["AVM_CrossDomainEnabled"]).abi; }
exports.getAVM_CrossDomainEnabledAbi = getAVM_CrossDomainEnabledAbi;
function getArbitrum_CrossDomainEnabledAbi() { return require(artifactPaths["Arbitrum_CrossDomainEnabled"]).abi; }
exports.getArbitrum_CrossDomainEnabledAbi = getArbitrum_CrossDomainEnabledAbi;
function getArbitrum_MessengerAbi() { return require(artifactPaths["Arbitrum_Messenger"]).abi; }
exports.getArbitrum_MessengerAbi = getArbitrum_MessengerAbi;
function getArbSysAbi() { return require(artifactPaths["ArbSys"]).abi; }
exports.getArbSysAbi = getArbSysAbi;
function getIBridgeAbi() { return require(artifactPaths["IBridge"]).abi; }
exports.getIBridgeAbi = getIBridgeAbi;
function getiArbitrum_InboxAbi() { return require(artifactPaths["iArbitrum_Inbox"]).abi; }
exports.getiArbitrum_InboxAbi = getiArbitrum_InboxAbi;
function getiArbitrum_OutboxAbi() { return require(artifactPaths["iArbitrum_Outbox"]).abi; }
exports.getiArbitrum_OutboxAbi = getiArbitrum_OutboxAbi;
function getBobaAddressManagerAbi() { return require(artifactPaths["BobaAddressManager"]).abi; }
exports.getBobaAddressManagerAbi = getBobaAddressManagerAbi;
function getBridgeAbi() { return require(artifactPaths["Bridge"]).abi; }
exports.getBridgeAbi = getBridgeAbi;
function getGenericHandlerAbi() { return require(artifactPaths["GenericHandler"]).abi; }
exports.getGenericHandlerAbi = getGenericHandlerAbi;
function getIDepositExecuteAbi() { return require(artifactPaths["IDepositExecute"]).abi; }
exports.getIDepositExecuteAbi = getIDepositExecuteAbi;
function getIERCHandlerAbi() { return require(artifactPaths["IERCHandler"]).abi; }
exports.getIERCHandlerAbi = getIERCHandlerAbi;
function getIGenericHandlerAbi() { return require(artifactPaths["IGenericHandler"]).abi; }
exports.getIGenericHandlerAbi = getIGenericHandlerAbi;
function getOptimismL1StandardBridgeAbi() { return require(artifactPaths["OptimismL1StandardBridge"]).abi; }
exports.getOptimismL1StandardBridgeAbi = getOptimismL1StandardBridgeAbi;
function getOptimismL2StandardBridgeAbi() { return require(artifactPaths["OptimismL2StandardBridge"]).abi; }
exports.getOptimismL2StandardBridgeAbi = getOptimismL2StandardBridgeAbi;
function getOptimismL2StandardERC20Abi() { return require(artifactPaths["OptimismL2StandardERC20"]).abi; }
exports.getOptimismL2StandardERC20Abi = getOptimismL2StandardERC20Abi;
function getEmergencyShutdownableAbi() { return require(artifactPaths["EmergencyShutdownable"]).abi; }
exports.getEmergencyShutdownableAbi = getEmergencyShutdownableAbi;
function getFeePayerAbi() { return require(artifactPaths["FeePayer"]).abi; }
exports.getFeePayerAbi = getFeePayerAbi;
function getFundingRateApplierAbi() { return require(artifactPaths["FundingRateApplier"]).abi; }
exports.getFundingRateApplierAbi = getFundingRateApplierAbi;
function getSyntheticTokenAbi() { return require(artifactPaths["SyntheticToken"]).abi; }
exports.getSyntheticTokenAbi = getSyntheticTokenAbi;
function getTokenFactoryAbi() { return require(artifactPaths["TokenFactory"]).abi; }
exports.getTokenFactoryAbi = getTokenFactoryAbi;
function getWETH9Abi() { return require(artifactPaths["WETH9"]).abi; }
exports.getWETH9Abi = getWETH9Abi;
function getCoveredCallFinancialProductLibraryAbi() { return require(artifactPaths["CoveredCallFinancialProductLibrary"]).abi; }
exports.getCoveredCallFinancialProductLibraryAbi = getCoveredCallFinancialProductLibraryAbi;
function getExpiringContractInterfaceAbi() { return require(artifactPaths["ExpiringContractInterface"]).abi; }
exports.getExpiringContractInterfaceAbi = getExpiringContractInterfaceAbi;
function getFinancialProductLibraryAbi() { return require(artifactPaths["FinancialProductLibrary"]).abi; }
exports.getFinancialProductLibraryAbi = getFinancialProductLibraryAbi;
function getKpiOptionsFinancialProductLibraryAbi() { return require(artifactPaths["KpiOptionsFinancialProductLibrary"]).abi; }
exports.getKpiOptionsFinancialProductLibraryAbi = getKpiOptionsFinancialProductLibraryAbi;
function getPostExpirationIdentifierTransformationFinancialProductLibraryAbi() { return require(artifactPaths["PostExpirationIdentifierTransformationFinancialProductLibrary"]).abi; }
exports.getPostExpirationIdentifierTransformationFinancialProductLibraryAbi = getPostExpirationIdentifierTransformationFinancialProductLibraryAbi;
function getPreExpirationIdentifierTransformationFinancialProductLibraryAbi() { return require(artifactPaths["PreExpirationIdentifierTransformationFinancialProductLibrary"]).abi; }
exports.getPreExpirationIdentifierTransformationFinancialProductLibraryAbi = getPreExpirationIdentifierTransformationFinancialProductLibraryAbi;
function getStructuredNoteFinancialProductLibraryAbi() { return require(artifactPaths["StructuredNoteFinancialProductLibrary"]).abi; }
exports.getStructuredNoteFinancialProductLibraryAbi = getStructuredNoteFinancialProductLibraryAbi;
function getBinaryOptionLongShortPairFinancialProductLibraryAbi() { return require(artifactPaths["BinaryOptionLongShortPairFinancialProductLibrary"]).abi; }
exports.getBinaryOptionLongShortPairFinancialProductLibraryAbi = getBinaryOptionLongShortPairFinancialProductLibraryAbi;
function getCappedYieldDollarLongShortPairFinancialProductLibraryAbi() { return require(artifactPaths["CappedYieldDollarLongShortPairFinancialProductLibrary"]).abi; }
exports.getCappedYieldDollarLongShortPairFinancialProductLibraryAbi = getCappedYieldDollarLongShortPairFinancialProductLibraryAbi;
function getCoveredCallLongShortPairFinancialProductLibraryAbi() { return require(artifactPaths["CoveredCallLongShortPairFinancialProductLibrary"]).abi; }
exports.getCoveredCallLongShortPairFinancialProductLibraryAbi = getCoveredCallLongShortPairFinancialProductLibraryAbi;
function getFlooredLinearLongShortPairFinancialProductLibraryAbi() { return require(artifactPaths["FlooredLinearLongShortPairFinancialProductLibrary"]).abi; }
exports.getFlooredLinearLongShortPairFinancialProductLibraryAbi = getFlooredLinearLongShortPairFinancialProductLibraryAbi;
function getLinearLongShortPairFinancialProductLibraryAbi() { return require(artifactPaths["LinearLongShortPairFinancialProductLibrary"]).abi; }
exports.getLinearLongShortPairFinancialProductLibraryAbi = getLinearLongShortPairFinancialProductLibraryAbi;
function getLongShortPairFinancialProductLibraryAbi() { return require(artifactPaths["LongShortPairFinancialProductLibrary"]).abi; }
exports.getLongShortPairFinancialProductLibraryAbi = getLongShortPairFinancialProductLibraryAbi;
function getRangeBondLongShortPairFinancialProductLibraryAbi() { return require(artifactPaths["RangeBondLongShortPairFinancialProductLibrary"]).abi; }
exports.getRangeBondLongShortPairFinancialProductLibraryAbi = getRangeBondLongShortPairFinancialProductLibraryAbi;
function getSimpleSuccessTokenLongShortPairFinancialProductLibraryAbi() { return require(artifactPaths["SimpleSuccessTokenLongShortPairFinancialProductLibrary"]).abi; }
exports.getSimpleSuccessTokenLongShortPairFinancialProductLibraryAbi = getSimpleSuccessTokenLongShortPairFinancialProductLibraryAbi;
function getSuccessTokenLongShortPairFinancialProductLibraryAbi() { return require(artifactPaths["SuccessTokenLongShortPairFinancialProductLibrary"]).abi; }
exports.getSuccessTokenLongShortPairFinancialProductLibraryAbi = getSuccessTokenLongShortPairFinancialProductLibraryAbi;
function getExpiringMultiPartyAbi() { return require(artifactPaths["ExpiringMultiParty"]).abi; }
exports.getExpiringMultiPartyAbi = getExpiringMultiPartyAbi;
function getExpiringMultiPartyCreatorAbi() { return require(artifactPaths["ExpiringMultiPartyCreator"]).abi; }
exports.getExpiringMultiPartyCreatorAbi = getExpiringMultiPartyCreatorAbi;
function getExpiringMultiPartyLibAbi() { return require(artifactPaths["ExpiringMultiPartyLib"]).abi; }
exports.getExpiringMultiPartyLibAbi = getExpiringMultiPartyLibAbi;
function getLiquidatableAbi() { return require(artifactPaths["Liquidatable"]).abi; }
exports.getLiquidatableAbi = getLiquidatableAbi;
function getPricelessPositionManagerAbi() { return require(artifactPaths["PricelessPositionManager"]).abi; }
exports.getPricelessPositionManagerAbi = getPricelessPositionManagerAbi;
function getLongShortPairAbi() { return require(artifactPaths["LongShortPair"]).abi; }
exports.getLongShortPairAbi = getLongShortPairAbi;
function getLongShortPairCreatorAbi() { return require(artifactPaths["LongShortPairCreator"]).abi; }
exports.getLongShortPairCreatorAbi = getLongShortPairCreatorAbi;
function getOptimisticDistributorAbi() { return require(artifactPaths["OptimisticDistributor"]).abi; }
exports.getOptimisticDistributorAbi = getOptimisticDistributorAbi;
function getOptimisticRewarderAbi() { return require(artifactPaths["OptimisticRewarder"]).abi; }
exports.getOptimisticRewarderAbi = getOptimisticRewarderAbi;
function getOptimisticRewarderNoTokenAbi() { return require(artifactPaths["OptimisticRewarderNoToken"]).abi; }
exports.getOptimisticRewarderNoTokenAbi = getOptimisticRewarderNoTokenAbi;
function getOptimisticRewarderBaseAbi() { return require(artifactPaths["OptimisticRewarderBase"]).abi; }
exports.getOptimisticRewarderBaseAbi = getOptimisticRewarderBaseAbi;
function getOptimisticRewarderCreatorAbi() { return require(artifactPaths["OptimisticRewarderCreator"]).abi; }
exports.getOptimisticRewarderCreatorAbi = getOptimisticRewarderCreatorAbi;
function getOptimisticRewarderTokenAbi() { return require(artifactPaths["OptimisticRewarderToken"]).abi; }
exports.getOptimisticRewarderTokenAbi = getOptimisticRewarderTokenAbi;
function getOptimisticStakerAbi() { return require(artifactPaths["OptimisticStaker"]).abi; }
exports.getOptimisticStakerAbi = getOptimisticStakerAbi;
function getOptimisticRewarderNoTokenTestAbi() { return require(artifactPaths["OptimisticRewarderNoTokenTest"]).abi; }
exports.getOptimisticRewarderNoTokenTestAbi = getOptimisticRewarderNoTokenTestAbi;
function getOptimisticRewarderTestAbi() { return require(artifactPaths["OptimisticRewarderTest"]).abi; }
exports.getOptimisticRewarderTestAbi = getOptimisticRewarderTestAbi;
function getConfigStoreAbi() { return require(artifactPaths["ConfigStore"]).abi; }
exports.getConfigStoreAbi = getConfigStoreAbi;
function getConfigStoreInterfaceAbi() { return require(artifactPaths["ConfigStoreInterface"]).abi; }
exports.getConfigStoreInterfaceAbi = getConfigStoreInterfaceAbi;
function getPerpetualAbi() { return require(artifactPaths["Perpetual"]).abi; }
exports.getPerpetualAbi = getPerpetualAbi;
function getPerpetualCreatorAbi() { return require(artifactPaths["PerpetualCreator"]).abi; }
exports.getPerpetualCreatorAbi = getPerpetualCreatorAbi;
function getPerpetualLibAbi() { return require(artifactPaths["PerpetualLib"]).abi; }
exports.getPerpetualLibAbi = getPerpetualLibAbi;
function getPerpetualLiquidatableAbi() { return require(artifactPaths["PerpetualLiquidatable"]).abi; }
exports.getPerpetualLiquidatableAbi = getPerpetualLiquidatableAbi;
function getPerpetualPositionManagerAbi() { return require(artifactPaths["PerpetualPositionManager"]).abi; }
exports.getPerpetualPositionManagerAbi = getPerpetualPositionManagerAbi;
function getExpiringMultiPartyMockAbi() { return require(artifactPaths["ExpiringMultiPartyMock"]).abi; }
exports.getExpiringMultiPartyMockAbi = getExpiringMultiPartyMockAbi;
function getFinancialProductLibraryTestAbi() { return require(artifactPaths["FinancialProductLibraryTest"]).abi; }
exports.getFinancialProductLibraryTestAbi = getFinancialProductLibraryTestAbi;
function getFundingRateApplierTestAbi() { return require(artifactPaths["FundingRateApplierTest"]).abi; }
exports.getFundingRateApplierTestAbi = getFundingRateApplierTestAbi;
function getLongShortPairFinancialProjectLibraryTestAbi() { return require(artifactPaths["LongShortPairFinancialProjectLibraryTest"]).abi; }
exports.getLongShortPairFinancialProjectLibraryTestAbi = getLongShortPairFinancialProjectLibraryTestAbi;
function getLongShortPairMockAbi() { return require(artifactPaths["LongShortPairMock"]).abi; }
exports.getLongShortPairMockAbi = getLongShortPairMockAbi;
function getMerkleDistributorAbi() { return require(artifactPaths["MerkleDistributor"]).abi; }
exports.getMerkleDistributorAbi = getMerkleDistributorAbi;
function getMerkleDistributorInterfaceAbi() { return require(artifactPaths["MerkleDistributorInterface"]).abi; }
exports.getMerkleDistributorInterfaceAbi = getMerkleDistributorInterfaceAbi;
function getOptimisticGovernorAbi() { return require(artifactPaths["OptimisticGovernor"]).abi; }
exports.getOptimisticGovernorAbi = getOptimisticGovernorAbi;
function getOptimisticGovernorTestAbi() { return require(artifactPaths["OptimisticGovernorTest"]).abi; }
exports.getOptimisticGovernorTestAbi = getOptimisticGovernorTestAbi;
function getTestAvatarAbi() { return require(artifactPaths["TestAvatar"]).abi; }
exports.getTestAvatarAbi = getTestAvatarAbi;
function getTestModuleProxyFactoryAbi() { return require(artifactPaths["TestModuleProxyFactory"]).abi; }
exports.getTestModuleProxyFactoryAbi = getTestModuleProxyFactoryAbi;
function getOptimisticOracleV2Abi() { return require(artifactPaths["OptimisticOracleV2"]).abi; }
exports.getOptimisticOracleV2Abi = getOptimisticOracleV2Abi;
function getOptimisticRequesterAbi() { return require(artifactPaths["OptimisticRequester"]).abi; }
exports.getOptimisticRequesterAbi = getOptimisticRequesterAbi;
function getOptimisticRequesterV2Abi() { return require(artifactPaths["OptimisticRequesterV2"]).abi; }
exports.getOptimisticRequesterV2Abi = getOptimisticRequesterV2Abi;
function getSkinnyOptimisticOracleV2Abi() { return require(artifactPaths["SkinnyOptimisticOracleV2"]).abi; }
exports.getSkinnyOptimisticOracleV2Abi = getSkinnyOptimisticOracleV2Abi;
function getSkinnyOptimisticOracleV2ProdAbi() { return require(artifactPaths["SkinnyOptimisticOracleV2Prod"]).abi; }
exports.getSkinnyOptimisticOracleV2ProdAbi = getSkinnyOptimisticOracleV2ProdAbi;
function getOptimisticOracleInterfaceAbi() { return require(artifactPaths["OptimisticOracleInterface"]).abi; }
exports.getOptimisticOracleInterfaceAbi = getOptimisticOracleInterfaceAbi;
function getOptimisticOracleV2InterfaceAbi() { return require(artifactPaths["OptimisticOracleV2Interface"]).abi; }
exports.getOptimisticOracleV2InterfaceAbi = getOptimisticOracleV2InterfaceAbi;
function getSkinnyOptimisticOracleInterfaceAbi() { return require(artifactPaths["SkinnyOptimisticOracleInterface"]).abi; }
exports.getSkinnyOptimisticOracleInterfaceAbi = getSkinnyOptimisticOracleInterfaceAbi;
function getSkinnyOptimisticOracleV2InterfaceAbi() { return require(artifactPaths["SkinnyOptimisticOracleV2Interface"]).abi; }
exports.getSkinnyOptimisticOracleV2InterfaceAbi = getSkinnyOptimisticOracleV2InterfaceAbi;
function getOptimisticOracleAbi() { return require(artifactPaths["OptimisticOracle"]).abi; }
exports.getOptimisticOracleAbi = getOptimisticOracleAbi;
function getSkinnyOptimisticOracleAbi() { return require(artifactPaths["SkinnyOptimisticOracle"]).abi; }
exports.getSkinnyOptimisticOracleAbi = getSkinnyOptimisticOracleAbi;
function getSkinnyOptimisticOracleProdAbi() { return require(artifactPaths["SkinnyOptimisticOracleProd"]).abi; }
exports.getSkinnyOptimisticOracleProdAbi = getSkinnyOptimisticOracleProdAbi;
function getOptimisticRequesterTestAbi() { return require(artifactPaths["OptimisticRequesterTest"]).abi; }
exports.getOptimisticRequesterTestAbi = getOptimisticRequesterTestAbi;
function getSkinnyOptimisticRequesterTestAbi() { return require(artifactPaths["SkinnyOptimisticRequesterTest"]).abi; }
exports.getSkinnyOptimisticRequesterTestAbi = getSkinnyOptimisticRequesterTestAbi;
function getSkinnyOptimisticV2RequesterTestAbi() { return require(artifactPaths["SkinnyOptimisticV2RequesterTest"]).abi; }
exports.getSkinnyOptimisticV2RequesterTestAbi = getSkinnyOptimisticV2RequesterTestAbi;
function getOptimisticOracleV3Abi() { return require(artifactPaths["OptimisticOracleV3"]).abi; }
exports.getOptimisticOracleV3Abi = getOptimisticOracleV3Abi;
function getBaseEscalationManagerAbi() { return require(artifactPaths["BaseEscalationManager"]).abi; }
exports.getBaseEscalationManagerAbi = getBaseEscalationManagerAbi;
function getDisputeLimitingEscalationManagerAbi() { return require(artifactPaths["DisputeLimitingEscalationManager"]).abi; }
exports.getDisputeLimitingEscalationManagerAbi = getDisputeLimitingEscalationManagerAbi;
function getFullPolicyEscalationManagerAbi() { return require(artifactPaths["FullPolicyEscalationManager"]).abi; }
exports.getFullPolicyEscalationManagerAbi = getFullPolicyEscalationManagerAbi;
function getOwnerDiscardOracleEscalationManagerAbi() { return require(artifactPaths["OwnerDiscardOracleEscalationManager"]).abi; }
exports.getOwnerDiscardOracleEscalationManagerAbi = getOwnerDiscardOracleEscalationManagerAbi;
function getOwnerSelectOracleEscalationManagerAbi() { return require(artifactPaths["OwnerSelectOracleEscalationManager"]).abi; }
exports.getOwnerSelectOracleEscalationManagerAbi = getOwnerSelectOracleEscalationManagerAbi;
function getSuperbondEscalationManagerAbi() { return require(artifactPaths["SuperbondEscalationManager"]).abi; }
exports.getSuperbondEscalationManagerAbi = getSuperbondEscalationManagerAbi;
function getWhitelistAsserterEscalationManagerAbi() { return require(artifactPaths["WhitelistAsserterEscalationManager"]).abi; }
exports.getWhitelistAsserterEscalationManagerAbi = getWhitelistAsserterEscalationManagerAbi;
function getWhitelistCallerEscalationManagerAbi() { return require(artifactPaths["WhitelistCallerEscalationManager"]).abi; }
exports.getWhitelistCallerEscalationManagerAbi = getWhitelistCallerEscalationManagerAbi;
function getWhitelistDisputerEscalationManagerAbi() { return require(artifactPaths["WhitelistDisputerEscalationManager"]).abi; }
exports.getWhitelistDisputerEscalationManagerAbi = getWhitelistDisputerEscalationManagerAbi;
function getDataAsserterAbi() { return require(artifactPaths["DataAsserter"]).abi; }
exports.getDataAsserterAbi = getDataAsserterAbi;
function getInsuranceAbi() { return require(artifactPaths["Insurance"]).abi; }
exports.getInsuranceAbi = getInsuranceAbi;
function getPredictionMarketAbi() { return require(artifactPaths["PredictionMarket"]).abi; }
exports.getPredictionMarketAbi = getPredictionMarketAbi;
function getAssertingCallerTestAbi() { return require(artifactPaths["AssertingCallerTest"]).abi; }
exports.getAssertingCallerTestAbi = getAssertingCallerTestAbi;
function getOptimisticOracleV3TestAbi() { return require(artifactPaths["OptimisticOracleV3Test"]).abi; }
exports.getOptimisticOracleV3TestAbi = getOptimisticOracleV3TestAbi;
function getEscalationManagerInterfaceAbi() { return require(artifactPaths["EscalationManagerInterface"]).abi; }
exports.getEscalationManagerInterfaceAbi = getEscalationManagerInterfaceAbi;
function getOptimisticOracleV3CallbackRecipientInterfaceAbi() { return require(artifactPaths["OptimisticOracleV3CallbackRecipientInterface"]).abi; }
exports.getOptimisticOracleV3CallbackRecipientInterfaceAbi = getOptimisticOracleV3CallbackRecipientInterfaceAbi;
function getOptimisticOracleV3InterfaceAbi() { return require(artifactPaths["OptimisticOracleV3Interface"]).abi; }
exports.getOptimisticOracleV3InterfaceAbi = getOptimisticOracleV3InterfaceAbi;
function getGovernorChildTunnelAbi() { return require(artifactPaths["GovernorChildTunnel"]).abi; }
exports.getGovernorChildTunnelAbi = getGovernorChildTunnelAbi;
function getGovernorRootTunnelAbi() { return require(artifactPaths["GovernorRootTunnel"]).abi; }
exports.getGovernorRootTunnelAbi = getGovernorRootTunnelAbi;
function getOracleBaseTunnelAbi() { return require(artifactPaths["OracleBaseTunnel"]).abi; }
exports.getOracleBaseTunnelAbi = getOracleBaseTunnelAbi;
function getOracleChildTunnelAbi() { return require(artifactPaths["OracleChildTunnel"]).abi; }
exports.getOracleChildTunnelAbi = getOracleChildTunnelAbi;
function getOracleRootTunnelAbi() { return require(artifactPaths["OracleRootTunnel"]).abi; }
exports.getOracleRootTunnelAbi = getOracleRootTunnelAbi;
function getFxChildMockAbi() { return require(artifactPaths["FxChildMock"]).abi; }
exports.getFxChildMockAbi = getFxChildMockAbi;
function getIStateReceiverAbi() { return require(artifactPaths["IStateReceiver"]).abi; }
exports.getIStateReceiverAbi = getIStateReceiverAbi;
function getFxRootMockAbi() { return require(artifactPaths["FxRootMock"]).abi; }
exports.getFxRootMockAbi = getFxRootMockAbi;
function getIStateSenderAbi() { return require(artifactPaths["IStateSender"]).abi; }
exports.getIStateSenderAbi = getIStateSenderAbi;
function getOracleBaseTunnelMockAbi() { return require(artifactPaths["OracleBaseTunnelMock"]).abi; }
exports.getOracleBaseTunnelMockAbi = getOracleBaseTunnelMockAbi;
function getOracleRootTunnelMockAbi() { return require(artifactPaths["OracleRootTunnelMock"]).abi; }
exports.getOracleRootTunnelMockAbi = getOracleRootTunnelMockAbi;
function getStateSyncMockAbi() { return require(artifactPaths["StateSyncMock"]).abi; }
exports.getStateSyncMockAbi = getStateSyncMockAbi;
function getIFinancialContractAbi() { return require(artifactPaths["IFinancialContract"]).abi; }
exports.getIFinancialContractAbi = getIFinancialContractAbi;
function getReserveCurrencyDisputerAbi() { return require(artifactPaths["ReserveCurrencyDisputer"]).abi; }
exports.getReserveCurrencyDisputerAbi = getReserveCurrencyDisputerAbi;
function getIFinderAbi() { return require(artifactPaths["IFinder"]).abi; }
exports.getIFinderAbi = getIFinderAbi;
function getIStoreAbi() { return require(artifactPaths["IStore"]).abi; }
exports.getIStoreAbi = getIStoreAbi;
function getReserveCurrencyLiquidatorAbi() { return require(artifactPaths["ReserveCurrencyLiquidator"]).abi; }
exports.getReserveCurrencyLiquidatorAbi = getReserveCurrencyLiquidatorAbi;
function getLiquidationWithdrawerAbi() { return require(artifactPaths["LiquidationWithdrawer"]).abi; }
exports.getLiquidationWithdrawerAbi = getLiquidationWithdrawerAbi;
function getPositionSettlerAbi() { return require(artifactPaths["PositionSettler"]).abi; }
exports.getPositionSettlerAbi = getPositionSettlerAbi;
function getTokenRedeemerAbi() { return require(artifactPaths["TokenRedeemer"]).abi; }
exports.getTokenRedeemerAbi = getTokenRedeemerAbi;
function getTokenSenderAbi() { return require(artifactPaths["TokenSender"]).abi; }
exports.getTokenSenderAbi = getTokenSenderAbi;
function getLspUniswapV2BrokerAbi() { return require(artifactPaths["LspUniswapV2Broker"]).abi; }
exports.getLspUniswapV2BrokerAbi = getLspUniswapV2BrokerAbi;
function getFullMathAbi() { return require(artifactPaths["FullMath"]).abi; }
exports.getFullMathAbi = getFullMathAbi;
function getUniswapV2BrokerAbi() { return require(artifactPaths["UniswapV2Broker"]).abi; }
exports.getUniswapV2BrokerAbi = getUniswapV2BrokerAbi;
function getFixedPoint96Abi() { return require(artifactPaths["FixedPoint96"]).abi; }
exports.getFixedPoint96Abi = getFixedPoint96Abi;
function getSqrtPriceMathAbi() { return require(artifactPaths["SqrtPriceMath"]).abi; }
exports.getSqrtPriceMathAbi = getSqrtPriceMathAbi;
function getTickBitmapAbi() { return require(artifactPaths["TickBitmap"]).abi; }
exports.getTickBitmapAbi = getTickBitmapAbi;
function getTickMathAbi() { return require(artifactPaths["TickMath"]).abi; }
exports.getTickMathAbi = getTickMathAbi;
function getUniswapV3BrokerAbi() { return require(artifactPaths["UniswapV3Broker"]).abi; }
exports.getUniswapV3BrokerAbi = getUniswapV3BrokerAbi;
function getSnapshotVotingPowerAbi() { return require(artifactPaths["SnapshotVotingPower"]).abi; }
exports.getSnapshotVotingPowerAbi = getSnapshotVotingPowerAbi;
function getOriginValidatorAbi() { return require(artifactPaths["OriginValidator"]).abi; }
exports.getOriginValidatorAbi = getOriginValidatorAbi;
function getUmip3UpgraderAbi() { return require(artifactPaths["Umip3Upgrader"]).abi; }
exports.getUmip3UpgraderAbi = getUmip3UpgraderAbi;
function getVotingUpgraderAbi() { return require(artifactPaths["VotingUpgrader"]).abi; }
exports.getVotingUpgraderAbi = getVotingUpgraderAbi;
function getVotingUpgraderV2Abi() { return require(artifactPaths["VotingUpgraderV2"]).abi; }
exports.getVotingUpgraderV2Abi = getVotingUpgraderV2Abi;
function getIL2ERC20BridgeAbi() { return require(artifactPaths["IL2ERC20Bridge"]).abi; }
exports.getIL2ERC20BridgeAbi = getIL2ERC20BridgeAbi;
function getOVM_CrossDomainEnabledAbi() { return require(artifactPaths["OVM_CrossDomainEnabled"]).abi; }
exports.getOVM_CrossDomainEnabledAbi = getOVM_CrossDomainEnabledAbi;
function getiOVM_CrossDomainMessengerAbi() { return require(artifactPaths["iOVM_CrossDomainMessenger"]).abi; }
exports.getiOVM_CrossDomainMessengerAbi = getiOVM_CrossDomainMessengerAbi;
function getBridgeAdminAbi() { return require(artifactPaths["BridgeAdmin"]).abi; }
exports.getBridgeAdminAbi = getBridgeAdminAbi;
function getBridgeDepositBoxAbi() { return require(artifactPaths["BridgeDepositBox"]).abi; }
exports.getBridgeDepositBoxAbi = getBridgeDepositBoxAbi;
function getTokenLikeAbi() { return require(artifactPaths["TokenLike"]).abi; }
exports.getTokenLikeAbi = getTokenLikeAbi;
function getWETH9LikeAbi() { return require(artifactPaths["WETH9Like"]).abi; }
exports.getWETH9LikeAbi = getWETH9LikeAbi;
function getBridgePoolAbi() { return require(artifactPaths["BridgePool"]).abi; }
exports.getBridgePoolAbi = getBridgePoolAbi;
function getBridgePoolProdAbi() { return require(artifactPaths["BridgePoolProd"]).abi; }
exports.getBridgePoolProdAbi = getBridgePoolProdAbi;
function getRateModelStoreAbi() { return require(artifactPaths["RateModelStore"]).abi; }
exports.getRateModelStoreAbi = getRateModelStoreAbi;
function getAVM_BridgeDepositBoxAbi() { return require(artifactPaths["AVM_BridgeDepositBox"]).abi; }
exports.getAVM_BridgeDepositBoxAbi = getAVM_BridgeDepositBoxAbi;
function getStandardBridgeLikeAbi() { return require(artifactPaths["StandardBridgeLike"]).abi; }
exports.getStandardBridgeLikeAbi = getStandardBridgeLikeAbi;
function getBridgeAdminInterfaceAbi() { return require(artifactPaths["BridgeAdminInterface"]).abi; }
exports.getBridgeAdminInterfaceAbi = getBridgeAdminInterfaceAbi;
function getBridgePoolInterfaceAbi() { return require(artifactPaths["BridgePoolInterface"]).abi; }
exports.getBridgePoolInterfaceAbi = getBridgePoolInterfaceAbi;
function getMessengerInterfaceAbi() { return require(artifactPaths["MessengerInterface"]).abi; }
exports.getMessengerInterfaceAbi = getMessengerInterfaceAbi;
function getOVM_BridgeDepositBoxAbi() { return require(artifactPaths["OVM_BridgeDepositBox"]).abi; }
exports.getOVM_BridgeDepositBoxAbi = getOVM_BridgeDepositBoxAbi;
function getOVM_OETH_BridgeDepositBoxAbi() { return require(artifactPaths["OVM_OETH_BridgeDepositBox"]).abi; }
exports.getOVM_OETH_BridgeDepositBoxAbi = getOVM_OETH_BridgeDepositBoxAbi;
function getOptimism_MessengerAbi() { return require(artifactPaths["Optimism_Messenger"]).abi; }
exports.getOptimism_MessengerAbi = getOptimism_MessengerAbi;
function getOptimism_WrapperAbi() { return require(artifactPaths["Optimism_Wrapper"]).abi; }
exports.getOptimism_WrapperAbi = getOptimism_WrapperAbi;
function getBridgeDepositBoxMockAbi() { return require(artifactPaths["BridgeDepositBoxMock"]).abi; }
exports.getBridgeDepositBoxMockAbi = getBridgeDepositBoxMockAbi;
function getMessengerMockAbi() { return require(artifactPaths["MessengerMock"]).abi; }
exports.getMessengerMockAbi = getMessengerMockAbi;
function getCrossDomainEnabledBytecode() { return require(artifactPaths["CrossDomainEnabled"]).bytecode; }
exports.getCrossDomainEnabledBytecode = getCrossDomainEnabledBytecode;
function getICrossDomainMessengerBytecode() { return require(artifactPaths["ICrossDomainMessenger"]).bytecode; }
exports.getICrossDomainMessengerBytecode = getICrossDomainMessengerBytecode;
function getLib_PredeployAddressesBytecode() { return require(artifactPaths["Lib_PredeployAddresses"]).bytecode; }
exports.getLib_PredeployAddressesBytecode = getLib_PredeployAddressesBytecode;
function getEnumBytecode() { return require(artifactPaths["Enum"]).bytecode; }
exports.getEnumBytecode = getEnumBytecode;
function getModuleBytecode() { return require(artifactPaths["Module"]).bytecode; }
exports.getModuleBytecode = getModuleBytecode;
function getFactoryFriendlyBytecode() { return require(artifactPaths["FactoryFriendly"]).bytecode; }
exports.getFactoryFriendlyBytecode = getFactoryFriendlyBytecode;
function getModuleProxyFactoryBytecode() { return require(artifactPaths["ModuleProxyFactory"]).bytecode; }
exports.getModuleProxyFactoryBytecode = getModuleProxyFactoryBytecode;
function getBaseGuardBytecode() { return require(artifactPaths["BaseGuard"]).bytecode; }
exports.getBaseGuardBytecode = getBaseGuardBytecode;
function getGuardableBytecode() { return require(artifactPaths["Guardable"]).bytecode; }
exports.getGuardableBytecode = getGuardableBytecode;
function getIAvatarBytecode() { return require(artifactPaths["IAvatar"]).bytecode; }
exports.getIAvatarBytecode = getIAvatarBytecode;
function getIGuardBytecode() { return require(artifactPaths["IGuard"]).bytecode; }
exports.getIGuardBytecode = getIGuardBytecode;
function getExitPayloadReaderBytecode() { return require(artifactPaths["ExitPayloadReader"]).bytecode; }
exports.getExitPayloadReaderBytecode = getExitPayloadReaderBytecode;
function getMerkleBytecode() { return require(artifactPaths["Merkle"]).bytecode; }
exports.getMerkleBytecode = getMerkleBytecode;
function getMerklePatriciaProofBytecode() { return require(artifactPaths["MerklePatriciaProof"]).bytecode; }
exports.getMerklePatriciaProofBytecode = getMerklePatriciaProofBytecode;
function getRLPReaderBytecode() { return require(artifactPaths["RLPReader"]).bytecode; }
exports.getRLPReaderBytecode = getRLPReaderBytecode;
function getFxBaseChildTunnelBytecode() { return require(artifactPaths["FxBaseChildTunnel"]).bytecode; }
exports.getFxBaseChildTunnelBytecode = getFxBaseChildTunnelBytecode;
function getIFxMessageProcessorBytecode() { return require(artifactPaths["IFxMessageProcessor"]).bytecode; }
exports.getIFxMessageProcessorBytecode = getIFxMessageProcessorBytecode;
function getFxBaseRootTunnelBytecode() { return require(artifactPaths["FxBaseRootTunnel"]).bytecode; }
exports.getFxBaseRootTunnelBytecode = getFxBaseRootTunnelBytecode;
function getICheckpointManagerBytecode() { return require(artifactPaths["ICheckpointManager"]).bytecode; }
exports.getICheckpointManagerBytecode = getICheckpointManagerBytecode;
function getIFxStateSenderBytecode() { return require(artifactPaths["IFxStateSender"]).bytecode; }
exports.getIFxStateSenderBytecode = getIFxStateSenderBytecode;
function getOwnableUpgradeableBytecode() { return require(artifactPaths["OwnableUpgradeable"]).bytecode; }
exports.getOwnableUpgradeableBytecode = getOwnableUpgradeableBytecode;
function getInitializableBytecode() { return require(artifactPaths["Initializable"]).bytecode; }
exports.getInitializableBytecode = getInitializableBytecode;
function getAddressUpgradeableBytecode() { return require(artifactPaths["AddressUpgradeable"]).bytecode; }
exports.getAddressUpgradeableBytecode = getAddressUpgradeableBytecode;
function getContextUpgradeableBytecode() { return require(artifactPaths["ContextUpgradeable"]).bytecode; }
exports.getContextUpgradeableBytecode = getContextUpgradeableBytecode;
function getAccessControlBytecode() { return require(artifactPaths["AccessControl"]).bytecode; }
exports.getAccessControlBytecode = getAccessControlBytecode;
function getIAccessControlBytecode() { return require(artifactPaths["IAccessControl"]).bytecode; }
exports.getIAccessControlBytecode = getIAccessControlBytecode;
function getOwnableBytecode() { return require(artifactPaths["Ownable"]).bytecode; }
exports.getOwnableBytecode = getOwnableBytecode;
function getPausableBytecode() { return require(artifactPaths["Pausable"]).bytecode; }
exports.getPausableBytecode = getPausableBytecode;
function getERC20Bytecode() { return require(artifactPaths["ERC20"]).bytecode; }
exports.getERC20Bytecode = getERC20Bytecode;
function getIERC20Bytecode() { return require(artifactPaths["IERC20"]).bytecode; }
exports.getIERC20Bytecode = getIERC20Bytecode;
function getERC20SnapshotBytecode() { return require(artifactPaths["ERC20Snapshot"]).bytecode; }
exports.getERC20SnapshotBytecode = getERC20SnapshotBytecode;
function getIERC20MetadataBytecode() { return require(artifactPaths["IERC20Metadata"]).bytecode; }
exports.getIERC20MetadataBytecode = getIERC20MetadataBytecode;
function getIERC20PermitBytecode() { return require(artifactPaths["IERC20Permit"]).bytecode; }
exports.getIERC20PermitBytecode = getIERC20PermitBytecode;
function getSafeERC20Bytecode() { return require(artifactPaths["SafeERC20"]).bytecode; }
exports.getSafeERC20Bytecode = getSafeERC20Bytecode;
function getERC721Bytecode() { return require(artifactPaths["ERC721"]).bytecode; }
exports.getERC721Bytecode = getERC721Bytecode;
function getIERC721Bytecode() { return require(artifactPaths["IERC721"]).bytecode; }
exports.getIERC721Bytecode = getIERC721Bytecode;
function getIERC721ReceiverBytecode() { return require(artifactPaths["IERC721Receiver"]).bytecode; }
exports.getIERC721ReceiverBytecode = getIERC721ReceiverBytecode;
function getIERC721MetadataBytecode() { return require(artifactPaths["IERC721Metadata"]).bytecode; }
exports.getIERC721MetadataBytecode = getIERC721MetadataBytecode;
function getAddressBytecode() { return require(artifactPaths["Address"]).bytecode; }
exports.getAddressBytecode = getAddressBytecode;
function getArraysBytecode() { return require(artifactPaths["Arrays"]).bytecode; }
exports.getArraysBytecode = getArraysBytecode;
function getContextBytecode() { return require(artifactPaths["Context"]).bytecode; }
exports.getContextBytecode = getContextBytecode;
function getCountersBytecode() { return require(artifactPaths["Counters"]).bytecode; }
exports.getCountersBytecode = getCountersBytecode;
function getStorageSlotBytecode() { return require(artifactPaths["StorageSlot"]).bytecode; }
exports.getStorageSlotBytecode = getStorageSlotBytecode;
function getStringsBytecode() { return require(artifactPaths["Strings"]).bytecode; }
exports.getStringsBytecode = getStringsBytecode;
function getECDSABytecode() { return require(artifactPaths["ECDSA"]).bytecode; }
exports.getECDSABytecode = getECDSABytecode;
function getMerkleProofBytecode() { return require(artifactPaths["MerkleProof"]).bytecode; }
exports.getMerkleProofBytecode = getMerkleProofBytecode;
function getERC165Bytecode() { return require(artifactPaths["ERC165"]).bytecode; }
exports.getERC165Bytecode = getERC165Bytecode;
function getIERC165Bytecode() { return require(artifactPaths["IERC165"]).bytecode; }
exports.getIERC165Bytecode = getIERC165Bytecode;
function getMathBytecode() { return require(artifactPaths["Math"]).bytecode; }
exports.getMathBytecode = getMathBytecode;
function getSafeCastBytecode() { return require(artifactPaths["SafeCast"]).bytecode; }
exports.getSafeCastBytecode = getSafeCastBytecode;
function getSafeMathBytecode() { return require(artifactPaths["SafeMath"]).bytecode; }
exports.getSafeMathBytecode = getSafeMathBytecode;
function getSignedMathBytecode() { return require(artifactPaths["SignedMath"]).bytecode; }
exports.getSignedMathBytecode = getSignedMathBytecode;
function getSignedSafeMathBytecode() { return require(artifactPaths["SignedSafeMath"]).bytecode; }
exports.getSignedSafeMathBytecode = getSignedSafeMathBytecode;
function getBabylonianBytecode() { return require(artifactPaths["Babylonian"]).bytecode; }
exports.getBabylonianBytecode = getBabylonianBytecode;
function getTransferHelperBytecode() { return require(artifactPaths["TransferHelper"]).bytecode; }
exports.getTransferHelperBytecode = getTransferHelperBytecode;
function getIUniswapV2PairBytecode() { return require(artifactPaths["IUniswapV2Pair"]).bytecode; }
exports.getIUniswapV2PairBytecode = getIUniswapV2PairBytecode;
function getIUniswapV2Router01Bytecode() { return require(artifactPaths["IUniswapV2Router01"]).bytecode; }
exports.getIUniswapV2Router01Bytecode = getIUniswapV2Router01Bytecode;
function getIUniswapV3PoolBytecode() { return require(artifactPaths["IUniswapV3Pool"]).bytecode; }
exports.getIUniswapV3PoolBytecode = getIUniswapV3PoolBytecode;
function getIUniswapV3SwapCallbackBytecode() { return require(artifactPaths["IUniswapV3SwapCallback"]).bytecode; }
exports.getIUniswapV3SwapCallbackBytecode = getIUniswapV3SwapCallbackBytecode;
function getIUniswapV3PoolActionsBytecode() { return require(artifactPaths["IUniswapV3PoolActions"]).bytecode; }
exports.getIUniswapV3PoolActionsBytecode = getIUniswapV3PoolActionsBytecode;
function getIUniswapV3PoolDerivedStateBytecode() { return require(artifactPaths["IUniswapV3PoolDerivedState"]).bytecode; }
exports.getIUniswapV3PoolDerivedStateBytecode = getIUniswapV3PoolDerivedStateBytecode;
function getIUniswapV3PoolEventsBytecode() { return require(artifactPaths["IUniswapV3PoolEvents"]).bytecode; }
exports.getIUniswapV3PoolEventsBytecode = getIUniswapV3PoolEventsBytecode;
function getIUniswapV3PoolImmutablesBytecode() { return require(artifactPaths["IUniswapV3PoolImmutables"]).bytecode; }
exports.getIUniswapV3PoolImmutablesBytecode = getIUniswapV3PoolImmutablesBytecode;
function getIUniswapV3PoolOwnerActionsBytecode() { return require(artifactPaths["IUniswapV3PoolOwnerActions"]).bytecode; }
exports.getIUniswapV3PoolOwnerActionsBytecode = getIUniswapV3PoolOwnerActionsBytecode;
function getIUniswapV3PoolStateBytecode() { return require(artifactPaths["IUniswapV3PoolState"]).bytecode; }
exports.getIUniswapV3PoolStateBytecode = getIUniswapV3PoolStateBytecode;
function getBitMathBytecode() { return require(artifactPaths["BitMath"]).bytecode; }
exports.getBitMathBytecode = getBitMathBytecode;
function getLiquidityMathBytecode() { return require(artifactPaths["LiquidityMath"]).bytecode; }
exports.getLiquidityMathBytecode = getLiquidityMathBytecode;
function getLowGasSafeMathBytecode() { return require(artifactPaths["LowGasSafeMath"]).bytecode; }
exports.getLowGasSafeMathBytecode = getLowGasSafeMathBytecode;
function getUnsafeMathBytecode() { return require(artifactPaths["UnsafeMath"]).bytecode; }
exports.getUnsafeMathBytecode = getUnsafeMathBytecode;
function getISwapRouterBytecode() { return require(artifactPaths["ISwapRouter"]).bytecode; }
exports.getISwapRouterBytecode = getISwapRouterBytecode;
function getAddressWhitelistBytecode() { return require(artifactPaths["AddressWhitelist"]).bytecode; }
exports.getAddressWhitelistBytecode = getAddressWhitelistBytecode;
function getAncillaryDataBytecode() { return require(artifactPaths["AncillaryData"]).bytecode; }
exports.getAncillaryDataBytecode = getAncillaryDataBytecode;
function getExpandedERC20Bytecode() { return require(artifactPaths["ExpandedERC20"]).bytecode; }
exports.getExpandedERC20Bytecode = getExpandedERC20Bytecode;
function getFixedPointBytecode() { return require(artifactPaths["FixedPoint"]).bytecode; }
exports.getFixedPointBytecode = getFixedPointBytecode;
function getHasFinderBytecode() { return require(artifactPaths["HasFinder"]).bytecode; }
exports.getHasFinderBytecode = getHasFinderBytecode;
function getLockableBytecode() { return require(artifactPaths["Lockable"]).bytecode; }
exports.getLockableBytecode = getLockableBytecode;
function getMultiCallerBytecode() { return require(artifactPaths["MultiCaller"]).bytecode; }
exports.getMultiCallerBytecode = getMultiCallerBytecode;
function getExclusiveBytecode() { return require(artifactPaths["Exclusive"]).bytecode; }
exports.getExclusiveBytecode = getExclusiveBytecode;
function getMultiRoleBytecode() { return require(artifactPaths["MultiRole"]).bytecode; }
exports.getMultiRoleBytecode = getMultiRoleBytecode;
function getSharedBytecode() { return require(artifactPaths["Shared"]).bytecode; }
exports.getSharedBytecode = getSharedBytecode;
function getMulticall3Bytecode() { return require(artifactPaths["Multicall3"]).bytecode; }
exports.getMulticall3Bytecode = getMulticall3Bytecode;
function getStakeableBytecode() { return require(artifactPaths["Stakeable"]).bytecode; }
exports.getStakeableBytecode = getStakeableBytecode;
function getTestableBytecode() { return require(artifactPaths["Testable"]).bytecode; }
exports.getTestableBytecode = getTestableBytecode;
function getTestnetERC20Bytecode() { return require(artifactPaths["TestnetERC20"]).bytecode; }
exports.getTestnetERC20Bytecode = getTestnetERC20Bytecode;
function getTimerBytecode() { return require(artifactPaths["Timer"]).bytecode; }
exports.getTimerBytecode = getTimerBytecode;
function getWithdrawableBytecode() { return require(artifactPaths["Withdrawable"]).bytecode; }
exports.getWithdrawableBytecode = getWithdrawableBytecode;
function getDSAuthBytecode() { return require(artifactPaths["DSAuth"]).bytecode; }
exports.getDSAuthBytecode = getDSAuthBytecode;
function getDSAuthEventsBytecode() { return require(artifactPaths["DSAuthEvents"]).bytecode; }
exports.getDSAuthEventsBytecode = getDSAuthEventsBytecode;
function getDSAuthorityBytecode() { return require(artifactPaths["DSAuthority"]).bytecode; }
exports.getDSAuthorityBytecode = getDSAuthorityBytecode;
function getDSGuardBytecode() { return require(artifactPaths["DSGuard"]).bytecode; }
exports.getDSGuardBytecode = getDSGuardBytecode;
function getDSGuardEventsBytecode() { return require(artifactPaths["DSGuardEvents"]).bytecode; }
exports.getDSGuardEventsBytecode = getDSGuardEventsBytecode;
function getDSGuardFactoryBytecode() { return require(artifactPaths["DSGuardFactory"]).bytecode; }
exports.getDSGuardFactoryBytecode = getDSGuardFactoryBytecode;
function getDSNoteBytecode() { return require(artifactPaths["DSNote"]).bytecode; }
exports.getDSNoteBytecode = getDSNoteBytecode;
function getDSProxyBytecode() { return require(artifactPaths["DSProxy"]).bytecode; }
exports.getDSProxyBytecode = getDSProxyBytecode;
function getDSProxyCacheBytecode() { return require(artifactPaths["DSProxyCache"]).bytecode; }
exports.getDSProxyCacheBytecode = getDSProxyCacheBytecode;
function getDSProxyFactoryBytecode() { return require(artifactPaths["DSProxyFactory"]).bytecode; }
exports.getDSProxyFactoryBytecode = getDSProxyFactoryBytecode;
function getAddressWhitelistInterfaceBytecode() { return require(artifactPaths["AddressWhitelistInterface"]).bytecode; }
exports.getAddressWhitelistInterfaceBytecode = getAddressWhitelistInterfaceBytecode;
function getBalancerBytecode() { return require(artifactPaths["Balancer"]).bytecode; }
exports.getBalancerBytecode = getBalancerBytecode;
function getExpandedIERC20Bytecode() { return require(artifactPaths["ExpandedIERC20"]).bytecode; }
exports.getExpandedIERC20Bytecode = getExpandedIERC20Bytecode;
function getHarvestVaultInterfaceBytecode() { return require(artifactPaths["HarvestVaultInterface"]).bytecode; }
exports.getHarvestVaultInterfaceBytecode = getHarvestVaultInterfaceBytecode;
function getIERC20StandardBytecode() { return require(artifactPaths["IERC20Standard"]).bytecode; }
exports.getIERC20StandardBytecode = getIERC20StandardBytecode;
function getMulticallBytecode() { return require(artifactPaths["Multicall"]).bytecode; }
exports.getMulticallBytecode = getMulticallBytecode;
function getMulticall2Bytecode() { return require(artifactPaths["Multicall2"]).bytecode; }
exports.getMulticall2Bytecode = getMulticall2Bytecode;
function getTransactionBatcherBytecode() { return require(artifactPaths["TransactionBatcher"]).bytecode; }
exports.getTransactionBatcherBytecode = getTransactionBatcherBytecode;
function getUniswapV2Bytecode() { return require(artifactPaths["UniswapV2"]).bytecode; }
exports.getUniswapV2Bytecode = getUniswapV2Bytecode;
function getUniswapV3Bytecode() { return require(artifactPaths["UniswapV3"]).bytecode; }
exports.getUniswapV3Bytecode = getUniswapV3Bytecode;
function getVaultInterfaceBytecode() { return require(artifactPaths["VaultInterface"]).bytecode; }
exports.getVaultInterfaceBytecode = getVaultInterfaceBytecode;
function getAncillaryDataTestBytecode() { return require(artifactPaths["AncillaryDataTest"]).bytecode; }
exports.getAncillaryDataTestBytecode = getAncillaryDataTestBytecode;
function getBalancerMockBytecode() { return require(artifactPaths["BalancerMock"]).bytecode; }
exports.getBalancerMockBytecode = getBalancerMockBytecode;
function getBasicERC20Bytecode() { return require(artifactPaths["BasicERC20"]).bytecode; }
exports.getBasicERC20Bytecode = getBasicERC20Bytecode;
function getHarvestVaultMockBytecode() { return require(artifactPaths["HarvestVaultMock"]).bytecode; }
exports.getHarvestVaultMockBytecode = getHarvestVaultMockBytecode;
function getMintableERC721Bytecode() { return require(artifactPaths["MintableERC721"]).bytecode; }
exports.getMintableERC721Bytecode = getMintableERC721Bytecode;
function getMultiCallerTestBytecode() { return require(artifactPaths["MultiCallerTest"]).bytecode; }
exports.getMultiCallerTestBytecode = getMultiCallerTestBytecode;
function getMultiRoleTestBytecode() { return require(artifactPaths["MultiRoleTest"]).bytecode; }
exports.getMultiRoleTestBytecode = getMultiRoleTestBytecode;
function getMulticallMockBytecode() { return require(artifactPaths["MulticallMock"]).bytecode; }
exports.getMulticallMockBytecode = getMulticallMockBytecode;
function getPerpetualMockBytecode() { return require(artifactPaths["PerpetualMock"]).bytecode; }
exports.getPerpetualMockBytecode = getPerpetualMockBytecode;
function getReentrancyAttackBytecode() { return require(artifactPaths["ReentrancyAttack"]).bytecode; }
exports.getReentrancyAttackBytecode = getReentrancyAttackBytecode;
function getReentrancyCheckerBytecode() { return require(artifactPaths["ReentrancyChecker"]).bytecode; }
exports.getReentrancyCheckerBytecode = getReentrancyCheckerBytecode;
function getReentrancyMockBytecode() { return require(artifactPaths["ReentrancyMock"]).bytecode; }
exports.getReentrancyMockBytecode = getReentrancyMockBytecode;
function getSignedFixedPointTestBytecode() { return require(artifactPaths["SignedFixedPointTest"]).bytecode; }
exports.getSignedFixedPointTestBytecode = getSignedFixedPointTestBytecode;
function getTestableTestBytecode() { return require(artifactPaths["TestableTest"]).bytecode; }
exports.getTestableTestBytecode = getTestableTestBytecode;
function getUniswapV2MockBytecode() { return require(artifactPaths["UniswapV2Mock"]).bytecode; }
exports.getUniswapV2MockBytecode = getUniswapV2MockBytecode;
function getUniswapV3MockBytecode() { return require(artifactPaths["UniswapV3Mock"]).bytecode; }
exports.getUniswapV3MockBytecode = getUniswapV3MockBytecode;
function getUnsignedFixedPointTestBytecode() { return require(artifactPaths["UnsignedFixedPointTest"]).bytecode; }
exports.getUnsignedFixedPointTestBytecode = getUnsignedFixedPointTestBytecode;
function getVaultMockBytecode() { return require(artifactPaths["VaultMock"]).bytecode; }
exports.getVaultMockBytecode = getVaultMockBytecode;
function getWithdrawableTestBytecode() { return require(artifactPaths["WithdrawableTest"]).bytecode; }
exports.getWithdrawableTestBytecode = getWithdrawableTestBytecode;
function getGovernorHubBytecode() { return require(artifactPaths["GovernorHub"]).bytecode; }
exports.getGovernorHubBytecode = getGovernorHubBytecode;
function getGovernorSpokeBytecode() { return require(artifactPaths["GovernorSpoke"]).bytecode; }
exports.getGovernorSpokeBytecode = getGovernorSpokeBytecode;
function getOracleBaseBytecode() { return require(artifactPaths["OracleBase"]).bytecode; }
exports.getOracleBaseBytecode = getOracleBaseBytecode;
function getOracleHubBytecode() { return require(artifactPaths["OracleHub"]).bytecode; }
exports.getOracleHubBytecode = getOracleHubBytecode;
function getOracleSpokeBytecode() { return require(artifactPaths["OracleSpoke"]).bytecode; }
exports.getOracleSpokeBytecode = getOracleSpokeBytecode;
function getSpokeBaseBytecode() { return require(artifactPaths["SpokeBase"]).bytecode; }
exports.getSpokeBaseBytecode = getSpokeBaseBytecode;
function getAdmin_ChildMessengerBytecode() { return require(artifactPaths["Admin_ChildMessenger"]).bytecode; }
exports.getAdmin_ChildMessengerBytecode = getAdmin_ChildMessengerBytecode;
function getArbitrum_ChildMessengerBytecode() { return require(artifactPaths["Arbitrum_ChildMessenger"]).bytecode; }
exports.getArbitrum_ChildMessengerBytecode = getArbitrum_ChildMessengerBytecode;
function getArbitrum_ParentMessengerBytecode() { return require(artifactPaths["Arbitrum_ParentMessenger"]).bytecode; }
exports.getArbitrum_ParentMessengerBytecode = getArbitrum_ParentMessengerBytecode;
function getOptimism_ChildMessengerBytecode() { return require(artifactPaths["Optimism_ChildMessenger"]).bytecode; }
exports.getOptimism_ChildMessengerBytecode = getOptimism_ChildMessengerBytecode;
function getOptimism_ParentMessengerBytecode() { return require(artifactPaths["Optimism_ParentMessenger"]).bytecode; }
exports.getOptimism_ParentMessengerBytecode = getOptimism_ParentMessengerBytecode;
function getParentMessengerBaseBytecode() { return require(artifactPaths["ParentMessengerBase"]).bytecode; }
exports.getParentMessengerBaseBytecode = getParentMessengerBaseBytecode;
function getPolygon_ChildMessengerBytecode() { return require(artifactPaths["Polygon_ChildMessenger"]).bytecode; }
exports.getPolygon_ChildMessengerBytecode = getPolygon_ChildMessengerBytecode;
function getPolygon_ParentMessengerBytecode() { return require(artifactPaths["Polygon_ParentMessenger"]).bytecode; }
exports.getPolygon_ParentMessengerBytecode = getPolygon_ParentMessengerBytecode;
function getArbitrum_BridgeMockBytecode() { return require(artifactPaths["Arbitrum_BridgeMock"]).bytecode; }
exports.getArbitrum_BridgeMockBytecode = getArbitrum_BridgeMockBytecode;
function getArbitrum_InboxMockBytecode() { return require(artifactPaths["Arbitrum_InboxMock"]).bytecode; }
exports.getArbitrum_InboxMockBytecode = getArbitrum_InboxMockBytecode;
function getArbitrum_OutboxMockBytecode() { return require(artifactPaths["Arbitrum_OutboxMock"]).bytecode; }
exports.getArbitrum_OutboxMockBytecode = getArbitrum_OutboxMockBytecode;
function getOVM_L1CrossDomainMessengerMockBytecode() { return require(artifactPaths["OVM_L1CrossDomainMessengerMock"]).bytecode; }
exports.getOVM_L1CrossDomainMessengerMockBytecode = getOVM_L1CrossDomainMessengerMockBytecode;
function getParentMessengerBaseMockBytecode() { return require(artifactPaths["ParentMessengerBaseMock"]).bytecode; }
exports.getParentMessengerBaseMockBytecode = getParentMessengerBaseMockBytecode;
function getPolygon_ChildMessengerMockBytecode() { return require(artifactPaths["Polygon_ChildMessengerMock"]).bytecode; }
exports.getPolygon_ChildMessengerMockBytecode = getPolygon_ChildMessengerMockBytecode;
function getPolygon_ParentMessengerMockBytecode() { return require(artifactPaths["Polygon_ParentMessengerMock"]).bytecode; }
exports.getPolygon_ParentMessengerMockBytecode = getPolygon_ParentMessengerMockBytecode;
function getChildMessengerConsumerInterfaceBytecode() { return require(artifactPaths["ChildMessengerConsumerInterface"]).bytecode; }
exports.getChildMessengerConsumerInterfaceBytecode = getChildMessengerConsumerInterfaceBytecode;
function getChildMessengerInterfaceBytecode() { return require(artifactPaths["ChildMessengerInterface"]).bytecode; }
exports.getChildMessengerInterfaceBytecode = getChildMessengerInterfaceBytecode;
function getParentMessengerConsumerInterfaceBytecode() { return require(artifactPaths["ParentMessengerConsumerInterface"]).bytecode; }
exports.getParentMessengerConsumerInterfaceBytecode = getParentMessengerConsumerInterfaceBytecode;
function getParentMessengerInterfaceBytecode() { return require(artifactPaths["ParentMessengerInterface"]).bytecode; }
exports.getParentMessengerInterfaceBytecode = getParentMessengerInterfaceBytecode;
function getGovernorMessengerMockBytecode() { return require(artifactPaths["GovernorMessengerMock"]).bytecode; }
exports.getGovernorMessengerMockBytecode = getGovernorMessengerMockBytecode;
function getOracleBaseMockBytecode() { return require(artifactPaths["OracleBaseMock"]).bytecode; }
exports.getOracleBaseMockBytecode = getOracleBaseMockBytecode;
function getOracleMessengerMockBytecode() { return require(artifactPaths["OracleMessengerMock"]).bytecode; }
exports.getOracleMessengerMockBytecode = getOracleMessengerMockBytecode;
function getAdminIdentifierLibBytecode() { return require(artifactPaths["AdminIdentifierLib"]).bytecode; }
exports.getAdminIdentifierLibBytecode = getAdminIdentifierLibBytecode;
function getOptimisticOracleConstraintsBytecode() { return require(artifactPaths["OptimisticOracleConstraints"]).bytecode; }
exports.getOptimisticOracleConstraintsBytecode = getOptimisticOracleConstraintsBytecode;
function getOracleInterfacesBytecode() { return require(artifactPaths["OracleInterfaces"]).bytecode; }
exports.getOracleInterfacesBytecode = getOracleInterfacesBytecode;
function getContractCreatorBytecode() { return require(artifactPaths["ContractCreator"]).bytecode; }
exports.getContractCreatorBytecode = getContractCreatorBytecode;
function getDesignatedVotingBytecode() { return require(artifactPaths["DesignatedVoting"]).bytecode; }
exports.getDesignatedVotingBytecode = getDesignatedVotingBytecode;
function getDesignatedVotingFactoryBytecode() { return require(artifactPaths["DesignatedVotingFactory"]).bytecode; }
exports.getDesignatedVotingFactoryBytecode = getDesignatedVotingFactoryBytecode;
function getDesignatedVotingV2Bytecode() { return require(artifactPaths["DesignatedVotingV2"]).bytecode; }
exports.getDesignatedVotingV2Bytecode = getDesignatedVotingV2Bytecode;
function getDesignatedVotingV2FactoryBytecode() { return require(artifactPaths["DesignatedVotingV2Factory"]).bytecode; }
exports.getDesignatedVotingV2FactoryBytecode = getDesignatedVotingV2FactoryBytecode;
function getEmergencyProposerBytecode() { return require(artifactPaths["EmergencyProposer"]).bytecode; }
exports.getEmergencyProposerBytecode = getEmergencyProposerBytecode;
function getFinancialContractsAdminBytecode() { return require(artifactPaths["FinancialContractsAdmin"]).bytecode; }
exports.getFinancialContractsAdminBytecode = getFinancialContractsAdminBytecode;
function getFinderBytecode() { return require(artifactPaths["Finder"]).bytecode; }
exports.getFinderBytecode = getFinderBytecode;
function getFixedSlashSlashingLibraryBytecode() { return require(artifactPaths["FixedSlashSlashingLibrary"]).bytecode; }
exports.getFixedSlashSlashingLibraryBytecode = getFixedSlashSlashingLibraryBytecode;
function getGovernorBytecode() { return require(artifactPaths["Governor"]).bytecode; }
exports.getGovernorBytecode = getGovernorBytecode;
function getGovernorV2Bytecode() { return require(artifactPaths["GovernorV2"]).bytecode; }
exports.getGovernorV2Bytecode = getGovernorV2Bytecode;
function getIdentifierWhitelistBytecode() { return require(artifactPaths["IdentifierWhitelist"]).bytecode; }
exports.getIdentifierWhitelistBytecode = getIdentifierWhitelistBytecode;
function getProposerBytecode() { return require(artifactPaths["Proposer"]).bytecode; }
exports.getProposerBytecode = getProposerBytecode;
function getProposerV2Bytecode() { return require(artifactPaths["ProposerV2"]).bytecode; }
exports.getProposerV2Bytecode = getProposerV2Bytecode;
function getRegistryBytecode() { return require(artifactPaths["Registry"]).bytecode; }
exports.getRegistryBytecode = getRegistryBytecode;
function getResultComputationBytecode() { return require(artifactPaths["ResultComputation"]).bytecode; }
exports.getResultComputationBytecode = getResultComputationBytecode;
function getResultComputationV2Bytecode() { return require(artifactPaths["ResultComputationV2"]).bytecode; }
exports.getResultComputationV2Bytecode = getResultComputationV2Bytecode;
function getStakerBytecode() { return require(artifactPaths["Staker"]).bytecode; }
exports.getStakerBytecode = getStakerBytecode;
function getStoreBytecode() { return require(artifactPaths["Store"]).bytecode; }
exports.getStoreBytecode = getStoreBytecode;
function getTokenMigratorBytecode() { return require(artifactPaths["TokenMigrator"]).bytecode; }
exports.getTokenMigratorBytecode = getTokenMigratorBytecode;
function getVoteTimingBytecode() { return require(artifactPaths["VoteTiming"]).bytecode; }
exports.getVoteTimingBytecode = getVoteTimingBytecode;
function getVotingBytecode() { return require(artifactPaths["Voting"]).bytecode; }
exports.getVotingBytecode = getVotingBytecode;
function getVotingTokenBytecode() { return require(artifactPaths["VotingToken"]).bytecode; }
exports.getVotingTokenBytecode = getVotingTokenBytecode;
function getVotingV2Bytecode() { return require(artifactPaths["VotingV2"]).bytecode; }
exports.getVotingV2Bytecode = getVotingV2Bytecode;
function getEmergencyProposerTestBytecode() { return require(artifactPaths["EmergencyProposerTest"]).bytecode; }
exports.getEmergencyProposerTestBytecode = getEmergencyProposerTestBytecode;
function getGovernorTestBytecode() { return require(artifactPaths["GovernorTest"]).bytecode; }
exports.getGovernorTestBytecode = getGovernorTestBytecode;
function getGovernorV2TestBytecode() { return require(artifactPaths["GovernorV2Test"]).bytecode; }
exports.getGovernorV2TestBytecode = getGovernorV2TestBytecode;
function getMockAdministrateeBytecode() { return require(artifactPaths["MockAdministratee"]).bytecode; }
exports.getMockAdministrateeBytecode = getMockAdministrateeBytecode;
function getPriceIdentifierSlashingLibaryTestBytecode() { return require(artifactPaths["PriceIdentifierSlashingLibaryTest"]).bytecode; }
exports.getPriceIdentifierSlashingLibaryTestBytecode = getPriceIdentifierSlashingLibaryTestBytecode;
function getProposerV2TestBytecode() { return require(artifactPaths["ProposerV2Test"]).bytecode; }
exports.getProposerV2TestBytecode = getProposerV2TestBytecode;
function getPunitiveSlashingLibraryTestBytecode() { return require(artifactPaths["PunitiveSlashingLibraryTest"]).bytecode; }
exports.getPunitiveSlashingLibraryTestBytecode = getPunitiveSlashingLibraryTestBytecode;
function getResultComputationTestBytecode() { return require(artifactPaths["ResultComputationTest"]).bytecode; }
exports.getResultComputationTestBytecode = getResultComputationTestBytecode;
function getStakerControlledTimingBytecode() { return require(artifactPaths["StakerControlledTiming"]).bytecode; }
exports.getStakerControlledTimingBytecode = getStakerControlledTimingBytecode;
function getStakerTestBytecode() { return require(artifactPaths["StakerTest"]).bytecode; }
exports.getStakerTestBytecode = getStakerTestBytecode;
function getVoteTimingTestBytecode() { return require(artifactPaths["VoteTimingTest"]).bytecode; }
exports.getVoteTimingTestBytecode = getVoteTimingTestBytecode;
function getVotingTestBytecode() { return require(artifactPaths["VotingTest"]).bytecode; }
exports.getVotingTestBytecode = getVotingTestBytecode;
function getVotingV2ControllableTimingBytecode() { return require(artifactPaths["VotingV2ControllableTiming"]).bytecode; }
exports.getVotingV2ControllableTimingBytecode = getVotingV2ControllableTimingBytecode;
function getVotingV2TestBytecode() { return require(artifactPaths["VotingV2Test"]).bytecode; }
exports.getVotingV2TestBytecode = getVotingV2TestBytecode;
function getZeroedSlashingSlashingLibraryTestBytecode() { return require(artifactPaths["ZeroedSlashingSlashingLibraryTest"]).bytecode; }
exports.getZeroedSlashingSlashingLibraryTestBytecode = getZeroedSlashingSlashingLibraryTestBytecode;
function getAdministrateeInterfaceBytecode() { return require(artifactPaths["AdministrateeInterface"]).bytecode; }
exports.getAdministrateeInterfaceBytecode = getAdministrateeInterfaceBytecode;
function getFinderInterfaceBytecode() { return require(artifactPaths["FinderInterface"]).bytecode; }
exports.getFinderInterfaceBytecode = getFinderInterfaceBytecode;
function getIdentifierWhitelistInterfaceBytecode() { return require(artifactPaths["IdentifierWhitelistInterface"]).bytecode; }
exports.getIdentifierWhitelistInterfaceBytecode = getIdentifierWhitelistInterfaceBytecode;
function getMinimumVotingAncillaryInterfaceBytecode() { return require(artifactPaths["MinimumVotingAncillaryInterface"]).bytecode; }
exports.getMinimumVotingAncillaryInterfaceBytecode = getMinimumVotingAncillaryInterfaceBytecode;
function getOracleAncillaryInterfaceBytecode() { return require(artifactPaths["OracleAncillaryInterface"]).bytecode; }
exports.getOracleAncillaryInterfaceBytecode = getOracleAncillaryInterfaceBytecode;
function getOracleGovernanceInterfaceBytecode() { return require(artifactPaths["OracleGovernanceInterface"]).bytecode; }
exports.getOracleGovernanceInterfaceBytecode = getOracleGovernanceInterfaceBytecode;
function getOracleInterfaceBytecode() { return require(artifactPaths["OracleInterface"]).bytecode; }
exports.getOracleInterfaceBytecode = getOracleInterfaceBytecode;
function getRegistryInterfaceBytecode() { return require(artifactPaths["RegistryInterface"]).bytecode; }
exports.getRegistryInterfaceBytecode = getRegistryInterfaceBytecode;
function getSlashingLibraryInterfaceBytecode() { return require(artifactPaths["SlashingLibraryInterface"]).bytecode; }
exports.getSlashingLibraryInterfaceBytecode = getSlashingLibraryInterfaceBytecode;
function getStakerInterfaceBytecode() { return require(artifactPaths["StakerInterface"]).bytecode; }
exports.getStakerInterfaceBytecode = getStakerInterfaceBytecode;
function getStoreInterfaceBytecode() { return require(artifactPaths["StoreInterface"]).bytecode; }
exports.getStoreInterfaceBytecode = getStoreInterfaceBytecode;
function getVotingAncillaryInterfaceBytecode() { return require(artifactPaths["VotingAncillaryInterface"]).bytecode; }
exports.getVotingAncillaryInterfaceBytecode = getVotingAncillaryInterfaceBytecode;
function getVotingInterfaceBytecode() { return require(artifactPaths["VotingInterface"]).bytecode; }
exports.getVotingInterfaceBytecode = getVotingInterfaceBytecode;
function getVotingV2InterfaceBytecode() { return require(artifactPaths["VotingV2Interface"]).bytecode; }
exports.getVotingV2InterfaceBytecode = getVotingV2InterfaceBytecode;
function getMockOracleBytecode() { return require(artifactPaths["MockOracle"]).bytecode; }
exports.getMockOracleBytecode = getMockOracleBytecode;
function getMockOracleAncillaryBytecode() { return require(artifactPaths["MockOracleAncillary"]).bytecode; }
exports.getMockOracleAncillaryBytecode = getMockOracleAncillaryBytecode;
function getMockOracleCombinedBytecode() { return require(artifactPaths["MockOracleCombined"]).bytecode; }
exports.getMockOracleCombinedBytecode = getMockOracleCombinedBytecode;
function getMockOracleGovernanceBytecode() { return require(artifactPaths["MockOracleGovernance"]).bytecode; }
exports.getMockOracleGovernanceBytecode = getMockOracleGovernanceBytecode;
function getVotingAncillaryInterfaceTestingBytecode() { return require(artifactPaths["VotingAncillaryInterfaceTesting"]).bytecode; }
exports.getVotingAncillaryInterfaceTestingBytecode = getVotingAncillaryInterfaceTestingBytecode;
function getVotingInterfaceTestingBytecode() { return require(artifactPaths["VotingInterfaceTesting"]).bytecode; }
exports.getVotingInterfaceTestingBytecode = getVotingInterfaceTestingBytecode;
function getAVM_CrossDomainEnabledBytecode() { return require(artifactPaths["AVM_CrossDomainEnabled"]).bytecode; }
exports.getAVM_CrossDomainEnabledBytecode = getAVM_CrossDomainEnabledBytecode;
function getArbitrum_CrossDomainEnabledBytecode() { return require(artifactPaths["Arbitrum_CrossDomainEnabled"]).bytecode; }
exports.getArbitrum_CrossDomainEnabledBytecode = getArbitrum_CrossDomainEnabledBytecode;
function getArbitrum_MessengerBytecode() { return require(artifactPaths["Arbitrum_Messenger"]).bytecode; }
exports.getArbitrum_MessengerBytecode = getArbitrum_MessengerBytecode;
function getArbSysBytecode() { return require(artifactPaths["ArbSys"]).bytecode; }
exports.getArbSysBytecode = getArbSysBytecode;
function getIBridgeBytecode() { return require(artifactPaths["IBridge"]).bytecode; }
exports.getIBridgeBytecode = getIBridgeBytecode;
function getiArbitrum_InboxBytecode() { return require(artifactPaths["iArbitrum_Inbox"]).bytecode; }
exports.getiArbitrum_InboxBytecode = getiArbitrum_InboxBytecode;
function getiArbitrum_OutboxBytecode() { return require(artifactPaths["iArbitrum_Outbox"]).bytecode; }
exports.getiArbitrum_OutboxBytecode = getiArbitrum_OutboxBytecode;
function getBobaAddressManagerBytecode() { return require(artifactPaths["BobaAddressManager"]).bytecode; }
exports.getBobaAddressManagerBytecode = getBobaAddressManagerBytecode;
function getBridgeBytecode() { return require(artifactPaths["Bridge"]).bytecode; }
exports.getBridgeBytecode = getBridgeBytecode;
function getGenericHandlerBytecode() { return require(artifactPaths["GenericHandler"]).bytecode; }
exports.getGenericHandlerBytecode = getGenericHandlerBytecode;
function getIDepositExecuteBytecode() { return require(artifactPaths["IDepositExecute"]).bytecode; }
exports.getIDepositExecuteBytecode = getIDepositExecuteBytecode;
function getIERCHandlerBytecode() { return require(artifactPaths["IERCHandler"]).bytecode; }
exports.getIERCHandlerBytecode = getIERCHandlerBytecode;
function getIGenericHandlerBytecode() { return require(artifactPaths["IGenericHandler"]).bytecode; }
exports.getIGenericHandlerBytecode = getIGenericHandlerBytecode;
function getOptimismL1StandardBridgeBytecode() { return require(artifactPaths["OptimismL1StandardBridge"]).bytecode; }
exports.getOptimismL1StandardBridgeBytecode = getOptimismL1StandardBridgeBytecode;
function getOptimismL2StandardBridgeBytecode() { return require(artifactPaths["OptimismL2StandardBridge"]).bytecode; }
exports.getOptimismL2StandardBridgeBytecode = getOptimismL2StandardBridgeBytecode;
function getOptimismL2StandardERC20Bytecode() { return require(artifactPaths["OptimismL2StandardERC20"]).bytecode; }
exports.getOptimismL2StandardERC20Bytecode = getOptimismL2StandardERC20Bytecode;
function getEmergencyShutdownableBytecode() { return require(artifactPaths["EmergencyShutdownable"]).bytecode; }
exports.getEmergencyShutdownableBytecode = getEmergencyShutdownableBytecode;
function getFeePayerBytecode() { return require(artifactPaths["FeePayer"]).bytecode; }
exports.getFeePayerBytecode = getFeePayerBytecode;
function getFundingRateApplierBytecode() { return require(artifactPaths["FundingRateApplier"]).bytecode; }
exports.getFundingRateApplierBytecode = getFundingRateApplierBytecode;
function getSyntheticTokenBytecode() { return require(artifactPaths["SyntheticToken"]).bytecode; }
exports.getSyntheticTokenBytecode = getSyntheticTokenBytecode;
function getTokenFactoryBytecode() { return require(artifactPaths["TokenFactory"]).bytecode; }
exports.getTokenFactoryBytecode = getTokenFactoryBytecode;
function getWETH9Bytecode() { return require(artifactPaths["WETH9"]).bytecode; }
exports.getWETH9Bytecode = getWETH9Bytecode;
function getCoveredCallFinancialProductLibraryBytecode() { return require(artifactPaths["CoveredCallFinancialProductLibrary"]).bytecode; }
exports.getCoveredCallFinancialProductLibraryBytecode = getCoveredCallFinancialProductLibraryBytecode;
function getExpiringContractInterfaceBytecode() { return require(artifactPaths["ExpiringContractInterface"]).bytecode; }
exports.getExpiringContractInterfaceBytecode = getExpiringContractInterfaceBytecode;
function getFinancialProductLibraryBytecode() { return require(artifactPaths["FinancialProductLibrary"]).bytecode; }
exports.getFinancialProductLibraryBytecode = getFinancialProductLibraryBytecode;
function getKpiOptionsFinancialProductLibraryBytecode() { return require(artifactPaths["KpiOptionsFinancialProductLibrary"]).bytecode; }
exports.getKpiOptionsFinancialProductLibraryBytecode = getKpiOptionsFinancialProductLibraryBytecode;
function getPostExpirationIdentifierTransformationFinancialProductLibraryBytecode() { return require(artifactPaths["PostExpirationIdentifierTransformationFinancialProductLibrary"]).bytecode; }
exports.getPostExpirationIdentifierTransformationFinancialProductLibraryBytecode = getPostExpirationIdentifierTransformationFinancialProductLibraryBytecode;
function getPreExpirationIdentifierTransformationFinancialProductLibraryBytecode() { return require(artifactPaths["PreExpirationIdentifierTransformationFinancialProductLibrary"]).bytecode; }
exports.getPreExpirationIdentifierTransformationFinancialProductLibraryBytecode = getPreExpirationIdentifierTransformationFinancialProductLibraryBytecode;
function getStructuredNoteFinancialProductLibraryBytecode() { return require(artifactPaths["StructuredNoteFinancialProductLibrary"]).bytecode; }
exports.getStructuredNoteFinancialProductLibraryBytecode = getStructuredNoteFinancialProductLibraryBytecode;
function getBinaryOptionLongShortPairFinancialProductLibraryBytecode() { return require(artifactPaths["BinaryOptionLongShortPairFinancialProductLibrary"]).bytecode; }
exports.getBinaryOptionLongShortPairFinancialProductLibraryBytecode = getBinaryOptionLongShortPairFinancialProductLibraryBytecode;
function getCappedYieldDollarLongShortPairFinancialProductLibraryBytecode() { return require(artifactPaths["CappedYieldDollarLongShortPairFinancialProductLibrary"]).bytecode; }
exports.getCappedYieldDollarLongShortPairFinancialProductLibraryBytecode = getCappedYieldDollarLongShortPairFinancialProductLibraryBytecode;
function getCoveredCallLongShortPairFinancialProductLibraryBytecode() { return require(artifactPaths["CoveredCallLongShortPairFinancialProductLibrary"]).bytecode; }
exports.getCoveredCallLongShortPairFinancialProductLibraryBytecode = getCoveredCallLongShortPairFinancialProductLibraryBytecode;
function getFlooredLinearLongShortPairFinancialProductLibraryBytecode() { return require(artifactPaths["FlooredLinearLongShortPairFinancialProductLibrary"]).bytecode; }
exports.getFlooredLinearLongShortPairFinancialProductLibraryBytecode = getFlooredLinearLongShortPairFinancialProductLibraryBytecode;
function getLinearLongShortPairFinancialProductLibraryBytecode() { return require(artifactPaths["LinearLongShortPairFinancialProductLibrary"]).bytecode; }
exports.getLinearLongShortPairFinancialProductLibraryBytecode = getLinearLongShortPairFinancialProductLibraryBytecode;
function getLongShortPairFinancialProductLibraryBytecode() { return require(artifactPaths["LongShortPairFinancialProductLibrary"]).bytecode; }
exports.getLongShortPairFinancialProductLibraryBytecode = getLongShortPairFinancialProductLibraryBytecode;
function getRangeBondLongShortPairFinancialProductLibraryBytecode() { return require(artifactPaths["RangeBondLongShortPairFinancialProductLibrary"]).bytecode; }
exports.getRangeBondLongShortPairFinancialProductLibraryBytecode = getRangeBondLongShortPairFinancialProductLibraryBytecode;
function getSimpleSuccessTokenLongShortPairFinancialProductLibraryBytecode() { return require(artifactPaths["SimpleSuccessTokenLongShortPairFinancialProductLibrary"]).bytecode; }
exports.getSimpleSuccessTokenLongShortPairFinancialProductLibraryBytecode = getSimpleSuccessTokenLongShortPairFinancialProductLibraryBytecode;
function getSuccessTokenLongShortPairFinancialProductLibraryBytecode() { return require(artifactPaths["SuccessTokenLongShortPairFinancialProductLibrary"]).bytecode; }
exports.getSuccessTokenLongShortPairFinancialProductLibraryBytecode = getSuccessTokenLongShortPairFinancialProductLibraryBytecode;
function getExpiringMultiPartyBytecode() { return require(artifactPaths["ExpiringMultiParty"]).bytecode; }
exports.getExpiringMultiPartyBytecode = getExpiringMultiPartyBytecode;
function getExpiringMultiPartyCreatorBytecode() { return require(artifactPaths["ExpiringMultiPartyCreator"]).bytecode; }
exports.getExpiringMultiPartyCreatorBytecode = getExpiringMultiPartyCreatorBytecode;
function getExpiringMultiPartyLibBytecode() { return require(artifactPaths["ExpiringMultiPartyLib"]).bytecode; }
exports.getExpiringMultiPartyLibBytecode = getExpiringMultiPartyLibBytecode;
function getLiquidatableBytecode() { return require(artifactPaths["Liquidatable"]).bytecode; }
exports.getLiquidatableBytecode = getLiquidatableBytecode;
function getPricelessPositionManagerBytecode() { return require(artifactPaths["PricelessPositionManager"]).bytecode; }
exports.getPricelessPositionManagerBytecode = getPricelessPositionManagerBytecode;
function getLongShortPairBytecode() { return require(artifactPaths["LongShortPair"]).bytecode; }
exports.getLongShortPairBytecode = getLongShortPairBytecode;
function getLongShortPairCreatorBytecode() { return require(artifactPaths["LongShortPairCreator"]).bytecode; }
exports.getLongShortPairCreatorBytecode = getLongShortPairCreatorBytecode;
function getOptimisticDistributorBytecode() { return require(artifactPaths["OptimisticDistributor"]).bytecode; }
exports.getOptimisticDistributorBytecode = getOptimisticDistributorBytecode;
function getOptimisticRewarderBytecode() { return require(artifactPaths["OptimisticRewarder"]).bytecode; }
exports.getOptimisticRewarderBytecode = getOptimisticRewarderBytecode;
function getOptimisticRewarderNoTokenBytecode() { return require(artifactPaths["OptimisticRewarderNoToken"]).bytecode; }
exports.getOptimisticRewarderNoTokenBytecode = getOptimisticRewarderNoTokenBytecode;
function getOptimisticRewarderBaseBytecode() { return require(artifactPaths["OptimisticRewarderBase"]).bytecode; }
exports.getOptimisticRewarderBaseBytecode = getOptimisticRewarderBaseBytecode;
function getOptimisticRewarderCreatorBytecode() { return require(artifactPaths["OptimisticRewarderCreator"]).bytecode; }
exports.getOptimisticRewarderCreatorBytecode = getOptimisticRewarderCreatorBytecode;
function getOptimisticRewarderTokenBytecode() { return require(artifactPaths["OptimisticRewarderToken"]).bytecode; }
exports.getOptimisticRewarderTokenBytecode = getOptimisticRewarderTokenBytecode;
function getOptimisticStakerBytecode() { return require(artifactPaths["OptimisticStaker"]).bytecode; }
exports.getOptimisticStakerBytecode = getOptimisticStakerBytecode;
function getOptimisticRewarderNoTokenTestBytecode() { return require(artifactPaths["OptimisticRewarderNoTokenTest"]).bytecode; }
exports.getOptimisticRewarderNoTokenTestBytecode = getOptimisticRewarderNoTokenTestBytecode;
function getOptimisticRewarderTestBytecode() { return require(artifactPaths["OptimisticRewarderTest"]).bytecode; }
exports.getOptimisticRewarderTestBytecode = getOptimisticRewarderTestBytecode;
function getConfigStoreBytecode() { return require(artifactPaths["ConfigStore"]).bytecode; }
exports.getConfigStoreBytecode = getConfigStoreBytecode;
function getConfigStoreInterfaceBytecode() { return require(artifactPaths["ConfigStoreInterface"]).bytecode; }
exports.getConfigStoreInterfaceBytecode = getConfigStoreInterfaceBytecode;
function getPerpetualBytecode() { return require(artifactPaths["Perpetual"]).bytecode; }
exports.getPerpetualBytecode = getPerpetualBytecode;
function getPerpetualCreatorBytecode() { return require(artifactPaths["PerpetualCreator"]).bytecode; }
exports.getPerpetualCreatorBytecode = getPerpetualCreatorBytecode;
function getPerpetualLibBytecode() { return require(artifactPaths["PerpetualLib"]).bytecode; }
exports.getPerpetualLibBytecode = getPerpetualLibBytecode;
function getPerpetualLiquidatableBytecode() { return require(artifactPaths["PerpetualLiquidatable"]).bytecode; }
exports.getPerpetualLiquidatableBytecode = getPerpetualLiquidatableBytecode;
function getPerpetualPositionManagerBytecode() { return require(artifactPaths["PerpetualPositionManager"]).bytecode; }
exports.getPerpetualPositionManagerBytecode = getPerpetualPositionManagerBytecode;
function getExpiringMultiPartyMockBytecode() { return require(artifactPaths["ExpiringMultiPartyMock"]).bytecode; }
exports.getExpiringMultiPartyMockBytecode = getExpiringMultiPartyMockBytecode;
function getFinancialProductLibraryTestBytecode() { return require(artifactPaths["FinancialProductLibraryTest"]).bytecode; }
exports.getFinancialProductLibraryTestBytecode = getFinancialProductLibraryTestBytecode;
function getFundingRateApplierTestBytecode() { return require(artifactPaths["FundingRateApplierTest"]).bytecode; }
exports.getFundingRateApplierTestBytecode = getFundingRateApplierTestBytecode;
function getLongShortPairFinancialProjectLibraryTestBytecode() { return require(artifactPaths["LongShortPairFinancialProjectLibraryTest"]).bytecode; }
exports.getLongShortPairFinancialProjectLibraryTestBytecode = getLongShortPairFinancialProjectLibraryTestBytecode;
function getLongShortPairMockBytecode() { return require(artifactPaths["LongShortPairMock"]).bytecode; }
exports.getLongShortPairMockBytecode = getLongShortPairMockBytecode;
function getMerkleDistributorBytecode() { return require(artifactPaths["MerkleDistributor"]).bytecode; }
exports.getMerkleDistributorBytecode = getMerkleDistributorBytecode;
function getMerkleDistributorInterfaceBytecode() { return require(artifactPaths["MerkleDistributorInterface"]).bytecode; }
exports.getMerkleDistributorInterfaceBytecode = getMerkleDistributorInterfaceBytecode;
function getOptimisticGovernorBytecode() { return require(artifactPaths["OptimisticGovernor"]).bytecode; }
exports.getOptimisticGovernorBytecode = getOptimisticGovernorBytecode;
function getOptimisticGovernorTestBytecode() { return require(artifactPaths["OptimisticGovernorTest"]).bytecode; }
exports.getOptimisticGovernorTestBytecode = getOptimisticGovernorTestBytecode;
function getTestAvatarBytecode() { return require(artifactPaths["TestAvatar"]).bytecode; }
exports.getTestAvatarBytecode = getTestAvatarBytecode;
function getTestModuleProxyFactoryBytecode() { return require(artifactPaths["TestModuleProxyFactory"]).bytecode; }
exports.getTestModuleProxyFactoryBytecode = getTestModuleProxyFactoryBytecode;
function getOptimisticOracleV2Bytecode() { return require(artifactPaths["OptimisticOracleV2"]).bytecode; }
exports.getOptimisticOracleV2Bytecode = getOptimisticOracleV2Bytecode;
function getOptimisticRequesterBytecode() { return require(artifactPaths["OptimisticRequester"]).bytecode; }
exports.getOptimisticRequesterBytecode = getOptimisticRequesterBytecode;
function getOptimisticRequesterV2Bytecode() { return require(artifactPaths["OptimisticRequesterV2"]).bytecode; }
exports.getOptimisticRequesterV2Bytecode = getOptimisticRequesterV2Bytecode;
function getSkinnyOptimisticOracleV2Bytecode() { return require(artifactPaths["SkinnyOptimisticOracleV2"]).bytecode; }
exports.getSkinnyOptimisticOracleV2Bytecode = getSkinnyOptimisticOracleV2Bytecode;
function getSkinnyOptimisticOracleV2ProdBytecode() { return require(artifactPaths["SkinnyOptimisticOracleV2Prod"]).bytecode; }
exports.getSkinnyOptimisticOracleV2ProdBytecode = getSkinnyOptimisticOracleV2ProdBytecode;
function getOptimisticOracleInterfaceBytecode() { return require(artifactPaths["OptimisticOracleInterface"]).bytecode; }
exports.getOptimisticOracleInterfaceBytecode = getOptimisticOracleInterfaceBytecode;
function getOptimisticOracleV2InterfaceBytecode() { return require(artifactPaths["OptimisticOracleV2Interface"]).bytecode; }
exports.getOptimisticOracleV2InterfaceBytecode = getOptimisticOracleV2InterfaceBytecode;
function getSkinnyOptimisticOracleInterfaceBytecode() { return require(artifactPaths["SkinnyOptimisticOracleInterface"]).bytecode; }
exports.getSkinnyOptimisticOracleInterfaceBytecode = getSkinnyOptimisticOracleInterfaceBytecode;
function getSkinnyOptimisticOracleV2InterfaceBytecode() { return require(artifactPaths["SkinnyOptimisticOracleV2Interface"]).bytecode; }
exports.getSkinnyOptimisticOracleV2InterfaceBytecode = getSkinnyOptimisticOracleV2InterfaceBytecode;
function getOptimisticOracleBytecode() { return require(artifactPaths["OptimisticOracle"]).bytecode; }
exports.getOptimisticOracleBytecode = getOptimisticOracleBytecode;
function getSkinnyOptimisticOracleBytecode() { return require(artifactPaths["SkinnyOptimisticOracle"]).bytecode; }
exports.getSkinnyOptimisticOracleBytecode = getSkinnyOptimisticOracleBytecode;
function getSkinnyOptimisticOracleProdBytecode() { return require(artifactPaths["SkinnyOptimisticOracleProd"]).bytecode; }
exports.getSkinnyOptimisticOracleProdBytecode = getSkinnyOptimisticOracleProdBytecode;
function getOptimisticRequesterTestBytecode() { return require(artifactPaths["OptimisticRequesterTest"]).bytecode; }
exports.getOptimisticRequesterTestBytecode = getOptimisticRequesterTestBytecode;
function getSkinnyOptimisticRequesterTestBytecode() { return require(artifactPaths["SkinnyOptimisticRequesterTest"]).bytecode; }
exports.getSkinnyOptimisticRequesterTestBytecode = getSkinnyOptimisticRequesterTestBytecode;
function getSkinnyOptimisticV2RequesterTestBytecode() { return require(artifactPaths["SkinnyOptimisticV2RequesterTest"]).bytecode; }
exports.getSkinnyOptimisticV2RequesterTestBytecode = getSkinnyOptimisticV2RequesterTestBytecode;
function getOptimisticOracleV3Bytecode() { return require(artifactPaths["OptimisticOracleV3"]).bytecode; }
exports.getOptimisticOracleV3Bytecode = getOptimisticOracleV3Bytecode;
function getBaseEscalationManagerBytecode() { return require(artifactPaths["BaseEscalationManager"]).bytecode; }
exports.getBaseEscalationManagerBytecode = getBaseEscalationManagerBytecode;
function getDisputeLimitingEscalationManagerBytecode() { return require(artifactPaths["DisputeLimitingEscalationManager"]).bytecode; }
exports.getDisputeLimitingEscalationManagerBytecode = getDisputeLimitingEscalationManagerBytecode;
function getFullPolicyEscalationManagerBytecode() { return require(artifactPaths["FullPolicyEscalationManager"]).bytecode; }
exports.getFullPolicyEscalationManagerBytecode = getFullPolicyEscalationManagerBytecode;
function getOwnerDiscardOracleEscalationManagerBytecode() { return require(artifactPaths["OwnerDiscardOracleEscalationManager"]).bytecode; }
exports.getOwnerDiscardOracleEscalationManagerBytecode = getOwnerDiscardOracleEscalationManagerBytecode;
function getOwnerSelectOracleEscalationManagerBytecode() { return require(artifactPaths["OwnerSelectOracleEscalationManager"]).bytecode; }
exports.getOwnerSelectOracleEscalationManagerBytecode = getOwnerSelectOracleEscalationManagerBytecode;
function getSuperbondEscalationManagerBytecode() { return require(artifactPaths["SuperbondEscalationManager"]).bytecode; }
exports.getSuperbondEscalationManagerBytecode = getSuperbondEscalationManagerBytecode;
function getWhitelistAsserterEscalationManagerBytecode() { return require(artifactPaths["WhitelistAsserterEscalationManager"]).bytecode; }
exports.getWhitelistAsserterEscalationManagerBytecode = getWhitelistAsserterEscalationManagerBytecode;
function getWhitelistCallerEscalationManagerBytecode() { return require(artifactPaths["WhitelistCallerEscalationManager"]).bytecode; }
exports.getWhitelistCallerEscalationManagerBytecode = getWhitelistCallerEscalationManagerBytecode;
function getWhitelistDisputerEscalationManagerBytecode() { return require(artifactPaths["WhitelistDisputerEscalationManager"]).bytecode; }
exports.getWhitelistDisputerEscalationManagerBytecode = getWhitelistDisputerEscalationManagerBytecode;
function getDataAsserterBytecode() { return require(artifactPaths["DataAsserter"]).bytecode; }
exports.getDataAsserterBytecode = getDataAsserterBytecode;
function getInsuranceBytecode() { return require(artifactPaths["Insurance"]).bytecode; }
exports.getInsuranceBytecode = getInsuranceBytecode;
function getPredictionMarketBytecode() { return require(artifactPaths["PredictionMarket"]).bytecode; }
exports.getPredictionMarketBytecode = getPredictionMarketBytecode;
function getAssertingCallerTestBytecode() { return require(artifactPaths["AssertingCallerTest"]).bytecode; }
exports.getAssertingCallerTestBytecode = getAssertingCallerTestBytecode;
function getOptimisticOracleV3TestBytecode() { return require(artifactPaths["OptimisticOracleV3Test"]).bytecode; }
exports.getOptimisticOracleV3TestBytecode = getOptimisticOracleV3TestBytecode;
function getEscalationManagerInterfaceBytecode() { return require(artifactPaths["EscalationManagerInterface"]).bytecode; }
exports.getEscalationManagerInterfaceBytecode = getEscalationManagerInterfaceBytecode;
function getOptimisticOracleV3CallbackRecipientInterfaceBytecode() { return require(artifactPaths["OptimisticOracleV3CallbackRecipientInterface"]).bytecode; }
exports.getOptimisticOracleV3CallbackRecipientInterfaceBytecode = getOptimisticOracleV3CallbackRecipientInterfaceBytecode;
function getOptimisticOracleV3InterfaceBytecode() { return require(artifactPaths["OptimisticOracleV3Interface"]).bytecode; }
exports.getOptimisticOracleV3InterfaceBytecode = getOptimisticOracleV3InterfaceBytecode;
function getGovernorChildTunnelBytecode() { return require(artifactPaths["GovernorChildTunnel"]).bytecode; }
exports.getGovernorChildTunnelBytecode = getGovernorChildTunnelBytecode;
function getGovernorRootTunnelBytecode() { return require(artifactPaths["GovernorRootTunnel"]).bytecode; }
exports.getGovernorRootTunnelBytecode = getGovernorRootTunnelBytecode;
function getOracleBaseTunnelBytecode() { return require(artifactPaths["OracleBaseTunnel"]).bytecode; }
exports.getOracleBaseTunnelBytecode = getOracleBaseTunnelBytecode;
function getOracleChildTunnelBytecode() { return require(artifactPaths["OracleChildTunnel"]).bytecode; }
exports.getOracleChildTunnelBytecode = getOracleChildTunnelBytecode;
function getOracleRootTunnelBytecode() { return require(artifactPaths["OracleRootTunnel"]).bytecode; }
exports.getOracleRootTunnelBytecode = getOracleRootTunnelBytecode;
function getFxChildMockBytecode() { return require(artifactPaths["FxChildMock"]).bytecode; }
exports.getFxChildMockBytecode = getFxChildMockBytecode;
function getIStateReceiverBytecode() { return require(artifactPaths["IStateReceiver"]).bytecode; }
exports.getIStateReceiverBytecode = getIStateReceiverBytecode;
function getFxRootMockBytecode() { return require(artifactPaths["FxRootMock"]).bytecode; }
exports.getFxRootMockBytecode = getFxRootMockBytecode;
function getIStateSenderBytecode() { return require(artifactPaths["IStateSender"]).bytecode; }
exports.getIStateSenderBytecode = getIStateSenderBytecode;
function getOracleBaseTunnelMockBytecode() { return require(artifactPaths["OracleBaseTunnelMock"]).bytecode; }
exports.getOracleBaseTunnelMockBytecode = getOracleBaseTunnelMockBytecode;
function getOracleRootTunnelMockBytecode() { return require(artifactPaths["OracleRootTunnelMock"]).bytecode; }
exports.getOracleRootTunnelMockBytecode = getOracleRootTunnelMockBytecode;
function getStateSyncMockBytecode() { return require(artifactPaths["StateSyncMock"]).bytecode; }
exports.getStateSyncMockBytecode = getStateSyncMockBytecode;
function getIFinancialContractBytecode() { return require(artifactPaths["IFinancialContract"]).bytecode; }
exports.getIFinancialContractBytecode = getIFinancialContractBytecode;
function getReserveCurrencyDisputerBytecode() { return require(artifactPaths["ReserveCurrencyDisputer"]).bytecode; }
exports.getReserveCurrencyDisputerBytecode = getReserveCurrencyDisputerBytecode;
function getIFinderBytecode() { return require(artifactPaths["IFinder"]).bytecode; }
exports.getIFinderBytecode = getIFinderBytecode;
function getIStoreBytecode() { return require(artifactPaths["IStore"]).bytecode; }
exports.getIStoreBytecode = getIStoreBytecode;
function getReserveCurrencyLiquidatorBytecode() { return require(artifactPaths["ReserveCurrencyLiquidator"]).bytecode; }
exports.getReserveCurrencyLiquidatorBytecode = getReserveCurrencyLiquidatorBytecode;
function getLiquidationWithdrawerBytecode() { return require(artifactPaths["LiquidationWithdrawer"]).bytecode; }
exports.getLiquidationWithdrawerBytecode = getLiquidationWithdrawerBytecode;
function getPositionSettlerBytecode() { return require(artifactPaths["PositionSettler"]).bytecode; }
exports.getPositionSettlerBytecode = getPositionSettlerBytecode;
function getTokenRedeemerBytecode() { return require(artifactPaths["TokenRedeemer"]).bytecode; }
exports.getTokenRedeemerBytecode = getTokenRedeemerBytecode;
function getTokenSenderBytecode() { return require(artifactPaths["TokenSender"]).bytecode; }
exports.getTokenSenderBytecode = getTokenSenderBytecode;
function getLspUniswapV2BrokerBytecode() { return require(artifactPaths["LspUniswapV2Broker"]).bytecode; }
exports.getLspUniswapV2BrokerBytecode = getLspUniswapV2BrokerBytecode;
function getFullMathBytecode() { return require(artifactPaths["FullMath"]).bytecode; }
exports.getFullMathBytecode = getFullMathBytecode;
function getUniswapV2BrokerBytecode() { return require(artifactPaths["UniswapV2Broker"]).bytecode; }
exports.getUniswapV2BrokerBytecode = getUniswapV2BrokerBytecode;
function getFixedPoint96Bytecode() { return require(artifactPaths["FixedPoint96"]).bytecode; }
exports.getFixedPoint96Bytecode = getFixedPoint96Bytecode;
function getSqrtPriceMathBytecode() { return require(artifactPaths["SqrtPriceMath"]).bytecode; }
exports.getSqrtPriceMathBytecode = getSqrtPriceMathBytecode;
function getTickBitmapBytecode() { return require(artifactPaths["TickBitmap"]).bytecode; }
exports.getTickBitmapBytecode = getTickBitmapBytecode;
function getTickMathBytecode() { return require(artifactPaths["TickMath"]).bytecode; }
exports.getTickMathBytecode = getTickMathBytecode;
function getUniswapV3BrokerBytecode() { return require(artifactPaths["UniswapV3Broker"]).bytecode; }
exports.getUniswapV3BrokerBytecode = getUniswapV3BrokerBytecode;
function getSnapshotVotingPowerBytecode() { return require(artifactPaths["SnapshotVotingPower"]).bytecode; }
exports.getSnapshotVotingPowerBytecode = getSnapshotVotingPowerBytecode;
function getOriginValidatorBytecode() { return require(artifactPaths["OriginValidator"]).bytecode; }
exports.getOriginValidatorBytecode = getOriginValidatorBytecode;
function getUmip3UpgraderBytecode() { return require(artifactPaths["Umip3Upgrader"]).bytecode; }
exports.getUmip3UpgraderBytecode = getUmip3UpgraderBytecode;
function getVotingUpgraderBytecode() { return require(artifactPaths["VotingUpgrader"]).bytecode; }
exports.getVotingUpgraderBytecode = getVotingUpgraderBytecode;
function getVotingUpgraderV2Bytecode() { return require(artifactPaths["VotingUpgraderV2"]).bytecode; }
exports.getVotingUpgraderV2Bytecode = getVotingUpgraderV2Bytecode;
function getIL2ERC20BridgeBytecode() { return require(artifactPaths["IL2ERC20Bridge"]).bytecode; }
exports.getIL2ERC20BridgeBytecode = getIL2ERC20BridgeBytecode;
function getOVM_CrossDomainEnabledBytecode() { return require(artifactPaths["OVM_CrossDomainEnabled"]).bytecode; }
exports.getOVM_CrossDomainEnabledBytecode = getOVM_CrossDomainEnabledBytecode;
function getiOVM_CrossDomainMessengerBytecode() { return require(artifactPaths["iOVM_CrossDomainMessenger"]).bytecode; }
exports.getiOVM_CrossDomainMessengerBytecode = getiOVM_CrossDomainMessengerBytecode;
function getBridgeAdminBytecode() { return require(artifactPaths["BridgeAdmin"]).bytecode; }
exports.getBridgeAdminBytecode = getBridgeAdminBytecode;
function getBridgeDepositBoxBytecode() { return require(artifactPaths["BridgeDepositBox"]).bytecode; }
exports.getBridgeDepositBoxBytecode = getBridgeDepositBoxBytecode;
function getTokenLikeBytecode() { return require(artifactPaths["TokenLike"]).bytecode; }
exports.getTokenLikeBytecode = getTokenLikeBytecode;
function getWETH9LikeBytecode() { return require(artifactPaths["WETH9Like"]).bytecode; }
exports.getWETH9LikeBytecode = getWETH9LikeBytecode;
function getBridgePoolBytecode() { return require(artifactPaths["BridgePool"]).bytecode; }
exports.getBridgePoolBytecode = getBridgePoolBytecode;
function getBridgePoolProdBytecode() { return require(artifactPaths["BridgePoolProd"]).bytecode; }
exports.getBridgePoolProdBytecode = getBridgePoolProdBytecode;
function getRateModelStoreBytecode() { return require(artifactPaths["RateModelStore"]).bytecode; }
exports.getRateModelStoreBytecode = getRateModelStoreBytecode;
function getAVM_BridgeDepositBoxBytecode() { return require(artifactPaths["AVM_BridgeDepositBox"]).bytecode; }
exports.getAVM_BridgeDepositBoxBytecode = getAVM_BridgeDepositBoxBytecode;
function getStandardBridgeLikeBytecode() { return require(artifactPaths["StandardBridgeLike"]).bytecode; }
exports.getStandardBridgeLikeBytecode = getStandardBridgeLikeBytecode;
function getBridgeAdminInterfaceBytecode() { return require(artifactPaths["BridgeAdminInterface"]).bytecode; }
exports.getBridgeAdminInterfaceBytecode = getBridgeAdminInterfaceBytecode;
function getBridgePoolInterfaceBytecode() { return require(artifactPaths["BridgePoolInterface"]).bytecode; }
exports.getBridgePoolInterfaceBytecode = getBridgePoolInterfaceBytecode;
function getMessengerInterfaceBytecode() { return require(artifactPaths["MessengerInterface"]).bytecode; }
exports.getMessengerInterfaceBytecode = getMessengerInterfaceBytecode;
function getOVM_BridgeDepositBoxBytecode() { return require(artifactPaths["OVM_BridgeDepositBox"]).bytecode; }
exports.getOVM_BridgeDepositBoxBytecode = getOVM_BridgeDepositBoxBytecode;
function getOVM_OETH_BridgeDepositBoxBytecode() { return require(artifactPaths["OVM_OETH_BridgeDepositBox"]).bytecode; }
exports.getOVM_OETH_BridgeDepositBoxBytecode = getOVM_OETH_BridgeDepositBoxBytecode;
function getOptimism_MessengerBytecode() { return require(artifactPaths["Optimism_Messenger"]).bytecode; }
exports.getOptimism_MessengerBytecode = getOptimism_MessengerBytecode;
function getOptimism_WrapperBytecode() { return require(artifactPaths["Optimism_Wrapper"]).bytecode; }
exports.getOptimism_WrapperBytecode = getOptimism_WrapperBytecode;
function getBridgeDepositBoxMockBytecode() { return require(artifactPaths["BridgeDepositBoxMock"]).bytecode; }
exports.getBridgeDepositBoxMockBytecode = getBridgeDepositBoxMockBytecode;
function getMessengerMockBytecode() { return require(artifactPaths["MessengerMock"]).bytecode; }
exports.getMessengerMockBytecode = getMessengerMockBytecode;
function getBridgeAdminAddress(chainId) { return getAddress("BridgeAdmin", chainId); }
exports.getBridgeAdminAddress = getBridgeAdminAddress;
function getWETH_BridgePoolAddress(chainId) { return getAddress("WETH_BridgePool", chainId); }
exports.getWETH_BridgePoolAddress = getWETH_BridgePoolAddress;
function getUSDC_BridgePoolAddress(chainId) { return getAddress("USDC_BridgePool", chainId); }
exports.getUSDC_BridgePoolAddress = getUSDC_BridgePoolAddress;
function getUMA_BridgePoolAddress(chainId) { return getAddress("UMA_BridgePool", chainId); }
exports.getUMA_BridgePoolAddress = getUMA_BridgePoolAddress;
function getBADGER_BridgePoolAddress(chainId) { return getAddress("BADGER_BridgePool", chainId); }
exports.getBADGER_BridgePoolAddress = getBADGER_BridgePoolAddress;
function getWBTC_BridgePoolAddress(chainId) { return getAddress("WBTC_BridgePool", chainId); }
exports.getWBTC_BridgePoolAddress = getWBTC_BridgePoolAddress;
function getArbitrum_MessengerAddress(chainId) { return getAddress("Arbitrum_Messenger", chainId); }
exports.getArbitrum_MessengerAddress = getArbitrum_MessengerAddress;
function getOptimism_MessengerAddress(chainId) { return getAddress("Optimism_Messenger", chainId); }
exports.getOptimism_MessengerAddress = getOptimism_MessengerAddress;
function getOptimism_WrapperAddress(chainId) { return getAddress("Optimism_Wrapper", chainId); }
exports.getOptimism_WrapperAddress = getOptimism_WrapperAddress;
function getRateModelStoreAddress(chainId) { return getAddress("RateModelStore", chainId); }
exports.getRateModelStoreAddress = getRateModelStoreAddress;
function getOVM_OETH_BridgeDepositBoxAddress(chainId) { return getAddress("OVM_OETH_BridgeDepositBox", chainId); }
exports.getOVM_OETH_BridgeDepositBoxAddress = getOVM_OETH_BridgeDepositBoxAddress;
function getAVM_BridgeDepositBoxAddress(chainId) { return getAddress("AVM_BridgeDepositBox", chainId); }
exports.getAVM_BridgeDepositBoxAddress = getAVM_BridgeDepositBoxAddress;
function getFinderAddress(chainId) { return getAddress("Finder", chainId); }
exports.getFinderAddress = getFinderAddress;
function getVotingTokenAddress(chainId) { return getAddress("VotingToken", chainId); }
exports.getVotingTokenAddress = getVotingTokenAddress;
function getIdentifierWhitelistAddress(chainId) { return getAddress("IdentifierWhitelist", chainId); }
exports.getIdentifierWhitelistAddress = getIdentifierWhitelistAddress;
function getVotingAddress(chainId) { return getAddress("Voting", chainId); }
exports.getVotingAddress = getVotingAddress;
function getRegistryAddress(chainId) { return getAddress("Registry", chainId); }
exports.getRegistryAddress = getRegistryAddress;
function getFinancialContractsAdminAddress(chainId) { return getAddress("FinancialContractsAdmin", chainId); }
exports.getFinancialContractsAdminAddress = getFinancialContractsAdminAddress;
function getStoreAddress(chainId) { return getAddress("Store", chainId); }
exports.getStoreAddress = getStoreAddress;
function getGovernorAddress(chainId) { return getAddress("Governor", chainId); }
exports.getGovernorAddress = getGovernorAddress;
function getDesignatedVotingFactoryAddress(chainId) { return getAddress("DesignatedVotingFactory", chainId); }
exports.getDesignatedVotingFactoryAddress = getDesignatedVotingFactoryAddress;
function getDesignatedVotingV2FactoryAddress(chainId) { return getAddress("DesignatedVotingV2Factory", chainId); }
exports.getDesignatedVotingV2FactoryAddress = getDesignatedVotingV2FactoryAddress;
function getWETH9Address(chainId) { return getAddress("WETH9", chainId); }
exports.getWETH9Address = getWETH9Address;
function getTokenFactoryAddress(chainId) { return getAddress("TokenFactory", chainId); }
exports.getTokenFactoryAddress = getTokenFactoryAddress;
function getAddressWhitelistAddress(chainId) { return getAddress("AddressWhitelist", chainId); }
exports.getAddressWhitelistAddress = getAddressWhitelistAddress;
function getExpiringMultiPartyLibAddress(chainId) { return getAddress("ExpiringMultiPartyLib", chainId); }
exports.getExpiringMultiPartyLibAddress = getExpiringMultiPartyLibAddress;
function getExpiringMultiPartyCreatorAddress(chainId) { return getAddress("ExpiringMultiPartyCreator", chainId); }
exports.getExpiringMultiPartyCreatorAddress = getExpiringMultiPartyCreatorAddress;
function getOptimisticOracleAddress(chainId) { return getAddress("OptimisticOracle", chainId); }
exports.getOptimisticOracleAddress = getOptimisticOracleAddress;
function getOptimisticOracleV2Address(chainId) { return getAddress("OptimisticOracleV2", chainId); }
exports.getOptimisticOracleV2Address = getOptimisticOracleV2Address;
function getPerpetualLibAddress(chainId) { return getAddress("PerpetualLib", chainId); }
exports.getPerpetualLibAddress = getPerpetualLibAddress;
function getPerpetualCreatorAddress(chainId) { return getAddress("PerpetualCreator", chainId); }
exports.getPerpetualCreatorAddress = getPerpetualCreatorAddress;
function getDSProxyFactoryAddress(chainId) { return getAddress("DSProxyFactory", chainId); }
exports.getDSProxyFactoryAddress = getDSProxyFactoryAddress;
function getDSGuardFactoryAddress(chainId) { return getAddress("DSGuardFactory", chainId); }
exports.getDSGuardFactoryAddress = getDSGuardFactoryAddress;
function getMockOracleAncillaryAddress(chainId) { return getAddress("MockOracleAncillary", chainId); }
exports.getMockOracleAncillaryAddress = getMockOracleAncillaryAddress;
function getOracleRootTunnelAddress(chainId) { return getAddress("OracleRootTunnel", chainId); }
exports.getOracleRootTunnelAddress = getOracleRootTunnelAddress;
function getGovernorRootTunnelAddress(chainId) { return getAddress("GovernorRootTunnel", chainId); }
exports.getGovernorRootTunnelAddress = getGovernorRootTunnelAddress;
function getLongShortPairCreatorAddress(chainId) { return getAddress("LongShortPairCreator", chainId); }
exports.getLongShortPairCreatorAddress = getLongShortPairCreatorAddress;
function getBinaryOptionLongShortPairFinancialProductLibraryAddress(chainId) { return getAddress("BinaryOptionLongShortPairFinancialProductLibrary", chainId); }
exports.getBinaryOptionLongShortPairFinancialProductLibraryAddress = getBinaryOptionLongShortPairFinancialProductLibraryAddress;
function getCoveredCallLongShortPairFinancialProductLibraryAddress(chainId) { return getAddress("CoveredCallLongShortPairFinancialProductLibrary", chainId); }
exports.getCoveredCallLongShortPairFinancialProductLibraryAddress = getCoveredCallLongShortPairFinancialProductLibraryAddress;
function getLinearLongShortPairFinancialProductLibraryAddress(chainId) { return getAddress("LinearLongShortPairFinancialProductLibrary", chainId); }
exports.getLinearLongShortPairFinancialProductLibraryAddress = getLinearLongShortPairFinancialProductLibraryAddress;
function getRangeBondLongShortPairFinancialProductLibraryAddress(chainId) { return getAddress("RangeBondLongShortPairFinancialProductLibrary", chainId); }
exports.getRangeBondLongShortPairFinancialProductLibraryAddress = getRangeBondLongShortPairFinancialProductLibraryAddress;
function getCappedYieldDollarLongShortPairFinancialProductLibraryAddress(chainId) { return getAddress("CappedYieldDollarLongShortPairFinancialProductLibrary", chainId); }
exports.getCappedYieldDollarLongShortPairFinancialProductLibraryAddress = getCappedYieldDollarLongShortPairFinancialProductLibraryAddress;
function getSimpleSuccessTokenLongShortPairFinancialProductLibraryAddress(chainId) { return getAddress("SimpleSuccessTokenLongShortPairFinancialProductLibrary", chainId); }
exports.getSimpleSuccessTokenLongShortPairFinancialProductLibraryAddress = getSimpleSuccessTokenLongShortPairFinancialProductLibraryAddress;
function getSuccessTokenLongShortPairFinancialProductLibraryAddress(chainId) { return getAddress("SuccessTokenLongShortPairFinancialProductLibrary", chainId); }
exports.getSuccessTokenLongShortPairFinancialProductLibraryAddress = getSuccessTokenLongShortPairFinancialProductLibraryAddress;
function getSkinnyOptimisticOracleAddress(chainId) { return getAddress("SkinnyOptimisticOracle", chainId); }
exports.getSkinnyOptimisticOracleAddress = getSkinnyOptimisticOracleAddress;
function getArbitrum_ParentMessengerAddress(chainId) { return getAddress("Arbitrum_ParentMessenger", chainId); }
exports.getArbitrum_ParentMessengerAddress = getArbitrum_ParentMessengerAddress;
function getOracleHubAddress(chainId) { return getAddress("OracleHub", chainId); }
exports.getOracleHubAddress = getOracleHubAddress;
function getGovernorHubAddress(chainId) { return getAddress("GovernorHub", chainId); }
exports.getGovernorHubAddress = getGovernorHubAddress;
function getMulticall2Address(chainId) { return getAddress("Multicall2", chainId); }
exports.getMulticall2Address = getMulticall2Address;
function getBoba_ParentMessengerAddress(chainId) { return getAddress("Boba_ParentMessenger", chainId); }
exports.getBoba_ParentMessengerAddress = getBoba_ParentMessengerAddress;
function getOptimism_ParentMessengerAddress(chainId) { return getAddress("Optimism_ParentMessenger", chainId); }
exports.getOptimism_ParentMessengerAddress = getOptimism_ParentMessengerAddress;
function getProposerAddress(chainId) { return getAddress("Proposer", chainId); }
exports.getProposerAddress = getProposerAddress;
function getOptimisticOracleV3Address(chainId) { return getAddress("OptimisticOracleV3", chainId); }
exports.getOptimisticOracleV3Address = getOptimisticOracleV3Address;
function getFixedSlashSlashingLibraryAddress(chainId) { return getAddress("FixedSlashSlashingLibrary", chainId); }
exports.getFixedSlashSlashingLibraryAddress = getFixedSlashSlashingLibraryAddress;
function getVotingV2Address(chainId) { return getAddress("VotingV2", chainId); }
exports.getVotingV2Address = getVotingV2Address;
function getGovernorV2Address(chainId) { return getAddress("GovernorV2", chainId); }
exports.getGovernorV2Address = getGovernorV2Address;
function getProposerV2Address(chainId) { return getAddress("ProposerV2", chainId); }
exports.getProposerV2Address = getProposerV2Address;
function getEmergencyProposerAddress(chainId) { return getAddress("EmergencyProposer", chainId); }
exports.getEmergencyProposerAddress = getEmergencyProposerAddress;
function getVotingUpgraderV2Address(chainId) { return getAddress("VotingUpgraderV2", chainId); }
exports.getVotingUpgraderV2Address = getVotingUpgraderV2Address;
function getOptimisticGovernorAddress(chainId) { return getAddress("OptimisticGovernor", chainId); }
exports.getOptimisticGovernorAddress = getOptimisticGovernorAddress;
function getOriginValidatorAddress(chainId) { return getAddress("OriginValidator", chainId); }
exports.getOriginValidatorAddress = getOriginValidatorAddress;
function getOracleSpokeAddress(chainId) { return getAddress("OracleSpoke", chainId); }
exports.getOracleSpokeAddress = getOracleSpokeAddress;
function getGovernorSpokeAddress(chainId) { return getAddress("GovernorSpoke", chainId); }
exports.getGovernorSpokeAddress = getGovernorSpokeAddress;
function getOptimism_ChildMessengerAddress(chainId) { return getAddress("Optimism_ChildMessenger", chainId); }
exports.getOptimism_ChildMessengerAddress = getOptimism_ChildMessengerAddress;
function getAdmin_ChildMessengerAddress(chainId) { return getAddress("Admin_ChildMessenger", chainId); }
exports.getAdmin_ChildMessengerAddress = getAdmin_ChildMessengerAddress;
function getOracleChildTunnelAddress(chainId) { return getAddress("OracleChildTunnel", chainId); }
exports.getOracleChildTunnelAddress = getOracleChildTunnelAddress;
function getGovernorChildTunnelAddress(chainId) { return getAddress("GovernorChildTunnel", chainId); }
exports.getGovernorChildTunnelAddress = getGovernorChildTunnelAddress;
function getMulticall3Address(chainId) { return getAddress("Multicall3", chainId); }
exports.getMulticall3Address = getMulticall3Address;
function getBoba_ChildMessengerAddress(chainId) { return getAddress("Boba_ChildMessenger", chainId); }
exports.getBoba_ChildMessengerAddress = getBoba_ChildMessengerAddress;
function getBridgeAddress(chainId) { return getAddress("Bridge", chainId); }
exports.getBridgeAddress = getBridgeAddress;
function getGenericHandlerAddress(chainId) { return getAddress("GenericHandler", chainId); }
exports.getGenericHandlerAddress = getGenericHandlerAddress;
function getTestnetERC20Address(chainId) { return getAddress("TestnetERC20", chainId); }
exports.getTestnetERC20Address = getTestnetERC20Address;
function getArbitrum_ChildMessengerAddress(chainId) { return getAddress("Arbitrum_ChildMessenger", chainId); }
exports.getArbitrum_ChildMessengerAddress = getArbitrum_ChildMessengerAddress;
function getPolygon_ParentMessengerAddress(chainId) { return getAddress("Polygon_ParentMessenger", chainId); }
exports.getPolygon_ParentMessengerAddress = getPolygon_ParentMessengerAddress;
function getSkinnyOptimisticOracleV2Address(chainId) { return getAddress("SkinnyOptimisticOracleV2", chainId); }
exports.getSkinnyOptimisticOracleV2Address = getSkinnyOptimisticOracleV2Address;
function getPolygon_ChildMessengerAddress(chainId) { return getAddress("Polygon_ChildMessenger", chainId); }
exports.getPolygon_ChildMessengerAddress = getPolygon_ChildMessengerAddress;
function getContractNames() { return Object.keys(artifactPaths); }
exports.getContractNames = getContractNames;
