/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ArbitrumOutboxMock,
  ArbitrumOutboxMockInterface,
} from "../ArbitrumOutboxMock";

const _abi = [
  {
    inputs: [],
    name: "l2ToL1Sender",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b50607680601d6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806380648b0214602d575b600080fd5b6040805130815290519081900360200190f3fea264697066735822122013d23211607b81363da8775e99ad05166a1281d5e461628e62fc9cc04fb3bc0664736f6c63430008090033";

export class ArbitrumOutboxMock__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ArbitrumOutboxMock> {
    return super.deploy(overrides || {}) as Promise<ArbitrumOutboxMock>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ArbitrumOutboxMock {
    return super.attach(address) as ArbitrumOutboxMock;
  }
  connect(signer: Signer): ArbitrumOutboxMock__factory {
    return super.connect(signer) as ArbitrumOutboxMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ArbitrumOutboxMockInterface {
    return new utils.Interface(_abi) as ArbitrumOutboxMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ArbitrumOutboxMock {
    return new Contract(address, _abi, signerOrProvider) as ArbitrumOutboxMock;
  }
}
