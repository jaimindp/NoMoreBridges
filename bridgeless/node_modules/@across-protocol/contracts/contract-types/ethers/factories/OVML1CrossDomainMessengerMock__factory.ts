/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  OVML1CrossDomainMessengerMock,
  OVML1CrossDomainMessengerMockInterface,
} from "../OVML1CrossDomainMessengerMock";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "msgHash",
        type: "bytes32",
      },
    ],
    name: "FailedRelayedMessage",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "msgHash",
        type: "bytes32",
      },
    ],
    name: "RelayedMessage",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "message",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "messageNonce",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "gasLimit",
        type: "uint256",
      },
    ],
    name: "SentMessage",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_target",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "_message",
        type: "bytes",
      },
      {
        internalType: "uint32",
        name: "_gasLimit",
        type: "uint32",
      },
    ],
    name: "sendMessage",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "xDomainMessageSender",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610154806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80633dbb202b1461003b5780636e296e4514610051575b600080fd5b61004f610049366004610064565b50505050565b005b6040805130815290519081900360200190f35b6000806000806060858703121561007a57600080fd5b843573ffffffffffffffffffffffffffffffffffffffff8116811461009e57600080fd5b9350602085013567ffffffffffffffff808211156100bb57600080fd5b818701915087601f8301126100cf57600080fd5b8135818111156100de57600080fd5b8860208285010111156100f057600080fd5b602083019550809450505050604085013563ffffffff8116811461011357600080fd5b93969295509093505056fea264697066735822122018cca4abecb288f169ab2d1be5f9e06f6b26532eaa560fbbee430dcff6348a1464736f6c63430008090033";

export class OVML1CrossDomainMessengerMock__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<OVML1CrossDomainMessengerMock> {
    return super.deploy(
      overrides || {}
    ) as Promise<OVML1CrossDomainMessengerMock>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): OVML1CrossDomainMessengerMock {
    return super.attach(address) as OVML1CrossDomainMessengerMock;
  }
  connect(signer: Signer): OVML1CrossDomainMessengerMock__factory {
    return super.connect(signer) as OVML1CrossDomainMessengerMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OVML1CrossDomainMessengerMockInterface {
    return new utils.Interface(_abi) as OVML1CrossDomainMessengerMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): OVML1CrossDomainMessengerMock {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as OVML1CrossDomainMessengerMock;
  }
}
