/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type DepositsEnabled = ContractEventLog<{
  l2Token: string;
  depositsEnabled: boolean;
  0: string;
  1: boolean;
}>;
export type FundsDeposited = ContractEventLog<{
  chainId: string;
  depositId: string;
  l1Recipient: string;
  l2Sender: string;
  l1Token: string;
  l2Token: string;
  amount: string;
  slowRelayFeePct: string;
  instantRelayFeePct: string;
  quoteTimestamp: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
  6: string;
  7: string;
  8: string;
  9: string;
}>;
export type SetMinimumBridgingDelay = ContractEventLog<{
  newMinimumBridgingDelay: string;
  0: string;
}>;
export type SetXDomainAdmin = ContractEventLog<{
  newAdmin: string;
  0: string;
}>;
export type TokensBridged = ContractEventLog<{
  l2Token: string;
  numberOfTokensBridged: string;
  l1Gas: string;
  caller: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type WhitelistToken = ContractEventLog<{
  l1Token: string;
  l2Token: string;
  lastBridgeTime: string;
  bridgePool: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;

export interface OVMBridgeDepositBox extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): OVMBridgeDepositBox;
  clone(): OVMBridgeDepositBox;
  methods: {
    bridgeTokens(
      l2Token: string,
      l1Gas: number | string | BN
    ): NonPayableTransactionObject<void>;

    canBridge(l2Token: string): NonPayableTransactionObject<boolean>;

    chainId(): NonPayableTransactionObject<string>;

    crossDomainAdmin(): NonPayableTransactionObject<string>;

    deposit(
      l1Recipient: string,
      l2Token: string,
      amount: number | string | BN,
      slowRelayFeePct: number | string | BN,
      instantRelayFeePct: number | string | BN,
      quoteTimestamp: number | string | BN
    ): PayableTransactionObject<void>;

    getCurrentTime(): NonPayableTransactionObject<string>;

    isWhitelistToken(l2Token: string): NonPayableTransactionObject<boolean>;

    l1Weth(): NonPayableTransactionObject<string>;

    messenger(): NonPayableTransactionObject<string>;

    minimumBridgingDelay(): NonPayableTransactionObject<string>;

    numberOfDeposits(): NonPayableTransactionObject<string>;

    setCrossDomainAdmin(
      newCrossDomainAdmin: string
    ): NonPayableTransactionObject<void>;

    setCurrentTime(
      time: number | string | BN
    ): NonPayableTransactionObject<void>;

    setEnableDeposits(
      l2Token: string,
      depositsEnabled: boolean
    ): NonPayableTransactionObject<void>;

    setMinimumBridgingDelay(
      newMinimumBridgingDelay: number | string | BN
    ): NonPayableTransactionObject<void>;

    timerAddress(): NonPayableTransactionObject<string>;

    whitelistToken(
      l1Token: string,
      l2Token: string,
      l1BridgePool: string
    ): NonPayableTransactionObject<void>;

    whitelistedTokens(arg0: string): NonPayableTransactionObject<{
      l1Token: string;
      l1BridgePool: string;
      lastBridgeTime: string;
      depositsEnabled: boolean;
      0: string;
      1: string;
      2: string;
      3: boolean;
    }>;
  };
  events: {
    DepositsEnabled(cb?: Callback<DepositsEnabled>): EventEmitter;
    DepositsEnabled(
      options?: EventOptions,
      cb?: Callback<DepositsEnabled>
    ): EventEmitter;

    FundsDeposited(cb?: Callback<FundsDeposited>): EventEmitter;
    FundsDeposited(
      options?: EventOptions,
      cb?: Callback<FundsDeposited>
    ): EventEmitter;

    SetMinimumBridgingDelay(
      cb?: Callback<SetMinimumBridgingDelay>
    ): EventEmitter;
    SetMinimumBridgingDelay(
      options?: EventOptions,
      cb?: Callback<SetMinimumBridgingDelay>
    ): EventEmitter;

    SetXDomainAdmin(cb?: Callback<SetXDomainAdmin>): EventEmitter;
    SetXDomainAdmin(
      options?: EventOptions,
      cb?: Callback<SetXDomainAdmin>
    ): EventEmitter;

    TokensBridged(cb?: Callback<TokensBridged>): EventEmitter;
    TokensBridged(
      options?: EventOptions,
      cb?: Callback<TokensBridged>
    ): EventEmitter;

    WhitelistToken(cb?: Callback<WhitelistToken>): EventEmitter;
    WhitelistToken(
      options?: EventOptions,
      cb?: Callback<WhitelistToken>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "DepositsEnabled", cb: Callback<DepositsEnabled>): void;
  once(
    event: "DepositsEnabled",
    options: EventOptions,
    cb: Callback<DepositsEnabled>
  ): void;

  once(event: "FundsDeposited", cb: Callback<FundsDeposited>): void;
  once(
    event: "FundsDeposited",
    options: EventOptions,
    cb: Callback<FundsDeposited>
  ): void;

  once(
    event: "SetMinimumBridgingDelay",
    cb: Callback<SetMinimumBridgingDelay>
  ): void;
  once(
    event: "SetMinimumBridgingDelay",
    options: EventOptions,
    cb: Callback<SetMinimumBridgingDelay>
  ): void;

  once(event: "SetXDomainAdmin", cb: Callback<SetXDomainAdmin>): void;
  once(
    event: "SetXDomainAdmin",
    options: EventOptions,
    cb: Callback<SetXDomainAdmin>
  ): void;

  once(event: "TokensBridged", cb: Callback<TokensBridged>): void;
  once(
    event: "TokensBridged",
    options: EventOptions,
    cb: Callback<TokensBridged>
  ): void;

  once(event: "WhitelistToken", cb: Callback<WhitelistToken>): void;
  once(
    event: "WhitelistToken",
    options: EventOptions,
    cb: Callback<WhitelistToken>
  ): void;
}
