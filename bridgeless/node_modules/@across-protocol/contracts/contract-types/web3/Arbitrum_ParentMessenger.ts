/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type MessageReceivedFromChild = ContractEventLog<{
  data: string;
  childMessenger: string;
  targetHub: string;
  0: string;
  1: string;
  2: string;
}>;
export type MessageSentToChild = ContractEventLog<{
  data: string;
  targetSpoke: string;
  l1CallValue: string;
  gasLimit: string;
  gasPrice: string;
  maxSubmissionCost: string;
  refundL2Address: string;
  childMessenger: string;
  sequenceNumber: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
  6: string;
  7: string;
  8: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type SetChildMessenger = ContractEventLog<{
  childMessenger: string;
  0: string;
}>;
export type SetDefaultGasLimit = ContractEventLog<{
  newDefaultGasLimit: string;
  0: string;
}>;
export type SetDefaultGasPrice = ContractEventLog<{
  newDefaultGasPrice: string;
  0: string;
}>;
export type SetDefaultMaxSubmissionCost = ContractEventLog<{
  newMaxSubmissionCost: string;
  0: string;
}>;
export type SetGovernorHub = ContractEventLog<{
  governorHub: string;
  0: string;
}>;
export type SetGovernorSpoke = ContractEventLog<{
  governorSpoke: string;
  0: string;
}>;
export type SetOracleHub = ContractEventLog<{
  oracleHub: string;
  0: string;
}>;
export type SetOracleSpoke = ContractEventLog<{
  oracleSpoke: string;
  0: string;
}>;
export type SetRefundL2Address = ContractEventLog<{
  newRefundL2Address: string;
  0: string;
}>;

export interface ArbitrumParentMessenger extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): ArbitrumParentMessenger;
  clone(): ArbitrumParentMessenger;
  methods: {
    childChainId(): NonPayableTransactionObject<string>;

    childMessenger(): NonPayableTransactionObject<string>;

    defaultGasLimit(): NonPayableTransactionObject<string>;

    defaultGasPrice(): NonPayableTransactionObject<string>;

    defaultMaxSubmissionCost(): NonPayableTransactionObject<string>;

    getL1CallValue(): NonPayableTransactionObject<string>;

    governorHub(): NonPayableTransactionObject<string>;

    governorSpoke(): NonPayableTransactionObject<string>;

    inbox(): NonPayableTransactionObject<string>;

    oracleHub(): NonPayableTransactionObject<string>;

    oracleSpoke(): NonPayableTransactionObject<string>;

    owner(): NonPayableTransactionObject<string>;

    processMessageFromCrossChainChild(
      data: string | number[]
    ): NonPayableTransactionObject<void>;

    refundL2Address(): NonPayableTransactionObject<string>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    sendMessageToChild(
      data: string | number[]
    ): NonPayableTransactionObject<void>;

    setChildMessenger(
      newChildMessenger: string
    ): NonPayableTransactionObject<void>;

    setChildOracleSpoke(
      newOracleSpoke: string
    ): NonPayableTransactionObject<void>;

    setChildParentMessenger(
      newParentMessenger: string
    ): NonPayableTransactionObject<void>;

    setDefaultGasLimit(
      newDefaultGasLimit: number | string | BN
    ): NonPayableTransactionObject<void>;

    setDefaultGasPrice(
      newDefaultGasPrice: number | string | BN
    ): NonPayableTransactionObject<void>;

    setDefaultMaxSubmissionCost(
      newDefaultMaxSubmissionCost: number | string | BN
    ): NonPayableTransactionObject<void>;

    setGovernorHub(newGovernorHub: string): NonPayableTransactionObject<void>;

    setGovernorSpoke(
      newGovernorSpoke: string
    ): NonPayableTransactionObject<void>;

    setOracleHub(newOracleHub: string): NonPayableTransactionObject<void>;

    setOracleSpoke(newOracleSpoke: string): NonPayableTransactionObject<void>;

    setRefundL2Address(
      newRefundl2Address: string
    ): NonPayableTransactionObject<void>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;
  };
  events: {
    MessageReceivedFromChild(
      cb?: Callback<MessageReceivedFromChild>
    ): EventEmitter;
    MessageReceivedFromChild(
      options?: EventOptions,
      cb?: Callback<MessageReceivedFromChild>
    ): EventEmitter;

    MessageSentToChild(cb?: Callback<MessageSentToChild>): EventEmitter;
    MessageSentToChild(
      options?: EventOptions,
      cb?: Callback<MessageSentToChild>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    SetChildMessenger(cb?: Callback<SetChildMessenger>): EventEmitter;
    SetChildMessenger(
      options?: EventOptions,
      cb?: Callback<SetChildMessenger>
    ): EventEmitter;

    SetDefaultGasLimit(cb?: Callback<SetDefaultGasLimit>): EventEmitter;
    SetDefaultGasLimit(
      options?: EventOptions,
      cb?: Callback<SetDefaultGasLimit>
    ): EventEmitter;

    SetDefaultGasPrice(cb?: Callback<SetDefaultGasPrice>): EventEmitter;
    SetDefaultGasPrice(
      options?: EventOptions,
      cb?: Callback<SetDefaultGasPrice>
    ): EventEmitter;

    SetDefaultMaxSubmissionCost(
      cb?: Callback<SetDefaultMaxSubmissionCost>
    ): EventEmitter;
    SetDefaultMaxSubmissionCost(
      options?: EventOptions,
      cb?: Callback<SetDefaultMaxSubmissionCost>
    ): EventEmitter;

    SetGovernorHub(cb?: Callback<SetGovernorHub>): EventEmitter;
    SetGovernorHub(
      options?: EventOptions,
      cb?: Callback<SetGovernorHub>
    ): EventEmitter;

    SetGovernorSpoke(cb?: Callback<SetGovernorSpoke>): EventEmitter;
    SetGovernorSpoke(
      options?: EventOptions,
      cb?: Callback<SetGovernorSpoke>
    ): EventEmitter;

    SetOracleHub(cb?: Callback<SetOracleHub>): EventEmitter;
    SetOracleHub(
      options?: EventOptions,
      cb?: Callback<SetOracleHub>
    ): EventEmitter;

    SetOracleSpoke(cb?: Callback<SetOracleSpoke>): EventEmitter;
    SetOracleSpoke(
      options?: EventOptions,
      cb?: Callback<SetOracleSpoke>
    ): EventEmitter;

    SetRefundL2Address(cb?: Callback<SetRefundL2Address>): EventEmitter;
    SetRefundL2Address(
      options?: EventOptions,
      cb?: Callback<SetRefundL2Address>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(
    event: "MessageReceivedFromChild",
    cb: Callback<MessageReceivedFromChild>
  ): void;
  once(
    event: "MessageReceivedFromChild",
    options: EventOptions,
    cb: Callback<MessageReceivedFromChild>
  ): void;

  once(event: "MessageSentToChild", cb: Callback<MessageSentToChild>): void;
  once(
    event: "MessageSentToChild",
    options: EventOptions,
    cb: Callback<MessageSentToChild>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "SetChildMessenger", cb: Callback<SetChildMessenger>): void;
  once(
    event: "SetChildMessenger",
    options: EventOptions,
    cb: Callback<SetChildMessenger>
  ): void;

  once(event: "SetDefaultGasLimit", cb: Callback<SetDefaultGasLimit>): void;
  once(
    event: "SetDefaultGasLimit",
    options: EventOptions,
    cb: Callback<SetDefaultGasLimit>
  ): void;

  once(event: "SetDefaultGasPrice", cb: Callback<SetDefaultGasPrice>): void;
  once(
    event: "SetDefaultGasPrice",
    options: EventOptions,
    cb: Callback<SetDefaultGasPrice>
  ): void;

  once(
    event: "SetDefaultMaxSubmissionCost",
    cb: Callback<SetDefaultMaxSubmissionCost>
  ): void;
  once(
    event: "SetDefaultMaxSubmissionCost",
    options: EventOptions,
    cb: Callback<SetDefaultMaxSubmissionCost>
  ): void;

  once(event: "SetGovernorHub", cb: Callback<SetGovernorHub>): void;
  once(
    event: "SetGovernorHub",
    options: EventOptions,
    cb: Callback<SetGovernorHub>
  ): void;

  once(event: "SetGovernorSpoke", cb: Callback<SetGovernorSpoke>): void;
  once(
    event: "SetGovernorSpoke",
    options: EventOptions,
    cb: Callback<SetGovernorSpoke>
  ): void;

  once(event: "SetOracleHub", cb: Callback<SetOracleHub>): void;
  once(
    event: "SetOracleHub",
    options: EventOptions,
    cb: Callback<SetOracleHub>
  ): void;

  once(event: "SetOracleSpoke", cb: Callback<SetOracleSpoke>): void;
  once(
    event: "SetOracleSpoke",
    options: EventOptions,
    cb: Callback<SetOracleSpoke>
  ): void;

  once(event: "SetRefundL2Address", cb: Callback<SetRefundL2Address>): void;
  once(
    event: "SetRefundL2Address",
    options: EventOptions,
    cb: Callback<SetRefundL2Address>
  ): void;
}
