/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Approval = ContractEventLog<{
  owner: string;
  spender: string;
  value: string;
  0: string;
  1: string;
  2: string;
}>;
export type BridgePoolAdminTransferred = ContractEventLog<{
  oldAdmin: string;
  newAdmin: string;
  0: string;
  1: string;
}>;
export type DepositRelayed = ContractEventLog<{
  depositHash: string;
  depositData: [string, string, string, string, string, string, string, string];
  relay: [string, string, string, string, string, string, string];
  relayAncillaryDataHash: string;
  0: string;
  1: [string, string, string, string, string, string, string, string];
  2: [string, string, string, string, string, string, string];
  3: string;
}>;
export type LiquidityAdded = ContractEventLog<{
  amount: string;
  lpTokensMinted: string;
  liquidityProvider: string;
  0: string;
  1: string;
  2: string;
}>;
export type LiquidityRemoved = ContractEventLog<{
  amount: string;
  lpTokensBurnt: string;
  liquidityProvider: string;
  0: string;
  1: string;
  2: string;
}>;
export type LpFeeRateSet = ContractEventLog<{
  newLpFeeRatePerSecond: string;
  0: string;
}>;
export type RelayCanceled = ContractEventLog<{
  depositHash: string;
  relayHash: string;
  disputer: string;
  0: string;
  1: string;
  2: string;
}>;
export type RelayDisputed = ContractEventLog<{
  depositHash: string;
  relayHash: string;
  disputer: string;
  0: string;
  1: string;
  2: string;
}>;
export type RelaySettled = ContractEventLog<{
  depositHash: string;
  caller: string;
  relay: [string, string, string, string, string, string, string];
  0: string;
  1: string;
  2: [string, string, string, string, string, string, string];
}>;
export type RelaySpedUp = ContractEventLog<{
  depositHash: string;
  instantRelayer: string;
  relay: [string, string, string, string, string, string, string];
  0: string;
  1: string;
  2: [string, string, string, string, string, string, string];
}>;
export type RelaysEnabledSet = ContractEventLog<{
  newRelaysEnabled: boolean;
  0: boolean;
}>;
export type Transfer = ContractEventLog<{
  from: string;
  to: string;
  value: string;
  0: string;
  1: string;
  2: string;
}>;

export interface BridgePoolProd extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): BridgePoolProd;
  clone(): BridgePoolProd;
  methods: {
    addLiquidity(
      l1TokenAmount: number | string | BN
    ): PayableTransactionObject<void>;

    allowance(
      owner: string,
      spender: string
    ): NonPayableTransactionObject<string>;

    approve(
      spender: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    balanceOf(account: string): NonPayableTransactionObject<string>;

    bonds(): NonPayableTransactionObject<string>;

    bridgeAdmin(): NonPayableTransactionObject<string>;

    changeAdmin(_newAdmin: string): NonPayableTransactionObject<void>;

    decimals(): NonPayableTransactionObject<string>;

    decreaseAllowance(
      spender: string,
      subtractedValue: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    disputeRelay(
      depositData: [
        number | string | BN,
        number | string | BN,
        string,
        string,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ],
      relayData: [
        number | string | BN,
        string,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ]
    ): NonPayableTransactionObject<void>;

    exchangeRateCurrent(): NonPayableTransactionObject<string>;

    getAccumulatedFees(): NonPayableTransactionObject<string>;

    getCurrentTime(): NonPayableTransactionObject<string>;

    getLiquidityUtilization(
      relayedAmount: number | string | BN
    ): NonPayableTransactionObject<{
      utilizationCurrent: string;
      utilizationPostRelay: string;
      0: string;
      1: string;
    }>;

    getRelayAncillaryData(
      depositData: [
        number | string | BN,
        number | string | BN,
        string,
        string,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ],
      relayData: [
        number | string | BN,
        string,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ]
    ): NonPayableTransactionObject<string>;

    identifier(): NonPayableTransactionObject<string>;

    increaseAllowance(
      spender: string,
      addedValue: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    instantRelays(arg0: string | number[]): NonPayableTransactionObject<string>;

    isWethPool(): NonPayableTransactionObject<boolean>;

    l1Token(): NonPayableTransactionObject<string>;

    lastLpFeeUpdate(): NonPayableTransactionObject<string>;

    liquidReserves(): NonPayableTransactionObject<string>;

    liquidityUtilizationCurrent(): NonPayableTransactionObject<string>;

    liquidityUtilizationPostRelay(
      relayedAmount: number | string | BN
    ): NonPayableTransactionObject<string>;

    lpFeeRatePerSecond(): NonPayableTransactionObject<string>;

    multicall(data: (string | number[])[]): PayableTransactionObject<string[]>;

    name(): NonPayableTransactionObject<string>;

    numberOfRelays(): NonPayableTransactionObject<string>;

    optimisticOracle(): NonPayableTransactionObject<string>;

    optimisticOracleLiveness(): NonPayableTransactionObject<string>;

    pendingReserves(): NonPayableTransactionObject<string>;

    proposerBondPct(): NonPayableTransactionObject<string>;

    relayAndSpeedUp(
      depositData: [
        number | string | BN,
        number | string | BN,
        string,
        string,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ],
      realizedLpFeePct: number | string | BN
    ): NonPayableTransactionObject<void>;

    relayDeposit(
      depositData: [
        number | string | BN,
        number | string | BN,
        string,
        string,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ],
      realizedLpFeePct: number | string | BN
    ): NonPayableTransactionObject<void>;

    relays(arg0: string | number[]): NonPayableTransactionObject<string>;

    relaysEnabled(): NonPayableTransactionObject<boolean>;

    removeLiquidity(
      lpTokenAmount: number | string | BN,
      sendEth: boolean
    ): NonPayableTransactionObject<void>;

    setCurrentTime(
      time: number | string | BN
    ): NonPayableTransactionObject<void>;

    setLpFeeRatePerSecond(
      _newLpFeeRatePerSecond: number | string | BN
    ): NonPayableTransactionObject<void>;

    setRelaysEnabled(
      _relaysEnabled: boolean
    ): NonPayableTransactionObject<void>;

    settleRelay(
      depositData: [
        number | string | BN,
        number | string | BN,
        string,
        string,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ],
      relayData: [
        number | string | BN,
        string,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ]
    ): NonPayableTransactionObject<void>;

    speedUpRelay(
      depositData: [
        number | string | BN,
        number | string | BN,
        string,
        string,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ],
      relayData: [
        number | string | BN,
        string,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ]
    ): NonPayableTransactionObject<void>;

    store(): NonPayableTransactionObject<string>;

    symbol(): NonPayableTransactionObject<string>;

    sync(): NonPayableTransactionObject<void>;

    syncUmaEcosystemParams(): NonPayableTransactionObject<void>;

    syncWithBridgeAdminParams(): NonPayableTransactionObject<void>;

    timerAddress(): NonPayableTransactionObject<string>;

    totalSupply(): NonPayableTransactionObject<string>;

    transfer(
      recipient: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    undistributedLpFees(): NonPayableTransactionObject<string>;

    utilizedReserves(): NonPayableTransactionObject<string>;
  };
  events: {
    Approval(cb?: Callback<Approval>): EventEmitter;
    Approval(options?: EventOptions, cb?: Callback<Approval>): EventEmitter;

    BridgePoolAdminTransferred(
      cb?: Callback<BridgePoolAdminTransferred>
    ): EventEmitter;
    BridgePoolAdminTransferred(
      options?: EventOptions,
      cb?: Callback<BridgePoolAdminTransferred>
    ): EventEmitter;

    DepositRelayed(cb?: Callback<DepositRelayed>): EventEmitter;
    DepositRelayed(
      options?: EventOptions,
      cb?: Callback<DepositRelayed>
    ): EventEmitter;

    LiquidityAdded(cb?: Callback<LiquidityAdded>): EventEmitter;
    LiquidityAdded(
      options?: EventOptions,
      cb?: Callback<LiquidityAdded>
    ): EventEmitter;

    LiquidityRemoved(cb?: Callback<LiquidityRemoved>): EventEmitter;
    LiquidityRemoved(
      options?: EventOptions,
      cb?: Callback<LiquidityRemoved>
    ): EventEmitter;

    LpFeeRateSet(cb?: Callback<LpFeeRateSet>): EventEmitter;
    LpFeeRateSet(
      options?: EventOptions,
      cb?: Callback<LpFeeRateSet>
    ): EventEmitter;

    RelayCanceled(cb?: Callback<RelayCanceled>): EventEmitter;
    RelayCanceled(
      options?: EventOptions,
      cb?: Callback<RelayCanceled>
    ): EventEmitter;

    RelayDisputed(cb?: Callback<RelayDisputed>): EventEmitter;
    RelayDisputed(
      options?: EventOptions,
      cb?: Callback<RelayDisputed>
    ): EventEmitter;

    RelaySettled(cb?: Callback<RelaySettled>): EventEmitter;
    RelaySettled(
      options?: EventOptions,
      cb?: Callback<RelaySettled>
    ): EventEmitter;

    RelaySpedUp(cb?: Callback<RelaySpedUp>): EventEmitter;
    RelaySpedUp(
      options?: EventOptions,
      cb?: Callback<RelaySpedUp>
    ): EventEmitter;

    RelaysEnabledSet(cb?: Callback<RelaysEnabledSet>): EventEmitter;
    RelaysEnabledSet(
      options?: EventOptions,
      cb?: Callback<RelaysEnabledSet>
    ): EventEmitter;

    Transfer(cb?: Callback<Transfer>): EventEmitter;
    Transfer(options?: EventOptions, cb?: Callback<Transfer>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Approval", cb: Callback<Approval>): void;
  once(event: "Approval", options: EventOptions, cb: Callback<Approval>): void;

  once(
    event: "BridgePoolAdminTransferred",
    cb: Callback<BridgePoolAdminTransferred>
  ): void;
  once(
    event: "BridgePoolAdminTransferred",
    options: EventOptions,
    cb: Callback<BridgePoolAdminTransferred>
  ): void;

  once(event: "DepositRelayed", cb: Callback<DepositRelayed>): void;
  once(
    event: "DepositRelayed",
    options: EventOptions,
    cb: Callback<DepositRelayed>
  ): void;

  once(event: "LiquidityAdded", cb: Callback<LiquidityAdded>): void;
  once(
    event: "LiquidityAdded",
    options: EventOptions,
    cb: Callback<LiquidityAdded>
  ): void;

  once(event: "LiquidityRemoved", cb: Callback<LiquidityRemoved>): void;
  once(
    event: "LiquidityRemoved",
    options: EventOptions,
    cb: Callback<LiquidityRemoved>
  ): void;

  once(event: "LpFeeRateSet", cb: Callback<LpFeeRateSet>): void;
  once(
    event: "LpFeeRateSet",
    options: EventOptions,
    cb: Callback<LpFeeRateSet>
  ): void;

  once(event: "RelayCanceled", cb: Callback<RelayCanceled>): void;
  once(
    event: "RelayCanceled",
    options: EventOptions,
    cb: Callback<RelayCanceled>
  ): void;

  once(event: "RelayDisputed", cb: Callback<RelayDisputed>): void;
  once(
    event: "RelayDisputed",
    options: EventOptions,
    cb: Callback<RelayDisputed>
  ): void;

  once(event: "RelaySettled", cb: Callback<RelaySettled>): void;
  once(
    event: "RelaySettled",
    options: EventOptions,
    cb: Callback<RelaySettled>
  ): void;

  once(event: "RelaySpedUp", cb: Callback<RelaySpedUp>): void;
  once(
    event: "RelaySpedUp",
    options: EventOptions,
    cb: Callback<RelaySpedUp>
  ): void;

  once(event: "RelaysEnabledSet", cb: Callback<RelaysEnabledSet>): void;
  once(
    event: "RelaysEnabledSet",
    options: EventOptions,
    cb: Callback<RelaysEnabledSet>
  ): void;

  once(event: "Transfer", cb: Callback<Transfer>): void;
  once(event: "Transfer", options: EventOptions, cb: Callback<Transfer>): void;
}
