/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type RelayedMessage = ContractEventLog<{
  target: string;
  gasLimit: string;
  gasPrice: string;
  message: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;

export interface MessengerMock extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): MessengerMock;
  clone(): MessengerMock;
  methods: {
    relayMessage(
      target: string,
      arg1: string,
      arg2: number | string | BN,
      gasLimit: number | string | BN,
      gasPrice: number | string | BN,
      arg5: number | string | BN,
      message: string | number[]
    ): PayableTransactionObject<void>;
  };
  events: {
    RelayedMessage(cb?: Callback<RelayedMessage>): EventEmitter;
    RelayedMessage(
      options?: EventOptions,
      cb?: Callback<RelayedMessage>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "RelayedMessage", cb: Callback<RelayedMessage>): void;
  once(
    event: "RelayedMessage",
    options: EventOptions,
    cb: Callback<RelayedMessage>
  ): void;
}
