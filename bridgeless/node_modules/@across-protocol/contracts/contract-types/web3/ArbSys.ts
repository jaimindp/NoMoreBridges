/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type EthWithdrawal = ContractEventLog<{
  destAddr: string;
  amount: string;
  0: string;
  1: string;
}>;
export type L2ToL1Transaction = ContractEventLog<{
  caller: string;
  destination: string;
  uniqueId: string;
  batchNumber: string;
  indexInBatch: string;
  arbBlockNum: string;
  ethBlockNum: string;
  timestamp: string;
  callvalue: string;
  data: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
  6: string;
  7: string;
  8: string;
  9: string;
}>;

export interface ArbSys extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): ArbSys;
  clone(): ArbSys;
  methods: {
    arbBlockNumber(): NonPayableTransactionObject<string>;

    arbChainID(): NonPayableTransactionObject<string>;

    arbOSVersion(): NonPayableTransactionObject<string>;

    getStorageAt(
      account: string,
      index: number | string | BN
    ): NonPayableTransactionObject<string>;

    getTransactionCount(account: string): NonPayableTransactionObject<string>;

    isTopLevelCall(): NonPayableTransactionObject<boolean>;

    sendTxToL1(
      destination: string,
      calldataForL1: string | number[]
    ): PayableTransactionObject<string>;

    withdrawEth(destination: string): PayableTransactionObject<string>;
  };
  events: {
    EthWithdrawal(cb?: Callback<EthWithdrawal>): EventEmitter;
    EthWithdrawal(
      options?: EventOptions,
      cb?: Callback<EthWithdrawal>
    ): EventEmitter;

    L2ToL1Transaction(cb?: Callback<L2ToL1Transaction>): EventEmitter;
    L2ToL1Transaction(
      options?: EventOptions,
      cb?: Callback<L2ToL1Transaction>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "EthWithdrawal", cb: Callback<EthWithdrawal>): void;
  once(
    event: "EthWithdrawal",
    options: EventOptions,
    cb: Callback<EthWithdrawal>
  ): void;

  once(event: "L2ToL1Transaction", cb: Callback<L2ToL1Transaction>): void;
  once(
    event: "L2ToL1Transaction",
    options: EventOptions,
    cb: Callback<L2ToL1Transaction>
  ): void;
}
