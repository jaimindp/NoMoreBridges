/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export interface GenericHandler extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): GenericHandler;
  clone(): GenericHandler;
  methods: {
    _bridgeAddress(): NonPayableTransactionObject<string>;

    _contractAddressToDepositFunctionSignature(
      arg0: string
    ): NonPayableTransactionObject<string>;

    _contractAddressToExecuteFunctionSignature(
      arg0: string
    ): NonPayableTransactionObject<string>;

    _contractAddressToResourceID(
      arg0: string
    ): NonPayableTransactionObject<string>;

    _contractWhitelist(arg0: string): NonPayableTransactionObject<boolean>;

    _depositRecords(
      arg0: number | string | BN,
      arg1: number | string | BN
    ): NonPayableTransactionObject<{
      _destinationChainID: string;
      _depositer: string;
      _resourceID: string;
      _metaData: string;
      0: string;
      1: string;
      2: string;
      3: string;
    }>;

    _resourceIDToContractAddress(
      arg0: string | number[]
    ): NonPayableTransactionObject<string>;

    deposit(
      resourceID: string | number[],
      destinationChainID: number | string | BN,
      depositNonce: number | string | BN,
      depositer: string,
      arg4: string | number[]
    ): NonPayableTransactionObject<void>;

    executeProposal(
      resourceID: string | number[],
      arg1: string | number[]
    ): NonPayableTransactionObject<void>;

    getDepositRecord(
      depositNonce: number | string | BN,
      destId: number | string | BN
    ): NonPayableTransactionObject<[string, string, string, string]>;

    setResource(
      resourceID: string | number[],
      contractAddress: string,
      depositFunctionSig: string | number[],
      executeFunctionSig: string | number[]
    ): NonPayableTransactionObject<void>;
  };
  events: {
    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };
}
