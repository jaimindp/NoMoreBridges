import winston from "winston";
import { BigNumber, Contract, Event } from "ethers";
import { L1Token, PendingRootBundle, RealizedLpFee } from "../../interfaces";
import { AcrossConfigStoreClient as ConfigStoreClient } from "../AcrossConfigStoreClient";
import { HubPoolClient, HubPoolUpdate, LpFeeRequest } from "../HubPoolClient";
import { EventOverrides } from "./MockEvents";
export declare class MockHubPoolClient extends HubPoolClient {
    rootBundleProposal: PendingRootBundle;
    private realizedLpFeePct;
    private realizedLpFeePctOverride;
    private l1TokensMock;
    private tokenInfoToReturn;
    private spokePoolTokens;
    private eventManager;
    constructor(logger: winston.Logger, hubPool: Contract, configStoreClient: ConfigStoreClient, deploymentBlock?: number, chainId?: number);
    setDefaultRealizedLpFeePct(fee: BigNumber): void;
    clearDefaultRealizedLpFeePct(): void;
    computeRealizedLpFeePct(deposit: LpFeeRequest): Promise<RealizedLpFee>;
    batchComputeRealizedLpFeePct(_deposits: LpFeeRequest[]): Promise<RealizedLpFee[]>;
    setCrossChainContracts(chainId: number, contract: string, blockNumber?: number): void;
    setLatestBlockNumber(blockNumber: number): void;
    addL1Token(l1Token: L1Token): void;
    getL1Tokens(): L1Token[];
    getTokenInfoForDeposit(): L1Token;
    setTokenMapping(l1Token: string, chainId: number, l2Token: string): void;
    getL1TokenForL2TokenAtBlock(l2Token: string, chainId: number, blockNumber: number): string;
    getL2TokenForL1TokenAtBlock(l1Token: string, chainId: number, blockNumber: number): string;
    getTokenInfoForL1Token(l1Token: string): L1Token | undefined;
    setTokenInfoToReturn(tokenInfo: L1Token): void;
    _update(eventNames: string[]): Promise<HubPoolUpdate>;
    readonly eventSignatures: Record<string, string>;
    setPoolRebalanceRoute(destinationChainId: number, l1Token: string, destinationToken: string, overrides?: EventOverrides): Event;
    proposeRootBundle(challengePeriodEndTimestamp: number, poolRebalanceLeafCount: number, bundleEvaluationBlockNumbers: BigNumber[], poolRebalanceRoot?: string, relayerRefundRoot?: string, slowRelayRoot?: string, proposer?: string, overrides?: EventOverrides): Event;
    executeRootBundle(groupIndex: BigNumber, leafId: number, chainId: BigNumber, l1Tokens: string[], bundleLpFees: BigNumber[], netSendAmounts: BigNumber[], runningBalances: BigNumber[], caller?: string, overrides?: EventOverrides): Event;
}
