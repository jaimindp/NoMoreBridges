import { __awaiter, __extends, __generator } from "tslib";
import assert from "assert";
import { ethers } from "ethers";
import { isDefined, utf8ToHex } from "../../utils";
import { AcrossConfigStoreClient, DEFAULT_CONFIG_STORE_VERSION, GLOBAL_CONFIG_STORE_KEYS, } from "../AcrossConfigStoreClient";
import { getEventManager } from "./MockEvents";
var MockConfigStoreClient = /** @class */ (function (_super) {
    __extends(MockConfigStoreClient, _super);
    function MockConfigStoreClient(logger, configStore, eventSearchConfig, configStoreVersion, chainId, mockUpdate, availableChainIdsOverride) {
        if (eventSearchConfig === void 0) { eventSearchConfig = { fromBlock: 0, maxBlockLookBack: 0 }; }
        if (chainId === void 0) { chainId = 1; }
        if (mockUpdate === void 0) { mockUpdate = false; }
        var _this = _super.call(this, logger, configStore, eventSearchConfig, configStoreVersion) || this;
        _this.configStoreVersion = DEFAULT_CONFIG_STORE_VERSION;
        // Event signatures. Not strictly required, but they make generated events more recognisable.
        _this.eventSignatures = {
            OwnershipTransferred: "address,address",
            UpdatedGlobalConfig: "bytes32,string",
            UpdatedTokenConfig: "address,string",
        };
        _this.chainId = chainId;
        _this.eventManager = mockUpdate ? getEventManager(chainId, _this.eventSignatures) : null;
        if (isDefined(_this.eventManager) && _this.eventManager) {
            _this.updateGlobalConfig(GLOBAL_CONFIG_STORE_KEYS.CHAIN_ID_INDICES, JSON.stringify(availableChainIdsOverride), {
                blockNumber: _this.eventManager.blockNumber,
            });
        }
        return _this;
    }
    MockConfigStoreClient.prototype.setAvailableChains = function (chainIds) {
        this.availableChainIdsOverride = chainIds;
    };
    MockConfigStoreClient.prototype.getChainIdIndicesForBlock = function (block) {
        var _a;
        return (_a = this.availableChainIdsOverride) !== null && _a !== void 0 ? _a : _super.prototype.getChainIdIndicesForBlock.call(this, block);
    };
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    MockConfigStoreClient.prototype.getConfigStoreVersionForBlock = function (_blockNumber) {
        return this.configStoreVersion === DEFAULT_CONFIG_STORE_VERSION
            ? _super.prototype.getConfigStoreVersionForBlock.call(this, _blockNumber)
            : this.configStoreVersion;
    };
    MockConfigStoreClient.prototype.setConfigStoreVersion = function (version) {
        this.configStoreVersion = version;
    };
    MockConfigStoreClient.prototype._update = function () {
        return __awaiter(this, void 0, void 0, function () {
            var eventNames, latestBlockSearched, globalConfigUpdateTimes, _events, _i, _a, event_1, idx, block, events;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        // Backwards compatibility for pre-existing MockConfigStoreClient users.
                        if (this.eventManager === null) {
                            return [2 /*return*/, _super.prototype._update.call(this)];
                        }
                        eventNames = ["UpdatedGlobalConfig", "UpdatedTokenConfig"];
                        latestBlockSearched = this.eventManager.blockNumber;
                        globalConfigUpdateTimes = [];
                        _events = eventNames.map(function () { return []; });
                        _i = 0, _a = this.eventManager.getEvents().flat();
                        _b.label = 1;
                    case 1:
                        if (!(_i < _a.length)) return [3 /*break*/, 4];
                        event_1 = _a[_i];
                        idx = eventNames.indexOf(event_1.event);
                        if (idx !== -1) {
                            _events[idx].push(event_1);
                        }
                        if (!(event_1.event === "UpdatedGlobalConfig")) return [3 /*break*/, 3];
                        return [4 /*yield*/, event_1.getBlock()];
                    case 2:
                        block = _b.sent();
                        globalConfigUpdateTimes.push(block.timestamp);
                        _b.label = 3;
                    case 3:
                        _i++;
                        return [3 /*break*/, 1];
                    case 4:
                        events = Object.fromEntries(eventNames.map(function (eventName, idx) { return [eventName, _events[idx]]; }));
                        return [2 /*return*/, {
                                success: true,
                                chainId: this.chainId,
                                searchEndBlock: this.eventSearchConfig.toBlock || latestBlockSearched,
                                events: {
                                    updatedGlobalConfigEvents: events["UpdatedGlobalConfig"],
                                    globalConfigUpdateTimes: globalConfigUpdateTimes,
                                    updatedTokenConfigEvents: events["UpdatedTokenConfig"],
                                },
                            }];
                }
            });
        });
    };
    MockConfigStoreClient.prototype.updateGlobalConfig = function (key, value, overrides) {
        if (overrides === void 0) { overrides = {}; }
        return this.generateConfig("UpdatedGlobalConfig", utf8ToHex(key), value, overrides);
    };
    MockConfigStoreClient.prototype.updateTokenConfig = function (key, value, overrides) {
        if (overrides === void 0) { overrides = {}; }
        // Verify that the key is a valid address
        if (ethers.utils.isAddress(key) === false) {
            throw new Error("Invalid address: ".concat(key));
        }
        return this.generateConfig("UpdatedTokenConfig", key, value, overrides);
    };
    MockConfigStoreClient.prototype.generateConfig = function (event, key, value, overrides) {
        if (overrides === void 0) { overrides = {}; }
        assert(this.eventManager !== null);
        var topics = [key, value];
        var args = { key: key, value: value };
        return this.eventManager.generateEvent({
            event: event,
            address: this.configStore.address,
            topics: topics.map(function (topic) { return topic.toString(); }),
            args: args,
            blockNumber: overrides.blockNumber,
        });
    };
    return MockConfigStoreClient;
}(AcrossConfigStoreClient));
export { MockConfigStoreClient };
//# sourceMappingURL=MockConfigStoreClient.js.map