type RateModelEventsDictionary = {
    [l1TokenAddress: string]: {
        blockNumber: number;
        rateModel: string;
    }[];
};
export type RateModelEvent = {
    blockNumber: number;
    transactionIndex: number;
    logIndex: number;
    rateModel: string;
    l1Token: string;
};
interface RateModel {
    UBar: string;
    R0: string;
    R1: string;
    R2: string;
}
export declare class RateModelDictionary {
    rateModelDictionary: RateModelEventsDictionary;
    private _throwIfNotInitialized;
    updateWithEvents(rateModelEvents: RateModelEvent[]): void;
    /**
     * Return the rate model for L1 token set at the block height.
     * @param l1Token L1 token address to get rate model for.
     * @param blockNumber Block height to get rate model for.
     * @returns Rate model object.
     */
    getRateModelForBlockNumber(l1Token: string, blockNumber?: number): RateModel;
    /**
     * @notice Return all L1 tokens that had a rate model associated with it at the block number.
     * @param blockNumber Returns l1 tokens that were mapped to a rate model at this block height. If undefined,
     * this function will return all L1 tokens that have a block number as of the latest block height.
     * @returns array of L1 token addresses.
     */
    getL1TokensFromRateModel(blockNumber?: number | undefined): string[];
}
/**
 * Helper method that returns parsed rate model from string, or throws.
 * @param rateModelString Stringified rate model to parse.
 * @returns Rate model object. Must conform to `expectedRateModelKeys` format.
 */
export declare const parseAndReturnRateModelFromString: (rateModelString: string) => RateModel;
export {};
