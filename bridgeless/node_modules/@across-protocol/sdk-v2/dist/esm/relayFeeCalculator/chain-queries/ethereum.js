import { __extends } from "tslib";
import { CHAIN_IDs, DEFAULT_SIMULATED_RELAYER_ADDRESS, DEFAULT_SIMULATED_RELAYER_ADDRESS_TEST, TOKEN_SYMBOLS_MAP, } from "../../constants";
import { getDeployedAddress } from "../../utils/DeploymentUtils";
import { DEFAULT_LOGGER } from "../relayFeeCalculator";
import QueryBase from "./baseQuery";
var EthereumQueries = /** @class */ (function (_super) {
    __extends(EthereumQueries, _super);
    function EthereumQueries(provider, symbolMapping, spokePoolAddress, simulatedRelayerAddress, coingeckoProApiKey, logger, gasMarkup) {
        if (symbolMapping === void 0) { symbolMapping = TOKEN_SYMBOLS_MAP; }
        if (spokePoolAddress === void 0) { spokePoolAddress = getDeployedAddress("SpokePool", CHAIN_IDs.MAINNET); }
        if (simulatedRelayerAddress === void 0) { simulatedRelayerAddress = DEFAULT_SIMULATED_RELAYER_ADDRESS; }
        if (logger === void 0) { logger = DEFAULT_LOGGER; }
        if (gasMarkup === void 0) { gasMarkup = 0; }
        return _super.call(this, provider, symbolMapping, spokePoolAddress, simulatedRelayerAddress, gasMarkup, logger, coingeckoProApiKey) || this;
    }
    return EthereumQueries;
}(QueryBase));
export { EthereumQueries };
/**
 * Query class for Ethereum GÃ¶rli.
 * @deprecated Use EthereumSepoliaQueries instead.
 */
var EthereumGoerliQueries = /** @class */ (function (_super) {
    __extends(EthereumGoerliQueries, _super);
    function EthereumGoerliQueries(provider, symbolMapping, spokePoolAddress, simulatedRelayerAddress, coingeckoProApiKey, logger, gasMarkup) {
        if (symbolMapping === void 0) { symbolMapping = TOKEN_SYMBOLS_MAP; }
        if (spokePoolAddress === void 0) { spokePoolAddress = getDeployedAddress("SpokePool", CHAIN_IDs.GOERLI); }
        if (simulatedRelayerAddress === void 0) { simulatedRelayerAddress = DEFAULT_SIMULATED_RELAYER_ADDRESS_TEST; }
        if (logger === void 0) { logger = DEFAULT_LOGGER; }
        if (gasMarkup === void 0) { gasMarkup = 0; }
        return _super.call(this, provider, symbolMapping, spokePoolAddress, simulatedRelayerAddress, gasMarkup, logger, coingeckoProApiKey) || this;
    }
    return EthereumGoerliQueries;
}(QueryBase));
export { EthereumGoerliQueries };
/**
 * Query class for Ethereum Sepolia.
 */
var EthereumSepoliaQueries = /** @class */ (function (_super) {
    __extends(EthereumSepoliaQueries, _super);
    function EthereumSepoliaQueries(provider, symbolMapping, spokePoolAddress, simulatedRelayerAddress, coingeckoProApiKey, logger, gasMarkup) {
        if (symbolMapping === void 0) { symbolMapping = TOKEN_SYMBOLS_MAP; }
        if (spokePoolAddress === void 0) { spokePoolAddress = getDeployedAddress("SpokePool", CHAIN_IDs.SEPOLIA); }
        if (simulatedRelayerAddress === void 0) { simulatedRelayerAddress = DEFAULT_SIMULATED_RELAYER_ADDRESS_TEST; }
        if (logger === void 0) { logger = DEFAULT_LOGGER; }
        if (gasMarkup === void 0) { gasMarkup = 0; }
        return _super.call(this, provider, symbolMapping, spokePoolAddress, simulatedRelayerAddress, gasMarkup, logger, coingeckoProApiKey) || this;
    }
    return EthereumSepoliaQueries;
}(QueryBase));
export { EthereumSepoliaQueries };
//# sourceMappingURL=ethereum.js.map