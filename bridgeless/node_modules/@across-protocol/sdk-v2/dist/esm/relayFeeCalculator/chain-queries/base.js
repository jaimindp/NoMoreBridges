import { __extends } from "tslib";
import { getDeployedAddress } from "../../utils/DeploymentUtils";
import { DEFAULT_LOGGER } from "../relayFeeCalculator";
import { DEFAULT_SIMULATED_RELAYER_ADDRESS, DEFAULT_SIMULATED_RELAYER_ADDRESS_TEST, TOKEN_SYMBOLS_MAP, } from "../../constants";
import { asL2Provider } from "@eth-optimism/sdk/dist/l2-provider";
import QueryBase from "./baseQuery";
var baseChainId = 8453;
var baseGoerliChainId = 84531;
var baseSepoliaChainId = 84532;
var BaseQueries = /** @class */ (function (_super) {
    __extends(BaseQueries, _super);
    function BaseQueries(provider, symbolMapping, spokePoolAddress, simulatedRelayerAddress, coingeckoProApiKey, logger, gasMarkup) {
        if (symbolMapping === void 0) { symbolMapping = TOKEN_SYMBOLS_MAP; }
        if (spokePoolAddress === void 0) { spokePoolAddress = getDeployedAddress("SpokePool", baseChainId); }
        if (simulatedRelayerAddress === void 0) { simulatedRelayerAddress = DEFAULT_SIMULATED_RELAYER_ADDRESS; }
        if (logger === void 0) { logger = DEFAULT_LOGGER; }
        if (gasMarkup === void 0) { gasMarkup = 0; }
        return _super.call(this, asL2Provider(provider), symbolMapping, spokePoolAddress, simulatedRelayerAddress, gasMarkup, logger, coingeckoProApiKey) || this;
    }
    return BaseQueries;
}(QueryBase));
export { BaseQueries };
/**
 * @deprecated
 */
var BaseGoerliQueries = /** @class */ (function (_super) {
    __extends(BaseGoerliQueries, _super);
    function BaseGoerliQueries(provider, symbolMapping, spokePoolAddress, simulatedRelayerAddress, coingeckoProApiKey, logger, gasMarkup) {
        if (symbolMapping === void 0) { symbolMapping = TOKEN_SYMBOLS_MAP; }
        if (spokePoolAddress === void 0) { spokePoolAddress = getDeployedAddress("SpokePool", baseGoerliChainId); }
        if (simulatedRelayerAddress === void 0) { simulatedRelayerAddress = DEFAULT_SIMULATED_RELAYER_ADDRESS_TEST; }
        if (logger === void 0) { logger = DEFAULT_LOGGER; }
        if (gasMarkup === void 0) { gasMarkup = 0; }
        return _super.call(this, asL2Provider(provider), symbolMapping, spokePoolAddress, simulatedRelayerAddress, gasMarkup, logger, coingeckoProApiKey) || this;
    }
    return BaseGoerliQueries;
}(QueryBase));
export { BaseGoerliQueries };
var BaseSepoliaQueries = /** @class */ (function (_super) {
    __extends(BaseSepoliaQueries, _super);
    function BaseSepoliaQueries(provider, symbolMapping, spokePoolAddress, simulatedRelayerAddress, coingeckoProApiKey, logger, gasMarkup) {
        if (symbolMapping === void 0) { symbolMapping = TOKEN_SYMBOLS_MAP; }
        if (spokePoolAddress === void 0) { spokePoolAddress = getDeployedAddress("SpokePool", baseSepoliaChainId); }
        if (simulatedRelayerAddress === void 0) { simulatedRelayerAddress = DEFAULT_SIMULATED_RELAYER_ADDRESS_TEST; }
        if (logger === void 0) { logger = DEFAULT_LOGGER; }
        if (gasMarkup === void 0) { gasMarkup = 0; }
        return _super.call(this, asL2Provider(provider), symbolMapping, spokePoolAddress, simulatedRelayerAddress, gasMarkup, logger, coingeckoProApiKey) || this;
    }
    return BaseSepoliaQueries;
}(QueryBase));
export { BaseSepoliaQueries };
//# sourceMappingURL=base.js.map