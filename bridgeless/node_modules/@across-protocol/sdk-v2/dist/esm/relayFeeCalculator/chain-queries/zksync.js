import { __extends } from "tslib";
import { getDeployedAddress } from "../../utils/DeploymentUtils";
import { DEFAULT_LOGGER } from "../relayFeeCalculator";
import { TOKEN_SYMBOLS_MAP, CHAIN_IDs, DEFAULT_SIMULATED_RELAYER_ADDRESS, DEFAULT_SIMULATED_RELAYER_ADDRESS_TEST, } from "../../constants";
import QueryBase from "./baseQuery";
var ZkSyncQueries = /** @class */ (function (_super) {
    __extends(ZkSyncQueries, _super);
    function ZkSyncQueries(provider, symbolMapping, spokePoolAddress, simulatedRelayerAddress, coingeckoProApiKey, logger, gasMarkup) {
        if (symbolMapping === void 0) { symbolMapping = TOKEN_SYMBOLS_MAP; }
        if (spokePoolAddress === void 0) { spokePoolAddress = getDeployedAddress("SpokePool", CHAIN_IDs.ZK_SYNC); }
        if (simulatedRelayerAddress === void 0) { simulatedRelayerAddress = DEFAULT_SIMULATED_RELAYER_ADDRESS; }
        if (logger === void 0) { logger = DEFAULT_LOGGER; }
        if (gasMarkup === void 0) { gasMarkup = 0; }
        return _super.call(this, provider, symbolMapping, spokePoolAddress, simulatedRelayerAddress, gasMarkup, logger, coingeckoProApiKey) || this;
    }
    return ZkSyncQueries;
}(QueryBase));
export { ZkSyncQueries };
/**
 * Query class for zkSync GÃ¶rli.
 * @deprecated Use zkSyncSepoliaQueries instead
 */
var zkSyncGoerliQueries = /** @class */ (function (_super) {
    __extends(zkSyncGoerliQueries, _super);
    function zkSyncGoerliQueries(provider, symbolMapping, spokePoolAddress, simulatedRelayerAddress, coingeckoProApiKey, logger, gasMarkup) {
        if (symbolMapping === void 0) { symbolMapping = TOKEN_SYMBOLS_MAP; }
        if (spokePoolAddress === void 0) { spokePoolAddress = getDeployedAddress("SpokePool", CHAIN_IDs.ZK_SYNC_GOERLI); }
        if (simulatedRelayerAddress === void 0) { simulatedRelayerAddress = DEFAULT_SIMULATED_RELAYER_ADDRESS_TEST; }
        if (logger === void 0) { logger = DEFAULT_LOGGER; }
        if (gasMarkup === void 0) { gasMarkup = 0; }
        return _super.call(this, provider, symbolMapping, spokePoolAddress, simulatedRelayerAddress, gasMarkup, logger, coingeckoProApiKey) || this;
    }
    return zkSyncGoerliQueries;
}(QueryBase));
export { zkSyncGoerliQueries };
/**
 * Query class for zkSync Sepolia.
 */
var zkSyncSepoliaQueries = /** @class */ (function (_super) {
    __extends(zkSyncSepoliaQueries, _super);
    function zkSyncSepoliaQueries(provider, symbolMapping, spokePoolAddress, simulatedRelayerAddress, coingeckoProApiKey, logger, gasMarkup) {
        if (symbolMapping === void 0) { symbolMapping = TOKEN_SYMBOLS_MAP; }
        if (spokePoolAddress === void 0) { spokePoolAddress = getDeployedAddress("SpokePool", CHAIN_IDs.ZK_SYNC_SEPOLIA); }
        if (simulatedRelayerAddress === void 0) { simulatedRelayerAddress = DEFAULT_SIMULATED_RELAYER_ADDRESS; }
        if (logger === void 0) { logger = DEFAULT_LOGGER; }
        if (gasMarkup === void 0) { gasMarkup = 0; }
        return _super.call(this, provider, symbolMapping, spokePoolAddress, simulatedRelayerAddress, gasMarkup, logger, coingeckoProApiKey) || this;
    }
    return zkSyncSepoliaQueries;
}(QueryBase));
export { zkSyncSepoliaQueries };
//# sourceMappingURL=zksync.js.map