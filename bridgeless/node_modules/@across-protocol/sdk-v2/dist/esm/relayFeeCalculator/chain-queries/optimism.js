import { __extends } from "tslib";
import { getDeployedAddress } from "../../utils/DeploymentUtils";
import { DEFAULT_LOGGER } from "../relayFeeCalculator";
import { TOKEN_SYMBOLS_MAP, CHAIN_IDs, DEFAULT_SIMULATED_RELAYER_ADDRESS, DEFAULT_SIMULATED_RELAYER_ADDRESS_TEST, } from "../../constants";
import { asL2Provider } from "@eth-optimism/sdk/dist/l2-provider";
import QueryBase from "./baseQuery";
var OptimismQueries = /** @class */ (function (_super) {
    __extends(OptimismQueries, _super);
    function OptimismQueries(provider, symbolMapping, spokePoolAddress, simulatedRelayerAddress, coingeckoProApiKey, logger, gasMarkup) {
        if (symbolMapping === void 0) { symbolMapping = TOKEN_SYMBOLS_MAP; }
        if (spokePoolAddress === void 0) { spokePoolAddress = getDeployedAddress("SpokePool", CHAIN_IDs.OPTIMISM); }
        if (simulatedRelayerAddress === void 0) { simulatedRelayerAddress = DEFAULT_SIMULATED_RELAYER_ADDRESS; }
        if (logger === void 0) { logger = DEFAULT_LOGGER; }
        if (gasMarkup === void 0) { gasMarkup = 0; }
        return _super.call(this, asL2Provider(provider), symbolMapping, spokePoolAddress, simulatedRelayerAddress, gasMarkup, logger, coingeckoProApiKey) || this;
    }
    return OptimismQueries;
}(QueryBase));
export { OptimismQueries };
/**
 * Queries for the Optimism Goerli chain
 * @deprecated Use OptimismSepoliaQueries instead
 */
var OptimismGoerliQueries = /** @class */ (function (_super) {
    __extends(OptimismGoerliQueries, _super);
    function OptimismGoerliQueries(provider, symbolMapping, spokePoolAddress, simulatedRelayerAddress, coingeckoProApiKey, logger, gasMarkup) {
        if (symbolMapping === void 0) { symbolMapping = TOKEN_SYMBOLS_MAP; }
        if (spokePoolAddress === void 0) { spokePoolAddress = getDeployedAddress("SpokePool", CHAIN_IDs.OPTIMISM_GOERLI); }
        if (simulatedRelayerAddress === void 0) { simulatedRelayerAddress = DEFAULT_SIMULATED_RELAYER_ADDRESS_TEST; }
        if (logger === void 0) { logger = DEFAULT_LOGGER; }
        if (gasMarkup === void 0) { gasMarkup = 0; }
        return _super.call(this, asL2Provider(provider), symbolMapping, spokePoolAddress, simulatedRelayerAddress, gasMarkup, logger, coingeckoProApiKey) || this;
    }
    return OptimismGoerliQueries;
}(QueryBase));
export { OptimismGoerliQueries };
var OptimismSepoliaQueries = /** @class */ (function (_super) {
    __extends(OptimismSepoliaQueries, _super);
    function OptimismSepoliaQueries(provider, symbolMapping, spokePoolAddress, simulatedRelayerAddress, coingeckoProApiKey, logger, gasMarkup) {
        if (symbolMapping === void 0) { symbolMapping = TOKEN_SYMBOLS_MAP; }
        if (spokePoolAddress === void 0) { spokePoolAddress = getDeployedAddress("SpokePool", CHAIN_IDs.OPTIMISM_SEPOLIA); }
        if (simulatedRelayerAddress === void 0) { simulatedRelayerAddress = DEFAULT_SIMULATED_RELAYER_ADDRESS_TEST; }
        if (logger === void 0) { logger = DEFAULT_LOGGER; }
        if (gasMarkup === void 0) { gasMarkup = 0; }
        return _super.call(this, asL2Provider(provider), symbolMapping, spokePoolAddress, simulatedRelayerAddress, gasMarkup, logger, coingeckoProApiKey) || this;
    }
    return OptimismSepoliaQueries;
}(QueryBase));
export { OptimismSepoliaQueries };
//# sourceMappingURL=optimism.js.map