import { __awaiter, __extends, __generator } from "tslib";
import { getDeployedAddress } from "../../utils/DeploymentUtils";
import { DEFAULT_LOGGER } from "../relayFeeCalculator";
import { CHAIN_IDs, DEFAULT_SIMULATED_RELAYER_ADDRESS, DEFAULT_SIMULATED_RELAYER_ADDRESS_TEST, TOKEN_SYMBOLS_MAP, } from "../../constants";
import { Coingecko } from "../../coingecko/Coingecko";
import QueryBase from "./baseQuery";
var PolygonQueries = /** @class */ (function (_super) {
    __extends(PolygonQueries, _super);
    function PolygonQueries(provider, symbolMapping, spokePoolAddress, simulatedRelayerAddress, coingeckoProApiKey, logger, gasMarkup) {
        if (symbolMapping === void 0) { symbolMapping = TOKEN_SYMBOLS_MAP; }
        if (spokePoolAddress === void 0) { spokePoolAddress = getDeployedAddress("SpokePool", CHAIN_IDs.POLYGON); }
        if (simulatedRelayerAddress === void 0) { simulatedRelayerAddress = DEFAULT_SIMULATED_RELAYER_ADDRESS; }
        if (logger === void 0) { logger = DEFAULT_LOGGER; }
        if (gasMarkup === void 0) { gasMarkup = 0; }
        return _super.call(this, provider, symbolMapping, spokePoolAddress, simulatedRelayerAddress, gasMarkup, logger, coingeckoProApiKey, undefined, "usd") || this;
    }
    PolygonQueries.prototype.getTokenPrice = function (tokenSymbol) {
        return __awaiter(this, void 0, void 0, function () {
            var coingeckoInstance, _a, tokenPrice, _b, maticPrice;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (!this.symbolMapping[tokenSymbol])
                            throw new Error("".concat(tokenSymbol, " does not exist in mapping"));
                        coingeckoInstance = Coingecko.get(this.logger, this.coingeckoProApiKey);
                        return [4 /*yield*/, coingeckoInstance.getCurrentPriceByContract(this.symbolMapping[tokenSymbol].addresses[CHAIN_IDs.MAINNET], "usd")];
                    case 1:
                        _a = _c.sent(), tokenPrice = _a[1];
                        return [4 /*yield*/, coingeckoInstance.getCurrentPriceByContract(this.symbolMapping["MATIC"].addresses[CHAIN_IDs.MAINNET], "usd")];
                    case 2:
                        _b = _c.sent(), maticPrice = _b[1];
                        return [2 /*return*/, Number((tokenPrice / maticPrice).toFixed(this.symbolMapping["MATIC"].decimals))];
                }
            });
        });
    };
    return PolygonQueries;
}(QueryBase));
export { PolygonQueries };
/**
 * Queries for the Polygon Mumbai chain (based against Goerli)
 * @deprecated Use PolygonAmoyQueries instead
 */
var PolygonMumbaiQueries = /** @class */ (function (_super) {
    __extends(PolygonMumbaiQueries, _super);
    function PolygonMumbaiQueries(provider, symbolMapping, spokePoolAddress, simulatedRelayerAddress, coingeckoProApiKey, logger, gasMarkup) {
        if (symbolMapping === void 0) { symbolMapping = TOKEN_SYMBOLS_MAP; }
        if (spokePoolAddress === void 0) { spokePoolAddress = getDeployedAddress("SpokePool", CHAIN_IDs.MUMBAI); }
        if (simulatedRelayerAddress === void 0) { simulatedRelayerAddress = DEFAULT_SIMULATED_RELAYER_ADDRESS_TEST; }
        if (logger === void 0) { logger = DEFAULT_LOGGER; }
        if (gasMarkup === void 0) { gasMarkup = 0; }
        return _super.call(this, provider, symbolMapping, spokePoolAddress, simulatedRelayerAddress, coingeckoProApiKey, logger, gasMarkup) || this;
    }
    return PolygonMumbaiQueries;
}(PolygonQueries));
export { PolygonMumbaiQueries };
var PolygonAmoyQueries = /** @class */ (function (_super) {
    __extends(PolygonAmoyQueries, _super);
    function PolygonAmoyQueries(provider, symbolMapping, spokePoolAddress, simulatedRelayerAddress, coingeckoProApiKey, logger, gasMarkup) {
        if (symbolMapping === void 0) { symbolMapping = TOKEN_SYMBOLS_MAP; }
        if (spokePoolAddress === void 0) { spokePoolAddress = getDeployedAddress("SpokePool", CHAIN_IDs.POLYGON_AMOY); }
        if (simulatedRelayerAddress === void 0) { simulatedRelayerAddress = DEFAULT_SIMULATED_RELAYER_ADDRESS_TEST; }
        if (logger === void 0) { logger = DEFAULT_LOGGER; }
        if (gasMarkup === void 0) { gasMarkup = 0; }
        return _super.call(this, provider, symbolMapping, spokePoolAddress, simulatedRelayerAddress, coingeckoProApiKey, logger, gasMarkup) || this;
    }
    return PolygonAmoyQueries;
}(PolygonQueries));
export { PolygonAmoyQueries };
//# sourceMappingURL=polygon.js.map