import { __awaiter, __generator } from "tslib";
import { ethers, utils as ethersUtils } from "ethers";
import { eip1559 } from "./ethereum";
// Arbitrum Nitro implements EIP-1559 pricing, but the priority fee is always refunded to the caller. Further,
// ethers typically hardcodes the priority fee to 1.5 Gwei. So, confirm that the priority fee supplied was 1.5
// Gwei, and then drop it to 1 Wei. Reference: https://developer.arbitrum.io/faqs/gas-faqs#q-priority
export function eip1559_arbitrum(provider, chainId) {
    return __awaiter(this, void 0, void 0, function () {
        var _a, _maxFeePerGas, maxPriorityFeePerGas, maxFeePerGas;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, eip1559(provider, chainId)];
                case 1:
                    _a = _b.sent(), _maxFeePerGas = _a.maxFeePerGas, maxPriorityFeePerGas = _a.maxPriorityFeePerGas;
                    // If this throws, ethers default behaviour has changed, or Arbitrum RPCs are returning something more sensible.
                    if (!maxPriorityFeePerGas.eq(ethersUtils.parseUnits("1.5", 9))) {
                        throw new Error("Expected hardcoded 1.5 Gwei priority fee on Arbitrum, got ".concat(maxPriorityFeePerGas));
                    }
                    maxFeePerGas = _maxFeePerGas.sub(maxPriorityFeePerGas).add(1);
                    return [2 /*return*/, { maxPriorityFeePerGas: ethers.constants.One, maxFeePerGas: maxFeePerGas }];
            }
        });
    });
}
//# sourceMappingURL=arbitrum.js.map