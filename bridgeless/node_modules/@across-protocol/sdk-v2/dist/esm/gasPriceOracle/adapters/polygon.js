import { __awaiter, __extends, __generator } from "tslib";
import { utils as ethersUtils } from "ethers";
import { BaseHTTPAdapter } from "../../priceClient/adapters/baseAdapter";
import { isDefined } from "../../utils/TypeGuards";
import { gasPriceError } from "../util";
import { eip1559 } from "./ethereum";
// @dev toBNWei() is not imported from ../utils because of a circular dependency loop.
//      The fix is probably to relocate the function estimateTotalGasRequiredByUnsignedTransaction().
var PolygonGasStation = /** @class */ (function (_super) {
    __extends(PolygonGasStation, _super);
    function PolygonGasStation(_a) {
        var _this = this;
        var _b = _a === void 0 ? {} : _a, _c = _b.chainId, chainId = _c === void 0 ? 137 : _c, host = _b.host, _d = _b.timeout, timeout = _d === void 0 ? 1500 : _d, _e = _b.retries, retries = _e === void 0 ? 1 : _e;
        host = (host !== null && host !== void 0 ? host : chainId === 137) ? "gasstation.polygon.technology" : "gasstation-testnet.polygon.technology";
        _this = _super.call(this, "Polygon Gas Station", host, { timeout: timeout, retries: retries }) || this;
        _this.chainId = chainId;
        return _this;
    }
    PolygonGasStation.prototype.getFeeData = function (strategy) {
        if (strategy === void 0) { strategy = "fast"; }
        return __awaiter(this, void 0, void 0, function () {
            var gas, gasPrice, maxPriorityFeePerGas, maxFeePerGas;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.query("v2", {})];
                    case 1:
                        gas = _a.sent();
                        gasPrice = gas === null || gas === void 0 ? void 0 : gas[strategy];
                        if (!this.isPolygon1559GasPrice(gasPrice)) {
                            // @todo: generalise gasPriceError() to accept a reason/cause?
                            gasPriceError("getFeeData()", this.chainId, ethersUtils.parseUnits("0"));
                        }
                        [gasPrice.maxFee, gasPrice.maxPriorityFee].forEach(function (gasPrice) {
                            if (Number(gasPrice) < 0) {
                                gasPriceError("getFeeData()", _this.chainId, ethersUtils.parseUnits(gasPrice.toString(), 9));
                            }
                        });
                        maxPriorityFeePerGas = ethersUtils.parseUnits(gasPrice.maxPriorityFee.toString(), 9);
                        maxFeePerGas = ethersUtils.parseUnits(gasPrice.maxFee.toString(), 9);
                        return [2 /*return*/, { maxPriorityFeePerGas: maxPriorityFeePerGas, maxFeePerGas: maxFeePerGas }];
                }
            });
        });
    };
    PolygonGasStation.prototype.isPolygon1559GasPrice = function (gasPrice) {
        if (!isDefined(gasPrice)) {
            return false;
        }
        var _gasPrice = gasPrice;
        return [_gasPrice.maxPriorityFee, _gasPrice.maxFee].every(function (field) { return ["number", "string"].includes(typeof field); });
    };
    return PolygonGasStation;
}(BaseHTTPAdapter));
export function polygonGasStation(provider, chainId) {
    return __awaiter(this, void 0, void 0, function () {
        var gasStation, err_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    gasStation = new PolygonGasStation({ chainId: chainId });
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 5]);
                    return [4 /*yield*/, gasStation.getFeeData()];
                case 2: return [2 /*return*/, _a.sent()];
                case 3:
                    err_1 = _a.sent();
                    return [4 /*yield*/, eip1559(provider, chainId)];
                case 4: 
                // Fall back to the RPC provider. May be less accurate.
                return [2 /*return*/, _a.sent()];
                case 5: return [2 /*return*/];
            }
        });
    });
}
//# sourceMappingURL=polygon.js.map