import { __awaiter, __generator } from "tslib";
import { BigNumber, ethers } from "ethers";
import { gasPriceError } from "../util";
export function eip1559(provider, chainId) {
    return __awaiter(this, void 0, void 0, function () {
        var feeData, maxPriorityFeePerGas, maxFeePerGas;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, provider.getFeeData()];
                case 1:
                    feeData = _a.sent();
                    [feeData.lastBaseFeePerGas, feeData.maxPriorityFeePerGas].forEach(function (field) {
                        if (!BigNumber.isBigNumber(field) || field.lt(0))
                            gasPriceError("getFeeData()", chainId, feeData);
                    });
                    maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
                    maxFeePerGas = maxPriorityFeePerGas.add(feeData.lastBaseFeePerGas);
                    return [2 /*return*/, { maxPriorityFeePerGas: maxPriorityFeePerGas, maxFeePerGas: maxFeePerGas }];
            }
        });
    });
}
export function legacy(provider, chainId) {
    return __awaiter(this, void 0, void 0, function () {
        var gasPrice;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, provider.getGasPrice()];
                case 1:
                    gasPrice = _a.sent();
                    if (!BigNumber.isBigNumber(gasPrice) || gasPrice.lt(0))
                        gasPriceError("getGasPrice()", chainId, gasPrice);
                    return [2 /*return*/, {
                            maxFeePerGas: gasPrice,
                            maxPriorityFeePerGas: ethers.constants.Zero,
                        }];
            }
        });
    });
}
//# sourceMappingURL=ethereum.js.map