/**
 * @file Responsible for providing utility functions for working with BigNumbers.
 * @module utils/BigNumberUtils
 * @author Across Protocol
 */
import { ethers } from "ethers";
export type BigNumberish = ethers.BigNumberish;
export type BN = ethers.BigNumber;
export declare const bnZero: ethers.BigNumber, bnOne: ethers.BigNumber, bnUint256Max: ethers.BigNumber;
export declare const bnUint32Max: ethers.BigNumber;
/**
 * Converts a stringified number into a BigNumber with 18 decimal places.
 * @param num The number to parse.
 * @returns The parsed BigNumber.
 */
export declare function toWei(num: BigNumberish): BN;
/**
 * Converts a stringified number into a BigNumber with 9 decimal places.
 * @param num The number to parse.
 * @returns The parsed BigNumber.
 */
export declare function toGWei(num: BigNumberish): BN;
/**
 * Converts a stringified number into a BigNumber.
 * If the string version of the num contains a `.` then it is a number which needs to be parsed to a string int.
 * @param num The number to parse.
 * @param rounding The rounding method to use if the number has a decimal point. Defaults to "floor" or rounding down. Valid values are "floor", "round", and "ceil".
 * @returns The parsed BigNumber.
 * @note This is a temporary function until we can backport support for decimal points to @across-protocol/sdk-v2.
 */
export declare const toBN: (num: BigNumberish, rounding?: "floor" | "round" | "ceil") => BN;
