import { toBN } from "./BigNumberUtils";
import { isDefined } from "./TypeGuards";
/**
 * A reviver composer that takes a list of revivers and returns a single reviver that applies all of them.
 * @param revivers The revivers to compose.
 * @returns A single reviver that applies all of the revivers passed in. If no revivers are passed in, the identity
 * function is returned.
 */
export function composeRevivers() {
    var revivers = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        revivers[_i] = arguments[_i];
    }
    // Filter out undefined revivers.
    revivers = revivers.filter(isDefined);
    // Return a single reviver that applies all of the revivers passed in. If no revivers are passed in, the identity
    // function is implicitly returned.
    return function (key, value) { return revivers.reduce(function (acc, reviver) { return reviver(key, acc); }, value); };
}
/**
 * Reviver function that converts a stringified BigNumber object to a BigNumber object.
 * @param _ The key to the value being revived. Unused.
 * @param value The value being revived.
 * @returns The revived value. If the value is not a stringified BigNumber object, it is returned as-is.
 */
export function objectWithBigNumberReviver(_, value) {
    if (value === null || typeof value !== "object") {
        return value;
    }
    var resolvedValue = value;
    return resolvedValue.type === "BigNumber" ? toBN(resolvedValue.hex) : resolvedValue;
}
//# sourceMappingURL=ReviverUtils.js.map