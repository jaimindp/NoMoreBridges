import { BlockTag } from "@ethersproject/abstract-provider";
import { BigNumber, providers, Signer } from "ethers";
import { L1Token } from "../interfaces";
type SignerOrProvider = providers.Provider | Signer;
export declare function fetchTokenInfo(address: string, signerOrProvider: SignerOrProvider): Promise<L1Token>;
export declare const getL2TokenAddresses: (l1TokenAddress: string, l1ChainId?: number) => {
    [chainId: number]: string;
} | undefined;
/**
 * Resolve a token symbol to an L1Token description on a particular chain ID.
 * @notice Not to be confused with the HubPool's internal view on the supported origin/destination token for a chain.
 * @param symbol Symbol to query.
 * @param chainId Chain ID to query on.
 * @returns Symbol, decimals and contract address on the requested chain.
 */
export declare function resolveSymbolOnChain(chainId: number, symbol: string): L1Token;
/**
 * Returns the contract address for a given token symbol and chainId.
 * @param symbol A case-insensitive token symbol.
 * @param chainId The chainId to resolve the contract address for.
 * @param tokenMapping A parameter to determine where to source token information. Defaults to the constants-v2 variant.
 * @returns The contract address for the given token symbol and chainId, or undefined if the token symbol is not supported.
 */
export declare const resolveContractFromSymbol: (symbol: string, chainId: string, tokenMapping?: {
    ACX: {
        name: string;
        symbol: string;
        decimals: number;
        addresses: {
            [x: number]: string;
        };
    };
    BAL: {
        name: string;
        symbol: string;
        decimals: number;
        addresses: {
            [x: number]: string;
        };
    };
    BADGER: {
        name: string;
        symbol: string;
        decimals: number;
        addresses: {
            [x: number]: string;
        };
    };
    BOBA: {
        name: string;
        symbol: string;
        decimals: number;
        addresses: {
            [x: number]: string;
        };
    };
    DAI: {
        name: string;
        symbol: string;
        decimals: number;
        addresses: {
            [x: number]: string;
        };
    };
    ETH: {
        name: string;
        symbol: string;
        decimals: number;
        addresses: {
            [x: number]: string;
        };
    };
    MATIC: {
        name: string;
        symbol: string;
        decimals: number;
        addresses: {
            [x: number]: string;
        };
    };
    POOL: {
        name: string;
        symbol: string;
        decimals: number;
        addresses: {
            [x: number]: string;
        };
    };
    SNX: {
        name: string;
        symbol: string;
        decimals: number;
        addresses: {
            [x: number]: string;
        };
    };
    UMA: {
        name: string;
        symbol: string;
        decimals: number;
        addresses: {
            [x: number]: string;
        }; /**
         * Retrieves the ERC20 balance for a given address and token address.
         * @param address The address to retrieve the balance for.
         * @param tokenAddress The token address
         * @param signerOrProvider A valid ethers.js Signer or Provider object.
         * @param blockTag The block tag to retrieve the balance at.
         * @returns The balance of the given address for the given token address.
         */
    };
    USDC: {
        name: string;
        symbol: string;
        decimals: number;
        addresses: {
            [x: number]: string;
        };
    };
    USDT: {
        name: string;
        symbol: string;
        decimals: number;
        addresses: {
            [x: number]: string;
        };
    };
    WBTC: {
        name: string;
        symbol: string;
        decimals: number;
        addresses: {
            [x: number]: string;
        };
    };
    WETH: {
        name: string;
        symbol: string;
        decimals: number;
        addresses: {
            [x: number]: string;
        };
    };
    WMATIC: {
        name: string;
        symbol: string;
        decimals: number;
        addresses: {
            [x: number]: string;
        };
    };
    OP: {
        name: string;
        symbol: string;
        decimals: number;
        addresses: {
            [x: number]: string;
        };
    };
}) => string | undefined;
export declare function getTokenInformationFromAddress(address: string, tokenMapping?: {
    ACX: {
        name: string;
        symbol: string;
        decimals: number;
        addresses: {
            [x: number]: string;
        };
    };
    BAL: {
        name: string;
        symbol: string;
        decimals: number;
        addresses: {
            [x: number]: string;
        };
    };
    BADGER: {
        name: string;
        symbol: string;
        decimals: number;
        addresses: {
            [x: number]: string;
        };
    };
    BOBA: {
        name: string;
        symbol: string;
        decimals: number;
        addresses: {
            [x: number]: string;
        };
    };
    DAI: {
        name: string;
        symbol: string;
        decimals: number;
        addresses: {
            [x: number]: string;
        };
    };
    ETH: {
        name: string;
        symbol: string;
        decimals: number;
        addresses: {
            [x: number]: string;
        };
    };
    MATIC: {
        name: string;
        symbol: string;
        decimals: number;
        addresses: {
            [x: number]: string;
        };
    };
    POOL: {
        name: string;
        symbol: string;
        decimals: number;
        addresses: {
            [x: number]: string;
        };
    };
    SNX: {
        name: string;
        symbol: string;
        decimals: number;
        addresses: {
            [x: number]: string;
        };
    };
    UMA: {
        name: string;
        symbol: string;
        decimals: number;
        addresses: {
            [x: number]: string;
        }; /**
         * Retrieves the ERC20 balance for a given address and token address.
         * @param address The address to retrieve the balance for.
         * @param tokenAddress The token address
         * @param signerOrProvider A valid ethers.js Signer or Provider object.
         * @param blockTag The block tag to retrieve the balance at.
         * @returns The balance of the given address for the given token address.
         */
    };
    USDC: {
        name: string;
        symbol: string;
        decimals: number;
        addresses: {
            [x: number]: string;
        };
    };
    USDT: {
        name: string;
        symbol: string;
        decimals: number;
        addresses: {
            [x: number]: string;
        };
    };
    WBTC: {
        name: string;
        symbol: string;
        decimals: number;
        addresses: {
            [x: number]: string;
        };
    };
    WETH: {
        name: string;
        symbol: string;
        decimals: number;
        addresses: {
            [x: number]: string;
        };
    };
    WMATIC: {
        name: string;
        symbol: string;
        decimals: number;
        addresses: {
            [x: number]: string;
        };
    };
    OP: {
        name: string;
        symbol: string;
        decimals: number;
        addresses: {
            [x: number]: string;
        };
    };
}): L1Token | undefined;
/**
 * Retrieves the ERC20 balance for a given address and token address.
 * @param address The address to retrieve the balance for.
 * @param tokenAddress The token address
 * @param signerOrProvider A valid ethers.js Signer or Provider object.
 * @param blockTag The block tag to retrieve the balance at.
 * @returns The balance of the given address for the given token address.
 */
export declare function getTokenBalance(address: string, tokenAddress: string, signerOrProvider: SignerOrProvider, blockTag?: BlockTag): Promise<BigNumber>;
export {};
