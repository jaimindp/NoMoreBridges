import { __awaiter, __generator } from "tslib";
import PinataClient from "@pinata/sdk";
import axios from "axios";
/**
 * Build an IPFS client for interacting with the IPFS API
 * @param APIKey The project ID
 * @param secretAPIKey The project secret
 * @returns An IPFS client for interacting with Pinata
 */
export function buildIPFSClient(APIKey, secretAPIKey) {
    return new PinataClient(APIKey, secretAPIKey);
}
/**
 * Retrieves a value from an IPFS gateway
 * @param contentHash The content hash of the value to retrieve
 * @param publicGatewayURL The URL of the public IPFS gateway to use
 * @returns The value retrieved from the IPFS gateway
 * @throws Error if the value could not be retrieved
 */
export function retrieveValueFromIPFS(contentHash, publicGatewayURL) {
    return __awaiter(this, void 0, void 0, function () {
        var result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, axios.get("".concat(publicGatewayURL, "/ipfs/").concat(contentHash), {
                        // We need to set the Accept header to text/plain to avoid
                        // any anomalies with the response
                        headers: {
                            Accept: "text/plain",
                        },
                        // We want just the raw response, not the parsed response
                        transformResponse: function (r) { return r; },
                    })];
                case 1:
                    result = _a.sent();
                    return [2 /*return*/, result.data];
            }
        });
    });
}
/**
 * Pins a value to the IPFS network
 * @param key A key to use for pinning the value. This is a metadata field.
 * @param content The value to pin
 * @param client The IPFS client to use
 * @returns The content hash of the pinned value
 */
export function storeValueInIPFS(key, content, client) {
    return __awaiter(this, void 0, void 0, function () {
        var result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, client.pinJSONToIPFS(JSON.parse(content), {
                        pinataMetadata: {
                            name: key,
                        },
                    })];
                case 1:
                    result = _a.sent();
                    return [2 /*return*/, result.IpfsHash];
            }
        });
    });
}
//# sourceMappingURL=IPFSUtils.js.map