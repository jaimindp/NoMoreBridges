import { CachingMechanismInterface } from "../interfaces";
/**
 * Base class for all clients to extend.
 */
export declare abstract class BaseAbstractClient {
    protected cachingMechanism?: CachingMechanismInterface | undefined;
    protected _isUpdated: boolean;
    firstBlockToSearch: number;
    latestBlockSearched: number;
    /**
     * Creates a new client.
     * @param cachingMechanism The caching mechanism to use for this client. If not provided, the client will not rely on an external cache.
     */
    constructor(cachingMechanism?: CachingMechanismInterface | undefined);
    /**
     * Indicates whether the client has been updated since it was created.
     * @returns Whether the client has been updated since it was created.
     */
    get isUpdated(): boolean;
    /**
     * Sets whether the client has been updated since it was created.
     * @param value Whether the client has been updated since it was created.
     * @throws Error if the client has already been updated and the value is false.
     */
    set isUpdated(value: boolean);
    /**
     * Asserts that the client has been updated.
     */
    protected assertUpdated(): void;
    /**
     * Determines if the client has an external cache.
     * @returns Whether the client has an external cache.
     */
    protected hasCachingMechanism(): boolean;
}
//# sourceMappingURL=BaseAbstractClient.d.ts.map