import { BigNumber, Contract, Event, providers } from "ethers";
import winston from "winston";
import { DepositWithBlock, FundsDepositedEvent, RealizedLpFee, RelayerRefundExecutionWithBlock, SlowFillRequestWithBlock, V2DepositWithBlock, V2FillWithBlock, V2SpeedUp, V3DepositWithBlock, V3FillWithBlock, V3SlowFillLeaf, V3SpeedUp } from "../../interfaces";
import { SpokePoolClient, SpokePoolUpdate } from "../SpokePoolClient";
import { EventManager, EventOverrides } from "./MockEvents";
type Block = providers.Block;
export declare class MockSpokePoolClient extends SpokePoolClient {
    eventManager: EventManager;
    private realizedLpFeePct;
    private realizedLpFeePctOverride;
    private destinationTokenForChainOverride;
    depositIdAtBlock: number[];
    numberOfDeposits: number;
    blocks: Record<number, Block>;
    constructor(logger: winston.Logger, spokePool: Contract, chainId: number, deploymentBlock: number);
    setDefaultRealizedLpFeePct(fee: BigNumber): void;
    clearDefaultRealizedLpFeePct(): void;
    computeRealizedLpFeePct(depositEvent: FundsDepositedEvent): Promise<RealizedLpFee>;
    batchComputeRealizedLpFeePct(depositEvents: FundsDepositedEvent[]): Promise<RealizedLpFee[]>;
    setDestinationTokenForChain(chainId: number, token: string): void;
    getDestinationTokenForDeposit(deposit: DepositWithBlock): string;
    setLatestBlockNumber(blockNumber: number): void;
    setDepositIds(_depositIds: number[]): void;
    _getDepositIdAtBlock(blockTag: number): Promise<number>;
    _update(eventsToQuery: string[]): Promise<SpokePoolUpdate>;
    readonly eventSignatures: Record<string, string>;
    deposit(deposit: V2DepositWithBlock): Event;
    depositV3(deposit: V3DepositWithBlock): Event;
    fillRelay(fill: V2FillWithBlock): Event;
    fillV3Relay(fill: V3FillWithBlock): Event;
    speedUpDeposit(speedUp: V2SpeedUp): Event;
    speedUpV3Deposit(speedUp: V3SpeedUp): Event;
    requestV3SlowFill(request: SlowFillRequestWithBlock): Event;
    executeV3SlowRelayLeaf(leaf: V3SlowFillLeaf): Event;
    executeRelayerRefundLeaf(refund: RelayerRefundExecutionWithBlock): Event;
    setEnableRoute(originToken: string, destinationChainId: number, enabled: boolean, overrides?: EventOverrides): Event;
}
export {};
//# sourceMappingURL=MockSpokePoolClient.d.ts.map