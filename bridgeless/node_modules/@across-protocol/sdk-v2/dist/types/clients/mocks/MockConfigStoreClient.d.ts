import winston from "winston";
import { Contract, Event } from "ethers";
import { EventSearchConfig, MakeOptional } from "../../utils";
import { AcrossConfigStoreClient, ConfigStoreUpdate } from "../AcrossConfigStoreClient";
import { EventOverrides } from "./MockEvents";
export declare class MockConfigStoreClient extends AcrossConfigStoreClient {
    configStoreVersion: number;
    private eventManager;
    private availableChainIdsOverride;
    readonly eventSignatures: Record<string, string>;
    constructor(logger: winston.Logger, configStore: Contract, eventSearchConfig: MakeOptional<EventSearchConfig, "toBlock"> | undefined, configStoreVersion: number, chainId?: number, mockUpdate?: boolean, availableChainIdsOverride?: number[]);
    setAvailableChains(chainIds: number[]): void;
    getChainIdIndicesForBlock(block?: number): number[];
    getConfigStoreVersionForBlock(_blockNumber: number): number;
    setConfigStoreVersion(version: number): void;
    _update(): Promise<ConfigStoreUpdate>;
    updateGlobalConfig(key: string, value: string, overrides?: EventOverrides): Event;
    updateTokenConfig(key: string, value: string, overrides?: EventOverrides): Event;
    private generateConfig;
}
//# sourceMappingURL=MockConfigStoreClient.d.ts.map