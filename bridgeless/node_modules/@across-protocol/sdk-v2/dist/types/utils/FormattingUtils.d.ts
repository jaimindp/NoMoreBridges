import { ethers } from "ethers";
import { BN } from "./BigNumberUtils";
export declare const formatWithMaxDecimals: (num: number | string, decimalPlaces: number, minPrecision: number, roundUp: boolean, showSign: boolean) => string;
export declare const createFormatFunction: (numDisplayedDecimals: number, minDisplayedPrecision: number, showSign?: boolean, decimals?: number) => (valInWei: string | BN) => string;
export declare const formatFeePct: (relayerFeePct: BN) => string;
/**
 * Shortens a lengthy hexadecimal string to a shorter version with an ellipsis in the middle.
 * @param hex A hexadecimal string to be shortened.
 * @param maxLength The maximum length of the shortened string. Defaults to 8.
 * @param delimiter The delimiter to use in the middle of the shortened string. Defaults to "...".
 * @returns The shortened hexadecimal string.
 * @example createShortHexString("0x772871a444c6e4e9903d8533a5a13101b74037158123e6709470f0afbf6e7d94") -> "0x7787...7d94"
 */
export declare function createShortHexString(hex: string, maxLength?: number, delimiter?: string): string;
/**
 * Converts a utf8 string to a hex string.
 * @param input The utf8 string to convert.
 * @returns The hex string.
 */
export declare function utf8ToHex(input: string): string;
/**
 * Converts a hexadecimal string to a utf8 string.
 * @param input The hexadecimal string to convert.
 * @returns The utf8 string.
 */
export declare function hexToUtf8(input: string): string;
/**
 * Converts a BigNumber to a 32-byte hexadecimal string.
 *
 * @param input - The BigNumber to convert.
 * @returns The 32-byte hexadecimal string representation of the input.
 */
export declare function bnToHex(input: BN): string;
/**
 * Converts a value from wei to a decimal value with the specified number of decimal places.
 * @param weiVal - The value in wei to convert.
 * @param decimals - The number of decimal places to include in the converted value.
 * @returns The converted value as a string.
 */
export declare function convertFromWei(weiVal: string, decimals: number): string;
/**
 * Shortens a list of addresses to a shorter version with only the first 10 characters.
 * @param addresses A list of addresses to shorten.
 * @returns A list of shortened addresses.
 * @see createShortHexString
 */
export declare function shortenHexStrings(addresses: string[]): string[];
export declare const formatWei: (num: string | BN) => string;
export declare const ConvertDecimals: (fromDecimals: number, toDecimals: number) => (amountIn: string | number | BN) => BN;
/**
 * Converts a numeric decimal-inclusive string to winston, the base unit of Arweave
 * @param numericString The numeric string to convert
 * @returns The winston representation of the numeric string as a BigNumber
 */
export declare function parseWinston(numericString: string): ethers.BigNumber;
/**
 * Converts a winston value to a numeric string
 * @param winstonValue The winston value to convert
 * @returns The numeric string representation of the winston value
 */
export declare function formatWinston(winstonValue: ethers.BigNumber): string;
//# sourceMappingURL=FormattingUtils.d.ts.map