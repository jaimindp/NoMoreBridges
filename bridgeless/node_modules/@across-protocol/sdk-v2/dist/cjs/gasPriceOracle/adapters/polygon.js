"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.polygonGasStation = void 0;
var tslib_1 = require("tslib");
var ethers_1 = require("ethers");
var baseAdapter_1 = require("../../priceClient/adapters/baseAdapter");
var TypeGuards_1 = require("../../utils/TypeGuards");
var util_1 = require("../util");
var ethereum_1 = require("./ethereum");
var PolygonGasStation = (function (_super) {
    tslib_1.__extends(PolygonGasStation, _super);
    function PolygonGasStation(_a) {
        var _this = this;
        var _b = _a === void 0 ? {} : _a, _c = _b.chainId, chainId = _c === void 0 ? 137 : _c, host = _b.host, _d = _b.timeout, timeout = _d === void 0 ? 1500 : _d, _e = _b.retries, retries = _e === void 0 ? 1 : _e;
        host = (host !== null && host !== void 0 ? host : chainId === 137) ? "gasstation.polygon.technology" : "gasstation-testnet.polygon.technology";
        _this = _super.call(this, "Polygon Gas Station", host, { timeout: timeout, retries: retries }) || this;
        _this.chainId = chainId;
        return _this;
    }
    PolygonGasStation.prototype.getFeeData = function (strategy) {
        if (strategy === void 0) { strategy = "fast"; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var gas, gasPrice, maxPriorityFeePerGas, maxFeePerGas;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.query("v2", {})];
                    case 1:
                        gas = _a.sent();
                        gasPrice = gas === null || gas === void 0 ? void 0 : gas[strategy];
                        if (!this.isPolygon1559GasPrice(gasPrice)) {
                            (0, util_1.gasPriceError)("getFeeData()", this.chainId, ethers_1.utils.parseUnits("0"));
                        }
                        [gasPrice.maxFee, gasPrice.maxPriorityFee].forEach(function (gasPrice) {
                            if (Number(gasPrice) < 0) {
                                (0, util_1.gasPriceError)("getFeeData()", _this.chainId, ethers_1.utils.parseUnits(gasPrice.toString(), 9));
                            }
                        });
                        maxPriorityFeePerGas = ethers_1.utils.parseUnits(gasPrice.maxPriorityFee.toString(), 9);
                        maxFeePerGas = ethers_1.utils.parseUnits(gasPrice.maxFee.toString(), 9);
                        return [2, { maxPriorityFeePerGas: maxPriorityFeePerGas, maxFeePerGas: maxFeePerGas }];
                }
            });
        });
    };
    PolygonGasStation.prototype.isPolygon1559GasPrice = function (gasPrice) {
        if (!(0, TypeGuards_1.isDefined)(gasPrice)) {
            return false;
        }
        var _gasPrice = gasPrice;
        return [_gasPrice.maxPriorityFee, _gasPrice.maxFee].every(function (field) { return ["number", "string"].includes(typeof field); });
    };
    return PolygonGasStation;
}(baseAdapter_1.BaseHTTPAdapter));
function polygonGasStation(provider, chainId) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var gasStation, err_1;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    gasStation = new PolygonGasStation({ chainId: chainId });
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 5]);
                    return [4, gasStation.getFeeData()];
                case 2: return [2, _a.sent()];
                case 3:
                    err_1 = _a.sent();
                    return [4, (0, ethereum_1.eip1559)(provider, chainId)];
                case 4: return [2, _a.sent()];
                case 5: return [2];
            }
        });
    });
}
exports.polygonGasStation = polygonGasStation;
//# sourceMappingURL=polygon.js.map