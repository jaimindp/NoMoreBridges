"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RelayFeeCalculator = exports.DEFAULT_LOGGER = exports.expectedCapitalCostsKeys = void 0;
var tslib_1 = require("tslib");
var assert_1 = tslib_1.__importDefault(require("assert"));
var utils_1 = require("../utils");
var constants_1 = require("../constants");
exports.expectedCapitalCostsKeys = ["lowerBound", "upperBound", "cutoff", "decimals"];
exports.DEFAULT_LOGGER = {
    debug: function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return console.debug(args);
    },
    info: function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return console.info(args);
    },
    warn: function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return console.warn(args);
    },
    error: function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return console.error(args);
    },
};
var safeOutputAmount = (0, utils_1.toBN)(100);
var RelayFeeCalculator = (function () {
    function RelayFeeCalculator(config, logger, destinationChainId) {
        (0, assert_1.default)(config, "config must be provided");
        if ("queries" in config) {
            this.queries = config.queries;
        }
        else {
            (0, assert_1.default)(destinationChainId !== undefined, "destinationChainId must be provided if queriesMap is provided");
            (0, assert_1.default)(config.queriesMap[destinationChainId], "No queries provided for destination chain");
            this.queries = config.queriesMap[destinationChainId];
        }
        this.gasDiscountPercent = config.gasDiscountPercent || 0;
        this.capitalDiscountPercent = config.capitalDiscountPercent || 0;
        this.feeLimitPercent = config.feeLimitPercent || 0;
        this.nativeTokenDecimals = config.nativeTokenDecimals || 18;
        (0, assert_1.default)(this.gasDiscountPercent >= 0 && this.gasDiscountPercent <= 100, "gasDiscountPercent must be between 0 and 100 percent");
        (0, assert_1.default)(this.capitalDiscountPercent >= 0 && this.capitalDiscountPercent <= 100, "capitalDiscountPercent must be between 0 and 100 percent");
        (0, assert_1.default)(this.feeLimitPercent >= 0 && this.feeLimitPercent <= 100, "feeLimitPercent must be between 0 and 100 percent");
        this.capitalCostsConfig = Object.fromEntries(Object.entries(config.capitalCostsConfig).map(function (_a) {
            var token = _a[0], capitalCosts = _a[1];
            return [token.toUpperCase(), RelayFeeCalculator.validateAndTransformCapitalCostsConfigOverride(capitalCosts)];
        }));
        (0, assert_1.default)(Object.keys(this.capitalCostsConfig).length > 0, "capitalCostsConfig must have at least one entry");
        this.logger = logger || exports.DEFAULT_LOGGER;
    }
    RelayFeeCalculator.capitalCostConfigIsOverride = function (config) {
        return config.default !== undefined;
    };
    RelayFeeCalculator.validateAndTransformCapitalCostsConfigOverride = function (capitalCosts) {
        var config = this.capitalCostConfigIsOverride(capitalCosts)
            ? capitalCosts
            : { default: capitalCosts };
        this.validateCapitalCostsConfig(config.default);
        for (var _i = 0, _a = Object.values(config.routeOverrides || {}); _i < _a.length; _i++) {
            var toChainIdRoutes = _a[_i];
            for (var _b = 0, _c = Object.values(toChainIdRoutes); _b < _c.length; _b++) {
                var override = _c[_b];
                this.validateCapitalCostsConfig(override);
            }
        }
        return config;
    };
    RelayFeeCalculator.validateCapitalCostsConfig = function (capitalCosts) {
        (0, assert_1.default)((0, utils_1.toBN)(capitalCosts.upperBound).lt((0, utils_1.toBNWei)("0.01")), "upper bound must be < 1%");
        (0, assert_1.default)((0, utils_1.toBN)(capitalCosts.lowerBound).lte(capitalCosts.upperBound), "lower bound must be <= upper bound");
        (0, assert_1.default)(capitalCosts.decimals > 0 && capitalCosts.decimals <= 18, "invalid decimals");
    };
    RelayFeeCalculator.prototype.getTokenPrice = function (tokenSymbol) {
        return this.queries.getTokenPrice(tokenSymbol);
    };
    RelayFeeCalculator.prototype.gasFeePercent = function (deposit, amountToRelay, simulateZeroFill, relayerAddress, _tokenPrice, tokenMapping) {
        if (simulateZeroFill === void 0) { simulateZeroFill = false; }
        if (relayerAddress === void 0) { relayerAddress = constants_1.DEFAULT_SIMULATED_RELAYER_ADDRESS; }
        if (tokenMapping === void 0) { tokenMapping = constants_1.TOKEN_SYMBOLS_MAP; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var inputToken, token, simulatedAmount, getGasCosts, getTokenPrice, _a, tokenGasCost, tokenPrice, gasFeesInToken;
            var _this = this;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if ((0, utils_1.toBN)(amountToRelay).eq(utils_1.bnZero))
                            return [2, utils_1.MAX_BIG_INT];
                        inputToken = (0, utils_1.getDepositInputToken)(deposit);
                        token = (0, utils_1.getTokenInformationFromAddress)(inputToken, tokenMapping);
                        if (!(0, utils_1.isDefined)(token)) {
                            throw new Error("Could not find token information for ".concat(inputToken));
                        }
                        simulatedAmount = simulateZeroFill ? safeOutputAmount : (0, utils_1.toBN)(amountToRelay);
                        deposit = (0, utils_1.isV2Deposit)(deposit)
                            ? tslib_1.__assign(tslib_1.__assign({}, deposit), { amount: simulatedAmount }) : tslib_1.__assign(tslib_1.__assign({}, deposit), { outputAmount: simulatedAmount });
                        getGasCosts = this.queries.getGasCosts(deposit, simulatedAmount, relayerAddress).catch(function (error) {
                            _this.logger.error({
                                at: "sdk-v2/gasFeePercent",
                                message: "Error while fetching gas costs",
                                error: error,
                                simulateZeroFill: simulateZeroFill,
                                deposit: deposit,
                            });
                            throw error;
                        });
                        getTokenPrice = this.queries.getTokenPrice(token.symbol).catch(function (error) {
                            _this.logger.error({
                                at: "sdk-v2/gasFeePercent",
                                message: "Error while fetching token price",
                                error: error,
                                destinationChainId: deposit.destinationChainId,
                                inputToken: inputToken,
                            });
                            throw error;
                        });
                        return [4, Promise.all([
                                getGasCosts,
                                _tokenPrice !== undefined ? _tokenPrice : getTokenPrice,
                            ])];
                    case 1:
                        _a = _b.sent(), tokenGasCost = _a[0].tokenGasCost, tokenPrice = _a[1];
                        gasFeesInToken = (0, utils_1.nativeToToken)(tokenGasCost, tokenPrice, token.decimals, this.nativeTokenDecimals);
                        return [2, (0, utils_1.percent)(gasFeesInToken, amountToRelay.toString())];
                }
            });
        });
    };
    RelayFeeCalculator.prototype.capitalFeePercent = function (_amountToRelay, _tokenSymbol, _originRoute, _destinationRoute) {
        var _a, _b, _c;
        if ((0, utils_1.toBN)(_amountToRelay).eq((0, utils_1.toBN)(0)))
            return utils_1.MAX_BIG_INT;
        var tokenCostConfig = this.capitalCostsConfig[_tokenSymbol.toUpperCase()];
        if (!(0, utils_1.isDefined)(tokenCostConfig)) {
            this.logger.error({
                at: "sdk-v2/capitalFeePercent",
                message: "No capital fee available for token ".concat(_tokenSymbol),
            });
            throw new Error("No capital cost config available for token ".concat(_tokenSymbol));
        }
        else {
            var config = (0, utils_1.isDefined)(_originRoute) && (0, utils_1.isDefined)(_destinationRoute)
                ? (_c = (_b = (_a = tokenCostConfig.routeOverrides) === null || _a === void 0 ? void 0 : _a[_originRoute]) === null || _b === void 0 ? void 0 : _b[_destinationRoute]) !== null && _c !== void 0 ? _c : tokenCostConfig.default
                : tokenCostConfig.default;
            var y = (0, utils_1.toBN)(_amountToRelay).mul((0, utils_1.toBNWei)("1", 18 - config.decimals));
            var minCharge = (0, utils_1.toBN)(config.lowerBound).mul(y).div(utils_1.fixedPointAdjustment);
            var yTriangle = (0, utils_1.min)(config.cutoff, y);
            var triangleSlope = (0, utils_1.toBN)(config.cutoff).eq((0, utils_1.toBN)(0))
                ? (0, utils_1.toBN)(0)
                : (0, utils_1.toBN)(config.upperBound).sub(config.lowerBound).mul(utils_1.fixedPointAdjustment).div(config.cutoff);
            var triangleHeight = triangleSlope.mul(yTriangle).div(utils_1.fixedPointAdjustment);
            var triangleCharge = triangleHeight.mul(yTriangle).div((0, utils_1.toBNWei)(2));
            var yRemainder = (0, utils_1.max)((0, utils_1.toBN)(0), y.sub(config.cutoff));
            var remainderCharge = yRemainder.mul((0, utils_1.toBN)(config.upperBound).sub(config.lowerBound)).div(utils_1.fixedPointAdjustment);
            return minCharge.add(triangleCharge).add(remainderCharge).mul(utils_1.fixedPointAdjustment).div(y);
        }
    };
    RelayFeeCalculator.prototype.relayerFeeDetails = function (deposit, amountToRelay, simulateZeroFill, relayerAddress, _tokenPrice) {
        if (simulateZeroFill === void 0) { simulateZeroFill = false; }
        if (relayerAddress === void 0) { relayerAddress = constants_1.DEFAULT_SIMULATED_RELAYER_ADDRESS; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var inputToken, token, gasFeePercent, gasFeeTotal, capitalFeePercent, capitalFeeTotal, relayFeePercent, relayFeeTotal, maxGasFeePercent, minDeposit, isAmountTooLow;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        amountToRelay !== null && amountToRelay !== void 0 ? amountToRelay : (amountToRelay = (0, utils_1.getDepositOutputAmount)(deposit));
                        inputToken = (0, utils_1.getDepositInputToken)(deposit);
                        token = (0, utils_1.getTokenInformationFromAddress)(inputToken);
                        if (!(0, utils_1.isDefined)(token)) {
                            throw new Error("Could not find token information for ".concat(inputToken));
                        }
                        return [4, this.gasFeePercent(deposit, amountToRelay, simulateZeroFill, relayerAddress, _tokenPrice)];
                    case 1:
                        gasFeePercent = _a.sent();
                        gasFeeTotal = gasFeePercent.mul(amountToRelay).div(utils_1.fixedPointAdjustment);
                        capitalFeePercent = this.capitalFeePercent(amountToRelay, token.symbol, deposit.originChainId.toString(), deposit.destinationChainId.toString());
                        capitalFeeTotal = capitalFeePercent.mul(amountToRelay).div(utils_1.fixedPointAdjustment);
                        relayFeePercent = gasFeePercent.add(capitalFeePercent);
                        relayFeeTotal = gasFeeTotal.add(capitalFeeTotal);
                        maxGasFeePercent = (0, utils_1.max)((0, utils_1.toBNWei)(this.feeLimitPercent / 100).sub(capitalFeePercent), (0, utils_1.toBN)(0));
                        if (maxGasFeePercent.eq((0, utils_1.toBN)(0))) {
                            minDeposit = utils_1.MAX_BIG_INT;
                            isAmountTooLow = true;
                        }
                        else {
                            minDeposit = gasFeeTotal.mul(utils_1.fixedPointAdjustment).div(maxGasFeePercent);
                            isAmountTooLow = (0, utils_1.toBN)(amountToRelay).lt(minDeposit);
                        }
                        return [2, {
                                amountToRelay: amountToRelay.toString(),
                                tokenSymbol: token.symbol,
                                gasFeePercent: gasFeePercent.toString(),
                                gasFeeTotal: gasFeeTotal.toString(),
                                gasDiscountPercent: this.gasDiscountPercent,
                                capitalFeePercent: capitalFeePercent.toString(),
                                capitalFeeTotal: capitalFeeTotal.toString(),
                                capitalDiscountPercent: this.capitalDiscountPercent,
                                relayFeePercent: relayFeePercent.toString(),
                                relayFeeTotal: relayFeeTotal.toString(),
                                feeLimitPercent: this.feeLimitPercent,
                                maxGasFeePercent: maxGasFeePercent.toString(),
                                minDeposit: minDeposit.toString(),
                                isAmountTooLow: isAmountTooLow,
                            }];
                }
            });
        });
    };
    return RelayFeeCalculator;
}());
exports.RelayFeeCalculator = RelayFeeCalculator;
//# sourceMappingURL=relayFeeCalculator.js.map