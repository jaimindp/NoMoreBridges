import { BigNumber } from "ethers";
import { BigNumberish, TransactionCostEstimate } from "../utils";
import { Deposit } from "../interfaces";
export interface QueryInterface {
    getGasCosts: (deposit: Deposit, fillAmount: BigNumberish, relayer: string) => Promise<TransactionCostEstimate>;
    getTokenPrice: (tokenSymbol: string) => Promise<number>;
    getTokenDecimals: (tokenSymbol: string) => number;
}
export declare const expectedCapitalCostsKeys: string[];
export interface CapitalCostConfig {
    lowerBound: string;
    upperBound: string;
    cutoff: string;
    decimals: number;
}
type ChainIdAsString = string;
export interface CapitalCostConfigOverride {
    default: CapitalCostConfig;
    routeOverrides?: Record<ChainIdAsString, Record<ChainIdAsString, CapitalCostConfig>>;
}
export type RelayCapitalCostConfig = CapitalCostConfigOverride | CapitalCostConfig;
export interface BaseRelayFeeCalculatorConfig {
    nativeTokenDecimals?: number;
    gasDiscountPercent?: number;
    capitalDiscountPercent?: number;
    feeLimitPercent?: number;
    capitalCostsConfig: {
        [token: string]: CapitalCostConfig | CapitalCostConfigOverride;
    };
}
export interface RelayFeeCalculatorConfigWithQueries extends BaseRelayFeeCalculatorConfig {
    queries: QueryInterface;
}
export interface RelayFeeCalculatorConfigWithMap extends BaseRelayFeeCalculatorConfig {
    queriesMap: Record<number, QueryInterface>;
}
export type RelayFeeCalculatorConfig = RelayFeeCalculatorConfigWithQueries | RelayFeeCalculatorConfigWithMap;
export interface RelayerFeeDetails {
    amountToRelay: string;
    tokenSymbol: string;
    gasFeePercent: string;
    gasFeeTotal: string;
    gasDiscountPercent: number;
    capitalFeePercent: string;
    capitalFeeTotal: string;
    capitalDiscountPercent: number;
    relayFeePercent: string;
    relayFeeTotal: string;
    feeLimitPercent: number;
    isAmountTooLow: boolean;
    maxGasFeePercent: string;
    minDeposit: string;
}
export interface LoggingFunction {
    (data: {
        at: string;
        message: string;
        [key: string]: unknown;
    }): void;
}
export interface Logger {
    debug: LoggingFunction;
    info: LoggingFunction;
    warn: LoggingFunction;
    error: LoggingFunction;
}
export declare const DEFAULT_LOGGER: Logger;
export declare class RelayFeeCalculator {
    private queries;
    private gasDiscountPercent;
    private capitalDiscountPercent;
    private feeLimitPercent;
    private nativeTokenDecimals;
    private capitalCostsConfig;
    private logger;
    constructor(config: RelayFeeCalculatorConfigWithQueries, logger?: Logger);
    constructor(config: RelayFeeCalculatorConfigWithMap, logger?: Logger, destinationChainId?: number);
    private static capitalCostConfigIsOverride;
    static validateAndTransformCapitalCostsConfigOverride(capitalCosts: CapitalCostConfigOverride | CapitalCostConfig): CapitalCostConfigOverride;
    static validateCapitalCostsConfig(capitalCosts: CapitalCostConfig): void;
    getTokenPrice(tokenSymbol: string): Promise<number>;
    gasFeePercent(deposit: Deposit, amountToRelay: BigNumberish, simulateZeroFill?: boolean, relayerAddress?: string, _tokenPrice?: number, tokenMapping?: {
        ACX: {
            name: string;
            symbol: string;
            decimals: number;
            addresses: {
                [x: number]: string;
            };
        };
        BAL: {
            name: string;
            symbol: string;
            decimals: number;
            addresses: {
                [x: number]: string;
            };
        };
        BADGER: {
            name: string;
            symbol: string;
            decimals: number;
            addresses: {
                [x: number]: string;
            };
        };
        BOBA: {
            name: string;
            symbol: string;
            decimals: number;
            addresses: {
                [x: number]: string;
            };
        };
        DAI: {
            name: string;
            symbol: string;
            decimals: number;
            addresses: {
                [x: number]: string;
            };
        };
        ETH: {
            name: string;
            symbol: string;
            decimals: number;
            addresses: {
                [x: number]: string;
            };
        };
        MATIC: {
            name: string;
            symbol: string;
            decimals: number;
            addresses: {
                [x: number]: string;
            };
        };
        POOL: {
            name: string;
            symbol: string;
            decimals: number;
            addresses: {
                [x: number]: string;
            };
        };
        SNX: {
            name: string;
            symbol: string;
            decimals: number;
            addresses: {
                [x: number]: string;
            };
        };
        UMA: {
            name: string;
            symbol: string;
            decimals: number;
            addresses: {
                [x: number]: string;
            };
        };
        USDC: {
            name: string;
            symbol: string;
            decimals: number;
            addresses: {
                [x: number]: string;
            };
        };
        USDT: {
            name: string;
            symbol: string;
            decimals: number;
            addresses: {
                [x: number]: string;
            };
        };
        WBTC: {
            name: string;
            symbol: string;
            decimals: number;
            addresses: {
                [x: number]: string;
            };
        };
        WETH: {
            name: string;
            symbol: string;
            decimals: number;
            addresses: {
                [x: number]: string;
            };
        };
        WMATIC: {
            name: string;
            symbol: string;
            decimals: number;
            addresses: {
                [x: number]: string;
            };
        };
        OP: {
            name: string;
            symbol: string;
            decimals: number;
            addresses: {
                [x: number]: string;
            };
        };
    }): Promise<BigNumber>;
    capitalFeePercent(_amountToRelay: BigNumberish, _tokenSymbol: string, _originRoute?: ChainIdAsString, _destinationRoute?: ChainIdAsString): BigNumber;
    relayerFeeDetails(deposit: Deposit, amountToRelay?: BigNumberish, simulateZeroFill?: boolean, relayerAddress?: string, _tokenPrice?: number): Promise<RelayerFeeDetails>;
}
export {};
