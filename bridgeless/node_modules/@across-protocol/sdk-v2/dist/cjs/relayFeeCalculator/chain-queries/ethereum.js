"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EthereumSepoliaQueries = exports.EthereumGoerliQueries = exports.EthereumQueries = void 0;
var tslib_1 = require("tslib");
var constants_1 = require("../../constants");
var DeploymentUtils_1 = require("../../utils/DeploymentUtils");
var relayFeeCalculator_1 = require("../relayFeeCalculator");
var baseQuery_1 = tslib_1.__importDefault(require("./baseQuery"));
var EthereumQueries = (function (_super) {
    tslib_1.__extends(EthereumQueries, _super);
    function EthereumQueries(provider, symbolMapping, spokePoolAddress, simulatedRelayerAddress, coingeckoProApiKey, logger, gasMarkup) {
        if (symbolMapping === void 0) { symbolMapping = constants_1.TOKEN_SYMBOLS_MAP; }
        if (spokePoolAddress === void 0) { spokePoolAddress = (0, DeploymentUtils_1.getDeployedAddress)("SpokePool", constants_1.CHAIN_IDs.MAINNET); }
        if (simulatedRelayerAddress === void 0) { simulatedRelayerAddress = constants_1.DEFAULT_SIMULATED_RELAYER_ADDRESS; }
        if (logger === void 0) { logger = relayFeeCalculator_1.DEFAULT_LOGGER; }
        if (gasMarkup === void 0) { gasMarkup = 0; }
        return _super.call(this, provider, symbolMapping, spokePoolAddress, simulatedRelayerAddress, gasMarkup, logger, coingeckoProApiKey) || this;
    }
    return EthereumQueries;
}(baseQuery_1.default));
exports.EthereumQueries = EthereumQueries;
var EthereumGoerliQueries = (function (_super) {
    tslib_1.__extends(EthereumGoerliQueries, _super);
    function EthereumGoerliQueries(provider, symbolMapping, spokePoolAddress, simulatedRelayerAddress, coingeckoProApiKey, logger, gasMarkup) {
        if (symbolMapping === void 0) { symbolMapping = constants_1.TOKEN_SYMBOLS_MAP; }
        if (spokePoolAddress === void 0) { spokePoolAddress = (0, DeploymentUtils_1.getDeployedAddress)("SpokePool", constants_1.CHAIN_IDs.GOERLI); }
        if (simulatedRelayerAddress === void 0) { simulatedRelayerAddress = constants_1.DEFAULT_SIMULATED_RELAYER_ADDRESS_TEST; }
        if (logger === void 0) { logger = relayFeeCalculator_1.DEFAULT_LOGGER; }
        if (gasMarkup === void 0) { gasMarkup = 0; }
        return _super.call(this, provider, symbolMapping, spokePoolAddress, simulatedRelayerAddress, gasMarkup, logger, coingeckoProApiKey) || this;
    }
    return EthereumGoerliQueries;
}(baseQuery_1.default));
exports.EthereumGoerliQueries = EthereumGoerliQueries;
var EthereumSepoliaQueries = (function (_super) {
    tslib_1.__extends(EthereumSepoliaQueries, _super);
    function EthereumSepoliaQueries(provider, symbolMapping, spokePoolAddress, simulatedRelayerAddress, coingeckoProApiKey, logger, gasMarkup) {
        if (symbolMapping === void 0) { symbolMapping = constants_1.TOKEN_SYMBOLS_MAP; }
        if (spokePoolAddress === void 0) { spokePoolAddress = (0, DeploymentUtils_1.getDeployedAddress)("SpokePool", constants_1.CHAIN_IDs.SEPOLIA); }
        if (simulatedRelayerAddress === void 0) { simulatedRelayerAddress = constants_1.DEFAULT_SIMULATED_RELAYER_ADDRESS_TEST; }
        if (logger === void 0) { logger = relayFeeCalculator_1.DEFAULT_LOGGER; }
        if (gasMarkup === void 0) { gasMarkup = 0; }
        return _super.call(this, provider, symbolMapping, spokePoolAddress, simulatedRelayerAddress, gasMarkup, logger, coingeckoProApiKey) || this;
    }
    return EthereumSepoliaQueries;
}(baseQuery_1.default));
exports.EthereumSepoliaQueries = EthereumSepoliaQueries;
//# sourceMappingURL=ethereum.js.map