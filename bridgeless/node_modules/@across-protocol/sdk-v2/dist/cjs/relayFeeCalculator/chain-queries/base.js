"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseSepoliaQueries = exports.BaseGoerliQueries = exports.BaseQueries = void 0;
var tslib_1 = require("tslib");
var DeploymentUtils_1 = require("../../utils/DeploymentUtils");
var relayFeeCalculator_1 = require("../relayFeeCalculator");
var constants_1 = require("../../constants");
var l2_provider_1 = require("@eth-optimism/sdk/dist/l2-provider");
var baseQuery_1 = tslib_1.__importDefault(require("./baseQuery"));
var baseChainId = 8453;
var baseGoerliChainId = 84531;
var baseSepoliaChainId = 84532;
var BaseQueries = (function (_super) {
    tslib_1.__extends(BaseQueries, _super);
    function BaseQueries(provider, symbolMapping, spokePoolAddress, simulatedRelayerAddress, coingeckoProApiKey, logger, gasMarkup) {
        if (symbolMapping === void 0) { symbolMapping = constants_1.TOKEN_SYMBOLS_MAP; }
        if (spokePoolAddress === void 0) { spokePoolAddress = (0, DeploymentUtils_1.getDeployedAddress)("SpokePool", baseChainId); }
        if (simulatedRelayerAddress === void 0) { simulatedRelayerAddress = constants_1.DEFAULT_SIMULATED_RELAYER_ADDRESS; }
        if (logger === void 0) { logger = relayFeeCalculator_1.DEFAULT_LOGGER; }
        if (gasMarkup === void 0) { gasMarkup = 0; }
        return _super.call(this, (0, l2_provider_1.asL2Provider)(provider), symbolMapping, spokePoolAddress, simulatedRelayerAddress, gasMarkup, logger, coingeckoProApiKey) || this;
    }
    return BaseQueries;
}(baseQuery_1.default));
exports.BaseQueries = BaseQueries;
var BaseGoerliQueries = (function (_super) {
    tslib_1.__extends(BaseGoerliQueries, _super);
    function BaseGoerliQueries(provider, symbolMapping, spokePoolAddress, simulatedRelayerAddress, coingeckoProApiKey, logger, gasMarkup) {
        if (symbolMapping === void 0) { symbolMapping = constants_1.TOKEN_SYMBOLS_MAP; }
        if (spokePoolAddress === void 0) { spokePoolAddress = (0, DeploymentUtils_1.getDeployedAddress)("SpokePool", baseGoerliChainId); }
        if (simulatedRelayerAddress === void 0) { simulatedRelayerAddress = constants_1.DEFAULT_SIMULATED_RELAYER_ADDRESS_TEST; }
        if (logger === void 0) { logger = relayFeeCalculator_1.DEFAULT_LOGGER; }
        if (gasMarkup === void 0) { gasMarkup = 0; }
        return _super.call(this, (0, l2_provider_1.asL2Provider)(provider), symbolMapping, spokePoolAddress, simulatedRelayerAddress, gasMarkup, logger, coingeckoProApiKey) || this;
    }
    return BaseGoerliQueries;
}(baseQuery_1.default));
exports.BaseGoerliQueries = BaseGoerliQueries;
var BaseSepoliaQueries = (function (_super) {
    tslib_1.__extends(BaseSepoliaQueries, _super);
    function BaseSepoliaQueries(provider, symbolMapping, spokePoolAddress, simulatedRelayerAddress, coingeckoProApiKey, logger, gasMarkup) {
        if (symbolMapping === void 0) { symbolMapping = constants_1.TOKEN_SYMBOLS_MAP; }
        if (spokePoolAddress === void 0) { spokePoolAddress = (0, DeploymentUtils_1.getDeployedAddress)("SpokePool", baseSepoliaChainId); }
        if (simulatedRelayerAddress === void 0) { simulatedRelayerAddress = constants_1.DEFAULT_SIMULATED_RELAYER_ADDRESS_TEST; }
        if (logger === void 0) { logger = relayFeeCalculator_1.DEFAULT_LOGGER; }
        if (gasMarkup === void 0) { gasMarkup = 0; }
        return _super.call(this, (0, l2_provider_1.asL2Provider)(provider), symbolMapping, spokePoolAddress, simulatedRelayerAddress, gasMarkup, logger, coingeckoProApiKey) || this;
    }
    return BaseSepoliaQueries;
}(baseQuery_1.default));
exports.BaseSepoliaQueries = BaseSepoliaQueries;
//# sourceMappingURL=base.js.map