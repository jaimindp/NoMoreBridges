import { Logger } from "../relayFeeCalculator";
import { providers } from "ethers";
import QueryBase from "./baseQuery";
export declare class BaseQueries extends QueryBase {
    constructor(provider: providers.Provider, symbolMapping?: {
        ACX: {
            name: string;
            symbol: string;
            decimals: number;
            addresses: {
                [x: number]: string;
            };
        };
        BAL: {
            name: string;
            symbol: string;
            decimals: number;
            addresses: {
                [x: number]: string;
            };
        };
        BADGER: {
            name: string;
            symbol: string;
            decimals: number;
            addresses: {
                [x: number]: string;
            };
        };
        BOBA: {
            name: string;
            symbol: string;
            decimals: number;
            addresses: {
                [x: number]: string;
            };
        };
        DAI: {
            name: string;
            symbol: string;
            decimals: number;
            addresses: {
                [x: number]: string;
            };
        };
        ETH: {
            name: string;
            symbol: string;
            decimals: number;
            addresses: {
                [x: number]: string;
            };
        };
        MATIC: {
            name: string;
            symbol: string;
            decimals: number;
            addresses: {
                [x: number]: string;
            };
        };
        POOL: {
            name: string;
            symbol: string;
            decimals: number;
            addresses: {
                [x: number]: string;
            };
        };
        SNX: {
            name: string;
            symbol: string;
            decimals: number;
            addresses: {
                [x: number]: string;
            };
        };
        UMA: {
            name: string;
            symbol: string;
            decimals: number;
            addresses: {
                [x: number]: string;
            };
        };
        USDC: {
            name: string;
            symbol: string;
            decimals: number;
            addresses: {
                [x: number]: string;
            };
        };
        USDT: {
            name: string;
            symbol: string;
            decimals: number;
            addresses: {
                [x: number]: string;
            };
        };
        WBTC: {
            name: string;
            symbol: string;
            decimals: number;
            addresses: {
                [x: number]: string;
            };
        };
        WETH: {
            name: string;
            symbol: string;
            decimals: number;
            addresses: {
                [x: number]: string;
            };
        };
        WMATIC: {
            name: string;
            symbol: string;
            decimals: number;
            addresses: {
                [x: number]: string;
            };
        };
        OP: {
            name: string;
            symbol: string;
            decimals: number;
            addresses: {
                [x: number]: string;
            };
        };
    }, spokePoolAddress?: string, simulatedRelayerAddress?: string, coingeckoProApiKey?: string, logger?: Logger, gasMarkup?: number);
}
export declare class BaseGoerliQueries extends QueryBase {
    constructor(provider: providers.Provider, symbolMapping?: {
        ACX: {
            name: string;
            symbol: string;
            decimals: number;
            addresses: {
                [x: number]: string;
            };
        };
        BAL: {
            name: string;
            symbol: string;
            decimals: number;
            addresses: {
                [x: number]: string;
            };
        };
        BADGER: {
            name: string;
            symbol: string;
            decimals: number;
            addresses: {
                [x: number]: string;
            };
        };
        BOBA: {
            name: string;
            symbol: string;
            decimals: number;
            addresses: {
                [x: number]: string;
            };
        };
        DAI: {
            name: string;
            symbol: string;
            decimals: number;
            addresses: {
                [x: number]: string;
            };
        };
        ETH: {
            name: string;
            symbol: string;
            decimals: number;
            addresses: {
                [x: number]: string;
            };
        };
        MATIC: {
            name: string;
            symbol: string;
            decimals: number;
            addresses: {
                [x: number]: string;
            };
        };
        POOL: {
            name: string;
            symbol: string;
            decimals: number;
            addresses: {
                [x: number]: string;
            };
        };
        SNX: {
            name: string;
            symbol: string;
            decimals: number;
            addresses: {
                [x: number]: string;
            };
        };
        UMA: {
            name: string;
            symbol: string;
            decimals: number;
            addresses: {
                [x: number]: string;
            };
        };
        USDC: {
            name: string;
            symbol: string;
            decimals: number;
            addresses: {
                [x: number]: string;
            };
        };
        USDT: {
            name: string;
            symbol: string;
            decimals: number;
            addresses: {
                [x: number]: string;
            };
        };
        WBTC: {
            name: string;
            symbol: string;
            decimals: number;
            addresses: {
                [x: number]: string;
            };
        };
        WETH: {
            name: string;
            symbol: string;
            decimals: number;
            addresses: {
                [x: number]: string;
            };
        };
        WMATIC: {
            name: string;
            symbol: string;
            decimals: number;
            addresses: {
                [x: number]: string;
            };
        };
        OP: {
            name: string;
            symbol: string;
            decimals: number;
            addresses: {
                [x: number]: string;
            };
        };
    }, spokePoolAddress?: string, simulatedRelayerAddress?: string, coingeckoProApiKey?: string, logger?: Logger, gasMarkup?: number);
}
export declare class BaseSepoliaQueries extends QueryBase {
    constructor(provider: providers.Provider, symbolMapping?: {
        ACX: {
            name: string;
            symbol: string;
            decimals: number;
            addresses: {
                [x: number]: string;
            };
        };
        BAL: {
            name: string;
            symbol: string;
            decimals: number;
            addresses: {
                [x: number]: string;
            };
        };
        BADGER: {
            name: string;
            symbol: string;
            decimals: number;
            addresses: {
                [x: number]: string;
            };
        };
        BOBA: {
            name: string;
            symbol: string;
            decimals: number;
            addresses: {
                [x: number]: string;
            };
        };
        DAI: {
            name: string;
            symbol: string;
            decimals: number;
            addresses: {
                [x: number]: string;
            };
        };
        ETH: {
            name: string;
            symbol: string;
            decimals: number;
            addresses: {
                [x: number]: string;
            };
        };
        MATIC: {
            name: string;
            symbol: string;
            decimals: number;
            addresses: {
                [x: number]: string;
            };
        };
        POOL: {
            name: string;
            symbol: string;
            decimals: number;
            addresses: {
                [x: number]: string;
            };
        };
        SNX: {
            name: string;
            symbol: string;
            decimals: number;
            addresses: {
                [x: number]: string;
            };
        };
        UMA: {
            name: string;
            symbol: string;
            decimals: number;
            addresses: {
                [x: number]: string;
            };
        };
        USDC: {
            name: string;
            symbol: string;
            decimals: number;
            addresses: {
                [x: number]: string;
            };
        };
        USDT: {
            name: string;
            symbol: string;
            decimals: number;
            addresses: {
                [x: number]: string;
            };
        };
        WBTC: {
            name: string;
            symbol: string;
            decimals: number;
            addresses: {
                [x: number]: string;
            };
        };
        WETH: {
            name: string;
            symbol: string;
            decimals: number;
            addresses: {
                [x: number]: string;
            };
        };
        WMATIC: {
            name: string;
            symbol: string;
            decimals: number;
            addresses: {
                [x: number]: string;
            };
        };
        OP: {
            name: string;
            symbol: string;
            decimals: number;
            addresses: {
                [x: number]: string;
            };
        };
    }, spokePoolAddress?: string, simulatedRelayerAddress?: string, coingeckoProApiKey?: string, logger?: Logger, gasMarkup?: number);
}
