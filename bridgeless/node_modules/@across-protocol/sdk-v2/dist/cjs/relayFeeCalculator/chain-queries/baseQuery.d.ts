import { SpokePool } from "../../typechain";
import { L2Provider } from "@eth-optimism/sdk/dist/interfaces/l2-provider";
import { providers } from "ethers";
import { BigNumberish, TransactionCostEstimate } from "../../utils";
import { Logger, QueryInterface } from "../relayFeeCalculator";
import { Deposit, V2Deposit, V3Deposit } from "../../interfaces";
type Provider = providers.Provider;
type OptimismProvider = L2Provider<Provider>;
type SymbolMappingType = Record<string, {
    addresses: Record<number, string>;
    decimals: number;
}>;
export default abstract class QueryBase implements QueryInterface {
    readonly provider: Provider | OptimismProvider;
    readonly symbolMapping: SymbolMappingType;
    readonly spokePoolAddress: string;
    readonly simulatedRelayerAddress: string;
    readonly gasMarkup: number;
    readonly logger: Logger;
    readonly coingeckoProApiKey?: string | undefined;
    readonly fixedGasPrice?: import("ethers").BigNumberish | undefined;
    readonly coingeckoBaseCurrency: string;
    readonly spokePool: SpokePool;
    protected constructor(provider: Provider | OptimismProvider, symbolMapping: SymbolMappingType, spokePoolAddress: string, simulatedRelayerAddress: string, gasMarkup: number, logger: Logger, coingeckoProApiKey?: string | undefined, fixedGasPrice?: import("ethers").BigNumberish | undefined, coingeckoBaseCurrency?: string);
    getGasCosts(deposit: Deposit, fillAmount: BigNumberish, relayer?: string): Promise<TransactionCostEstimate>;
    getV2GasCosts(deposit: V2Deposit, amountToRelay: BigNumberish, relayer: string): Promise<TransactionCostEstimate>;
    getV3GasCosts(deposit: V3Deposit, relayer: string): Promise<TransactionCostEstimate>;
    getTokenPrice(tokenSymbol: string): Promise<number>;
    getTokenDecimals(tokenSymbol: string): number;
}
export {};
