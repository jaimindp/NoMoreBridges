"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseAndReturnRateModelFromString = exports.RateModelDictionary = void 0;
var ethers_1 = require("ethers");
var utils_1 = require("../utils");
var expectedRateModelKeys = ["UBar", "R0", "R1", "R2"];
var RateModelDictionary = (function () {
    function RateModelDictionary() {
        this.rateModelDictionary = {};
    }
    RateModelDictionary.prototype._throwIfNotInitialized = function () {
        if (Object.keys(this.rateModelDictionary).length == 0)
            throw new Error("RateModelUtility method called before updating rate model dictionary!");
    };
    RateModelDictionary.prototype.updateWithEvents = function (rateModelEvents) {
        this.rateModelDictionary = createRateModelEventDictionary(rateModelEvents);
    };
    RateModelDictionary.prototype.getRateModelForBlockNumber = function (l1Token, blockNumber) {
        this._throwIfNotInitialized();
        var l1TokenNormalized = ethers_1.ethers.utils.getAddress(l1Token);
        if (!this.rateModelDictionary[l1TokenNormalized] || this.rateModelDictionary[l1TokenNormalized].length === 0)
            throw new Error("No updated rate model events for L1 token: ".concat(l1TokenNormalized));
        if (!blockNumber) {
            return (0, exports.parseAndReturnRateModelFromString)(this.rateModelDictionary[l1TokenNormalized].slice(-1)[0].rateModel);
        }
        else {
            var firstEventBlockNumber = this.rateModelDictionary[l1TokenNormalized][0].blockNumber;
            if (blockNumber < firstEventBlockNumber) {
                throw new Error("Block number #".concat(blockNumber, " is before first UpdatedRateModel event block ").concat(firstEventBlockNumber));
            }
            var rateModel = this.rateModelDictionary[l1TokenNormalized]
                .slice()
                .reverse()
                .find(function (event) { return event.blockNumber <= blockNumber; });
            if (!rateModel)
                throw new Error("No updated rate model events before block #".concat(blockNumber, " for L1 token: ").concat(l1TokenNormalized));
            return (0, exports.parseAndReturnRateModelFromString)(rateModel === null || rateModel === void 0 ? void 0 : rateModel.rateModel);
        }
    };
    RateModelDictionary.prototype.getL1TokensFromRateModel = function (blockNumber) {
        var _this = this;
        if (blockNumber === void 0) { blockNumber = undefined; }
        this._throwIfNotInitialized();
        return Object.keys(this.rateModelDictionary)
            .map(function (l1Token) {
            var l1TokenNormalized = ethers_1.ethers.utils.getAddress(l1Token);
            if (!blockNumber ||
                _this.rateModelDictionary[l1TokenNormalized].find(function (event) { return event.blockNumber <= blockNumber; }))
                return ethers_1.ethers.utils.getAddress(l1Token);
            else
                return null;
        })
            .filter(utils_1.isDefined);
    };
    return RateModelDictionary;
}());
exports.RateModelDictionary = RateModelDictionary;
var parseAndReturnRateModelFromString = function (rateModelString) {
    var rateModelFromEvent = JSON.parse(rateModelString);
    for (var _i = 0, expectedRateModelKeys_1 = expectedRateModelKeys; _i < expectedRateModelKeys_1.length; _i++) {
        var key = expectedRateModelKeys_1[_i];
        if (!Object.keys(rateModelFromEvent).includes(key)) {
            throw new Error("Rate model does not contain all expected keys. Expected keys: [".concat(expectedRateModelKeys, "], actual keys: [").concat(Object.keys(rateModelFromEvent), "]"));
        }
    }
    for (var _a = 0, _b = Object.keys(rateModelFromEvent); _a < _b.length; _a++) {
        var key = _b[_a];
        if (!expectedRateModelKeys.includes(key)) {
            throw new Error("Rate model contains unexpected keys. Expected keys: [".concat(expectedRateModelKeys, "], actual keys: [").concat(Object.keys(rateModelFromEvent), "]"));
        }
    }
    return {
        UBar: rateModelFromEvent.UBar,
        R0: rateModelFromEvent.R0,
        R1: rateModelFromEvent.R1,
        R2: rateModelFromEvent.R2,
    };
};
exports.parseAndReturnRateModelFromString = parseAndReturnRateModelFromString;
var createRateModelEventDictionary = function (rateModelEvents) {
    var updatedRateModelEventsForToken = {};
    rateModelEvents.sort(function (a, b) {
        if (a.blockNumber !== b.blockNumber) {
            return a.blockNumber - b.blockNumber;
        }
        if (a.transactionIndex !== b.transactionIndex) {
            return a.transactionIndex - b.transactionIndex;
        }
        return a.logIndex - b.logIndex;
    });
    for (var _i = 0, rateModelEvents_1 = rateModelEvents; _i < rateModelEvents_1.length; _i++) {
        var updatedRateModelEvent = rateModelEvents_1[_i];
        var l1TokenNormalized = ethers_1.ethers.utils.getAddress(updatedRateModelEvent.l1Token);
        if (!updatedRateModelEventsForToken[l1TokenNormalized])
            updatedRateModelEventsForToken[l1TokenNormalized] = [];
        updatedRateModelEventsForToken[l1TokenNormalized].push({
            blockNumber: updatedRateModelEvent.blockNumber,
            rateModel: updatedRateModelEvent.rateModel,
        });
    }
    return updatedRateModelEventsForToken;
};
//# sourceMappingURL=rateModel.js.map