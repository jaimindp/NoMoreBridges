import { BigNumber } from "ethers";
import { RateModelDictionary } from "../lpFeeCalculator/rateModel";
import { SortableEvent } from "./Common";
export interface ParsedTokenConfig {
    rateModel: RateModelDictionary;
    routeRateModel?: {
        [path: string]: RateModelDictionary;
    };
    uba?: UBAOnChainConfigType;
    spokeTargetBalances?: {
        [chainId: number]: {
            target: string;
            threshold: string;
        };
    };
}
export interface SpokePoolTargetBalance {
    target: BigNumber;
    threshold: BigNumber;
}
export type SpokePoolTargetBalanceStringified = Omit<SpokePoolTargetBalance, "threshold" | "target"> & {
    target: string;
    threshold: string;
};
export interface SpokeTargetBalanceUpdate extends SortableEvent {
    spokeTargetBalances?: {
        [chainId: number]: SpokePoolTargetBalance;
    };
    l1Token: string;
}
export interface SpokeTargetBalanceUpdateStringified extends SortableEvent {
    spokeTargetBalances?: {
        [chainId: number]: SpokePoolTargetBalanceStringified;
    };
    l1Token: string;
}
export interface RouteRateModelUpdate extends SortableEvent {
    routeRateModel: {
        [path: string]: string;
    };
    l1Token: string;
}
export interface TokenConfig extends SortableEvent {
    key: string;
    value: string;
}
export interface GlobalConfigUpdate<ValueStore = number> extends SortableEvent {
    value: ValueStore;
}
export interface ConfigStoreVersionUpdate<ValueStore = number> extends GlobalConfigUpdate<ValueStore> {
    timestamp: number;
}
export interface DisabledChainsUpdate extends SortableEvent {
    chainIds: number[];
}
type RecordWithDefaultEntry<Value> = Record<string, Value>;
type ArrayOfTuples<Value> = [Value, Value][];
type UBAAgnosticConfigType<T> = {
    incentivePoolAdjustment?: Record<string, T>;
    ubaRewardMultiplier?: Record<string, T>;
    alpha: RecordWithDefaultEntry<T>;
    gamma: RecordWithDefaultEntry<ArrayOfTuples<T>>;
    omega: RecordWithDefaultEntry<ArrayOfTuples<T>>;
    rebalance: RecordWithDefaultEntry<{
        threshold_lower?: T;
        threshold_upper?: T;
        target_lower?: T;
        target_upper?: T;
    }>;
};
export type UBAOnChainConfigType = UBAAgnosticConfigType<string>;
export type UBAParsedConfigType = UBAAgnosticConfigType<BigNumber>;
export type UBAConfigUpdates = SortableEvent & {
    config: UBAParsedConfigType;
    l1Token: string;
};
export type UBASerializedConfigUpdates = SortableEvent & {
    config: UBAOnChainConfigType;
    l1Token: string;
};
export {};
