"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArweaveClient = void 0;
var tslib_1 = require("tslib");
var arweave_1 = tslib_1.__importDefault(require("arweave"));
var ethers_1 = require("ethers");
var utils_1 = require("../../utils");
var superstruct_1 = require("superstruct");
var constants_1 = require("../../constants");
var ArweaveClient = (function () {
    function ArweaveClient(arweaveJWT, logger, gatewayURL, protocol, port) {
        if (gatewayURL === void 0) { gatewayURL = "arweave.net"; }
        if (protocol === void 0) { protocol = "https"; }
        if (port === void 0) { port = 443; }
        this.arweaveJWT = arweaveJWT;
        this.logger = logger;
        this.client = new arweave_1.default({
            host: gatewayURL,
            port: port,
            protocol: protocol,
            timeout: 20000,
            logging: false,
        });
        this.logger.info("Arweave client initialized");
    }
    ArweaveClient.prototype.set = function (value, topicTag) {
        var _a, _b, _c;
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var transaction, result, message, _d, _e;
            var _f;
            return tslib_1.__generator(this, function (_g) {
                switch (_g.label) {
                    case 0: return [4, this.client.createTransaction({ data: JSON.stringify(value, utils_1.jsonReplacerWithBigNumbers) }, this.arweaveJWT)];
                    case 1:
                        transaction = _g.sent();
                        transaction.addTag("Content-Type", "application/json");
                        transaction.addTag("App-Name", constants_1.ARWEAVE_TAG_APP_NAME);
                        if ((0, utils_1.isDefined)(topicTag)) {
                            transaction.addTag("Topic", topicTag);
                        }
                        return [4, this.client.transactions.sign(transaction, this.arweaveJWT)];
                    case 2:
                        _g.sent();
                        return [4, this.client.transactions.post(transaction)];
                    case 3:
                        result = _g.sent();
                        if (!(result.status !== 200)) return [3, 6];
                        message = (_c = (_b = (_a = result === null || result === void 0 ? void 0 : result.data) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.msg) !== null && _c !== void 0 ? _c : "Unknown error";
                        _e = (_d = this.logger).error;
                        _f = {
                            at: "ArweaveClient:set",
                            message: message,
                            result: result,
                            txn: transaction.id
                        };
                        return [4, this.getAddress()];
                    case 4:
                        _f.address = _g.sent();
                        return [4, this.getBalance()];
                    case 5:
                        _e.apply(_d, [(_f.balance = (_g.sent()).toString(),
                                _f)]);
                        throw new Error(message);
                    case 6:
                        this.logger.debug({
                            at: "ArweaveClient:set",
                            message: "Arweave transaction posted with ".concat(transaction.id),
                        });
                        _g.label = 7;
                    case 7: return [2, transaction.id];
                }
            });
        });
    };
    ArweaveClient.prototype.get = function (transactionID, validator) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var rawData, data;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.client.transactions.getData(transactionID, { decode: true, string: true })];
                    case 1:
                        rawData = _a.sent();
                        if (!rawData) {
                            return [2, null];
                        }
                        data = JSON.parse(typeof rawData === "string" ? rawData : Buffer.from(rawData).toString("utf-8"));
                        if (data.status === 400) {
                            return [2, null];
                        }
                        if (!(0, superstruct_1.is)(data, validator)) {
                            this.logger.warn("Retrieved value from Arweave does not match the expected type");
                            return [2, null];
                        }
                        return [2, data];
                }
            });
        });
    };
    ArweaveClient.prototype.getByTopic = function (tag, validator) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var transactions, _a, _b, _c, _d, results;
            var _e;
            var _this = this;
            return tslib_1.__generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        _b = (_a = this.client.api).post;
                        _c = ["/graphql"];
                        _e = {};
                        _d = "\n        { \n          transactions (\n            owners: [\"".concat;
                        return [4, this.getAddress()];
                    case 1: return [4, _b.apply(_a, _c.concat([(_e.query = _d.apply("\n        { \n          transactions (\n            owners: [\"", [_f.sent(), "\"]\n            tags: [\n              { name: \"App-Name\", values: [\""]).concat(constants_1.ARWEAVE_TAG_APP_NAME, "\"] },\n              { name: \"Content-Type\", values: [\"application/json\"] },\n              ").concat(tag ? "{ name: \"Topic\", values: [\"".concat(tag, "\"] } ") : "", "\n            ]\n          ) { edges { node { id } } } \n        }"),
                                _e)]))];
                    case 2:
                        transactions = _f.sent();
                        return [4, Promise.all(transactions.data.data.transactions.edges.map(function (edge) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                                var data;
                                return tslib_1.__generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4, this.get(edge.node.id, validator)];
                                        case 1:
                                            data = _a.sent();
                                            return [2, (0, utils_1.isDefined)(data)
                                                    ? {
                                                        data: data,
                                                        hash: edge.node.id,
                                                    }
                                                    : null];
                                    }
                                });
                            }); }))];
                    case 3:
                        results = _f.sent();
                        return [2, results.filter(utils_1.isDefined)];
                }
            });
        });
    };
    ArweaveClient.prototype.getMetadata = function (transactionID) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var transaction, tags;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.client.transactions.get(transactionID)];
                    case 1:
                        transaction = _a.sent();
                        if (!(0, utils_1.isDefined)(transaction)) {
                            return [2, null];
                        }
                        tags = Object.fromEntries(transaction.tags.map(function (tag) { return [
                            tag.get("name", { decode: true, string: true }),
                            tag.get("value", { decode: true, string: true }),
                        ]; }));
                        return [2, {
                                contentType: tags["Content-Type"],
                                appName: tags["App-Name"],
                                topic: tags.Topic,
                            }];
                }
            });
        });
    };
    ArweaveClient.prototype.getAddress = function () {
        return this.client.wallets.jwkToAddress(this.arweaveJWT);
    };
    ArweaveClient.prototype.getBalance = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var address, balanceInFloat, _a, balance, exponent, resultingBN;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4, this.getAddress()];
                    case 1:
                        address = _b.sent();
                        return [4, this.client.wallets.getBalance(address)];
                    case 2:
                        balanceInFloat = _b.sent();
                        if (balanceInFloat.includes("e")) {
                            _a = balanceInFloat.split("e"), balance = _a[0], exponent = _a[1];
                            resultingBN = ethers_1.ethers.BigNumber.from(balance).mul((0, utils_1.toBN)(10).pow(exponent.replace("+", "")));
                            return [2, (0, utils_1.parseWinston)(resultingBN.toString())];
                        }
                        else {
                            return [2, (0, utils_1.parseWinston)(balanceInFloat)];
                        }
                        return [2];
                }
            });
        });
    };
    return ArweaveClient;
}());
exports.ArweaveClient = ArweaveClient;
//# sourceMappingURL=ArweaveClient.js.map