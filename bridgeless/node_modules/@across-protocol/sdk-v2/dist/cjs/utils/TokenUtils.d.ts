import { BlockTag } from "@ethersproject/abstract-provider";
import { BigNumber, providers, Signer } from "ethers";
import { L1Token } from "../interfaces";
type SignerOrProvider = providers.Provider | Signer;
export declare function fetchTokenInfo(address: string, signerOrProvider: SignerOrProvider): Promise<L1Token>;
export declare const getL2TokenAddresses: (l1TokenAddress: string, l1ChainId?: number) => {
    [chainId: number]: string;
} | undefined;
export declare function resolveSymbolOnChain(chainId: number, symbol: string): L1Token;
export declare const resolveContractFromSymbol: (symbol: string, chainId: string, tokenMapping?: {
    ACX: {
        name: string;
        symbol: string;
        decimals: number;
        addresses: {
            [x: number]: string;
        };
    };
    BAL: {
        name: string;
        symbol: string;
        decimals: number;
        addresses: {
            [x: number]: string;
        };
    };
    BADGER: {
        name: string;
        symbol: string;
        decimals: number;
        addresses: {
            [x: number]: string;
        };
    };
    BOBA: {
        name: string;
        symbol: string;
        decimals: number;
        addresses: {
            [x: number]: string;
        };
    };
    DAI: {
        name: string;
        symbol: string;
        decimals: number;
        addresses: {
            [x: number]: string;
        };
    };
    ETH: {
        name: string;
        symbol: string;
        decimals: number;
        addresses: {
            [x: number]: string;
        };
    };
    MATIC: {
        name: string;
        symbol: string;
        decimals: number;
        addresses: {
            [x: number]: string;
        };
    };
    POOL: {
        name: string;
        symbol: string;
        decimals: number;
        addresses: {
            [x: number]: string;
        };
    };
    SNX: {
        name: string;
        symbol: string;
        decimals: number;
        addresses: {
            [x: number]: string;
        };
    };
    UMA: {
        name: string;
        symbol: string;
        decimals: number;
        addresses: {
            [x: number]: string;
        };
    };
    USDC: {
        name: string;
        symbol: string;
        decimals: number;
        addresses: {
            [x: number]: string;
        };
    };
    USDT: {
        name: string;
        symbol: string;
        decimals: number;
        addresses: {
            [x: number]: string;
        };
    };
    WBTC: {
        name: string;
        symbol: string;
        decimals: number;
        addresses: {
            [x: number]: string;
        };
    };
    WETH: {
        name: string;
        symbol: string;
        decimals: number;
        addresses: {
            [x: number]: string;
        };
    };
    WMATIC: {
        name: string;
        symbol: string;
        decimals: number;
        addresses: {
            [x: number]: string;
        };
    };
    OP: {
        name: string;
        symbol: string;
        decimals: number;
        addresses: {
            [x: number]: string;
        };
    };
}) => string | undefined;
export declare function getTokenInformationFromAddress(address: string, tokenMapping?: {
    ACX: {
        name: string;
        symbol: string;
        decimals: number;
        addresses: {
            [x: number]: string;
        };
    };
    BAL: {
        name: string;
        symbol: string;
        decimals: number;
        addresses: {
            [x: number]: string;
        };
    };
    BADGER: {
        name: string;
        symbol: string;
        decimals: number;
        addresses: {
            [x: number]: string;
        };
    };
    BOBA: {
        name: string;
        symbol: string;
        decimals: number;
        addresses: {
            [x: number]: string;
        };
    };
    DAI: {
        name: string;
        symbol: string;
        decimals: number;
        addresses: {
            [x: number]: string;
        };
    };
    ETH: {
        name: string;
        symbol: string;
        decimals: number;
        addresses: {
            [x: number]: string;
        };
    };
    MATIC: {
        name: string;
        symbol: string;
        decimals: number;
        addresses: {
            [x: number]: string;
        };
    };
    POOL: {
        name: string;
        symbol: string;
        decimals: number;
        addresses: {
            [x: number]: string;
        };
    };
    SNX: {
        name: string;
        symbol: string;
        decimals: number;
        addresses: {
            [x: number]: string;
        };
    };
    UMA: {
        name: string;
        symbol: string;
        decimals: number;
        addresses: {
            [x: number]: string;
        };
    };
    USDC: {
        name: string;
        symbol: string;
        decimals: number;
        addresses: {
            [x: number]: string;
        };
    };
    USDT: {
        name: string;
        symbol: string;
        decimals: number;
        addresses: {
            [x: number]: string;
        };
    };
    WBTC: {
        name: string;
        symbol: string;
        decimals: number;
        addresses: {
            [x: number]: string;
        };
    };
    WETH: {
        name: string;
        symbol: string;
        decimals: number;
        addresses: {
            [x: number]: string;
        };
    };
    WMATIC: {
        name: string;
        symbol: string;
        decimals: number;
        addresses: {
            [x: number]: string;
        };
    };
    OP: {
        name: string;
        symbol: string;
        decimals: number;
        addresses: {
            [x: number]: string;
        };
    };
}): L1Token | undefined;
export declare function getTokenBalance(address: string, tokenAddress: string, signerOrProvider: SignerOrProvider, blockTag?: BlockTag): Promise<BigNumber>;
export {};
