"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTransactionHashes = exports.isEventOlder = exports.sortEventsDescendingInPlace = exports.sortEventsDescending = exports.sortEventsAscendingInPlace = exports.sortEventsAscending = exports.spreadEventWithBlockNumber = exports.getPaginatedBlockRanges = exports.paginatedEventQuery = exports.spreadEvent = void 0;
var tslib_1 = require("tslib");
var common_1 = require("./common");
var maxRetries = 3;
var retrySleepTime = 10;
function spreadEvent(args) {
    if (args === void 0) { args = {}; }
    var keys = Object.keys(args).filter(function (key) { return isNaN(+key); });
    var returnedObject = {};
    keys.forEach(function (key) {
        switch (typeof args[key]) {
            case "boolean":
            case "number":
            case "string":
                returnedObject[key] = args[key];
                break;
            case "object":
                if (Array.isArray(args[key])) {
                    returnedObject[key] =
                        Object.keys(args[key].filter(function (key) { return isNaN(+key); })).length > 0
                            ? spreadEvent(args[key])
                            : args[key];
                }
                else {
                    returnedObject[key] = args[key];
                }
                break;
        }
    });
    if (returnedObject.groupIndex) {
        returnedObject.groupIndex = Number(returnedObject.groupIndex);
    }
    if (returnedObject.leafId) {
        returnedObject.leafId = Number(returnedObject.leafId);
    }
    if (returnedObject.chainId) {
        returnedObject.chainId = Number(returnedObject.chainId);
    }
    if (returnedObject.destinationChainId) {
        returnedObject.destinationChainId = Number(returnedObject.destinationChainId);
    }
    if (returnedObject.originChainId) {
        returnedObject.originChainId = Number(returnedObject.originChainId);
    }
    if (returnedObject.repaymentChainId) {
        returnedObject.repaymentChainId = Number(returnedObject.repaymentChainId);
    }
    if (returnedObject.l2ChainId) {
        returnedObject.l2ChainId = Number(returnedObject.l2ChainId);
    }
    if (returnedObject.rootBundleId) {
        returnedObject.rootBundleId = Number(returnedObject.rootBundleId);
    }
    return returnedObject;
}
exports.spreadEvent = spreadEvent;
function paginatedEventQuery(contract, filter, searchConfig, retryCount) {
    if (retryCount === void 0) { retryCount = 0; }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var paginatedRanges, error_1;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!(searchConfig.maxBlockLookBack === 0)) return [3, 2];
                    return [4, contract.queryFilter(filter, searchConfig.fromBlock, searchConfig.toBlock)];
                case 1: return [2, _a.sent()];
                case 2:
                    paginatedRanges = getPaginatedBlockRanges(searchConfig);
                    _a.label = 3;
                case 3:
                    _a.trys.push([3, 5, , 10]);
                    return [4, Promise.all(paginatedRanges.map(function (_a) {
                            var fromBlock = _a[0], toBlock = _a[1];
                            return contract.queryFilter(filter, fromBlock, toBlock);
                        }))];
                case 4: return [2, ((_a.sent())
                        .flat()
                        .filter(function (event) { return event.blockNumber >= searchConfig.fromBlock && event.blockNumber <= searchConfig.toBlock; }))];
                case 5:
                    error_1 = _a.sent();
                    if (!(retryCount < maxRetries)) return [3, 8];
                    return [4, (0, common_1.delay)(retrySleepTime)];
                case 6:
                    _a.sent();
                    return [4, paginatedEventQuery(contract, filter, searchConfig, retryCount + 1)];
                case 7: return [2, _a.sent()];
                case 8: throw error_1;
                case 9: return [3, 10];
                case 10: return [2];
            }
        });
    });
}
exports.paginatedEventQuery = paginatedEventQuery;
function getPaginatedBlockRanges(_a) {
    var fromBlock = _a.fromBlock, toBlock = _a.toBlock, maxBlockLookBack = _a.maxBlockLookBack;
    if (maxBlockLookBack === undefined) {
        return [[fromBlock, toBlock]];
    }
    if (fromBlock > toBlock) {
        return [];
    }
    if (maxBlockLookBack <= 0) {
        throw new Error("Cannot set maxBlockLookBack <= 0");
    }
    var flooredStartBlock = Math.floor(fromBlock / maxBlockLookBack) * maxBlockLookBack;
    var iterations = Math.ceil((toBlock + 1 - flooredStartBlock) / maxBlockLookBack);
    var ranges = [];
    for (var i = 0; i < iterations; i++) {
        var innerFromBlock = flooredStartBlock + maxBlockLookBack * i;
        var innerToBlock = Math.min(innerFromBlock + maxBlockLookBack - 1, toBlock);
        ranges.push([innerFromBlock, innerToBlock]);
    }
    return ranges;
}
exports.getPaginatedBlockRanges = getPaginatedBlockRanges;
function spreadEventWithBlockNumber(event) {
    return tslib_1.__assign(tslib_1.__assign({}, spreadEvent(event.args)), { blockNumber: event.blockNumber, transactionIndex: event.transactionIndex, logIndex: event.logIndex, transactionHash: event.transactionHash });
}
exports.spreadEventWithBlockNumber = spreadEventWithBlockNumber;
function sortEventsAscending(events) {
    return sortEventsAscendingInPlace(tslib_1.__spreadArray([], events, true));
}
exports.sortEventsAscending = sortEventsAscending;
function sortEventsAscendingInPlace(events) {
    return events.sort(function (ex, ey) {
        if (ex.blockNumber !== ey.blockNumber) {
            return ex.blockNumber - ey.blockNumber;
        }
        if (ex.transactionIndex !== ey.transactionIndex) {
            return ex.transactionIndex - ey.transactionIndex;
        }
        return ex.logIndex - ey.logIndex;
    });
}
exports.sortEventsAscendingInPlace = sortEventsAscendingInPlace;
function sortEventsDescending(events) {
    return sortEventsDescendingInPlace(tslib_1.__spreadArray([], events, true));
}
exports.sortEventsDescending = sortEventsDescending;
function sortEventsDescendingInPlace(events) {
    return events.sort(function (ex, ey) {
        if (ex.blockNumber !== ey.blockNumber) {
            return ey.blockNumber - ex.blockNumber;
        }
        if (ex.transactionIndex !== ey.transactionIndex) {
            return ey.transactionIndex - ex.transactionIndex;
        }
        return ey.logIndex - ex.logIndex;
    });
}
exports.sortEventsDescendingInPlace = sortEventsDescendingInPlace;
function isEventOlder(ex, ey) {
    if (ex.blockNumber !== ey.blockNumber) {
        return ex.blockNumber < ey.blockNumber;
    }
    if (ex.transactionIndex !== ey.transactionIndex) {
        return ex.transactionIndex < ey.transactionIndex;
    }
    return ex.logIndex < ey.logIndex;
}
exports.isEventOlder = isEventOlder;
function getTransactionHashes(events) {
    return tslib_1.__spreadArray([], Array.from(new Set(events.map(function (e) { return e.transactionHash; }))), true);
}
exports.getTransactionHashes = getTransactionHashes;
//# sourceMappingURL=EventUtils.js.map