import { Fill, V2Deposit, V2Fill, V2RelayData, V2SlowFillLeaf, V2SpeedUp, V3Deposit, V3Fill, V3RelayData, V3SlowFillLeaf, V3SpeedUp } from "../interfaces";
import { BN } from "./BigNumberUtils";
export declare const V3_MIN_CONFIG_STORE_VERSION = 3;
export declare function isV3(version: number): boolean;
export declare function isType<T, U>(input: T | U, key: Exclude<keyof T, keyof U>): input is T;
type MinV2Deposit = Pick<V2Deposit, "originToken">;
type MinV3Deposit = Pick<V3Deposit, "inputToken">;
export declare function isV2Deposit<T extends MinV2Deposit, U extends MinV3Deposit>(deposit: T | U): deposit is T;
export declare function isV3Deposit<T extends MinV3Deposit, U extends MinV2Deposit>(deposit: T | U): deposit is T;
type MinV2SpeedUp = Pick<V2SpeedUp, "newRelayerFeePct">;
type MinV3SpeedUp = Pick<V3SpeedUp, "updatedOutputAmount">;
export declare function isV2SpeedUp<T extends MinV2SpeedUp, U extends MinV3SpeedUp>(speedUp: T | U): speedUp is T;
export declare function isV3SpeedUp<T extends MinV3SpeedUp, U extends MinV2SpeedUp>(speedUp: T | U): speedUp is T;
type MinV2Fill = Pick<V2Fill, "destinationToken">;
type MinV3Fill = Pick<V3Fill, "inputToken">;
export declare function isV2Fill<T extends MinV2Fill, U extends MinV3Fill>(fill: T | U): fill is T;
export declare function isV3Fill<T extends MinV3Fill, U extends MinV2Fill>(fill: T | U): fill is T;
type MinV2RelayData = Pick<V2RelayData, "destinationToken">;
type MinV3RelayData = Pick<V3RelayData, "outputToken">;
export declare function isV2RelayData<T extends MinV2RelayData, U extends MinV3RelayData>(relayData: T | U): relayData is T;
export declare function isV3RelayData<T extends MinV3RelayData, U extends MinV2RelayData>(relayData: T | U): relayData is T;
export declare function isSlowFill(fill: Fill): boolean;
type MinV2SlowFillLeaf = Pick<V2SlowFillLeaf, "payoutAdjustmentPct">;
type MinV3SlowFillLeaf = Pick<V3SlowFillLeaf, "updatedOutputAmount">;
export declare function isV2SlowFillLeaf<T extends MinV2SlowFillLeaf, U extends MinV3SlowFillLeaf>(slowFillLeaf: T | U): slowFillLeaf is T;
export declare function isV3SlowFillLeaf<T extends MinV3SlowFillLeaf, U extends MinV2SlowFillLeaf>(slowFillLeaf: T | U): slowFillLeaf is T;
export declare function getDepositInputToken<T extends MinV2Deposit, U extends MinV3Deposit>(deposit: T | U): string;
export declare function getDepositOutputToken<T extends Pick<V2Deposit, "destinationToken">, U extends Pick<V3Deposit, "outputToken">>(deposit: T | U): string;
export declare function getDepositInputAmount<T extends Pick<V2Deposit, "amount">, U extends Pick<V3Deposit, "inputAmount">>(deposit: T | U): BN;
export declare function getDepositOutputAmount<T extends Pick<V2Deposit, "amount">, U extends Pick<V3Deposit, "outputAmount">>(deposit: T | U): BN;
export declare function getFillOutputToken<T extends Pick<V2Fill, "destinationToken">, U extends Pick<V3Fill, "outputToken">>(fill: T | U): string;
export declare function getFillOutputAmount<T extends Pick<V2Fill, "amount">, U extends Pick<V3Fill, "outputAmount">>(fill: T | U): BN;
export declare function getFillAmount<T extends Pick<V2Fill, "fillAmount">, U extends Pick<V3Fill, "outputAmount">>(fill: T | U): BN;
export declare function getTotalFilledAmount<T extends Pick<V2Fill, "totalFilledAmount">, U extends Pick<V3Fill, "outputAmount">>(fill: T | U): BN;
export declare function getRelayDataOutputToken<T extends Pick<V2RelayData, "destinationToken">, U extends Pick<V3RelayData, "outputToken">>(relayData: T | U): string;
export declare function getRelayDataOutputAmount<T extends Pick<V2RelayData, "amount">, U extends Pick<V3RelayData, "outputAmount">>(relayData: T | U): BN;
export declare function getSlowFillLeafChainId<T extends {
    relayData: {
        destinationChainId: V2SlowFillLeaf["relayData"]["destinationChainId"];
    };
}, U extends Pick<V3SlowFillLeaf, "chainId">>(leaf: T | U): number;
export declare function getSlowFillLeafLpFeePct<T extends {
    relayData: {
        realizedLpFeePct: V2SlowFillLeaf["relayData"]["realizedLpFeePct"];
    };
}, U extends Pick<V3SlowFillLeaf, "updatedOutputAmount" | "relayData">>(leaf: T | U): BN;
export {};
