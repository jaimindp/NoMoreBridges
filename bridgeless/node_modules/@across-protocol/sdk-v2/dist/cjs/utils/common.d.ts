import { L2Provider } from "@eth-optimism/sdk/dist/interfaces/l2-provider";
import Decimal from "decimal.js";
import { BigNumber, PopulatedTransaction, providers } from "ethers";
import { Deposit } from "../interfaces";
import { TypedMessage } from "../interfaces/TypedData";
import { SpokePool } from "../typechain";
import { BigNumberish, BN } from "./BigNumberUtils";
export type Decimalish = string | number | Decimal;
export declare const AddressZero = "0x0000000000000000000000000000000000000000";
export declare const MAX_BIG_INT: BigNumber;
export declare const toBNWei: (num: BigNumberish, decimals?: number) => BN;
export declare const fromWei: (num: BigNumberish, decimals?: number) => string;
export declare function min(a: BigNumberish, b: BigNumberish): BN;
export declare function max(a: BigNumberish, b: BigNumberish): BN;
export declare const fixedPointAdjustment: BigNumber;
export declare function nativeToToken(fromAmount: BigNumberish, price?: string | number, toDecimals?: number, nativeDecimals?: number): string;
export declare const gasCost: (gas: BigNumberish, gasPrice: BigNumberish) => BigNumber;
export declare function calculateGasFees(gas: number, gasPrice: BigNumberish, price?: string | number, decimals?: number): string;
export declare function percent(numerator: BigNumberish, denominator: BigNumberish): BN;
export declare const calcContinuousCompoundInterest: (startAmount: Decimalish, endAmount: Decimalish, periodsElapsed: Decimalish, periodsPerYear: Decimalish) => string;
export declare const calcPeriodicCompoundInterest: (startAmount: Decimalish, endAmount: Decimalish, periodsElapsed: Decimalish, periodsPerYear: Decimalish) => string;
export declare const calcApr: (startAmount: Decimalish, endAmount: Decimalish, periodsElapsed: Decimalish, periodsPerYear: Decimalish) => string;
export declare const getSamplesBetween: (min: number, max: number, size: number) => number[][];
export declare function delay(seconds: number): Promise<unknown>;
export declare function retry<T>(call: () => Promise<T>, times: number, delayS: number): Promise<T>;
export type TransactionCostEstimate = {
    nativeGasCost: BigNumber;
    tokenGasCost: BigNumber;
};
export declare function estimateTotalGasRequiredByUnsignedTransaction(unsignedTx: PopulatedTransaction, senderAddress: string, provider: providers.Provider | L2Provider<providers.Provider>, gasMarkup: number, gasPrice?: BigNumberish): Promise<TransactionCostEstimate>;
export declare function createUnsignedFillRelayTransactionFromDeposit(spokePool: SpokePool, deposit: Deposit, amountToFill: BN, relayerAddress: string): Promise<PopulatedTransaction>;
export type UpdateDepositDetailsMessageType = {
    UpdateDepositDetails: [
        {
            name: "depositId";
            type: "uint32";
        },
        {
            name: "originChainId";
            type: "uint256";
        },
        {
            name: "updatedRelayerFeePct";
            type: "int64";
        },
        {
            name: "updatedRecipient";
            type: "address";
        },
        {
            name: "updatedMessage";
            type: "bytes";
        }
    ];
};
export type UpdateV3DepositDetailsMessageType = {
    UpdateDepositDetails: [
        {
            name: "depositId";
            type: "uint32";
        },
        {
            name: "originChainId";
            type: "uint256";
        },
        {
            name: "updatedOutputAmount";
            type: "uint256";
        },
        {
            name: "updatedRecipient";
            type: "address";
        },
        {
            name: "updatedMessage";
            type: "bytes";
        }
    ];
};
export declare function getUpdateDepositTypedData(depositId: number, originChainId: number, updatedRelayerFeePct: BigNumber, updatedRecipient: string, updatedMessage: string): TypedMessage<UpdateDepositDetailsMessageType>;
export declare function getUpdateV3DepositTypedData(depositId: number, originChainId: number, updatedOutputAmount: BigNumber, updatedRecipient: string, updatedMessage: string): TypedMessage<UpdateV3DepositDetailsMessageType>;
export declare function randomAddress(): string;
