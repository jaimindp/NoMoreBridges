import type { Block, Provider } from "@ethersproject/abstract-provider";
import { CachingMechanismInterface } from "../interfaces";
type Opts = {
    highBlock?: number;
    highBlockOffset?: number;
    blockRange?: number;
};
type BlockTimeAverage = {
    average: number;
    blockRange: number;
    timestamp: number;
};
export declare function averageBlockTime(provider: Provider, { highBlock, highBlockOffset, blockRange }?: Opts): Promise<Pick<BlockTimeAverage, "average" | "blockRange">>;
export type BlockFinderHints = {
    lowBlock?: number;
    highBlock?: number;
};
export declare class BlockFinder {
    private readonly provider;
    private readonly blocks;
    constructor(provider: Provider, blocks?: Block[]);
    getBlockForTimestamp(timestamp: number | string, hints?: BlockFinderHints): Promise<Block>;
    private getLatestBlock;
    private getBlock;
    private findBlock;
}
export declare function getCachedBlockForTimestamp(chainId: number, timestamp: number, blockFinder: BlockFinder, cache?: CachingMechanismInterface, hints?: BlockFinderHints): Promise<number>;
export {};
