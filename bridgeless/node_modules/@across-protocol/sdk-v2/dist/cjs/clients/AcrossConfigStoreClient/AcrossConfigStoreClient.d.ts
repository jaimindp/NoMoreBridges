import { across } from "@uma/sdk";
import { Contract, Event } from "ethers";
import winston from "winston";
import { EventSearchConfig, MakeOptional } from "../../utils";
import { ConfigStoreVersionUpdate, DisabledChainsUpdate, GlobalConfigUpdate, RouteRateModelUpdate, SpokePoolTargetBalance, SpokeTargetBalanceUpdate, UBAConfigUpdates, UBAParsedConfigType } from "../../interfaces";
import { BaseAbstractClient } from "../BaseAbstractClient";
type _ConfigStoreUpdate = {
    success: true;
    chainId: number;
    searchEndBlock: number;
    events: {
        updatedTokenConfigEvents: Event[];
        updatedGlobalConfigEvents: Event[];
        globalConfigUpdateTimes: number[];
    };
};
export type ConfigStoreUpdate = {
    success: false;
} | _ConfigStoreUpdate;
export declare const DEFAULT_CONFIG_STORE_VERSION = 0;
export declare enum GLOBAL_CONFIG_STORE_KEYS {
    MAX_RELAYER_REPAYMENT_LEAF_SIZE = "MAX_RELAYER_REPAYMENT_LEAF_SIZE",
    MAX_POOL_REBALANCE_LEAF_SIZE = "MAX_POOL_REBALANCE_LEAF_SIZE",
    VERSION = "VERSION",
    DISABLED_CHAINS = "DISABLED_CHAINS",
    CHAIN_ID_INDICES = "CHAIN_ID_INDICES"
}
export declare class AcrossConfigStoreClient extends BaseAbstractClient {
    readonly logger: winston.Logger;
    readonly configStore: Contract;
    readonly eventSearchConfig: MakeOptional<EventSearchConfig, "toBlock">;
    readonly configStoreVersion: number;
    cumulativeRateModelUpdates: across.rateModel.RateModelEvent[];
    ubaConfigUpdates: UBAConfigUpdates[];
    cumulativeRouteRateModelUpdates: RouteRateModelUpdate[];
    cumulativeMaxRefundCountUpdates: GlobalConfigUpdate[];
    cumulativeMaxL1TokenCountUpdates: GlobalConfigUpdate[];
    chainIdIndicesUpdates: GlobalConfigUpdate<number[]>[];
    cumulativeSpokeTargetBalanceUpdates: SpokeTargetBalanceUpdate[];
    cumulativeConfigStoreVersionUpdates: ConfigStoreVersionUpdate[];
    cumulativeDisabledChainUpdates: DisabledChainsUpdate[];
    protected rateModelDictionary: across.rateModel.RateModelDictionary;
    hasLatestConfigStoreVersion: boolean;
    chainId: number | undefined;
    constructor(logger: winston.Logger, configStore: Contract, eventSearchConfig: MakeOptional<EventSearchConfig, "toBlock">, configStoreVersion: number);
    getRateModelForBlockNumber(l1Token: string, originChainId: number | string, destinationChainId: number | string, blockNumber?: number | undefined): across.constants.RateModel;
    getRouteRateModelForBlockNumber(l1Token: string, route: string, blockNumber?: number | undefined): across.constants.RateModel | undefined;
    protected implicitChainIdIndices(chainId?: number): number[];
    getChainIdIndicesForBlock(blockNumber?: number): number[];
    getSpokeTargetBalancesForBlock(l1Token: string, chainId: number, blockNumber?: number): SpokePoolTargetBalance;
    getMaxRefundCountForRelayerRefundLeafForBlock(blockNumber?: number): number;
    getMaxL1TokenCountForPoolRebalanceLeafForBlock(blockNumber?: number): number;
    getEnabledChainsInBlockRange(fromBlock: number, toBlock?: number): number[];
    getEnabledChains(block?: number): number[];
    getDisabledChainsForBlock(blockNumber?: number): number[];
    getConfigStoreVersionForTimestamp(timestamp?: number): number;
    getConfigStoreVersionForBlock(blockNumber?: number): number;
    hasValidConfigStoreVersionForTimestamp(timestamp?: number): boolean;
    protected resolveChainId(): Promise<number>;
    protected _update(): Promise<ConfigStoreUpdate>;
    update(): Promise<void>;
    filterDisabledChains(disabledChains: number[]): number[];
    getUBAConfig(l1TokenAddress: string, blockNumber?: number): UBAParsedConfigType | undefined;
}
export {};
