import { BigNumber, Contract, Event, EventFilter } from "ethers";
import winston from "winston";
import { AnyObject, DefaultLogLevels, EventSearchConfig, MakeOptional } from "../utils";
import { Deposit, DepositWithBlock, Fill, FillWithBlock, FilledRelayEvent, FilledV3RelayEvent, FundsDepositedEvent, RealizedLpFee, RelayerRefundExecutionWithBlock, RootBundleRelayWithBlock, SlowFillRequestWithBlock, SpeedUp, TokensBridged, V2Deposit, V2DepositWithBlock, V2Fill, V2FillWithBlock, V3DepositWithBlock, V3FundsDepositedEvent, V3RelayData } from "../interfaces";
import { BaseAbstractClient } from "./BaseAbstractClient";
import { HubPoolClient } from "./HubPoolClient";
type _SpokePoolUpdate = {
    success: boolean;
    currentTime: number;
    oldestTime: number;
    firstDepositId: number;
    latestDepositId: number;
    events: Event[][];
    searchEndBlock: number;
};
export type SpokePoolUpdate = {
    success: false;
} | _SpokePoolUpdate;
export declare class SpokePoolClient extends BaseAbstractClient {
    readonly logger: winston.Logger;
    readonly spokePool: Contract;
    readonly hubPoolClient: HubPoolClient | null;
    readonly chainId: number;
    deploymentBlock: number;
    readonly eventSearchConfig: MakeOptional<EventSearchConfig, "toBlock">;
    protected currentTime: number;
    protected oldestTime: number;
    protected depositHashes: {
        [depositHash: string]: DepositWithBlock;
    };
    protected depositHashesToFills: {
        [depositHash: string]: FillWithBlock[];
    };
    protected speedUps: {
        [depositorAddress: string]: {
            [depositId: number]: SpeedUp[];
        };
    };
    protected slowFillRequests: {
        [relayDataHash: string]: SlowFillRequestWithBlock;
    };
    protected depositRoutes: {
        [originToken: string]: {
            [DestinationChainId: number]: boolean;
        };
    };
    protected tokensBridged: TokensBridged[];
    protected rootBundleRelays: RootBundleRelayWithBlock[];
    protected relayerRefundExecutions: RelayerRefundExecutionWithBlock[];
    protected earlyDeposits: FundsDepositedEvent[];
    protected queryableEventNames: string[];
    earliestDepositIdQueried: number;
    latestDepositIdQueried: number;
    firstDepositIdForSpokePool: number;
    lastDepositIdForSpokePool: number;
    fills: {
        [OriginChainId: number]: FillWithBlock[];
    };
    constructor(logger: winston.Logger, spokePool: Contract, hubPoolClient: HubPoolClient | null, chainId: number, deploymentBlock: number, eventSearchConfig?: MakeOptional<EventSearchConfig, "toBlock">);
    _queryableEventNames(): {
        [eventName: string]: EventFilter;
    };
    getDepositsForDestinationChain(destinationChainId: number): DepositWithBlock[];
    getDeposits(filter?: {
        fromBlock: number;
        toBlock: number;
    }): DepositWithBlock[];
    getTokensBridged(): TokensBridged[];
    getDepositRoutes(): {
        [originToken: string]: {
            [DestinationChainId: number]: boolean;
        };
    };
    isDepositRouteEnabled(originToken: string, destinationChainId: number): boolean;
    getAllOriginTokens(): string[];
    getFills(): FillWithBlock[];
    getFillsForOriginChain(originChainId: number): FillWithBlock[];
    getFillsForRelayer(relayer: string): FillWithBlock[];
    getFillsWithBlockInRange(startingBlock: number, endingBlock: number): FillWithBlock[];
    getRootBundleRelays(): RootBundleRelayWithBlock[];
    getLatestRootBundleId(): number;
    getRelayerRefundExecutions(): RelayerRefundExecutionWithBlock[];
    getExecutedRefunds(relayerRefundRoot: string): {
        [tokenAddress: string]: {
            [relayer: string]: BigNumber;
        };
    };
    appendMaxSpeedUpSignatureToDeposit(deposit: DepositWithBlock): DepositWithBlock;
    getDeposit(depositId: number): DepositWithBlock | undefined;
    getSlowFillRequest(relayData: V3RelayData): SlowFillRequestWithBlock | undefined;
    getSlowFillRequestsForOriginChain(originChainId: number): SlowFillRequestWithBlock[];
    getDepositForFill(fill: Fill, fillFieldsToIgnore?: string[]): DepositWithBlock | undefined;
    updateDepositRealizedLpFeePct(event: Deposit, realizedLpFeePct: BigNumber): void;
    getValidUnfilledAmountForDeposit(deposit: Deposit): {
        unfilledAmount: BigNumber;
        fillCount: number;
        invalidFills: Fill[];
    };
    getDepositHash(event: {
        depositId: number;
        originChainId: number;
    }): string;
    _getBlockRangeForDepositId(targetDepositId: number, initLow: number, initHigh: number, maxSearches: number): Promise<{
        low: number;
        high: number;
    }>;
    _getDepositIdAtBlock(blockTag: number): Promise<number>;
    queryHistoricalMatchingFills(fill: V2Fill, deposit: V2Deposit, toBlock: number): Promise<V2FillWithBlock[]>;
    queryFillsInBlockRange(matchingFill: V2Fill, searchConfig: EventSearchConfig): Promise<V2FillWithBlock[]>;
    getMaxFillDeadlineInRange(startBlock: number, endBlock: number): Promise<number>;
    protected _update(eventsToQuery: string[]): Promise<SpokePoolUpdate>;
    _isEarlyDeposit(depositEvent: FundsDepositedEvent, currentTime: number): boolean;
    protected isV3DepositEvent(event: FundsDepositedEvent | V3FundsDepositedEvent): event is V3FundsDepositedEvent;
    protected isV3FillEvent(event: FilledRelayEvent | FilledV3RelayEvent): event is FilledV3RelayEvent;
    update(eventsToQuery?: string[]): Promise<void>;
    static getExecutedRefundLeafL2Token(chainId: number, eventL2Token: string): string;
    protected computeRealizedLpFeePct(depositEvent: FundsDepositedEvent): Promise<RealizedLpFee>;
    protected batchComputeRealizedLpFeePct(depositEvents: (FundsDepositedEvent | V3FundsDepositedEvent)[]): Promise<RealizedLpFee[]>;
    protected getDestinationTokenForDeposit(deposit: DepositWithBlock): string;
    protected log(level: DefaultLogLevels, message: string, data?: AnyObject): void;
    getCurrentTime(): number;
    getOldestTime(): number;
    findDeposit(depositId: number, destinationChainId: number, depositor: string): Promise<V2DepositWithBlock>;
    findDepositV3(depositId: number, destinationChainId: number, depositor: string): Promise<V3DepositWithBlock>;
}
export {};
