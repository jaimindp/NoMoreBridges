import { ExpiringMultiPartyEthers } from "@uma/contracts-frontend";
import type { SignerOrProvider, GetEventType } from "../..";
import { Event } from "ethers";
import { Balances } from "../../utils";
export declare type Instance = ExpiringMultiPartyEthers;
export declare function connect(address: string, provider: SignerOrProvider): Instance;
export interface EventState {
    sponsors?: string[];
    tokens?: Balances;
    collateral?: Balances;
    expired?: boolean;
}
export declare type RequestTransferPositionExecuted = GetEventType<Instance, "RequestTransferPositionExecuted">;
export declare type PositionCreated = GetEventType<Instance, "PositionCreated">;
export declare type NewSponsor = GetEventType<Instance, "NewSponsor">;
export declare type SettleExpiredPosition = GetEventType<Instance, "SettleExpiredPosition">;
export declare type Redeem = GetEventType<Instance, "Redeem">;
export declare type Withdrawal = GetEventType<Instance, "Withdrawal">;
export declare type LiquidationCreated = GetEventType<Instance, "LiquidationCreated">;
export declare function reduceEvents(state: EventState | undefined, event: Event): EventState;
export declare function getEventState(events: Event[], initialState?: EventState): EventState;
