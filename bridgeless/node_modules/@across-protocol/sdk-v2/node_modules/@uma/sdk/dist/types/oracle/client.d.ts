import Store, { Emit } from "./store";
import type { state } from "./types";
import { InputRequest, User } from "./types/state";
import { Update } from "./services/update";
import { SortedRequests } from "./services/sortedRequests";
import { StateMachine, setActiveRequestByTransaction } from "./services/statemachines";
import { NewOracle } from "./types/interfaces";
export declare class Client {
    readonly store: Store;
    readonly update: Update;
    readonly sm: StateMachine;
    readonly poller: StateMachine;
    private intervalStarted;
    constructor(store: Store, update: Update, sm: StateMachine, poller: StateMachine);
    setUser(params: Partial<User>): string;
    clearUser(): string;
    setActiveRequest(params: InputRequest): string;
    setActiveRequestByTransaction(params: setActiveRequestByTransaction.Params): string;
    approveCollateral(): string;
    proposePrice(proposedPriceDecimals: string | number): string;
    disputePrice(): string;
    settle(): string;
    switchOrAddChain(): string;
    startInterval(delayMs?: number): void;
    stopInterval(): void;
}
export declare function factory(config: state.Config, emit: Emit, OptimisticOracle: NewOracle, sortedRequests: SortedRequests): Client;
