import Write from "./write";
import Read from "./read";
import Has from "./has";
import Store, { Emit as GenericEmit } from "./store";
import { State } from "../types/state";
declare type WriteCallback = (write: Write, state: State) => void;
declare type Emit = GenericEmit<State>;
export { Write, Store, Read, Emit, WriteCallback, Has };
/**
 * OracleStore. Wraps the store with a specific state shape and passes the Write client through to end user.
 */
export default class OracleStore {
    private emit;
    private state;
    private store;
    constructor(emit?: Emit, state?: State);
    /**
     * write - Function for updating state.
     *
     * @param {WriteCallback} cb - Sends a write client to the caller for safer and easier state mutations rather than the raw object.
     */
    write: (cb: WriteCallback) => void;
    /**
     * read - Function for reading from state. Returns a read client to the user.
     *
     * @returns {Read}
     */
    read: () => Read;
    /**
     * get - Function for getting access to the raw state object, not wrapped by the reader class.
     * State should not be modified directly and treated as read only.
     *
     * @returns {State}
     */
    get: () => State;
    /**
     * has. Checks for existence. Mirrors the read interface, but instead of reading values returns true or false.
     *
     * @returns {Has}
     */
    has: () => Has;
}
