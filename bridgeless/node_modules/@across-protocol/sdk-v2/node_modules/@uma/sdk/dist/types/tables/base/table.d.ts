import type { stores, MakeId, MaybeId, HasId } from "../..";
interface KnownReturnMembers<I, D> {
    create: (data: D & MaybeId<I>) => Promise<D & HasId<I>>;
    set: (data: D & HasId<I>) => Promise<D & HasId<I>>;
    get: (id: I) => Promise<D & {
        id: I;
    }>;
    has: (id: I) => Promise<boolean>;
    update: (id: I, data: Partial<D>) => Promise<D & HasId<I>>;
}
declare type TableReturnType<I, D, S> = KnownReturnMembers<I, D> & Omit<S, keyof KnownReturnMembers<I, D>>;
export default function Table<I, D, S extends stores.Store<I, D>>(config: {
    makeId: MakeId<I, D>;
    type: string;
}, store: S): TableReturnType<I, D, S>;
export {};
