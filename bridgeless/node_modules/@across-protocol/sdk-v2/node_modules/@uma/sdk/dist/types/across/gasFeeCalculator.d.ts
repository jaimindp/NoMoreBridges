import { BigNumberish } from "./utils";
import { Provider } from "@ethersproject/providers";
/**
 * Function to estimate gas fees based on coingecko token price and ethers gasPrice. You must still
 * provide a gas amount estimation based on the usage pattern. See constants for current estimations. Returns
 * an amount of gas estimated in the token provided in wei.
 *
 * @param {Provider} ethers Provider
 * @param {BigNumberish} Total amount to be relayed, specified in smallest unit of currency.
 * @param {number} gas - The gas cost for transfer, use constants defined in constants file.
 * @param {string} [tokenAddress = constants.ADDRESSES.ETH] - Token address, for ETH, constants.ADDRESSES.ETH
 */
export declare function getGasFee(ethersProvider: Provider, gas: number, tokenAddress?: string): Promise<string>;
export declare const getInstantGasByAddress: (tokenAddress: string) => number;
export declare const getSlowGasByAddress: (tokenAddress: string) => number;
export declare type DepositFees = {
    slowPct: string;
    instantPct: string;
};
/**
 * getDepositFees. Returns to you appropriate values for calling the relay deposit function. Returns the slow gas fee
 * and the instant gas fee which is the amount additional to the slow fee as percentages in wei.
 *
 * @param {Provider} ethersProvider - Read provider on mainnet
 * @param {BigNumberish} amountToRelay - Amount in wei of token to relay
 * @param {string} tokenAddress = 0 - Mainnet address of token to relay. Defaults to ETH which is constants.ADDRESSES.ETH.
 * @param {string} discountPercent = DEFAULT_GAS_DISCOUNT- Percent as a value 0-100 of gas fee discount. 0 means no discount. Typically 25 for a 25% gas fee reduction.
 * No need to override this as the values are hardcoded in the sdk.
 * @returns {Promise<DepositFees>} - Returns the fee parameters to the deposit function on the deposit box contract.
 * These are percentages in wei. For example 50% is represented as 0.5 * 1e18.
 */
export declare function getDepositFees(ethersProvider: Provider, amountToRelay: BigNumberish, tokenAddress?: string, discountPercent?: number): Promise<DepositFees>;
export declare type DepositFeeDetails = {
    tokenAddress: string;
    amountToRelay: string;
    discountPercent: number;
    feeLimitPercent?: number;
    instant: {
        pct: string;
        total: string;
    };
    slow: {
        pct: string;
        total: string;
    };
    isAmountTooLow: boolean;
};
/**
 * getDepositFeesDetails. Same as deposit fees, but returns more information, useful for a frontend display.
 *
 * @param {Provider} ethersProvider - Read provider on mainnet
 * @param {BigNumberish} amountToRelay - Amount in wei of token to relay
 * @param {string} tokenAddress = 0 - Mainnet address of token to relay, for ETH specify constants.ADDRESSES.ETH
 * @param {number} feeLimitPercent? - Optional, percent as a value 0-100 of how much to limit fees as a percentage of the total relayed. Typically 25 or 25% of fees are acceptable out of the total relay amount.
 * For instance 25 means fees can be up to 25% of the total amount to send, fees above this will cause isAmountTooLow to be true.
 * @param {string} discountPercent = DEFAULT_GAS_DISCOUNT - Percent as a value 0-100 of gas fee discount. 0 means no discount. Typically 25 for a 25% gas fee reduction.
 * No need to override this as the values are hardcoded in the sdk.
 * @returns {DepositFeeDetails}
 */
export declare function getDepositFeesDetails(ethersProvider: Provider, amountToRelay: BigNumberish, tokenAddress?: string, feeLimitPercent?: number, discountPercent?: number): Promise<DepositFeeDetails>;
