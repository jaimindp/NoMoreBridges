export declare type WithoutStringTimestamp<T extends {
    timestamp: number | string;
}> = T & {
    timestamp: number;
};
export default class BlockFinder<T extends {
    number: number;
    timestamp: number | string;
}> {
    private readonly requestBlock;
    private readonly blocks;
    private readonly chainId;
    constructor(requestBlock: (requestedBlock: string | number) => Promise<T>, blocks?: T[], chainId?: number);
    /**
     * @notice Gets the latest block whose timestamp is <= the provided timestamp.
     * @param {number} timestamp timestamp to search.
     */
    getBlockForTimestamp(timestamp: number | string): Promise<T>;
    private getLatestBlock;
    private getBlock;
    private findBlock;
}
