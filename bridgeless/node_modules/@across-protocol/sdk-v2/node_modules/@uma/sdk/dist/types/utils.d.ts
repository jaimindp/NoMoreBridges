import { BigNumber, Contract } from "ethers";
import type Multicall2 from "./multicall2";
export declare type BigNumberish = number | string | BigNumber;
export declare function exists<T>(value: T | null | undefined): value is NonNullable<T>;
export declare type Balances = {
    [key: string]: string;
};
export declare function Balances(balances?: Balances): {
    create: (id: string, amount?: string) => string;
    add: (id: string, amount: BigNumberish) => string;
    sub: (id: string, amount: BigNumberish) => string;
    get: (id: string) => string;
    balances: Balances;
    set: (id: string, amount: string) => string;
    has: (id: string) => boolean;
    getOrCreate: (id: string) => string;
};
export declare const ConvertDecimals: (fromDecimals: number, toDecimals: number) => (amount: BigNumberish) => string;
export declare const sleep: (delay?: number) => Promise<unknown>;
export declare function loop(fn: (...args: any[]) => any, delay: number, ...args: any[]): Promise<void>;
export declare type Call = [string, ...BigNumberish[]];
export declare type Calls = Call[];
export declare type BatchReadWithErrorsType = ReturnType<ReturnType<typeof BatchReadWithErrors>>;
export declare const BatchReadWithErrors: (multicall2: Multicall2) => (contract: Contract) => <R>(calls: Calls) => Promise<R>;
/**
 * @notice Return average block-time for a period.
 */
export declare function averageBlockTimeSeconds(chainId?: number): Promise<number>;
export declare function estimateBlocksElapsed(seconds: number, cushionPercentage?: number, chainId?: number): Promise<number>;
