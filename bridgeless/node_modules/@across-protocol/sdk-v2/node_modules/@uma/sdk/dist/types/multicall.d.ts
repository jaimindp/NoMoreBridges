import { multicall } from "./clients";
import { Contract } from "ethers";
import type { SignerOrProvider } from ".";
export declare type Call = {
    method: string;
    args?: any[];
};
export declare type Request = {
    contractInstance: Contract;
    call: Call;
};
export declare type EncodedResponse = string;
export declare type EncodedRequest = {
    target: string;
    callData: string;
};
export interface State<MulticallType> {
    requests: Request[];
    multicallClient: MulticallType;
}
export declare class Multicall<MulticallType extends multicall.Instance> implements State<multicall.Instance> {
    requests: Request[];
    multicallClient: MulticallType;
    constructor(state: State<MulticallType>);
    protected push(contractInstance: Contract, call: Call): void;
    protected encodeRequest(request: Request): {
        target: string;
        callData: string;
    };
    protected decodeResponse(request: Request, response: EncodedResponse): import("@ethersproject/abi").Result;
    add(contractInstance: Contract, call: Call): Multicall<MulticallType>;
    batch(contractInstance: Contract, calls: Call[]): Multicall<MulticallType>;
    read(_requests?: Request[]): Promise<import("@ethersproject/abi").Result[]>;
}
export default class Factory extends Multicall<multicall.Instance> {
    constructor(address: string, provider: SignerOrProvider);
}
