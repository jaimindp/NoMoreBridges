import { Data } from "./utils";
import type { SortedStore } from "../../stores";
export declare const Table: (type?: string, store?: SortedStore<string, Data>) => {
    betweenByTimestamp: (a: number, b: number) => Promise<Data[]>;
    sliceByTimestamp: (timestamp: number, length: number) => Promise<Data[]>;
    hasByTimestamp: (timestamp: number) => Promise<boolean>;
    getByTimestamp: (timestamp: number) => Promise<Data & {
        id: string;
    }>;
    create: (data: Data & import("../..").MaybeId<string>) => Promise<Data & import("../..").HasId<string>>;
    set: (data: Data & import("../..").HasId<string>) => Promise<Data & import("../..").HasId<string>>;
    get: (id: string) => Promise<Data & {
        id: string;
    }>;
    has: (id: string) => Promise<boolean>;
    update: (id: string, data: Partial<Data>) => Promise<Data & import("../..").HasId<string>>;
    between: (a: string, b: string) => Promise<Data[]>;
    slice: (id: string, length: number) => Promise<Data[]>;
    delete: (id: string) => Promise<void>;
    entries: () => Promise<[string, Data][]>;
    values: () => Promise<Data[]>;
    keys: () => Promise<string[]>;
    size: () => Promise<number>;
    clear: () => Promise<void>;
    driver?: any;
};
export declare type Table = ReturnType<typeof Table>;
