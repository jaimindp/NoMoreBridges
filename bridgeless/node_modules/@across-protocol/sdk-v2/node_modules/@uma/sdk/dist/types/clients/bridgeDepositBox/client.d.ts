import { BridgeDepositBoxEthers } from "@uma/contracts-frontend";
import type { SignerOrProvider, GetEventType } from "../..";
import { Event, BigNumber } from "ethers";
export declare type Instance = BridgeDepositBoxEthers;
export declare function connect(address: string, provider: SignerOrProvider): Instance;
export declare type SetMinimumBridgingDelay = GetEventType<Instance, "SetMinimumBridgingDelay">;
export declare type WhitelistToken = GetEventType<Instance, "WhitelistToken">;
export declare type DepositsEnabled = GetEventType<Instance, "DepositsEnabled">;
export declare type FundsDeposited = GetEventType<Instance, "FundsDeposited">;
export declare type TokensBridged = GetEventType<Instance, "TokensBridged">;
export declare type Deposit = {
    chainId: BigNumber;
    depositId: BigNumber;
    l1Recipient: string;
    l2Sender: string;
    l1Token: string;
    amount: BigNumber;
    slowRelayFeePct: BigNumber;
    instantRelayFeePct: BigNumber;
    quoteTimestamp: BigNumber;
};
export declare type Whitelist = {
    l1Token: string;
    l2Token: string;
    lastBridgeTime: BigNumber;
    bridgePool: string;
};
export interface EventState {
    minimumBridgingDelay?: string;
    whitelistedTokens?: Record<string, Whitelist>;
    depositsEnabled?: Record<string, boolean>;
    deposits?: Record<string, Deposit>;
}
export declare function reduceEvents(state: EventState, event: Event): EventState;
export declare function getEventState(events: Event[], eventState?: EventState): EventState;
