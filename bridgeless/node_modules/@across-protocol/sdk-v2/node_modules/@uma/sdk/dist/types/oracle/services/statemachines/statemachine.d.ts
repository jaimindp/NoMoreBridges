import { ContextType } from "../../types/statemachine";
import type Store from "../../store";
import { ContextManager } from "./utils";
import * as setUser from "./setUser";
import * as clearUser from "./clearUser";
import * as setActiveRequest from "./setActiveRequest";
import * as approve from "./approve";
import * as disputePrice from "./disputePrice";
import * as proposePrice from "./proposePrice";
import * as switchOrAddChain from "./switchOrAddChain";
import * as pollActiveRequest from "./pollActiveRequest";
import * as pollActiveUser from "./pollActiveUser";
import * as fetchPastEvents from "./fetchPastEvents";
import * as pollNewEvents from "./pollNewEvents";
import * as updateActiveRequest from "./updateActiveRequest";
import * as settle from "./settle";
import * as setActiveRequestByTransaction from "./setActiveRequestByTransaction";
import * as fetchEventBased from "./fetchEventBased";
/**
 * StateMachine. This class will be used to handle all change requests by the user, including setting state which
 * may require triggering fetching data from chain, or initiating transactions that require tracking.
 *
 * This class is meant to step through states of a Context object. This object can have variable
 * parameters and memory. There are several concepts to understand before using this class:
 *
 * 1. Handlers - This is the state machine state handlers, it is an objected keyed by each state, with a function handler.
 * 2. Params - These are common parameters set by the caller, passed into each handler function.
 * 3. Memory - This is a writing space within the state machine handlers that accumulates through states.
 * 4. Context - This is the sum of all data needed to transition through the state machine states. It includes params, memory and metadata about the runtime.
 * 5. Context.done - This is a special property on context.done which represents that the state machine is done transitioning this context.
 * 6. Context.state = "done" - This is a reserved state on context.state, if set to "done" its the same thing as done = true.
 * 7. Context.state = "error" - This is a reserved state on context.state, if set to "error" it means the context is done, but also there is an context.error object.
 * 8. Interval - This is a property on the context which specifies the maximum rate in MS this context will transition, based on the current timestamp.
 */
export declare class StateMachine {
    private store;
    private pending;
    types: {
        [ContextType.setUser]: ContextManager<setUser.Params, setUser.Memory>;
        [ContextType.clearUser]: ContextManager<clearUser.Params, clearUser.Memory>;
        [ContextType.setActiveRequest]: ContextManager<setActiveRequest.Params, setActiveRequest.Memory>;
        [ContextType.approve]: ContextManager<approve.Params, approve.Memory>;
        [ContextType.disputePrice]: ContextManager<disputePrice.Params, disputePrice.Memory>;
        [ContextType.proposePrice]: ContextManager<proposePrice.Params, proposePrice.Memory>;
        [ContextType.switchOrAddChain]: ContextManager<switchOrAddChain.Params, switchOrAddChain.Memory>;
        [ContextType.pollActiveRequest]: ContextManager<pollActiveRequest.Params, pollActiveRequest.Memory>;
        [ContextType.pollActiveUser]: ContextManager<pollActiveUser.Params, pollActiveUser.Memory>;
        [ContextType.fetchPastEvents]: ContextManager<fetchPastEvents.Params, fetchPastEvents.Memory>;
        [ContextType.pollNewEvents]: ContextManager<pollNewEvents.Params, pollNewEvents.Memory>;
        [ContextType.setActiveRequestByTransaction]: ContextManager<setActiveRequestByTransaction.Params, setActiveRequestByTransaction.Memory>;
        [ContextType.settle]: ContextManager<settle.Params, settle.Memory>;
        [ContextType.updateActiveRequest]: ContextManager<updateActiveRequest.Params, updateActiveRequest.Memory>;
        [ContextType.fetchEventBased]: ContextManager<fetchEventBased.Params, fetchEventBased.Memory>;
    };
    constructor(store: Store);
    private saveContext;
    private handleCreate;
    private shift;
    private pop;
    private size;
    private push;
    /**
     * tick. Process all pending contexts, move them to done if needed
     *
     * @param {} now - Specify the timestamp this tick is running on.
     * @returns {Promise<boolean>} - Returns if there are still any pending contexts to run.
     */
    tick: (now?: number) => Promise<boolean>;
}
