import { BigNumberish, Provider, Signer, TransactionResponse, Log, TransactionReceipt } from "../types/ethers";
import type { OracleInterface, RequestKey, OracleProps, Request } from "../types/interfaces";
import { RequestPrice, ProposePrice, DisputePrice, Settle } from "../../clients/skinnyOptimisticOracle";
export declare type OptimisticOracleEvent = RequestPrice | ProposePrice | DisputePrice | Settle;
export type { RequestPrice, ProposePrice, DisputePrice, Settle };
export declare class SkinnyOptimisticOracle implements OracleInterface {
    protected provider: Provider;
    protected address: string;
    readonly chainId: number;
    private readonly contract;
    private readonly events;
    private requests;
    constructor(provider: Provider, address: string, chainId: number);
    private upsertRequest;
    private setDisputeHash;
    private setProposeHash;
    private setSettleHash;
    private updateFromEvents;
    fetchRequest(key: RequestKey): Promise<Request>;
    parseLog: (log: Log) => {
        event: string;
        eventSignature: string;
        eventFragment: import("@ethersproject/abi").EventFragment;
        name: string;
        signature: string;
        topic: string;
        args: import("@ethersproject/abi").Result;
        blockNumber: number;
        blockHash: string;
        transactionIndex: number;
        removed: boolean;
        address: string;
        data: string;
        topics: string[];
        transactionHash: string;
        logIndex: number;
    };
    getRequest(key: RequestKey): Request;
    disputePrice(signer: Signer, { requester, identifier, timestamp, ancillaryData }: RequestKey): Promise<TransactionResponse>;
    proposePrice(signer: Signer, { requester, identifier, timestamp, ancillaryData }: RequestKey, price: BigNumberish): Promise<TransactionResponse>;
    settle(signer: Signer, { requester, identifier, timestamp, ancillaryData }: RequestKey): Promise<TransactionResponse>;
    update(startBlock?: number, endBlock?: number | "latest"): Promise<void>;
    getProps(): Promise<OracleProps>;
    updateFromTransactionReceipt(receipt: TransactionReceipt): void;
    listRequests(): Request[];
}
