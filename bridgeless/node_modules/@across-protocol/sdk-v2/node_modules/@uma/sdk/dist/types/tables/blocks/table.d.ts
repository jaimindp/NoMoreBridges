import { Data } from "./utils";
import type { Store } from "../../stores";
export declare const Table: (type?: string, store?: Store<number, Data>) => {
    prune: (timestamp: number) => Promise<Data[]>;
    create: (data: Data & import("../..").MaybeId<number>) => Promise<Data & import("../..").HasId<number>>;
    set: (data: Data & import("../..").HasId<number>) => Promise<Data & import("../..").HasId<number>>;
    get: (id: number) => Promise<Data & {
        id: number;
    }>;
    has: (id: number) => Promise<boolean>;
    update: (id: number, data: Partial<Data>) => Promise<Data & import("../..").HasId<number>>;
    delete: (id: number) => Promise<void>;
    entries: () => Promise<[number, Data][]>;
    values: () => Promise<Data[]>;
    keys: () => Promise<number[]>;
    size: () => Promise<number>;
    clear: () => Promise<void>;
    driver?: any;
};
export declare type Table = ReturnType<typeof Table>;
