import { JsonRpcSigner, BigNumber, Web3Provider, FallbackProvider } from "./ethers";
import type { erc20, sortedRequests } from "../services";
import { Request, OracleInterface } from "./interfaces";
import type Multicall2 from "../../multicall2";
import { Context, Memory } from "./statemachine";
import { RequestState, RequestKey } from "../../clients/optimisticOracle";
declare type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
declare type PartialBy<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;
export { Context, Memory };
export declare type ChainServices = {
    multicall2: Multicall2;
    provider: FallbackProvider;
    erc20s: Record<string, erc20.Erc20>;
    optimisticOracle: OracleInterface;
};
export declare type Services = {
    sortedRequests?: sortedRequests.SortedRequests;
    chains?: Record<number, Partial<ChainServices>>;
};
export declare type ChainMetadata = {
    chainId: number;
    chainName: string;
    rpcUrls: [string, ...string[]];
    blockExplorerUrls: [string, ...string[]];
    nativeCurrency: {
        name: string;
        symbol: string;
        decimals: number;
    };
};
export declare type ChainConfig = ChainMetadata & {
    checkTxIntervalSec: number;
    multicall2Address?: string;
    optimisticOracleAddress: string;
    earliestBlockNumber?: number;
    maxEventRangeQuery?: number;
    disableFetchEventBased?: boolean;
};
export declare type InputRequestWithOracleType = InputRequest & {
    oracleType: OracleType;
};
export declare type RequestWithOracleType = Request & {
    oracleType: OracleType;
};
export declare type RequestsWithOracleType = RequestWithOracleType[];
export declare type PartialChainConfig = PartialBy<ChainConfig, "chainId" | "checkTxIntervalSec" | "earliestBlockNumber">;
export declare enum OracleType {
    Optimistic = "Optimistic",
    Skinny = "Skinny",
    OptimisticV2 = "OptimisticV2"
}
export declare type Config = {
    chains: Record<number, ChainConfig>;
    oracleType: OracleType;
};
export declare type PartialConfig = {
    chains: Record<number, PartialChainConfig>;
};
export declare type PartialConfigTable = {
    [key in OracleType]?: PartialConfig;
};
export declare type Balances = Record<string, BigNumber>;
export declare type User = {
    address: string;
    chainId: number;
    signer: JsonRpcSigner;
    provider: Web3Provider;
};
export declare enum Flag {
    MissingRequest = "MissingRequest",
    MissingUser = "MissingUser",
    WrongChain = "WrongChain",
    CanPropose = "CanPropose",
    CanDispute = "CanDispute",
    CanSettle = "CanSettle",
    InDvmVote = "InDvmVote",
    RequestSettled = "RequestSettled",
    InsufficientBalance = "InsufficientBalance",
    InsufficientApproval = "InsufficientApproval",
    ChainChangeInProgress = "ChainChangeInProgress",
    ProposalTxInProgress = "ProposalTxInProgress",
    ApprovalTxInProgress = "ApprovalTxInProgress",
    DisputeTxInProgress = "DisputeTxInProgress"
}
export declare type Flags = Record<Flag, boolean>;
export declare type InputRequest = RequestKey & {
    chainId: number;
};
export declare type Inputs = {
    request: InputRequest;
    user: Partial<User>;
};
export declare type Erc20Props = {
    address: string;
    symbol: string;
    name: string;
    decimals: number;
    totalSupply: BigNumber;
};
export declare type Erc20 = {
    props: Partial<Erc20Props>;
    allowances: Record<string, Balances>;
    balances: Balances;
};
export { RequestState };
export declare type OptimisticOracle = {
    address: string;
    defaultLiveness: BigNumber;
    requests: Record<string, Request>;
};
export declare type Chain = {
    erc20s: Record<string, Partial<Erc20>>;
    optimisticOracle: Partial<OptimisticOracle>;
    currentTime: BigNumber;
};
export declare type State = Partial<{
    error: Error;
    inputs: Partial<Inputs>;
    chains: Record<number, Partial<Chain>>;
    config: Config;
    services: Services;
    commands: Record<string, Context<unknown, unknown & Memory>>;
    descendingRequests: Request[];
}>;
