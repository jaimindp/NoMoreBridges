import { ethers } from "ethers";
import { Provider } from "@ethersproject/providers";
import { Signer, BigNumber, ContractTransaction } from "ethers";
import { SignerOrProvider } from "../..";
export declare const l1Contracts: {
    ADDRESS_MANAGER_ADDRESS: {
        [chainId: number]: string;
    };
};
export declare class BobaBridgeClient {
    readonly L2_DEPOSIT_GAS_LIMIT = 1300000;
    getL1BridgeAddress(chainId: number, l1Provider: SignerOrProvider): Promise<string>;
    /**
     * Create a transaction to deposit ERC20 tokens to Boba. Mainnet and Rinkeby are currently supported
     * @param l1Signer The L1 wallet provider (signer)
     * @param l1Erc20Address The L1 token address
     * @param l2Erc20Address The L2 token address
     * @param amount The amount to be deposited in wei
     * @returns The submitted transaction
     */
    depositERC20(l1Signer: Signer, l1Erc20Address: string, l2Erc20Address: string, amount: BigNumber): Promise<ethers.ContractTransaction>;
    /**
     * Create transaction to deposit ETH to Boba
     * @param l1Signer The L1 wallet provider (signer)
     * @param amount The amount to be deposited in wei
     * @returns The submitted transaction
     */
    depositEth(l1Signer: Signer, amount: BigNumber): Promise<ethers.ContractTransaction>;
    /**
     * Wait a L1 transaction to be relayed by the L1 Cross Domain Messenger
     * @param tx The L1 -> L2 transaction
     * @param l1RpcProvider Layer 1 RPC provider
     * @param l2RpcProvider Layer 2 RPC provider
     * @returns The transaction receipt
     */
    waitRelayToL2(tx: ContractTransaction, l1RpcProvider: Provider, l2RpcProvider: Provider): Promise<ethers.providers.TransactionReceipt>;
    checkAllowance(l1Signer: Signer, l1Erc20Address: string): Promise<ethers.BigNumber>;
    approve(l1Signer: Signer, l1Erc20Address: string, amount: BigNumber): Promise<ethers.ContractTransaction>;
}
