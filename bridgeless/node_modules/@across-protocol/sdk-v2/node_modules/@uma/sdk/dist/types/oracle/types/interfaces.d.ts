import { BigNumberish, BigNumber, Signer, TransactionResponse, TransactionReceipt, Provider, Log, ParsedLog } from "../types/ethers";
import { RequestState, RequestKey } from "../../clients/optimisticOracle";
import { Client } from "../client";
import { OracleType } from "../types/state";
export declare type Request = RequestKey & {
    chainId: number;
} & Partial<{
    proposer: string;
    disputer: string;
    currency: string;
    settled: boolean;
    proposedPrice: BigNumber;
    resolvedPrice: BigNumber;
    expirationTime: BigNumber;
    reward: BigNumber;
    finalFee: BigNumber;
    price: BigNumber;
    payout: BigNumber;
    state: RequestState;
    requestTx: string;
    proposeTx: string;
    disputeTx: string;
    settleTx: string;
    requestBlockNumber: number;
    proposeBlockNumber: number;
    disputeBlockNumber: number;
    settleBlockNumber: number;
    requestLogIndex: number;
    proposeLogIndex: number;
    disputeLogIndex: number;
    settleLogIndex: number;
    bond: BigNumber;
    customLiveness: BigNumber;
    eventBased: boolean;
    refundOnDispute: boolean;
    callbackOnPriceProposed: boolean;
    callbackOnPriceDisputed: boolean;
    callbackOnPriceSettled: boolean;
}>;
export declare type Requests = Request[];
export { RequestState, RequestKey };
export interface OracleProps {
    defaultLiveness: BigNumber;
}
export interface NewOracle {
    new (provider: Provider, address: string, chainId: number): OracleInterface;
}
export interface OracleInterface {
    fetchRequest: (props: RequestKey) => Promise<Request>;
    getRequest: (props: RequestKey) => Request;
    disputePrice: (signer: Signer, key: RequestKey) => Promise<TransactionResponse>;
    proposePrice: (signer: Signer, key: RequestKey, price: BigNumberish) => Promise<TransactionResponse>;
    settle: (signer: Signer, key: RequestKey) => Promise<TransactionResponse>;
    update: (startBlock: number, endBlock: number | "latest") => Promise<void>;
    updateFromTransactionReceipt: (receipt: TransactionReceipt) => void;
    getProps: () => Promise<OracleProps>;
    listRequests: () => Requests;
    parseLog: (log: Log) => Log & ParsedLog & {
        event: string;
        eventSignature: string;
    };
}
export declare type ClientTable = {
    [key in OracleType]?: Client;
};
