import { OptimisticOracleV2InterfaceEthers } from "@uma/contracts-frontend";
import type { SignerOrProvider, GetEventType } from "../..";
import { Event, BigNumberish, utils, BigNumber } from "ethers";
export declare type Instance = OptimisticOracleV2InterfaceEthers;
export declare function connect(address: string, provider: SignerOrProvider): Instance;
export declare const contractInterface: utils.Interface;
export declare type RequestPrice = GetEventType<Instance, "RequestPrice">;
export declare type ProposePrice = GetEventType<Instance, "ProposePrice">;
export declare type DisputePrice = GetEventType<Instance, "DisputePrice">;
export declare type Settle = GetEventType<Instance, "Settle">;
export declare enum RequestState {
    Invalid = 0,
    Requested = 1,
    Proposed = 2,
    Expired = 3,
    Disputed = 4,
    Resolved = 5,
    Settled = 6
}
export declare type RequestKey = {
    requester: string;
    identifier: string;
    timestamp: number;
    ancillaryData: string;
};
export declare type RequestSettings = {
    eventBased: boolean;
    refundOnDispute: boolean;
    callbackOnPriceProposed: boolean;
    callbackOnPriceDisputed: boolean;
    callbackOnPriceSettled: boolean;
    bond: BigNumber;
    customLiveness: BigNumber;
};
export declare type Request = RequestKey & Partial<{
    proposer: string;
    disputer: string;
    currency: string;
    settled: boolean;
    refundOnDispute: boolean;
    proposedPrice: BigNumber;
    resolvedPrice: BigNumber;
    expirationTime: BigNumber;
    reward: BigNumber;
    finalFee: BigNumber;
    price: BigNumber;
    payout: BigNumber;
    state: RequestState;
    requestTx: string;
    proposeTx: string;
    disputeTx: string;
    settleTx: string;
    requestBlockNumber: number;
    proposeBlockNumber: number;
    disputeBlockNumber: number;
    settleBlockNumber: number;
    requestLogIndex: number;
    proposeLogIndex: number;
    disputeLogIndex: number;
    settleLogIndex: number;
    requestSettings: RequestSettings;
}>;
export interface EventState {
    requests?: Record<string, Request>;
}
export declare function requestId(request: Omit<RequestKey, "timestamp"> & {
    timestamp: BigNumberish;
}): string;
export declare function reduceEvents(state: EventState, event: Event): EventState;
export declare function getEventState(events: Event[], eventState?: EventState): EventState;
