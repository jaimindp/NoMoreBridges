import type * as ethersTypes from "../types/ethers";
import * as state from "../types/state";
import * as statemachine from "../types/statemachine";
import { SortedRequests } from "../services/sortedRequests";
import type { OracleInterface, Request, Requests } from "../types/interfaces";
export declare class User {
    private state;
    constructor(state: Partial<state.User>);
    set(data: Partial<state.User>): void;
    clear(): void;
    chainId(chainId: number): void;
    address(address: string): void;
    signer(signer: ethersTypes.JsonRpcSigner): void;
    provider(provider: ethersTypes.Web3Provider): void;
}
export declare class Balances {
    private state;
    constructor(state: Partial<state.Balances>);
    set(address: string, amount: ethersTypes.BigNumber): void;
}
export declare class Erc20 {
    private state;
    constructor(state: Partial<state.Erc20>);
    props(data: state.Erc20["props"]): void;
    balance(account: string, amount: ethersTypes.BigNumber): void;
    allowance(account: string, spender: string, amount: ethersTypes.BigNumber): void;
}
export declare class OptimisticOracle {
    private state;
    constructor(state: Partial<state.OptimisticOracle>);
    address(address: string): void;
    request(request: Request): void;
    defaultLiveness(defaultLiveness: ethersTypes.BigNumber): void;
}
export declare class Chain {
    private state;
    constructor(state: Partial<state.Chain>);
    erc20s(address: string): Erc20;
    optimisticOracle(): OptimisticOracle;
    currentTime(currentTime: ethersTypes.BigNumber): void;
}
export declare class Inputs {
    private state;
    constructor(state: Partial<state.Inputs>);
    request(params: state.Inputs["request"]): void;
    user(): User;
}
export declare class Services {
    private state;
    constructor(state: Partial<state.ChainServices>);
    provider(provider: ethersTypes.FallbackProvider): void;
    erc20s(address: string): void;
    optimisticOracle(optimisticOracle: OracleInterface): void;
    multicall2(multicall2Address?: string): void;
}
/**
 * Write. The main writer class for this applications global state object. Composes classes that initialize, validate
 * and simplify changes to the global state. This class modifies state directly, and really is only useful in combination with immer.
 */
export default class Write {
    private state;
    constructor(state: state.State);
    chains(chainId: number): Chain;
    inputs(): Inputs;
    config(config: state.Config): void;
    services(chainId: number): Services;
    error(error?: Error): void;
    command(context: statemachine.Context<unknown, unknown & statemachine.Memory>): void;
    sortedRequestsService(sortedRequests: SortedRequests): void;
    descendingRequests(sortedRequests: Requests): void;
}
