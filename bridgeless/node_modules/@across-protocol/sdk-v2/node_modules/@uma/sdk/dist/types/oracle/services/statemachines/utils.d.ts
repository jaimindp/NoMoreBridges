import { Handlers, Memory, Context, Step as StepType, ContextProps, ContextType } from "../../types/statemachine";
export declare class ContextClient {
    private context;
    constructor(context: ContextProps);
    sleep(ms?: number): void;
}
export declare const Step: <P = undefined, M extends Memory = undefined>(handlers: Handlers<P, M>) => StepType<P, M>;
export declare function shouldStep(context: Context<unknown, unknown & Memory> | undefined, now: number): context is Context;
export declare function create<P, M extends Memory>(type: ContextType, params: P, memory: M, override?: Partial<ContextProps>, now?: number): Context<P, M>;
export declare class ContextManager<P, M extends Memory> {
    private type;
    private handlers;
    private initMemory;
    private emit;
    constructor(type: ContextType, handlers: Handlers<P, M>, initMemory: (params: P) => M, emit: (ctx: Context<P, M>) => void);
    create: (params: P, user?: string | undefined) => string;
    step(context: Context<P, M>, now?: number, iterations?: number): Promise<Context<P, M>>;
}
