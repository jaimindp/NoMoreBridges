{"version":3,"file":"index.js","sources":["../src/clients/registry/client.ts","../src/utils.ts","../src/clients/emp/client.ts","../src/clients/erc20/client.ts","../src/clients/multicall/client.ts","../src/clients/multicall2/client.ts","../src/clients/lsp-creator/client.ts","../src/clients/lsp/client.ts","../src/clients/bridgeDepositBox/client.ts","../src/clients/bridgePool/client.ts","../src/clients/etherchain/client.ts","../src/clients/rateModelStore/client.ts","../src/clients/optimisticOracle/client.ts","../src/clients/skinnyOptimisticOracle/client.ts","../src/clients/optimisticOracleV2/client.ts","../src/stores/js-map/store.ts","../src/stores/sorted-js-map/store.ts","../src/stores/google-datastore/store.ts","../src/tables/base/table.ts","../src/tables/blocks/utils.ts","../src/tables/blocks/table.ts","../src/tables/emps/utils.ts","../src/tables/emps/table.ts","../src/tables/historical-prices/utils.ts","../src/tables/historical-prices/table.ts","../src/tables/erc20s/utils.ts","../src/tables/erc20s/table.ts","../src/across/utils.ts","../src/across/feeCalculator.ts","../src/across/constants.ts","../src/across/rateModel.ts","../src/blockFinder.ts","../src/across/lpFeeCalculator.ts","../src/coingecko/coingecko.ts","../src/across/gasFeeCalculator.ts","../src/multicall.ts","../src/multicall2.ts","../src/across/transactionManager.ts","../src/across/clients/bridgePool.ts","../src/across/clients/optimismBridge.ts","../src/across/clients/bobaBridge.ts","../src/oracle/errors.ts","../src/oracle/types/state.ts","../src/oracle/types/statemachine.ts","../src/oracle/utils.ts","../src/oracle/services/erc20.ts","../src/oracle/store/write.ts","../src/oracle/store/read.ts","../src/oracle/store/has.ts","../src/oracle/store/store.ts","../src/oracle/store/index.ts","../src/oracle/services/update.ts","../src/oracle/services/statemachines/setUser.ts","../src/oracle/services/statemachines/clearUser.ts","../src/oracle/services/statemachines/setActiveRequest.ts","../src/oracle/services/statemachines/approve.ts","../src/oracle/services/statemachines/disputePrice.ts","../src/oracle/services/statemachines/proposePrice.ts","../src/oracle/services/statemachines/switchOrAddChain.ts","../src/oracle/services/statemachines/pollActiveRequest.ts","../src/oracle/services/statemachines/fetchPastEvents.ts","../src/oracle/services/statemachines/pollNewEvents.ts","../src/oracle/services/statemachines/setActiveRequestByTransaction.ts","../src/oracle/services/statemachines/settle.ts","../src/oracle/services/statemachines/fetchEventBased.ts","../src/oracle/services/statemachines/utils.ts","../src/oracle/services/statemachines/pollActiveUser.ts","../src/oracle/services/statemachines/updateActiveRequest.ts","../src/oracle/services/statemachines/statemachine.ts","../src/oracle/client.ts","../src/oracle/services/optimisticOracle.ts","../src/oracle/services/sortedRequests.ts","../src/oracle/services/skinnyOptimisticOracle.ts","../src/oracle/services/optimisticOracleV2.ts","../src/oracle/skinnyFactory.ts","../src/oracle/optimisticFactory.ts","../src/oracle/optimisticV2Factory.ts","../src/oracle/factory.ts"],"sourcesContent":["import {\n  RegistryEthers,\n  RegistryEthers__factory,\n  getRegistryAddress as getAbi,\n  getRegistryAddress as getAddress,\n} from \"@uma/contracts-node\";\n\nimport type { SignerOrProvider, GetEventType } from \"../..\";\nimport { Event } from \"ethers\";\n\nexport type Instance = RegistryEthers;\nconst Factory = RegistryEthers__factory;\n\nexport type Network = string | number;\n\nexport { getAddress, getAbi };\n\nexport function connect(address: string, provider: SignerOrProvider): Instance {\n  return Factory.connect(address, provider);\n}\n\nexport interface EventState {\n  contracts?: { [key: string]: NewContractRegistered };\n}\n\nexport type NewContractRegistered = GetEventType<Instance, \"NewContractRegistered\">;\n\n// experimenting with a generalized way of handling events and returning state, inspired from react style reducers\nexport function reduceEvents(state: EventState = {}, event: Event): EventState {\n  switch (event.event) {\n    case \"NewContractRegistered\": {\n      const typedEvent = event as NewContractRegistered;\n      const { contractAddress } = typedEvent.args;\n      const contracts = state?.contracts || {};\n      return {\n        ...state,\n        contracts: {\n          ...contracts,\n          [contractAddress]: typedEvent,\n        },\n      };\n    }\n  }\n  return state;\n}\nexport function getEventState(events: Event[]): EventState {\n  return events.reduce(reduceEvents, {});\n}\n","import assert from \"assert\";\nimport { BigNumber, Contract } from \"ethers\";\nimport type Multicall2 from \"./multicall2\";\nimport zip from \"lodash/zip\";\n\nexport type BigNumberish = number | string | BigNumber;\n// check if a value is not null or undefined, useful for numbers which could be 0.\n// \"is\" syntax: https://stackoverflow.com/questions/40081332/what-does-the-is-keyword-do-in-typescript\n/* eslint-disable-next-line @typescript-eslint/ban-types */\nexport function exists<T>(value: T | null | undefined): value is NonNullable<T> {\n  return value !== null && value !== undefined;\n}\n\n// useful for maintaining balances from events\nexport type Balances = { [key: string]: string };\nexport function Balances(balances: Balances = {}) {\n  function create(id: string, amount = \"0\") {\n    assert(!has(id), \"balance already exists\");\n    return set(id, amount);\n  }\n  function has(id: string) {\n    return exists(balances[id]);\n  }\n  function set(id: string, amount: string) {\n    balances[id] = amount;\n    return amount;\n  }\n  function add(id: string, amount: BigNumberish) {\n    return set(id, BigNumber.from(amount).add(getOrCreate(id)).toString());\n  }\n  function sub(id: string, amount: BigNumberish) {\n    return set(id, BigNumber.from(getOrCreate(id)).sub(amount).toString());\n  }\n  function get(id: string) {\n    assert(has(id), \"balance does not exist\");\n    return balances[id];\n  }\n  function getOrCreate(id: string) {\n    if (has(id)) return get(id);\n    return create(id);\n  }\n  return { create, add, sub, get, balances, set, has, getOrCreate };\n}\n\n// Copied from common, but modified for ethers Bignumber\nexport const ConvertDecimals = (fromDecimals: number, toDecimals: number) => {\n  assert(fromDecimals >= 0, \"requires fromDecimals as an integer >= 0\");\n  assert(toDecimals >= 0, \"requires toDecimals as an integer >= 0\");\n  // amount: string, BN, number - integer amount in fromDecimals smallest unit that want to convert toDecimals\n  // returns: string with toDecimals in smallest unit\n  return (amount: BigNumberish): string => {\n    assert(exists(amount), \"must provide an amount to convert\");\n    amount = BigNumber.from(amount);\n    if (amount.isZero()) return amount.toString();\n    const diff = fromDecimals - toDecimals;\n    if (diff == 0) return amount.toString();\n    if (diff > 0) return amount.div(BigNumber.from(\"10\").pow(diff)).toString();\n    return amount.mul(BigNumber.from(\"10\").pow(-1 * diff)).toString();\n  };\n};\n\n// async sleep\nexport const sleep = (delay = 0) => new Promise((res) => setTimeout(res, delay));\n\n// Loop forever but wait until execution is finished before starting next timer. Throw an error to break this\n// or add another utlity function if you need it to end on condition.\nexport async function loop(fn: (...args: any[]) => any, delay: number, ...args: any[]) {\n  do {\n    await fn(...args);\n    await sleep(delay);\n    /* eslint-disable-next-line no-constant-condition */\n  } while (true);\n}\n\nexport type Call = [string, ...BigNumberish[]];\nexport type Calls = Call[];\nexport type BatchReadWithErrorsType = ReturnType<ReturnType<typeof BatchReadWithErrors>>;\nexport const BatchReadWithErrors = (multicall2: Multicall2) => (contract: Contract) => async <R>(\n  calls: Calls\n): Promise<R> => {\n  // multicall batch takes array of {method} objects\n  const results = await multicall2\n    .batch(\n      contract,\n      calls.map(([method, ...args]) => ({ method, args }))\n    )\n    .readWithErrors();\n  // convert results of multicall, an array of responses, into an object keyed by contract method\n  return Object.fromEntries(\n    zip(calls, results).map(([call, result]) => {\n      if (call == null) return [];\n      const [method] = call;\n      if (!result?.result) return [method, undefined];\n      return [method, result.result[0] || result.result];\n    })\n  );\n};\n\n/**\n * @notice Return average block-time for a period.\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport async function averageBlockTimeSeconds(chainId?: number): Promise<number> {\n  // TODO: Call an external API to get this data. Currently this value is a hard-coded estimate\n  // based on the data from https://etherscan.io/chart/blocktime. ~13.5 seconds has been the average\n  // since April 2016, although this value seems to spike periodically for a relatively short period of time.\n  const defaultBlockTimeSeconds = 12;\n  if (!defaultBlockTimeSeconds) {\n    throw \"Missing default block time value\";\n  }\n\n  switch (chainId) {\n    // Source: https://polygonscan.com/chart/blocktime\n    case 10:\n      return 0.5;\n    case 42161:\n      return 0.5;\n    case 288:\n      return 150;\n    case 137:\n      return 2.5;\n    case 1:\n      return defaultBlockTimeSeconds;\n    default:\n      return defaultBlockTimeSeconds;\n  }\n}\n\nexport async function estimateBlocksElapsed(\n  seconds: number,\n  cushionPercentage = 0.0,\n  chainId?: number\n): Promise<number> {\n  const cushionMultiplier = cushionPercentage + 1.0;\n  const averageBlockTime = await averageBlockTimeSeconds(chainId);\n  return Math.floor((seconds * cushionMultiplier) / averageBlockTime);\n}\n","import { ExpiringMultiPartyEthers, ExpiringMultiPartyEthers__factory } from \"@uma/contracts-node\";\nimport type { SignerOrProvider, GetEventType } from \"../..\";\nimport { Event } from \"ethers\";\nimport { Balances } from \"../../utils\";\n\nexport type Instance = ExpiringMultiPartyEthers;\nconst Factory = ExpiringMultiPartyEthers__factory;\n\nexport function connect(address: string, provider: SignerOrProvider): Instance {\n  return Factory.connect(address, provider);\n}\n\nexport interface EventState {\n  // any address that created a position, regardless of if they have closed it\n  sponsors?: string[];\n  tokens?: Balances;\n  collateral?: Balances;\n  expired?: boolean;\n}\n\nexport type RequestTransferPositionExecuted = GetEventType<Instance, \"RequestTransferPositionExecuted\">;\nexport type PositionCreated = GetEventType<Instance, \"PositionCreated\">;\nexport type NewSponsor = GetEventType<Instance, \"NewSponsor\">;\nexport type SettleExpiredPosition = GetEventType<Instance, \"SettleExpiredPosition\">;\nexport type Redeem = GetEventType<Instance, \"Redeem\">;\nexport type Withdrawal = GetEventType<Instance, \"Withdrawal\">;\nexport type LiquidationCreated = GetEventType<Instance, \"LiquidationCreated\">;\n\n// experimenting with a generalized way of handling events and returning state, inspired from react style reducers\nexport function reduceEvents(state: EventState = {}, event: Event): EventState {\n  switch (event.event) {\n    case \"RequestTransferPositionExecuted\": {\n      const typedEvent = event as RequestTransferPositionExecuted;\n      const { oldSponsor, newSponsor } = typedEvent.args;\n      const tokens = Balances(state.tokens || {});\n      const collateral = Balances(state.collateral || {});\n      const collateralBalance = collateral.get(oldSponsor);\n      collateral.set(oldSponsor, \"0\");\n      collateral.set(newSponsor, collateralBalance);\n      const tokenBalance = tokens.get(oldSponsor);\n      tokens.set(oldSponsor, \"0\");\n      tokens.set(newSponsor, tokenBalance.toString());\n      return {\n        ...state,\n        collateral: collateral.balances,\n        tokens: tokens.balances,\n      };\n    }\n    case \"PositionCreated\": {\n      const typedEvent = event as PositionCreated;\n      const { sponsor, collateralAmount, tokenAmount } = typedEvent.args;\n      const tokens = Balances(state.tokens || {});\n      const collateral = Balances(state.collateral || {});\n      collateral.add(sponsor, collateralAmount.toString());\n      tokens.add(sponsor, tokenAmount.toString());\n      return {\n        ...state,\n        collateral: collateral.balances,\n        tokens: tokens.balances,\n      };\n    }\n    case \"NewSponsor\": {\n      const typedEvent = event as NewSponsor;\n      const { sponsor } = typedEvent.args;\n      const sponsors = new Set(state.sponsors || []);\n      sponsors.add(sponsor);\n      return {\n        ...state,\n        sponsors: Array.from(sponsors.values()),\n      };\n    }\n    case \"SettleExpiredPosition\": {\n      const typedEvent = event as SettleExpiredPosition;\n      const { caller, collateralReturned, tokensBurned } = typedEvent.args;\n      const tokens = Balances(state.tokens || {});\n      const collateral = Balances(state.collateral || {});\n      collateral.sub(caller, collateralReturned.toString());\n      tokens.sub(caller, tokensBurned.toString());\n      return {\n        ...state,\n        expired: true,\n        collateral: collateral.balances,\n        tokens: tokens.balances,\n      };\n    }\n    case \"Redeem\": {\n      const typedEvent = event as Redeem;\n      const { sponsor, collateralAmount, tokenAmount } = typedEvent.args;\n      const tokens = Balances(state.tokens || {});\n      const collateral = Balances(state.collateral || {});\n      collateral.sub(sponsor, collateralAmount.toString());\n      tokens.sub(sponsor, tokenAmount.toString());\n      return {\n        ...state,\n        collateral: collateral.balances,\n        tokens: tokens.balances,\n      };\n    }\n    case \"LiquidationCreated\": {\n      const typedEvent = event as LiquidationCreated;\n      const { sponsor, tokensOutstanding, liquidatedCollateral } = typedEvent.args;\n      const tokens = Balances(state.tokens || {});\n      const collateral = Balances(state.collateral || {});\n      collateral.sub(sponsor, liquidatedCollateral.toString());\n      tokens.sub(sponsor, tokensOutstanding.toString());\n      return {\n        ...state,\n        collateral: collateral.balances,\n        tokens: tokens.balances,\n      };\n    }\n    // these 2 are the same\n    case \"Withdrawal\":\n    case \"RequestWithdrawalExecuted\": {\n      const typedEvent = event as Withdrawal;\n      const { sponsor, collateralAmount } = typedEvent.args;\n      const collateral = Balances(state.collateral || {});\n      collateral.sub(sponsor, collateralAmount.toString());\n      return {\n        ...state,\n        collateral: collateral.balances,\n      };\n    }\n    case \"ContractExpired\": {\n      return {\n        ...state,\n        expired: true,\n      };\n    }\n  }\n  return state;\n}\n\nexport function getEventState(events: Event[], initialState: EventState = {}): EventState {\n  return events.reduce(reduceEvents, initialState);\n}\n","import { ERC20Ethers, ERC20Ethers__factory } from \"@uma/contracts-node\";\nimport type { SignerOrProvider, GetEventType } from \"../..\";\nimport { Event } from \"ethers\";\nimport { Balances } from \"../../utils\";\nimport { set } from \"lodash\";\n\nexport type Instance = ERC20Ethers;\nconst Factory = ERC20Ethers__factory;\n\nexport function connect(address: string, provider: SignerOrProvider): Instance {\n  return Factory.connect(address, provider);\n}\n\nexport interface EventState {\n  // any address that created a position, regardless of if they have closed it\n  balances?: Balances;\n  // approvals are keyed both ways here for ease of lookup by either owner or spender\n  approvalsByOwner?: {\n    [owner: string]: {\n      [spender: string]: {\n        amount: string;\n      };\n    };\n  };\n  approvalsBySpender?: {\n    [spender: string]: {\n      [owner: string]: {\n        amount: string;\n      };\n    };\n  };\n}\n\nexport type Transfer = GetEventType<Instance, \"Transfer\">;\nexport type Approval = GetEventType<Instance, \"Approval\">;\n\n// takes all events and returns user balances and approvals\nexport function reduceEvents(state: EventState = {}, event: Event): EventState {\n  switch (event.event) {\n    case \"Transfer\": {\n      const typedEvent = event as Transfer;\n      const { from, to, value } = typedEvent.args;\n      const balances = Balances(state.balances || {});\n      balances.sub(from, value);\n      balances.add(to, value);\n      return {\n        ...state,\n        balances: balances.balances,\n      };\n    }\n    case \"Approval\": {\n      const typedEvent = event as Approval;\n      const { owner, spender, value } = typedEvent.args;\n      set(state, [\"approvalsByOwner\", owner, spender], value.toString());\n      set(state, [\"approvalsBySpender\", spender, owner], value.toString());\n      return {\n        ...state,\n      };\n    }\n  }\n  return state;\n}\n\nexport function getEventState(events: Event[], initialState: EventState = {}): EventState {\n  return events.reduce(reduceEvents, initialState);\n}\n","import { MulticallEthers, MulticallEthers__factory } from \"@uma/contracts-node\";\nimport type { SignerOrProvider } from \"../..\";\n\nexport type Instance = MulticallEthers;\nconst Factory = MulticallEthers__factory;\n\nexport function connect(address: string, provider: SignerOrProvider): Instance {\n  return Factory.connect(address, provider);\n}\n","import { Multicall2Ethers, Multicall2Ethers__factory } from \"@uma/contracts-node\";\nimport type { SignerOrProvider } from \"../..\";\n\nexport type Instance = Multicall2Ethers;\nconst Factory = Multicall2Ethers__factory;\n\nexport function connect(address: string, provider: SignerOrProvider): Instance {\n  return Factory.connect(address, provider);\n}\n","import {\n  LongShortPairCreatorEthers,\n  LongShortPairCreatorEthers__factory,\n  getLongShortPairCreatorAbi as getAbi,\n  getLongShortPairCreatorAddress as getAddress,\n} from \"@uma/contracts-node\";\nimport type { SignerOrProvider, GetEventType } from \"../..\";\nimport { Event } from \"ethers\";\n\n// exporting Registry type in case its needed\nexport type Instance = LongShortPairCreatorEthers;\nconst Factory = LongShortPairCreatorEthers__factory;\n\nexport type Network = string | number;\n\nexport { getAddress, getAbi };\n\nexport function connect(address: string, provider: SignerOrProvider): Instance {\n  return Factory.connect(address, provider);\n}\n\nexport type CreatedLongShortPair = GetEventType<Instance, \"CreatedLongShortPair\">;\n\nexport interface EventState {\n  contracts?: {\n    [lspAddress: string]: CreatedLongShortPair;\n  };\n}\n\nexport function reduceEvents(state: EventState, event: Event): EventState {\n  switch (event.event) {\n    case \"CreatedLongShortPair\": {\n      const typedEvent = event as CreatedLongShortPair;\n      const contracts = state?.contracts || {};\n      return {\n        ...state,\n        contracts: {\n          ...contracts,\n          [typedEvent.args.longShortPair]: typedEvent,\n        },\n      };\n    }\n  }\n  return state;\n}\nexport function getEventState(events: Event[], eventState: EventState = {}): EventState {\n  return events.reduce(reduceEvents, eventState);\n}\n","import { LongShortPairEthers, LongShortPairEthers__factory } from \"@uma/contracts-node\";\nimport type { SignerOrProvider, GetEventType } from \"../..\";\nimport { Event } from \"ethers\";\nimport { Balances } from \"../../utils\";\n\nexport type Instance = LongShortPairEthers;\nconst Factory = LongShortPairEthers__factory;\n\nexport function connect(address: string, provider: SignerOrProvider): Instance {\n  return Factory.connect(address, provider);\n}\n\nexport type TokensCreated = GetEventType<Instance, \"TokensCreated\">;\nexport type TokensRedeemed = GetEventType<Instance, \"TokensRedeemed\">;\nexport type ContractExpired = GetEventType<Instance, \"ContractExpired\">;\nexport type PositionSettled = GetEventType<Instance, \"PositionSettled\">;\n\nexport interface EventState {\n  sponsors?: string[];\n  longs?: Balances;\n  shorts?: Balances;\n  collateral?: Balances;\n  expired?: boolean;\n  expiredBy?: string;\n}\n\nexport function reduceEvents(state: EventState, event: Event): EventState {\n  switch (event.event) {\n    case \"TokensCreated\": {\n      const typedEvent = event as TokensCreated;\n      const { sponsor, collateralUsed, tokensMinted } = typedEvent.args;\n\n      const sponsors = new Set(state.sponsors || []);\n      const longs = Balances(state.longs || {});\n      const shorts = Balances(state.shorts || {});\n      const collateral = Balances(state.collateral || {});\n\n      sponsors.add(sponsor);\n      longs.add(sponsor, tokensMinted);\n      shorts.add(sponsor, tokensMinted);\n      collateral.add(sponsor, collateralUsed);\n\n      return {\n        ...state,\n        collateral: collateral.balances,\n        shorts: shorts.balances,\n        longs: longs.balances,\n        sponsors: Array.from(sponsors.values()),\n      };\n    }\n    case \"TokensRedeemed\": {\n      const typedEvent = event as TokensRedeemed;\n      const { sponsor, collateralReturned, tokensRedeemed } = typedEvent.args;\n\n      const longs = Balances(state.longs || {});\n      const shorts = Balances(state.shorts || {});\n      const collateral = Balances(state.collateral || {});\n\n      longs.sub(sponsor, tokensRedeemed);\n      shorts.sub(sponsor, tokensRedeemed);\n      collateral.sub(sponsor, collateralReturned);\n\n      return {\n        ...state,\n        collateral: collateral.balances,\n        shorts: shorts.balances,\n        longs: longs.balances,\n      };\n    }\n    case \"ContractExpired\": {\n      const typedEvent = event as ContractExpired;\n      const { caller } = typedEvent.args;\n\n      return {\n        ...state,\n        expired: true,\n        expiredBy: caller,\n      };\n    }\n    case \"PositionSettled\": {\n      const typedEvent = event as PositionSettled;\n      const { sponsor, collateralReturned, longTokens, shortTokens } = typedEvent.args;\n\n      const longs = Balances(state.longs || {});\n      const shorts = Balances(state.shorts || {});\n      const collateral = Balances(state.collateral || {});\n\n      longs.sub(sponsor, longTokens);\n      shorts.sub(sponsor, shortTokens);\n      collateral.sub(sponsor, collateralReturned);\n\n      return {\n        ...state,\n        collateral: collateral.balances,\n        shorts: shorts.balances,\n        longs: longs.balances,\n      };\n    }\n  }\n  return state;\n}\nexport function getEventState(events: Event[], eventState: EventState = {}): EventState {\n  return events.reduce(reduceEvents, eventState);\n}\n","import { BridgeDepositBoxEthers, BridgeDepositBoxEthers__factory } from \"@uma/contracts-node\";\nimport type { SignerOrProvider, GetEventType } from \"../..\";\nimport { Event, BigNumber } from \"ethers\";\n\nexport type Instance = BridgeDepositBoxEthers;\nconst Factory = BridgeDepositBoxEthers__factory;\n\nexport function connect(address: string, provider: SignerOrProvider): Instance {\n  return Factory.connect(address, provider);\n}\n\nexport type SetMinimumBridgingDelay = GetEventType<Instance, \"SetMinimumBridgingDelay\">;\nexport type WhitelistToken = GetEventType<Instance, \"WhitelistToken\">;\nexport type DepositsEnabled = GetEventType<Instance, \"DepositsEnabled\">;\nexport type FundsDeposited = GetEventType<Instance, \"FundsDeposited\">;\nexport type TokensBridged = GetEventType<Instance, \"TokensBridged\">;\n\nexport type Deposit = {\n  chainId: BigNumber;\n  depositId: BigNumber;\n  l1Recipient: string;\n  l2Sender: string;\n  l1Token: string;\n  amount: BigNumber;\n  slowRelayFeePct: BigNumber;\n  instantRelayFeePct: BigNumber;\n  quoteTimestamp: BigNumber;\n};\nexport type Whitelist = {\n  l1Token: string;\n  l2Token: string;\n  lastBridgeTime: BigNumber;\n  bridgePool: string;\n};\nexport interface EventState {\n  minimumBridgingDelay?: string;\n  whitelistedTokens?: Record<string, Whitelist>;\n  depositsEnabled?: Record<string, boolean>;\n  deposits?: Record<string, Deposit>;\n}\n\nexport function reduceEvents(state: EventState, event: Event): EventState {\n  switch (event.event) {\n    case \"SetMinimumBridgingDelay\": {\n      const typedEvent = event as SetMinimumBridgingDelay;\n      const { newMinimumBridgingDelay } = typedEvent.args;\n      return {\n        ...state,\n        minimumBridgingDelay: newMinimumBridgingDelay.toString(),\n      };\n    }\n    case \"WhitelistToken\": {\n      const typedEvent = event as WhitelistToken;\n      const { l1Token, l2Token, lastBridgeTime, bridgePool } = typedEvent.args;\n      return {\n        ...state,\n        whitelistedTokens: {\n          ...state.whitelistedTokens,\n          [l2Token]: { l1Token, l2Token, lastBridgeTime, bridgePool },\n        },\n      };\n    }\n    case \"DepositsEnabled\": {\n      const typedEvent = event as DepositsEnabled;\n      const { l2Token, depositsEnabled } = typedEvent.args;\n      return {\n        ...state,\n        depositsEnabled: {\n          ...state.depositsEnabled,\n          [l2Token]: depositsEnabled,\n        },\n      };\n    }\n    case \"FundsDeposited\": {\n      const typedEvent = event as FundsDeposited;\n      const {\n        chainId,\n        depositId,\n        l1Recipient,\n        l2Sender,\n        l1Token,\n        amount,\n        slowRelayFeePct,\n        instantRelayFeePct,\n        quoteTimestamp,\n      } = typedEvent.args;\n\n      return {\n        ...state,\n        deposits: {\n          ...state.deposits,\n          [depositId.toString()]: {\n            chainId,\n            depositId,\n            l1Recipient,\n            l2Sender,\n            l1Token,\n            amount,\n            slowRelayFeePct,\n            instantRelayFeePct,\n            quoteTimestamp,\n          },\n        },\n      };\n    }\n  }\n  return state;\n}\nexport function getEventState(events: Event[], eventState: EventState = {}): EventState {\n  return events.reduce(reduceEvents, eventState);\n}\n","import { BridgePoolEthers, BridgePoolEthers__factory, BridgePoolInterfaceEthers } from \"@uma/contracts-node\";\nimport type { SignerOrProvider, GetEventType, SerializableEvent } from \"../..\";\nimport { BigNumber } from \"ethers\";\nimport { Balances } from \"../../utils\";\n\nexport type Instance = BridgePoolEthers;\nexport const Factory = BridgePoolEthers__factory;\nexport type Interface = BridgePoolInterfaceEthers;\n\nexport function connect(address: string, provider: SignerOrProvider): Instance {\n  return Factory.connect(address, provider);\n}\nexport function attach(address: string): Instance {\n  return new Factory().attach(address);\n}\n\nexport type LiquidityAdded = GetEventType<Instance, \"LiquidityAdded\">;\nexport type LiquidityRemoved = GetEventType<Instance, \"LiquidityRemoved\">;\nexport type DepositRelayed = GetEventType<Instance, \"DepositRelayed\">;\nexport type RelaySpedUp = GetEventType<Instance, \"RelaySpedUp\">;\nexport type RelayDisputed = GetEventType<Instance, \"RelayDisputed\">;\nexport type RelayCanceled = GetEventType<Instance, \"RelayCanceled\">;\nexport type RelaySettled = GetEventType<Instance, \"RelaySettled\">;\nexport type BridgePoolAdminTransferred = GetEventType<Instance, \"BridgePoolAdminTransferred\">;\n\nexport type DepositData = {\n  chainId: BigNumber;\n  depositId: BigNumber;\n  l1Recipient: string;\n  l2Sender: string;\n  amount: BigNumber;\n  slowRelayFeePct: BigNumber;\n  instantRelayFeePct: BigNumber;\n  quoteTimestamp: number;\n};\nexport type RelayData = {\n  relayState: number;\n  slowRelayer: string;\n  relayId: number;\n  realizedLpFeePct: BigNumber;\n  priceRequestTime: number;\n  proposerBond: BigNumber;\n  finalFee: BigNumber;\n};\nexport interface EventState {\n  oldAdmin?: string;\n  newAdmin?: string;\n  tokens: Balances;\n  lpTokens: Balances;\n  deposits: Record<string, DepositData>;\n  relays: Record<string, RelayData>;\n  instantRelays: Record<string, string>;\n}\n\nexport function eventStateDefaults() {\n  return {\n    tokens: {},\n    lpTokens: {},\n    deposits: {},\n    relays: {},\n    instantRelays: {},\n  };\n}\n\nexport function reduceEvents(state: EventState, event: SerializableEvent): EventState {\n  switch (event.event) {\n    // event LiquidityAdded(address indexed token, uint256 amount, uint256 lpTokensMinted, address liquidityProvider);\n    case \"LiquidityAdded\": {\n      const typedEvent = event as LiquidityAdded;\n      const { amount, lpTokensMinted, liquidityProvider } = typedEvent.args;\n      const tokens = Balances(state.tokens || {});\n      const lpTokens = Balances(state.lpTokens || {});\n      tokens.add(liquidityProvider, amount.toString());\n      lpTokens.add(liquidityProvider, lpTokensMinted.toString());\n      return {\n        ...state,\n        tokens: {\n          ...tokens.balances,\n        },\n        lpTokens: {\n          ...lpTokens.balances,\n        },\n      };\n    }\n    // event LiquidityRemoved(address indexed token, uint256 amount, uint256 lpTokensBurnt, address liquidityProvider);\n    case \"LiquidityRemoved\": {\n      const typedEvent = event as LiquidityRemoved;\n      const { amount, lpTokensBurnt, liquidityProvider } = typedEvent.args;\n      const tokens = Balances(state.tokens || {});\n      const lpTokens = Balances(state.lpTokens || {});\n      tokens.sub(liquidityProvider, amount.toString());\n      lpTokens.sub(liquidityProvider, lpTokensBurnt.toString());\n      return {\n        ...state,\n        tokens: {\n          ...tokens.balances,\n        },\n        lpTokens: {\n          ...lpTokens.balances,\n        },\n      };\n    }\n    // event DepositRelayed( bytes32 indexed depositHash, DepositData depositData, address l1Token, RelayData relay, bytes32 relayAncillaryDataHash);\n    case \"DepositRelayed\": {\n      const typedEvent = event as DepositRelayed;\n      const { depositHash, depositData, relay, relayAncillaryDataHash } = typedEvent.args;\n      return {\n        ...state,\n        relays: {\n          ...state.relays,\n          [relayAncillaryDataHash]: relay,\n        },\n        deposits: {\n          ...state.deposits,\n          [depositHash]: depositData,\n        },\n      };\n    }\n    // event RelaySpedUp(bytes32 indexed depositHash, address indexed instantRelayer, RelayData relay);\n    case \"RelaySpedUp\": {\n      const typedEvent = event as RelaySpedUp;\n      const { depositHash, instantRelayer } = typedEvent.args;\n      return {\n        ...state,\n        instantRelays: {\n          ...(state.instantRelays || {}),\n          [depositHash]: instantRelayer,\n        },\n      };\n    }\n    // event RelayDisputed(bytes32 indexed depositHash, bytes32 indexed relayHash, address indexed disputer);\n    case \"RelayDisputed\": {\n      // TODO: finish implementation\n      // const typedEvent = event as RelayDisputed;\n      // const { depositHash, relayHash, disputer } = typedEvent.args;\n      return state;\n    }\n    // event RelayCanceled(bytes32 indexed depositHash, bytes32 indexed relayHash, address indexed disputer);\n    case \"RelayCanceled\": {\n      // TODO: finish implementation\n      // const typedEvent = event as RelayCanceled;\n      // const { depositHash, relayHash, disputer } = typedEvent.args;\n      return state;\n    }\n    // event RelaySettled(bytes32 indexed depositHash, address indexed caller, RelayData relay);\n    case \"RelaySettled\": {\n      // TODO: finish implementation\n      // const typedEvent = event as RelaySettled;\n      // const { depositHash, caller, relay } = typedEvent.args;\n      return state;\n    }\n    // event BridgePoolAdminTransferred(address oldAdmin, address newAdmin);\n    case \"BridgePoolAdminTransferred\": {\n      const typedEvent = event as BridgePoolAdminTransferred;\n      const { oldAdmin, newAdmin } = typedEvent.args;\n      return {\n        ...state,\n        oldAdmin,\n        newAdmin,\n      };\n    }\n  }\n  return state;\n}\nexport function getEventState(events: SerializableEvent[], eventState: EventState = eventStateDefaults()): EventState {\n  return events.reduce(reduceEvents, eventState);\n}\n","import axios from \"axios\";\nimport get from \"lodash/get\";\n\ntype GasPrice = {\n  safeLow: number;\n  standard: number;\n  fast: number;\n  fastest: number;\n  currentBaseFee: number;\n  recommendedBaseFee: number;\n};\n\nexport class Etherchain {\n  constructor(private url = \"https://www.etherchain.org/api\") {}\n\n  public async getGasPrice(): Promise<GasPrice> {\n    try {\n      const endpoint = this.url + \"/gasPriceOracle\";\n      const result = await axios.get(endpoint);\n      return result.data;\n    } catch (err) {\n      const msg = get(err, \"response.data.error\", get(err, \"response.statusText\", \"Unknown Coingecko Error\"));\n      throw new Error(msg);\n    }\n  }\n}\n","import {\n  RateModelStoreEthers,\n  RateModelStoreEthers__factory,\n  getRateModelStoreAddress as getAddress,\n} from \"@uma/contracts-node\";\nimport type { SignerOrProvider } from \"../..\";\n\nexport type Instance = RateModelStoreEthers;\nexport const Factory = RateModelStoreEthers__factory;\n\nexport { getAddress };\n\nexport function connect(address: string, provider: SignerOrProvider): Instance {\n  return Factory.connect(address, provider);\n}\nexport function attach(address: string): Instance {\n  return new Factory().attach(address);\n}\n","import {\n  OptimisticOracleInterfaceEthers,\n  OptimisticOracleInterfaceEthers__factory,\n  getOptimisticOracleInterfaceAbi,\n} from \"@uma/contracts-node\";\nimport type { SignerOrProvider, GetEventType } from \"../..\";\nimport { Event, BigNumberish, utils, BigNumber } from \"ethers\";\n\nexport type Instance = OptimisticOracleInterfaceEthers;\nconst Factory = OptimisticOracleInterfaceEthers__factory;\n\nexport function connect(address: string, provider: SignerOrProvider): Instance {\n  return Factory.connect(address, provider);\n}\n\nexport const contractInterface = new utils.Interface(getOptimisticOracleInterfaceAbi());\n\nexport type RequestPrice = GetEventType<Instance, \"RequestPrice\">;\nexport type ProposePrice = GetEventType<Instance, \"ProposePrice\">;\nexport type DisputePrice = GetEventType<Instance, \"DisputePrice\">;\nexport type Settle = GetEventType<Instance, \"Settle\">;\n\nexport enum RequestState {\n  Invalid = 0, // Never requested.\n  Requested, // Requested, no other actions taken.\n  Proposed, // Proposed, but not expired or disputed yet.\n  Expired, // Proposed, not disputed, past liveness.\n  Disputed, // Disputed, but no DVM price returned yet.\n  Resolved, // Disputed and DVM price is available.\n  Settled, // Final price has been set in the contract (can get here from Expired or Resolved).\n}\n\n// all events have these values\nexport type RequestKey = {\n  requester: string;\n  identifier: string;\n  timestamp: number;\n  ancillaryData: string;\n};\nexport type Request = RequestKey &\n  // this is partial since we dont know what events we have to populate parts of this\n  Partial<{\n    proposer: string;\n    disputer: string;\n    currency: string;\n    settled: boolean;\n    refundOnDispute: boolean;\n    proposedPrice: BigNumber;\n    resolvedPrice: BigNumber;\n    expirationTime: BigNumber;\n    reward: BigNumber;\n    finalFee: BigNumber;\n    bond: BigNumber;\n    customLiveness: BigNumber;\n    price: BigNumber;\n    payout: BigNumber;\n    state: RequestState;\n    // metadata about the transaction that triggered the state changes\n    requestTx: string;\n    proposeTx: string;\n    disputeTx: string;\n    settleTx: string;\n    requestBlockNumber: number;\n    proposeBlockNumber: number;\n    disputeBlockNumber: number;\n    settleBlockNumber: number;\n    requestLogIndex: number;\n    proposeLogIndex: number;\n    disputeLogIndex: number;\n    settleLogIndex: number;\n  }>;\n\nexport interface EventState {\n  requests?: Record<string, Request>;\n}\n\nexport function requestId(request: Omit<RequestKey, \"timestamp\"> & { timestamp: BigNumberish }): string {\n  // if enabling sorting, put timestamp first\n  return [request.timestamp.toString(), request.identifier, request.requester, request.ancillaryData].join(\"!\");\n}\n\nexport function reduceEvents(state: EventState, event: Event): EventState {\n  switch (event.event) {\n    case \"RequestPrice\": {\n      const typedEvent = event as RequestPrice;\n      const { requester, identifier, timestamp, ancillaryData, currency, reward, finalFee } = typedEvent.args;\n      const id = requestId(typedEvent.args);\n      if (!state.requests) state.requests = {};\n      const request: Request = state.requests[id] || {\n        requester,\n        identifier,\n        timestamp,\n        ancillaryData,\n      };\n      state.requests[id] = {\n        ...request,\n        currency,\n        reward,\n        finalFee,\n        state: RequestState.Requested,\n        requestTx: event.transactionHash,\n        requestBlockNumber: event.blockNumber,\n        requestLogIndex: event.logIndex,\n      };\n      break;\n    }\n    case \"ProposePrice\": {\n      const typedEvent = event as ProposePrice;\n      const {\n        requester,\n        identifier,\n        timestamp,\n        ancillaryData,\n        proposer,\n        proposedPrice,\n        expirationTimestamp,\n        currency,\n      } = typedEvent.args;\n      const id = requestId(typedEvent.args);\n      if (!state.requests) state.requests = {};\n      const request: Request = state.requests[id] || {\n        requester,\n        identifier,\n        timestamp,\n        ancillaryData,\n      };\n      state.requests[id] = {\n        ...request,\n        currency,\n        proposer,\n        proposedPrice,\n        expirationTime: expirationTimestamp,\n        state: RequestState.Proposed,\n        proposeTx: event.transactionHash,\n        proposeBlockNumber: event.blockNumber,\n        proposeLogIndex: event.logIndex,\n      };\n      break;\n    }\n    case \"DisputePrice\": {\n      const typedEvent = event as DisputePrice;\n      const { requester, identifier, timestamp, ancillaryData, proposer, disputer, proposedPrice } = typedEvent.args;\n      const id = requestId(typedEvent.args);\n      if (!state.requests) state.requests = {};\n      const request: Request = state.requests[id] || {\n        requester,\n        identifier,\n        timestamp,\n        ancillaryData,\n      };\n      state.requests[id] = {\n        ...request,\n        proposer,\n        disputer,\n        proposedPrice,\n        state: RequestState.Disputed,\n        disputeTx: event.transactionHash,\n        disputeBlockNumber: event.blockNumber,\n        disputeLogIndex: event.logIndex,\n      };\n      break;\n    }\n    case \"Settle\": {\n      const typedEvent = event as Settle;\n      const { requester, identifier, timestamp, ancillaryData, proposer, disputer, price, payout } = typedEvent.args;\n      const id = requestId(typedEvent.args);\n      if (!state.requests) state.requests = {};\n      const request: Request = state.requests[id] || {\n        requester,\n        identifier,\n        timestamp,\n        ancillaryData,\n      };\n      state.requests[id] = {\n        ...request,\n        requester,\n        proposer,\n        disputer,\n        price,\n        payout,\n        state: RequestState.Settled,\n        settleTx: event.transactionHash,\n        settleBlockNumber: event.blockNumber,\n        settleLogIndex: event.logIndex,\n      };\n      break;\n    }\n  }\n  return state;\n}\nexport function getEventState(events: Event[], eventState: EventState = {}): EventState {\n  return events.reduce(reduceEvents, eventState);\n}\n","import {\n  SkinnyOptimisticOracleEthers,\n  SkinnyOptimisticOracleEthers__factory,\n  getSkinnyOptimisticOracleAbi,\n} from \"@uma/contracts-node\";\nimport type { SignerOrProvider, GetEventType } from \"../..\";\nimport { Event, BigNumberish, utils, BigNumber } from \"ethers\";\n\nexport type Instance = SkinnyOptimisticOracleEthers;\nconst Factory = SkinnyOptimisticOracleEthers__factory;\n\nexport function connect(address: string, provider: SignerOrProvider): Instance {\n  return Factory.connect(address, provider);\n}\n\nexport const contractInterface = new utils.Interface(getSkinnyOptimisticOracleAbi());\n\nexport type RequestPrice = GetEventType<Instance, \"RequestPrice\">;\nexport type ProposePrice = GetEventType<Instance, \"ProposePrice\">;\nexport type DisputePrice = GetEventType<Instance, \"DisputePrice\">;\nexport type Settle = GetEventType<Instance, \"Settle\">;\n\nexport enum RequestState {\n  Invalid = 0, // Never requested.\n  Requested, // Requested, no other actions taken.\n  Proposed, // Proposed, but not expired or disputed yet.\n  Expired, // Proposed, not disputed, past liveness.\n  Disputed, // Disputed, but no DVM price returned yet.\n  Resolved, // Disputed and DVM price is available.\n  Settled, // Final price has been set in the contract (can get here from Expired or Resolved).\n}\n\nexport interface SolidityRequest {\n  proposer: string; // Address of the proposer.\n  disputer: string; // Address of the disputer.\n  currency: string; // ERC20 token used to pay rewards and fees.\n  settled: boolean; // True if the request is settled.\n  proposedPrice: BigNumber; // Price that the proposer submitted.\n  resolvedPrice: BigNumber; // Price resolved once the request is settled.\n  expirationTime: BigNumber; // Time at which the request auto-settles without a dispute.\n  reward: BigNumber; // Amount of the currency to pay to the proposer on settlement.\n  finalFee: BigNumber; // Final fee to pay to the Store upon request to the DVM.\n  bond: BigNumber; // Bond that the proposer and disputer must pay on top of the final fee.\n  customLiveness: BigNumber; // Custom liveness value set by the requester.\n}\n\n// all events have these values\nexport type RequestKey = {\n  requester: string;\n  identifier: string;\n  timestamp: number;\n  ancillaryData: string;\n};\nexport type Request = RequestKey &\n  SolidityRequest &\n  // this is partial since we dont know what events we have to populate parts of this\n  Partial<{\n    refundOnDispute: boolean;\n    state: RequestState;\n    // metadata about the transaction that triggered the state changes\n    requestTx: string;\n    proposeTx: string;\n    disputeTx: string;\n    settleTx: string;\n    requestBlockNumber: number;\n    proposeBlockNumber: number;\n    disputeBlockNumber: number;\n    settleBlockNumber: number;\n    requestLogIndex: number;\n    proposeLogIndex: number;\n    disputeLogIndex: number;\n    settleLogIndex: number;\n  }>;\n\nexport interface EventState {\n  requests?: Record<string, Request>;\n}\n\nexport function requestId(request: Omit<RequestKey, \"timestamp\"> & { timestamp: BigNumberish }): string {\n  // if enabling sorting, put timestamp first\n  return [request.timestamp.toString(), request.identifier, request.requester, request.ancillaryData].join(\"!\");\n}\nexport function reduceEvents(state: EventState, event: Event): EventState {\n  switch (event.event) {\n    case \"RequestPrice\": {\n      const typedEvent = event as RequestPrice;\n      const { requester, identifier, timestamp, ancillaryData, request } = typedEvent.args;\n      const id = requestId(typedEvent.args);\n      if (!state.requests) state.requests = {};\n      state.requests[id] = {\n        // need to maintain previous state in case it exists\n        ...state.requests[id],\n        ...request,\n        requester,\n        identifier,\n        timestamp,\n        ancillaryData,\n        state: RequestState.Requested,\n        requestTx: event.transactionHash,\n        requestBlockNumber: event.blockNumber,\n        requestLogIndex: event.logIndex,\n      };\n      break;\n    }\n    case \"ProposePrice\": {\n      const typedEvent = event as ProposePrice;\n      const { requester, identifier, timestamp, ancillaryData, request } = typedEvent.args;\n      const id = requestId(typedEvent.args);\n      if (!state.requests) state.requests = {};\n      state.requests[id] = {\n        ...state.requests[id],\n        ...request,\n        requester,\n        identifier,\n        timestamp,\n        ancillaryData,\n        state: RequestState.Proposed,\n        proposeTx: event.transactionHash,\n        proposeBlockNumber: event.blockNumber,\n        proposeLogIndex: event.logIndex,\n      };\n      break;\n    }\n    case \"DisputePrice\": {\n      const typedEvent = event as DisputePrice;\n      const { requester, identifier, timestamp, ancillaryData, request } = typedEvent.args;\n      const id = requestId(typedEvent.args);\n      if (!state.requests) state.requests = {};\n      state.requests[id] = {\n        ...state.requests[id],\n        ...request,\n        requester,\n        identifier,\n        timestamp,\n        ancillaryData,\n        state: RequestState.Disputed,\n        disputeTx: event.transactionHash,\n        disputeBlockNumber: event.blockNumber,\n        disputeLogIndex: event.logIndex,\n      };\n      break;\n    }\n    case \"Settle\": {\n      const typedEvent = event as Settle;\n      const { requester, identifier, timestamp, ancillaryData, request } = typedEvent.args;\n      const id = requestId(typedEvent.args);\n      if (!state.requests) state.requests = {};\n      state.requests[id] = {\n        ...state.requests[id],\n        ...request,\n        requester,\n        identifier,\n        timestamp,\n        ancillaryData,\n        state: RequestState.Settled,\n        settleTx: event.transactionHash,\n        settleBlockNumber: event.blockNumber,\n        settleLogIndex: event.logIndex,\n      };\n      break;\n    }\n  }\n  return state;\n}\nexport function getEventState(events: Event[], eventState: EventState = {}): EventState {\n  return events.reduce(reduceEvents, eventState);\n}\n","import {\n  OptimisticOracleV2InterfaceEthers,\n  OptimisticOracleV2InterfaceEthers__factory,\n  getOptimisticOracleV2InterfaceAbi,\n} from \"@uma/contracts-node\";\nimport type { SignerOrProvider, GetEventType } from \"../..\";\nimport { Event, BigNumberish, utils, BigNumber } from \"ethers\";\n\nexport type Instance = OptimisticOracleV2InterfaceEthers;\nconst Factory = OptimisticOracleV2InterfaceEthers__factory;\n\nexport function connect(address: string, provider: SignerOrProvider): Instance {\n  return Factory.connect(address, provider);\n}\n\nexport const contractInterface = new utils.Interface(getOptimisticOracleV2InterfaceAbi());\n\nexport type RequestPrice = GetEventType<Instance, \"RequestPrice\">;\nexport type ProposePrice = GetEventType<Instance, \"ProposePrice\">;\nexport type DisputePrice = GetEventType<Instance, \"DisputePrice\">;\nexport type Settle = GetEventType<Instance, \"Settle\">;\n\nexport enum RequestState {\n  Invalid = 0, // Never requested.\n  Requested, // Requested, no other actions taken.\n  Proposed, // Proposed, but not expired or disputed yet.\n  Expired, // Proposed, not disputed, past liveness.\n  Disputed, // Disputed, but no DVM price returned yet.\n  Resolved, // Disputed and DVM price is available.\n  Settled, // Final price has been set in the contract (can get here from Expired or Resolved).\n}\n\n// all events have these values\nexport type RequestKey = {\n  requester: string;\n  identifier: string;\n  timestamp: number;\n  ancillaryData: string;\n};\nexport type RequestSettings = {\n  eventBased: boolean; // True if the request is set to be event-based.\n  refundOnDispute: boolean; // True if the requester should be refunded their reward on dispute.\n  callbackOnPriceProposed: boolean; // True if callbackOnPriceProposed callback is required.\n  callbackOnPriceDisputed: boolean; // True if callbackOnPriceDisputed callback is required.\n  callbackOnPriceSettled: boolean; // True if callbackOnPriceSettled callback is required.\n  bond: BigNumber; // Bond that the proposer and disputer must pay on top of the final fee.\n  customLiveness: BigNumber; // Custom liveness value set by the requester.\n};\nexport type Request = RequestKey &\n  // this is partial since we dont know what events we have to populate parts of this\n  Partial<{\n    proposer: string;\n    disputer: string;\n    currency: string;\n    settled: boolean;\n    refundOnDispute: boolean;\n    proposedPrice: BigNumber;\n    resolvedPrice: BigNumber;\n    expirationTime: BigNumber;\n    reward: BigNumber;\n    finalFee: BigNumber;\n    price: BigNumber;\n    payout: BigNumber;\n    state: RequestState;\n    // metadata about the transaction that triggered the state changes\n    requestTx: string;\n    proposeTx: string;\n    disputeTx: string;\n    settleTx: string;\n    requestBlockNumber: number;\n    proposeBlockNumber: number;\n    disputeBlockNumber: number;\n    settleBlockNumber: number;\n    requestLogIndex: number;\n    proposeLogIndex: number;\n    disputeLogIndex: number;\n    settleLogIndex: number;\n    requestSettings: RequestSettings;\n  }>;\n\nexport interface EventState {\n  requests?: Record<string, Request>;\n}\n\nexport function requestId(request: Omit<RequestKey, \"timestamp\"> & { timestamp: BigNumberish }): string {\n  // if enabling sorting, put timestamp first\n  return [request.timestamp.toString(), request.identifier, request.requester, request.ancillaryData].join(\"!\");\n}\n\nexport function reduceEvents(state: EventState, event: Event): EventState {\n  switch (event.event) {\n    case \"RequestPrice\": {\n      const typedEvent = event as RequestPrice;\n      const { requester, identifier, timestamp, ancillaryData, currency, reward, finalFee } = typedEvent.args;\n      const id = requestId(typedEvent.args);\n      if (!state.requests) state.requests = {};\n      const request: Request = state.requests[id] || {\n        requester,\n        identifier,\n        timestamp,\n        ancillaryData,\n      };\n      state.requests[id] = {\n        ...request,\n        currency,\n        reward,\n        finalFee,\n        state: RequestState.Requested,\n        requestTx: event.transactionHash,\n        requestBlockNumber: event.blockNumber,\n        requestLogIndex: event.logIndex,\n      };\n      break;\n    }\n    case \"ProposePrice\": {\n      const typedEvent = event as ProposePrice;\n      const {\n        requester,\n        identifier,\n        timestamp,\n        ancillaryData,\n        proposer,\n        proposedPrice,\n        expirationTimestamp,\n        currency,\n      } = typedEvent.args;\n      const id = requestId(typedEvent.args);\n      if (!state.requests) state.requests = {};\n      const request: Request = state.requests[id] || {\n        requester,\n        identifier,\n        timestamp,\n        ancillaryData,\n      };\n      state.requests[id] = {\n        ...request,\n        currency,\n        proposer,\n        proposedPrice,\n        expirationTime: expirationTimestamp,\n        state: RequestState.Proposed,\n        proposeTx: event.transactionHash,\n        proposeBlockNumber: event.blockNumber,\n        proposeLogIndex: event.logIndex,\n      };\n      break;\n    }\n    case \"DisputePrice\": {\n      const typedEvent = event as DisputePrice;\n      const { requester, identifier, timestamp, ancillaryData, proposer, disputer, proposedPrice } = typedEvent.args;\n      const id = requestId(typedEvent.args);\n      if (!state.requests) state.requests = {};\n      const request: Request = state.requests[id] || {\n        requester,\n        identifier,\n        timestamp,\n        ancillaryData,\n      };\n      state.requests[id] = {\n        ...request,\n        proposer,\n        disputer,\n        proposedPrice,\n        state: RequestState.Disputed,\n        disputeTx: event.transactionHash,\n        disputeBlockNumber: event.blockNumber,\n        disputeLogIndex: event.logIndex,\n      };\n      break;\n    }\n    case \"Settle\": {\n      const typedEvent = event as Settle;\n      const { requester, identifier, timestamp, ancillaryData, proposer, disputer, price, payout } = typedEvent.args;\n      const id = requestId(typedEvent.args);\n      if (!state.requests) state.requests = {};\n      const request: Request = state.requests[id] || {\n        requester,\n        identifier,\n        timestamp,\n        ancillaryData,\n      };\n      state.requests[id] = {\n        ...request,\n        requester,\n        proposer,\n        disputer,\n        price,\n        payout,\n        state: RequestState.Settled,\n        settleTx: event.transactionHash,\n        settleBlockNumber: event.blockNumber,\n        settleLogIndex: event.logIndex,\n      };\n      break;\n    }\n  }\n  return state;\n}\nexport function getEventState(events: Event[], eventState: EventState = {}): EventState {\n  return events.reduce(reduceEvents, eventState);\n}\n","import type { Store } from \"../index\";\n\nexport default function <I, D>(map: Map<I, D> = new Map<I, D>()): Store<I, D> {\n  async function get(id: I) {\n    return map.get(id);\n  }\n  async function set(id: I, data: D) {\n    map.set(id, data);\n  }\n  async function has(id: I) {\n    return map.has(id);\n  }\n  async function del(id: I) {\n    map.delete(id);\n  }\n  async function entries() {\n    return Array.from(map.entries());\n  }\n  async function values() {\n    return Array.from(map.values());\n  }\n  async function keys() {\n    return Array.from(map.keys());\n  }\n  async function size() {\n    return map.size;\n  }\n  async function clear() {\n    map.clear();\n  }\n  return {\n    get,\n    set,\n    has,\n    delete: del,\n    entries,\n    values,\n    keys,\n    size,\n    clear,\n  };\n}\n","import { sortedIndex, sortedLastIndex } from \"lodash\";\nimport type { SortedStore } from \"../index\";\nimport { exists } from \"../../utils\";\n\n// this class will basically give you similar functionality to a sorted key value store this is really useful for\n// time series data, and JS does not have a native way to do this, but comes for free with most NoSql databases.\nexport default function <Id, Data>(): SortedStore<Id, Data> {\n  const ids: Id[] = [];\n  const map = new Map<Id, Data>();\n\n  function getStart(id: Id, inclusive = true) {\n    if (inclusive) {\n      return sortedIndex(ids, id);\n    } else {\n      return sortedLastIndex(ids, id);\n    }\n  }\n  function getEnd(id: Id, inclusive = false) {\n    return getStart(id, !inclusive);\n  }\n  function del(id: Id) {\n    const index = sortedIndex(ids, id);\n    ids.splice(index, 1);\n    const result = map.get(id);\n    map.delete(id);\n    return result;\n  }\n  // keeps typescript from complaining that return values may be undefined\n  function getSafe(id: Id) {\n    const result = map.get(id);\n    if (exists(result)) return result;\n    throw new Error(\"Missing data for index: \" + id);\n  }\n\n  return {\n    async has(id: Id) {\n      return map.has(id);\n    },\n    async set(id: Id, data: Data) {\n      if (map.has(id)) {\n        map.set(id, data);\n      } else {\n        const index = sortedIndex(ids, id);\n        ids.splice(index, 0, id);\n        map.set(id, data);\n      }\n    },\n    async get(id: Id) {\n      return map.get(id);\n    },\n    async values() {\n      return ids.map(getSafe);\n    },\n    async entries() {\n      return ids.map((id) => [id, getSafe(id)]);\n    },\n    async keys() {\n      return [...ids];\n    },\n    async clear() {\n      map.clear();\n      ids.length = 0;\n    },\n    async size() {\n      return ids.length;\n    },\n    async delete(id: Id) {\n      if (!map.has(id)) return;\n      del(id);\n    },\n    // assume [a,b)\n    async between(a: Id, b: Id) {\n      const start = getStart(a);\n      const end = getEnd(b);\n      return ids.slice(start, end).map(getSafe);\n    },\n    async slice(id: Id, length: number) {\n      const start = getStart(id);\n      return ids.slice(start, start + length).map(getSafe);\n    },\n  };\n}\n","import { exists } from \"../../utils\";\nimport type { SortedStore } from \"..\";\nimport { Datastore, Key } from \"@google-cloud/datastore\";\nimport highland from \"highland\";\n\n//-\n// Use an array, `excludeFromIndexes`, to exclude properties from indexing.\n// This will allow storing string values larger than 1500 bytes.\n// Example:\n// [\n//   'description',\n//   'embeddedEntity.description',\n//   'arrayValue[]',\n//   'arrayValue[].description'\n// ]\n//-\nexport default function <I extends string | number, D>(\n  kind: string,\n  store: Datastore,\n  excludeFromIndexes: string[] = []\n): SortedStore<I, D> {\n  function makeKey(id: I): Key {\n    return store.key([kind, id]);\n  }\n  // return value or undefined if it doesnt exist\n  async function get(id: I) {\n    try {\n      const [result] = await store.get(makeKey(id));\n      return result;\n    } catch (err) {\n      return;\n    }\n  }\n  async function set(id: I, data: D) {\n    await store.save({\n      key: makeKey(id),\n      data,\n      excludeFromIndexes,\n    });\n  }\n  async function has(id: I) {\n    // horribly ineficient to actually query data to see if it exists, but cannot find a better way\n    return exists(await get(id));\n  }\n  async function del(id: I) {\n    await store.delete(makeKey(id));\n  }\n  async function entries() {\n    const [results] = await store.createQuery(kind).run();\n    return results.map((result) => {\n      return [result[store.KEY].name, result];\n    }) as [I, D][];\n  }\n  async function values() {\n    const [results] = await store.createQuery(kind).run();\n    return results;\n  }\n  // all this does is map over full entries to return the id of the entry. have not found a better way to query this.\n  async function keys() {\n    const [results] = await store.createQuery(kind).select(\"__key__\").run();\n    return results.map((result) => {\n      return result[store.KEY].name;\n    }) as I[];\n  }\n  // theres no way to really do built into the store client. Google recommends managing a size entry yourself.\n  async function size(): Promise<number> {\n    throw new Error(\"size not supported in google store\");\n  }\n  // this actually queries all values, then batches them to delete N at a time. This is a horrible way\n  // to do this, but I could not find a better way to \"drop\" all kinds from the table.\n  async function clear() {\n    await highland(store.createQuery(kind).runStream())\n      .map((val: any) => {\n        return val[store.KEY];\n      })\n      .batch(500)\n      .map(async (keys) => {\n        return store.delete(keys);\n      })\n      .flatMap(highland)\n      .collect()\n      .toPromise(Promise);\n  }\n  async function slice(id: I, length: number) {\n    const [result] = await store.createQuery(kind).filter(\"__key__\", \">=\", makeKey(id)).limit(length).run();\n    return result;\n  }\n  async function between(a: I, b: I) {\n    const [result] = await store\n      .createQuery(kind)\n      .filter(\"__key__\", \">=\", makeKey(a))\n      .filter(\"__key__\", \"<\", makeKey(b))\n      .run();\n    return result;\n  }\n\n  return {\n    get,\n    set,\n    has,\n    delete: del,\n    entries,\n    values,\n    keys,\n    size,\n    clear,\n    between,\n    slice,\n  };\n}\n","import assert from \"assert\";\nimport { exists } from \"../../utils\";\nimport type { stores, MakeId, MaybeId, HasId } from \"../..\";\n\n// This interface has to be implemented manually in order to have control over the types of the \"overloaded\" functions\ninterface KnownReturnMembers<I, D> {\n  create: (data: D & MaybeId<I>) => Promise<D & HasId<I>>;\n  set: (data: D & HasId<I>) => Promise<D & HasId<I>>;\n  get: (id: I) => Promise<D & { id: I }>;\n  has: (id: I) => Promise<boolean>;\n  update: (id: I, data: Partial<D>) => Promise<D & HasId<I>>;\n}\n\n// The final type composes the types defined explicitly and those from the implemented interface\ntype TableReturnType<I, D, S> = KnownReturnMembers<I, D> & Omit<S, keyof KnownReturnMembers<I, D>>;\n\nexport default function Table<I, D, S extends stores.Store<I, D>>(\n  config: { makeId: MakeId<I, D>; type: string },\n  store: S\n): TableReturnType<I, D, S> {\n  const { makeId, type } = config;\n  async function create(data: D & MaybeId<I>) {\n    const id = exists(data.id) ? data.id : makeId(data);\n    assert(!(await has(id)), `${type} exists: ` + id);\n    return set({ id, ...data });\n  }\n  async function set(data: D & HasId<I>) {\n    await store.set(data.id, { ...data });\n    return data;\n  }\n  async function get(id: I) {\n    assert(await store.has(id), `${type} does not exist`);\n    return ((await store.get(id)) as unknown) as D & { id: I };\n  }\n  async function has(id: I) {\n    return store.has(id);\n  }\n  async function update(id: I, data: Partial<D>) {\n    const got = await get(id);\n    return set({ ...got, ...data });\n  }\n  return {\n    ...store,\n    create,\n    set,\n    get,\n    has,\n    update,\n    makeId,\n    type,\n  };\n}\n","export function makeId(data: Pick<Data, \"number\">) {\n  return data.number;\n}\n\nexport type Data = {\n  id?: number;\n  number: number;\n  hash: string;\n  // block time is in seconds\n  timestamp: number;\n};\n","import { Data, makeId } from \"./utils\";\nimport BaseTable from \"../base\";\nimport { JsMap } from \"../../stores\";\nimport type { Store } from \"../../stores\";\n\n// personally dont like to have this as a named export, but cannot export both function and type as default\nexport const Table = (type = \"Block\", store: Store<number, Data> = JsMap<number, Data>()) => {\n  const table = BaseTable<number, Data, Store<number, Data>>({ type, makeId }, store);\n\n  // delete blocks older than timestamp\n  async function prune(timestamp: number) {\n    const blocks = await table.values();\n    const deleted: Data[] = [];\n    // normally would use a map or filter, but dont want to include bluebird as a dependency\n    for (const block of blocks) {\n      if (block.timestamp < timestamp) {\n        await table.delete(block.id ?? block.number);\n        deleted.push(block);\n      }\n    }\n    return deleted;\n  }\n\n  return {\n    ...table,\n    prune,\n  };\n};\nexport type Table = ReturnType<typeof Table>;\n","export function makeId(data: Pick<Data, \"address\">) {\n  return data.address;\n}\n\nexport type Data = {\n  id?: string;\n  name?: string | null;\n  address: string;\n  priceIdentifier?: string | null;\n  expirationTimestamp?: string | null;\n  withdrawalLiveness?: string | null;\n  tokenCurrency?: string | null;\n  collateralCurrency?: string | null;\n  collateralRequirement?: string | null;\n  disputeBondPercentage?: string | null;\n  sponsorDisputeRewardPercentage?: string | null;\n  disputerDisputeRewardPercentage?: string | null;\n  cumulativeFeeMultiplier?: string | null;\n  tokenDecimals?: number | null;\n  collateralDecimals?: number | null;\n  totalTokensOutstanding?: string | null;\n  totalPositionCollateral?: string | null;\n  minSponsorTokens?: string | null;\n  expiryPrice?: string | null;\n  sponsors?: string[] | null;\n  gcr?: string | null;\n  expired?: boolean | null;\n  createdTimestamp?: number | null;\n};\n","import { Data, makeId } from \"./utils\";\nimport BaseTable from \"../base\";\nimport type { Store } from \"../../stores\";\nimport { JsMap } from \"../../stores\";\n\nexport const Table = (type = \"Emp\", store: Store<string, Data> = JsMap()) => {\n  const table = BaseTable<string, Data, Store<string, Data>>({ type, makeId }, store);\n\n  async function addSponsors(id: string, sponsors: string[]) {\n    const data = await table.get(id);\n    // keep sponsors unique\n    const set = new Set([...(data.sponsors || []), ...sponsors]);\n    return table.update(id, { sponsors: Array.from(set.values()) });\n  }\n\n  async function setCreatedTimestamp(id: string, timestamp: number) {\n    return table.update(id, { createdTimestamp: timestamp });\n  }\n\n  return {\n    ...table,\n    addSponsors,\n    setCreatedTimestamp,\n  };\n};\n// want to export the type as the same name\nexport type Table = ReturnType<typeof Table>;\n","export function makeId(data: Pick<Data, \"timestamp\">) {\n  return data.timestamp.toString().padStart(24, \"0\");\n}\n\nexport type Data = {\n  id?: string;\n  timestamp: number;\n  price: string;\n};\n","import { Data, makeId } from \"./utils\";\nimport BaseTable from \"../base\";\nimport { SortedJsMap } from \"../../stores\";\nimport type { SortedStore } from \"../../stores\";\n\nexport const Table = (type = \"Historical Price\", store: SortedStore<string, Data> = SortedJsMap()) => {\n  const table = BaseTable<string, Data, SortedStore<string, Data>>({ type, makeId }, store);\n  function betweenByTimestamp(a: number, b: number) {\n    return table.between(makeId({ timestamp: a }), makeId({ timestamp: b }));\n  }\n  function sliceByTimestamp(timestamp: number, length: number) {\n    return table.slice(makeId({ timestamp }), length);\n  }\n  function hasByTimestamp(timestamp: number) {\n    return table.has(makeId({ timestamp }));\n  }\n  function getByTimestamp(timestamp: number) {\n    return table.get(makeId({ timestamp }));\n  }\n  return {\n    ...table,\n    betweenByTimestamp,\n    sliceByTimestamp,\n    hasByTimestamp,\n    getByTimestamp,\n  };\n};\nexport type Table = ReturnType<typeof Table>;\n","export function makeId(data: Pick<Data, \"address\">) {\n  return data.address;\n}\n\nexport type Data = {\n  id?: string;\n  address: string;\n  decimals?: number;\n  name?: string;\n  totalSupply?: string;\n  symbol?: string;\n};\n","import { Data, makeId } from \"./utils\";\nimport BaseTable from \"../base\";\nimport { JsMap } from \"../../stores\";\nimport type { Store } from \"../../stores\";\n\nexport const Table = (type = \"Token\", store: Store<string, Data> = JsMap()) => {\n  const table = BaseTable<string, Data, Store<string, Data>>({ type, makeId }, store);\n  async function getOrCreate(address: string) {\n    if (!(await table.has(makeId({ address })))) return table.create({ address });\n    return table.get(makeId({ address }));\n  }\n  async function upsert(address: string, data: Partial<Data>) {\n    await getOrCreate(address);\n    return table.update(address, data);\n  }\n  return {\n    ...table,\n    getOrCreate,\n    upsert,\n  };\n};\nexport type Table = ReturnType<typeof Table>;\n","import { BigNumber, ethers } from \"ethers\";\nimport { ConvertDecimals } from \"../utils\";\nimport Decimal from \"decimal.js\";\n\nexport type BigNumberish = string | number | BigNumber;\nexport type BN = BigNumber;\nexport type Decimalish = string | number | Decimal;\n\n/**\n * toBN.\n *\n * @param {BigNumberish} num\n * @returns {BN}\n */\nexport const toBN = (num: BigNumberish): BN => BigNumber.from(num.toString());\n/**\n * toBNWei.\n *\n * @param {BigNumberish} num\n * @param {number} decimals\n * @returns {BN}\n */\nexport const toBNWei = (num: BigNumberish, decimals?: number): BN => ethers.utils.parseUnits(num.toString(), decimals);\n/**\n * toWei.\n *\n * @param {BigNumberish} num\n * @param {number} decimals\n * @returns {string}\n */\nexport const toWei = (num: BigNumberish, decimals?: number): string => toBNWei(num, decimals).toString();\n/**\n * fromWei.\n *\n * @param {BigNumberish} num\n * @param {number} decimals\n * @returns {string}\n */\nexport const fromWei = (num: BigNumberish, decimals?: number): string =>\n  ethers.utils.formatUnits(num.toString(), decimals);\n\n/**\n * min.\n *\n * @param {BigNumberish} a\n * @param {BigNumberish} b\n * @returns {BN}\n */\nexport function min(a: BigNumberish, b: BigNumberish): BN {\n  const bna = toBN(a);\n  const bnb = toBN(b);\n  return bna.lte(bnb) ? bna : bnb;\n}\n/**\n * max.\n *\n * @param {BigNumberish} a\n * @param {BigNumberish} b\n * @returns {BN}\n */\nexport function max(a: BigNumberish, b: BigNumberish): BN {\n  const bna = toBN(a);\n  const bnb = toBN(b);\n  return bna.gte(bnb) ? bna : bnb;\n}\n\nexport const fixedPointAdjustment = toBNWei(\"1\");\n\n/**\n * Convert an amount of eth into a token given price and token decimals.\n *\n * @param {BigNumberish} fromAmount - Amount of eth to convert.\n * @param {string | number} [ price=1 ] - The price as eth per token, ie how much eth can 1 token buy.\n * @param {} [ toDecimals=18 ] - Number of decimals for the token currency.\n * @returns {string} The number of tokens denominated in token decimals in the smallest unit (wei).\n */\nexport function ethToToken(fromAmount: BigNumberish, price: string | number = 1, toDecimals = 18): string {\n  const priceWei = toBNWei(price);\n  const toAmount = toBNWei(fromAmount).div(priceWei);\n  return ConvertDecimals(18, toDecimals)(toAmount);\n}\n\n/**\n * Convert a gas amount and gas price to wei.\n *\n * @param {number} gas - gas amount.\n * @param {BigNumberish} gasPrice - gas price in gwei.\n * @returns {BigNumber} - total fees in wei.\n */\nexport const gasToEth = (gas: number, gasPrice: BigNumberish): BigNumber => {\n  return BigNumber.from(gas).mul(gasPrice);\n};\n\n/**\n * getGasFees. Low level pure function call to calculate gas fees.\n *\n * @param {number} gas - The gast cost for transfer, use constants defined in file.\n * @param {BigNumberish} gasPrice - Estimated gas price in wei.\n * @param {string | number} [price = 1] - The price of the token in eth, how much eth can 1 token buy.\n * @param {number} [decimals=18] - Number of decimals of token.\n * @returns {string} - The value of fees native to the token/eth provided, in its smallest unit.\n */\nexport function calculateGasFees(\n  gas: number,\n  gasPrice: BigNumberish,\n  price: string | number = 1,\n  decimals = 18\n): string {\n  const amountEth = gasToEth(gas, gasPrice);\n  return ethToToken(amountEth, price, decimals);\n}\n\n/**\n * percent.\n *\n * @param {BigNumberish} numerator\n * @param {BigNumberish} denominator\n * @returns {BN}\n */\nexport function percent(numerator: BigNumberish, denominator: BigNumberish): BN {\n  return fixedPointAdjustment.mul(numerator).div(denominator);\n}\n\n/**\n * calcContinuousCompoundInterest. From https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php?given_data=find_r&A=2&P=1&n=0&t=1&given_data_last=find_r&action=solve\n * Returns a yearly interest rate if start/end amount had been continuously compounded over the period elapsed. Multiply result by 100 for a %.\n *\n * @param {string} startAmount\n * @param {string} endAmount\n * @param {string} periodsElapsed\n * @param {string} periodsPerYear\n */\nexport const calcContinuousCompoundInterest = (\n  startAmount: Decimalish,\n  endAmount: Decimalish,\n  periodsElapsed: Decimalish,\n  periodsPerYear: Decimalish\n): string => {\n  const years = new Decimal(periodsPerYear).div(periodsElapsed);\n  return new Decimal(endAmount).div(startAmount).ln().div(years).toString();\n};\n/**\n * calcPeriodicCompoundInterest. Taken from https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php?given_data=find_r&A=2&P=1&n=365&t=1&given_data_last=find_r&action=solve\n * This will return a periodically compounded interest rate for 1 year. Multiply result by 100 for a %.\n *\n * @param {string} startAmount - Starting amount or price\n * @param {string} endAmount - Ending amount or price\n * @param {string} periodsElapsed - How many periods elapsed for the start and end amount.\n * @param {string} periodsPerYear - How many periods in 1 year.\n */\nexport const calcPeriodicCompoundInterest = (\n  startAmount: Decimalish,\n  endAmount: Decimalish,\n  periodsElapsed: Decimalish,\n  periodsPerYear: Decimalish\n): string => {\n  const n = new Decimal(periodsPerYear);\n  const A = new Decimal(endAmount);\n  const P = new Decimal(startAmount);\n  const t = new Decimal(periodsPerYear).div(periodsElapsed);\n  const one = new Decimal(1);\n  return n\n    .mul(\n      A.div(P)\n        .pow(one.div(n.div(t)))\n        .sub(one)\n    )\n    .toString();\n};\n\n/**\n * calcApr. Simple apr calculation based on extrapolating the difference for a short period over a year.\n *\n * @param {Decimalish} startAmount - Starting amount or price\n * @param {Decimalish} endAmount - Ending amount or price\n * @param {Decimalish} periodsElapsed - periods elapsed from start to end\n * @param {Decimalish} periodsPerYear - periods per year\n */\nexport const calcApr = (\n  startAmount: Decimalish,\n  endAmount: Decimalish,\n  periodsElapsed: Decimalish,\n  periodsPerYear: Decimalish\n): string => {\n  return new Decimal(endAmount).sub(startAmount).div(startAmount).mul(periodsPerYear).div(periodsElapsed).toString();\n};\n","// This Util calculates the across realized LP fees. See https://gist.github.com/chrismaree/a713725e4fe96c531c42ed7b629d4a85\n// gist for a python implementation of the logic in this file. This implementation is designed to work with both web3.js\n// and ethers BNs in the main entry point function calculateRealizedLpFeePct.\n\nimport Decimal from \"decimal.js\";\nimport { BigNumberish, BN, toBN, toBNWei, fromWei, min, max, fixedPointAdjustment } from \"./utils\";\n\n// note a similar type exists in the constants file, but are strings only. This is a bit more permissive to allow\n// backward compatibility for callers with a rate model defined with bignumbers and not strings.\nexport interface RateModel {\n  UBar: BigNumberish; // denote the utilization kink along the rate model where the slope of the interest rate model changes.\n  R0: BigNumberish; // is the interest rate charged at 0 utilization\n  R1: BigNumberish; // R_0+R_1 is the interest rate charged at UBar\n  R2: BigNumberish; // R_0+R_1+R_2 is the interest rate charged at 100% utilization\n}\n\n// Calculate the rate for a 0 sized deposit (infinitesimally small).\nexport function calculateInstantaneousRate(rateModel: RateModel, utilization: BigNumberish) {\n  const beforeKink = min(utilization, rateModel.UBar).mul(rateModel.R1).div(rateModel.UBar);\n  const afterKink = max(toBN(\"0\"), toBN(utilization).sub(rateModel.UBar))\n    .mul(rateModel.R2)\n    .div(toBNWei(\"1\").sub(rateModel.UBar));\n\n  return toBN(rateModel.R0).add(beforeKink).add(afterKink);\n}\n\n//  Compute area under curve of the piece-wise linear rate model.\nfunction calculateAreaUnderRateCurve(rateModel: RateModel, utilization: BN) {\n  // Area under first piecewise component\n  const utilizationBeforeKink = min(utilization, rateModel.UBar);\n  const rectangle1Area = utilizationBeforeKink.mul(rateModel.R0).div(fixedPointAdjustment);\n  const triangle1Area = toBNWei(\"0.5\")\n    .mul(calculateInstantaneousRate(rateModel, utilizationBeforeKink).sub(rateModel.R0))\n    .mul(utilizationBeforeKink)\n    .div(fixedPointAdjustment)\n    .div(fixedPointAdjustment);\n\n  // Area under second piecewise component\n  const utilizationAfter = max(toBN(\"0\"), utilization.sub(rateModel.UBar));\n  const rectangle2Area = utilizationAfter.mul(toBN(rateModel.R0).add(rateModel.R1)).div(fixedPointAdjustment);\n  const triangle2Area = toBNWei(\"0.5\")\n    .mul(calculateInstantaneousRate(rateModel, utilization).sub(toBN(rateModel.R0).add(rateModel.R1)))\n    .mul(utilizationAfter)\n    .div(fixedPointAdjustment)\n    .div(fixedPointAdjustment);\n\n  return rectangle1Area.add(triangle1Area).add(rectangle2Area).add(triangle2Area);\n}\n\n// converts an APY rate to a one week rate. Uses the Decimal library to take a fractional exponent\nfunction convertApyToWeeklyFee(apy: BN) {\n  // R_week = (1 + apy)^(1/52) - 1\n  const weeklyFeePct = Decimal.pow(\n    new Decimal(\"1\").plus(fromWei(apy)),\n    new Decimal(\"1\").dividedBy(new Decimal(\"52\"))\n  ).minus(new Decimal(\"1\"));\n\n  // Convert from decimal back to BN, scaled by 1e18.\n  return toBN(weeklyFeePct.times(fixedPointAdjustment.toString()).floor().toString());\n}\n\n// Calculate the realized yearly LP Fee APY Percent for a given rate model, utilization before and after the deposit.\nexport function calculateApyFromUtilization(\n  rateModel: RateModel,\n  utilizationBeforeDeposit: BN,\n  utilizationAfterDeposit: BN\n) {\n  if (utilizationBeforeDeposit.eq(utilizationAfterDeposit)) throw new Error(\"Deposit cant have zero size\");\n\n  // Get the area of [0, utilizationBeforeDeposit] and [0, utilizationAfterDeposit]\n  const areaBeforeDeposit = calculateAreaUnderRateCurve(rateModel, utilizationBeforeDeposit);\n  const areaAfterDeposit = calculateAreaUnderRateCurve(rateModel, utilizationAfterDeposit);\n\n  const numerator = areaAfterDeposit.sub(areaBeforeDeposit);\n  const denominator = utilizationAfterDeposit.sub(utilizationBeforeDeposit);\n  return numerator.mul(fixedPointAdjustment).div(denominator);\n}\n\nexport function calculateRealizedLpFeePct(\n  rateModel: RateModel,\n  utilizationBeforeDeposit: BigNumberish,\n  utilizationAfterDeposit: BigNumberish\n) {\n  const apy = calculateApyFromUtilization(rateModel, toBN(utilizationBeforeDeposit), toBN(utilizationAfterDeposit));\n  return convertApyToWeeklyFee(apy);\n}\n","import { ethers } from \"ethers\";\n// these gas costs are estimations, its possible to provide better estimations yourself when invoking getGasFees.\nexport const SLOW_ETH_GAS = 243177;\nexport const SLOW_ERC_GAS = 250939;\nexport const SLOW_UMA_GAS = 273955;\n\n// fast costs are slightly higher and include the slow cost\nexport const FAST_ETH_GAS = 273519;\nexport const FAST_ERC_GAS = 281242;\nexport const FAST_UMA_GAS = 305572;\n\nexport const SPEED_UP_ETH_GAS = 195288;\nexport const SPEED_UP_ERC_GAS = 203011;\nexport const SPEED_UP_UMA_GAS = 227341;\n\n// Bots incur lower than expected costs due to batching mulitple transactions, this roughly estimates the savings\nexport const DEFAULT_GAS_DISCOUNT = 25;\n\nexport const expectedRateModelKeys = [\"UBar\", \"R0\", \"R1\", \"R2\"];\n\n// Amount of blocks to wait following a `TokensBridged` L2 event until we check the L1 state commitment contracts. This\n// offset provides a buffer to allow for any time delay between L2 state changing and L1 state updating. For example,\n// Optimism has a several hour delay.\nexport const L2_STATE_COMMITMENT_DELAY_BLOCKS = 25000;\n\nexport interface RateModel {\n  UBar: string; // denote the utilization kink along the rate model where the slope of the interest rate model changes.\n  R0: string; // is the interest rate charged at 0 utilization\n  R1: string; // R_0+R_1 is the interest rate charged at UBar\n  R2: string; // R_0+R_1+R_2 is the interest rate charged at 100% utilization\n}\n\nexport const AddressZero = ethers.constants.AddressZero;\n// mainnet addresses, hard coded here for convenience, but theres probably a better pattern for this\nexport const ADDRESSES = {\n  ETH: AddressZero,\n  UMA: \"0x04Fa0d235C4abf4BcF4787aF4CF447DE572eF828\",\n  WETH: \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n  USDC: \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\",\n  RateModel: \"0xd18fFeb5fdd1F2e122251eA7Bf357D8Af0B60B50\",\n};\n\nexport const SECONDS_PER_YEAR = 31557600; // based on 365.25 days per year\nexport const DEFAULT_BLOCK_DELTA = 10; // look exchange rate up based on 10 block difference by default\n","import { expectedRateModelKeys, RateModel } from \"./constants\";\nimport { exists } from \"../utils\";\nimport { ethers } from \"ethers\";\n\n// Each L1 token is mapped to an array of stringified rate models, ordered by the block height at which they were\n// published on-chain. This dictionary is used internally to fetch a rate model for a block height.\ntype RateModelEventsDictionary = {\n  [l1TokenAddress: string]: { blockNumber: number; rateModel: string }[];\n};\n\n// Events should be reformatted into this shape to be used as input into methods in this file.\nexport type RateModelEvent = {\n  blockNumber: number;\n  transactionIndex: number;\n  logIndex: number;\n  rateModel: string;\n  l1Token: string;\n};\n\nexport class RateModelDictionary {\n  public rateModelDictionary: RateModelEventsDictionary = {};\n\n  private _throwIfNotInitialized() {\n    if (Object.keys(this.rateModelDictionary).length == 0)\n      throw new Error(\"RateModelUtility method called before updating rate model dictionary!\");\n  }\n\n  updateWithEvents(rateModelEvents: RateModelEvent[]): void {\n    this.rateModelDictionary = createRateModelEventDictionary(rateModelEvents);\n  }\n\n  /**\n   * Return the rate model for L1 token set at the block height.\n   * @param l1Token L1 token address to get rate model for.\n   * @param blockNumber Block height to get rate model for.\n   * @returns Rate model object.\n   */\n  getRateModelForBlockNumber(l1Token: string, blockNumber?: number): RateModel {\n    this._throwIfNotInitialized();\n\n    const l1TokenNormalized = ethers.utils.getAddress(l1Token);\n\n    if (!this.rateModelDictionary[l1TokenNormalized] || this.rateModelDictionary[l1TokenNormalized].length === 0)\n      throw new Error(`No updated rate model events for L1 token: ${l1TokenNormalized}`);\n\n    if (!blockNumber) {\n      // If block number is undefined, use latest updated rate model.\n      return parseAndReturnRateModelFromString(this.rateModelDictionary[l1TokenNormalized].slice(-1)[0].rateModel);\n    } else {\n      const firstEventBlockNumber = this.rateModelDictionary[l1TokenNormalized][0].blockNumber;\n      if (blockNumber < firstEventBlockNumber) {\n        throw new Error(\n          `Block number #${blockNumber} is before first UpdatedRateModel event block ${firstEventBlockNumber}`\n        );\n      }\n\n      // We're looking for the latest rate model update that occurred at or before the block number.\n      // Rate model events are inserted into the array from oldest at index 0 to newest at index length-1, so we'll\n      // reverse the array so it goes from newest at index 0 to oldest at index length-1, and then find the first event\n      // who's block number is less than or equal to the target block number.\n      const rateModel = this.rateModelDictionary[l1TokenNormalized]\n        .slice()\n        .reverse() // reverse() modifies memory in place so create a copy first.\n        .find((event) => event.blockNumber <= blockNumber);\n\n      if (!rateModel)\n        throw new Error(`No updated rate model events before block #${blockNumber} for L1 token: ${l1TokenNormalized}`);\n      return parseAndReturnRateModelFromString(rateModel?.rateModel);\n    }\n  }\n\n  /**\n   * @notice Return all L1 tokens that had a rate model associated with it at the block number.\n   * @param blockNumber Returns l1 tokens that were mapped to a rate model at this block height. If undefined,\n   * this function will return all L1 tokens that have a block number as of the latest block height.\n   * @returns array of L1 token addresses.\n   */\n  getL1TokensFromRateModel(blockNumber: number | undefined = undefined): string[] {\n    this._throwIfNotInitialized();\n\n    return Object.keys(this.rateModelDictionary)\n      .map((l1Token) => {\n        const l1TokenNormalized = ethers.utils.getAddress(l1Token);\n\n        // Check that there is at least one UpdatedRateModel event before the provided block number, otherwise\n        // this L1 token didn't exist in the RateModel at the block height and we shouldn't include it in the returned\n        // array.\n        if (\n          !blockNumber ||\n          this.rateModelDictionary[l1TokenNormalized].find((event) => event.blockNumber <= blockNumber)\n        )\n          return ethers.utils.getAddress(l1Token);\n        else return null;\n      })\n      .filter(exists);\n  }\n}\n/**\n * Helper method that returns parsed rate model from string, or throws.\n * @param rateModelString Stringified rate model to parse.\n * @returns Rate model object. Must conform to `expectedRateModelKeys` format.\n */\n\nexport const parseAndReturnRateModelFromString = (rateModelString: string): RateModel => {\n  const rateModelFromEvent = JSON.parse(rateModelString);\n\n  // Rate model must contain the exact same keys in `expectedRateModelKeys`.\n  for (const key of expectedRateModelKeys) {\n    if (!Object.keys(rateModelFromEvent).includes(key)) {\n      throw new Error(\n        `Rate model does not contain all expected keys. Expected keys: [${expectedRateModelKeys}], actual keys: [${Object.keys(\n          rateModelFromEvent\n        )}]`\n      );\n    }\n  }\n  for (const key of Object.keys(rateModelFromEvent)) {\n    if (!expectedRateModelKeys.includes(key)) {\n      throw new Error(\n        `Rate model contains unexpected keys. Expected keys: [${expectedRateModelKeys}], actual keys: [${Object.keys(\n          rateModelFromEvent\n        )}]`\n      );\n    }\n  }\n\n  return {\n    UBar: rateModelFromEvent.UBar,\n    R0: rateModelFromEvent.R0,\n    R1: rateModelFromEvent.R1,\n    R2: rateModelFromEvent.R2,\n  };\n};\n\n/**\n * Given an unsorted array of updated rate model events, return a dictionary mapping token addresses to sorted\n * rate model events. This method is used internally to enforce chronological sorting of events and mapping rate models\n * to token addresses.\n * @param rateModelEvents Unsorted updated rate model events, each of which contains a token address, the stringified\n * rate model for that token, and the block height of the update.\n * @returns Dictionary mapping token addresses to chronologically sorted rate model updates.\n */\nconst createRateModelEventDictionary = (rateModelEvents: RateModelEvent[]): RateModelEventsDictionary => {\n  const updatedRateModelEventsForToken: RateModelEventsDictionary = {};\n\n  // Sort events in-place from oldest to newest:\n  rateModelEvents.sort((a, b) => {\n    if (a.blockNumber !== b.blockNumber) {\n      return a.blockNumber - b.blockNumber;\n    }\n\n    if (a.transactionIndex !== b.transactionIndex) {\n      return a.transactionIndex - b.transactionIndex;\n    }\n\n    return a.logIndex - b.logIndex;\n  });\n\n  for (const updatedRateModelEvent of rateModelEvents) {\n    // The contract enforces that all rate models are mapped to addresses, therefore we do not need to check that\n    // `l1Token` is a valid address.\n    const l1TokenNormalized = ethers.utils.getAddress(updatedRateModelEvent.l1Token);\n    if (!updatedRateModelEventsForToken[l1TokenNormalized]) updatedRateModelEventsForToken[l1TokenNormalized] = [];\n\n    // We assume that events are returned from oldest to newest, so we can simply push events into the array and\n    // and maintain their time order.\n    updatedRateModelEventsForToken[l1TokenNormalized].push({\n      blockNumber: updatedRateModelEvent.blockNumber,\n      rateModel: updatedRateModelEvent.rateModel,\n    });\n  }\n\n  return updatedRateModelEventsForToken;\n};\n","import assert from \"assert\";\nimport sortedIndexBy from \"lodash/sortedIndexBy\";\nimport clamp from \"lodash/clamp\";\nimport { estimateBlocksElapsed } from \"./utils\";\n\nexport type WithoutStringTimestamp<T extends { timestamp: number | string }> = T & { timestamp: number };\n\nexport default class BlockFinder<T extends { number: number; timestamp: number | string }> {\n  constructor(\n    private readonly requestBlock: (requestedBlock: string | number) => Promise<T>,\n    private readonly blocks: T[] = [],\n    private readonly chainId: number = 1\n  ) {\n    assert(requestBlock, \"requestBlock function must be provided\");\n  }\n\n  /**\n   * @notice Gets the latest block whose timestamp is <= the provided timestamp.\n   * @param {number} timestamp timestamp to search.\n   */\n  public async getBlockForTimestamp(timestamp: number | string): Promise<T> {\n    timestamp = Number(timestamp);\n    assert(timestamp !== undefined && timestamp !== null, \"timestamp must be provided\");\n    // If the last block we have stored is too early, grab the latest block.\n    if (this.blocks.length === 0 || this.blocks[this.blocks.length - 1].timestamp < timestamp) {\n      const block = await this.getLatestBlock();\n      if (timestamp >= block.timestamp) return block;\n    }\n\n    // Check the first block. If it's greater than our timestamp, we need to find an earlier block.\n    if (this.blocks[0].timestamp > timestamp) {\n      const initialBlock = this.blocks[0] as WithoutStringTimestamp<T>;\n      // We use a 2x cushion to reduce the number of iterations in the following loop and increase the chance\n      // that the first block we find sets a floor for the target timestamp. The loop converges on the correct block\n      // slower than the following incremental search performed by `findBlock`, so we want to minimize the number of\n      // loop iterations in favor of searching more blocks over the `findBlock` search.\n      const cushion = 1;\n      const incrementDistance = Math.max(\n        // Ensure the increment block distance is _at least_ a single block to prevent an infinite loop.\n        await estimateBlocksElapsed(initialBlock.timestamp - timestamp, cushion, this.chainId),\n        1\n      );\n\n      // Search backwards by a constant increment until we find a block before the timestamp or hit block 0.\n      for (let multiplier = 1; ; multiplier++) {\n        const distance = multiplier * incrementDistance;\n        const blockNumber = Math.max(0, initialBlock.number - distance);\n        const block = await this.getBlock(blockNumber);\n        if (block.timestamp <= timestamp) break; // Found an earlier block.\n        assert(blockNumber > 0, \"timestamp is before block 0\"); // Block 0 was not earlier than this timestamp. The row.\n      }\n    }\n\n    // Find the index where the block would be inserted and use that as the end block (since it is >= the timestamp).\n    const index = sortedIndexBy(this.blocks, { timestamp } as T, \"timestamp\");\n    return this.findBlock(this.blocks[index - 1], this.blocks[index], timestamp);\n  }\n\n  // Grabs the most recent block and caches it.\n  private async getLatestBlock() {\n    const block = await this.requestBlock(\"latest\");\n    const index = sortedIndexBy(this.blocks, block, \"number\");\n    if (this.blocks[index]?.number !== block.number) this.blocks.splice(index, 0, block);\n    return this.blocks[index];\n  }\n\n  // Grabs the block for a particular number and caches it.\n  private async getBlock(number: number) {\n    let index = sortedIndexBy(this.blocks, { number } as T, \"number\");\n    if (this.blocks[index]?.number === number) return this.blocks[index]; // Return early if block already exists.\n    const block = await this.requestBlock(number);\n\n    // Recompute the index after the async call since the state of this.blocks could have changed!\n    index = sortedIndexBy(this.blocks, { number } as T, \"number\");\n\n    // Rerun this check to avoid duplicate insertion.\n    if (this.blocks[index]?.number === number) return this.blocks[index];\n    this.blocks.splice(index, 0, block); // A simple insert at index.\n    return block;\n  }\n\n  // Return the latest block, between startBlock and endBlock, whose timestamp is <= timestamp.\n  // Effectively, this is an interpolation search algorithm to minimize block requests.\n  // Note: startBlock and endBlock _must_ be different blocks.\n  private async findBlock(_startBlock: T, _endBlock: T, timestamp: number): Promise<T> {\n    const [startBlock, endBlock] = [_startBlock, _endBlock] as WithoutStringTimestamp<T>[];\n    // In the case of equality, the endBlock is expected to be passed as the one whose timestamp === the requested\n    // timestamp.\n    if (endBlock.timestamp === timestamp) return endBlock;\n\n    // If there's no equality, but the blocks are adjacent, return the startBlock, since we want the returned block's\n    // timestamp to be <= the requested timestamp.\n    if (endBlock.number === startBlock.number + 1) return startBlock;\n\n    assert(endBlock.number !== startBlock.number, \"startBlock cannot equal endBlock\");\n    assert(\n      timestamp < endBlock.timestamp && timestamp > startBlock.timestamp,\n      \"timestamp not in between start and end blocks\"\n    );\n\n    // Interpolating the timestamp we're searching for to block numbers.\n    const totalTimeDifference = endBlock.timestamp - startBlock.timestamp;\n    const totalBlockDistance = endBlock.number - startBlock.number;\n    const blockPercentile = (timestamp - startBlock.timestamp) / totalTimeDifference;\n    const estimatedBlock = startBlock.number + Math.round(blockPercentile * totalBlockDistance);\n\n    // Clamp ensures the estimated block is strictly greater than the start block and strictly less than the end block.\n    const newBlock = await this.getBlock(clamp(estimatedBlock, startBlock.number + 1, endBlock.number - 1));\n\n    // Depending on whether the new block is below or above the timestamp, narrow the search space accordingly.\n    if (newBlock.timestamp < timestamp) {\n      return this.findBlock(newBlock, endBlock, timestamp);\n    } else {\n      return this.findBlock(startBlock, newBlock, timestamp);\n    }\n  }\n}\n","import assert from \"assert\";\nimport { Provider, Block } from \"@ethersproject/providers\";\nimport { BigNumber } from \"ethers\";\nimport { bridgePool, rateModelStore } from \"../clients\";\nimport { BigNumberish } from \"./utils\";\nimport { calculateRealizedLpFeePct } from \"./feeCalculator\";\nimport { parseAndReturnRateModelFromString } from \"./rateModel\";\nimport { exists } from \"../utils\";\nimport BlockFinder from \"../blockFinder\";\n\nexport default class LpFeeCalculator {\n  private blockFinder: BlockFinder<Block>;\n  constructor(private provider: Provider) {\n    this.blockFinder = new BlockFinder<Block>(provider.getBlock.bind(provider));\n  }\n  async getLpFeePct(tokenAddress: string, bridgePoolAddress: string, amount: BigNumberish, timestamp?: number) {\n    amount = BigNumber.from(amount);\n    assert(amount.gt(0), \"Amount must be greater than 0\");\n\n    const { blockFinder, provider } = this;\n\n    const bridgePoolInstance = bridgePool.connect(bridgePoolAddress, provider);\n    const rateModelStoreAddress = await rateModelStore.getAddress(await (await this.provider.getNetwork()).chainId);\n    const rateModelStoreInstance = rateModelStore.connect(rateModelStoreAddress, provider);\n\n    const targetBlock = exists(timestamp)\n      ? await blockFinder.getBlockForTimestamp(timestamp)\n      : await provider.getBlock(\"latest\");\n    assert(exists(targetBlock), \"Unable to find target block for timestamp: \" + timestamp || \"latest\");\n    const blockTag = targetBlock.number;\n\n    const [currentUt, nextUt, rateModelForBlockHeight] = await Promise.all([\n      bridgePoolInstance.callStatic.liquidityUtilizationCurrent({ blockTag } as any),\n      bridgePoolInstance.callStatic.liquidityUtilizationPostRelay(amount, { blockTag } as any),\n      rateModelStoreInstance.callStatic.l1TokenRateModels(tokenAddress, { blockTag } as any),\n    ]);\n\n    // Parsing stringified rate model will error if the rate model doesn't contain exactly the expected keys or isn't\n    // a JSON object.\n    const rateModel = parseAndReturnRateModelFromString(rateModelForBlockHeight);\n\n    return calculateRealizedLpFeePct(rateModel, currentUt, nextUt);\n  }\n}\n","import axios from \"axios\";\nimport assert from \"assert\";\nimport { get } from \"lodash\";\n\nexport function msToS(ms: number) {\n  return Math.floor(ms / 1000);\n}\n\ntype CoinGeckoAssetPlatform = {\n  id: string;\n  chain_identifier: number;\n  name: string;\n  shortname: string;\n};\n\ntype CoinGeckoPrice = {\n  address: string;\n  timestamp: number;\n  price: number;\n};\n\nclass Coingecko {\n  private host: string;\n  constructor(host = \"https://api.coingecko.com/api/v3\") {\n    this.host = host;\n  }\n  // Fetch historic prices for a `contract` denominated in `currency` between timestamp `from` and `to`. Note timestamps\n  // are assumed to be js timestamps and are converted to unixtimestamps by dividing by 1000.\n  async getHistoricContractPrices(contract: string, from: number, to: number, currency = \"usd\") {\n    assert(contract, \"requires contract address\");\n    assert(currency, \"requires currency symbol\");\n    assert(from, \"requires from timestamp\");\n    assert(to, \"requires to timestamp\");\n    from = Math.floor(from / 1000);\n    to = Math.floor(to / 1000);\n    const result = await this.call(\n      `coins/ethereum/contract/${contract.toLowerCase()}/market_chart/range/?vs_currency=${currency}&from=${from}&to=${to}`\n    );\n    // fyi timestamps are returned in ms in contrast to the current price endpoint\n    if (result.prices) return result.prices;\n    throw new Error(\"Something went wrong fetching coingecko prices!\");\n  }\n  async getContractDetails(contract_address: string, platform_id = \"ethereum\") {\n    return this.call(`coins/${platform_id}/contract/${contract_address.toLowerCase()}`);\n  }\n  async getCurrentPriceByContract(contract_address: string, currency = \"usd\", platform_id = \"ethereum\") {\n    const result = await this.getContractDetails(contract_address, platform_id);\n    const price = get(result, [\"market_data\", \"current_price\", currency], null);\n    assert(price !== null, \"No current price available for: \" + contract_address);\n    return [result.last_updated, price];\n  }\n  // Return an array of spot prices for an array of collateral addresses in one async call. Note we might in future\n  // This was adapted from packages/merkle-distributor/kpi-options-helpers/calculate-uma-tvl.ts\n  async getContractPrices(\n    addresses: Array<string>,\n    currency = \"usd\",\n    platform_id = \"ethereum\"\n  ): Promise<CoinGeckoPrice[]> {\n    // Generate a unique set with no repeated. join the set with the required coingecko delimiter.\n    const contract_addresses = Array.from(new Set(addresses.filter((n) => n).values()));\n    assert(contract_addresses.length > 0, \"Must supply at least 1 contract address\");\n    // coingecko returns lowercase addresses, so if you expect checksummed addresses, this lookup table will convert them back without having to add ethers as a dependency\n    const lookup = Object.fromEntries(\n      contract_addresses.map((address) => {\n        return [address.toLowerCase(), address];\n      })\n    );\n    // annoying, but have to type this to iterate over entries\n    type Result = {\n      [address: string]: {\n        [currency: string]: number; // usd, eth, ...\n        last_updated_at: number;\n      };\n    };\n    const result: Result = await this.call(\n      `simple/token_price/${platform_id}?contract_addresses=${contract_addresses.join(\n        \"%2C\"\n      )}&vs_currencies=${currency}&include_last_updated_at=true`\n    );\n    return Object.entries(result).map(([key, value]) => {\n      return { address: lookup[key], timestamp: value.last_updated_at, price: value[currency] };\n    });\n  }\n\n  async getPlatforms(): Promise<CoinGeckoAssetPlatform[]> {\n    return this.call(`asset_platforms`);\n  }\n\n  async call(path: string) {\n    try {\n      const { host } = this;\n      const url = `${host}/${path}`;\n      const result = await axios(url);\n      return result.data;\n    } catch (err) {\n      const msg = get(err, \"response.data.error\", get(err, \"response.statusText\", \"Unknown Coingecko Error\"));\n      throw new Error(msg);\n    }\n  }\n}\nexport default Coingecko;\n","import assert from \"assert\";\nimport { calculateGasFees, percent, BigNumberish, toBNWei, fixedPointAdjustment, toWei } from \"./utils\";\nimport { exists } from \"../utils\";\nimport { Provider } from \"@ethersproject/providers\";\nimport { connect as erc20Connect } from \"../clients/erc20\";\nimport { Etherchain } from \"../clients/etherchain\";\nimport Coingecko from \"../coingecko\";\nimport { ethers, BigNumber } from \"ethers\";\nimport * as constants from \"./constants\";\n\n/**\n * Function to estimate gas fees based on coingecko token price and ethers gasPrice. You must still\n * provide a gas amount estimation based on the usage pattern. See constants for current estimations. Returns\n * an amount of gas estimated in the token provided in wei.\n *\n * @param {Provider} ethers Provider\n * @param {BigNumberish} Total amount to be relayed, specified in smallest unit of currency.\n * @param {number} gas - The gas cost for transfer, use constants defined in constants file.\n * @param {string} [tokenAddress = constants.ADDRESSES.ETH] - Token address, for ETH, constants.ADDRESSES.ETH\n */\nexport async function getGasFee(\n  ethersProvider: Provider,\n  gas: number,\n  tokenAddress: string = constants.ADDRESSES.ETH\n): Promise<string> {\n  const { baseFeePerGas } = await ethersProvider.getBlock(\"latest\");\n  let gasPrice: ethers.BigNumber;\n\n  if (baseFeePerGas) {\n    const priorityFeePerGas = (await new Etherchain().getGasPrice()).fastest;\n    // transform priority fee from gwei (eg 4.1) to wei\n    const priorityFeePerGasWei = toWei(priorityFeePerGas, 9);\n    gasPrice = baseFeePerGas.add(priorityFeePerGasWei);\n  } else {\n    // fallback in case baseFeePerGas is undefined / null\n    gasPrice = await ethersProvider.getGasPrice();\n  }\n\n  // We treat ETH differently since we dont need a price conversion like other tokens and return early.\n  if (tokenAddress === constants.ADDRESSES.ETH) {\n    return calculateGasFees(gas, gasPrice);\n  }\n  const coingecko = new Coingecko();\n  const [, tokenPrice] = await coingecko.getCurrentPriceByContract(tokenAddress, \"eth\");\n  const erc20Client = erc20Connect(tokenAddress, ethersProvider);\n  const decimals = await erc20Client.decimals();\n  return calculateGasFees(gas, gasPrice, tokenPrice, decimals);\n}\n\ntype GasTable = Record<string, number> & { DEFAULT: number };\n// These tables are hard coded to mainnet\nfunction makeSlowGasTable(): GasTable {\n  return {\n    [constants.ADDRESSES.UMA]: constants.SLOW_UMA_GAS,\n    [constants.ADDRESSES.ETH]: constants.SLOW_ETH_GAS,\n    [constants.ADDRESSES.WETH]: constants.SLOW_ETH_GAS,\n    DEFAULT: constants.SLOW_ERC_GAS,\n  };\n}\n// instant gas is the amount of gas above slow gas\nfunction makeInstantGasTable(): GasTable {\n  return {\n    [constants.ADDRESSES.UMA]: constants.FAST_UMA_GAS - constants.SLOW_UMA_GAS,\n    [constants.ADDRESSES.ETH]: constants.FAST_ETH_GAS - constants.SLOW_ETH_GAS,\n    [constants.ADDRESSES.WETH]: constants.FAST_ETH_GAS - constants.SLOW_ETH_GAS,\n    DEFAULT: constants.FAST_ERC_GAS - constants.SLOW_ERC_GAS,\n  };\n}\n\nconst GetGasByAddress = (gasTable: GasTable) => (tokenAddress: string): number => {\n  if (exists(gasTable[tokenAddress])) return gasTable[tokenAddress];\n  return gasTable.DEFAULT;\n};\n\nexport const getInstantGasByAddress = GetGasByAddress(makeInstantGasTable());\nexport const getSlowGasByAddress = GetGasByAddress(makeSlowGasTable());\n\nexport type DepositFees = {\n  slowPct: string;\n  instantPct: string;\n};\n\n/**\n * getDepositFees. Returns to you appropriate values for calling the relay deposit function. Returns the slow gas fee\n * and the instant gas fee which is the amount additional to the slow fee as percentages in wei.\n *\n * @param {Provider} ethersProvider - Read provider on mainnet\n * @param {BigNumberish} amountToRelay - Amount in wei of token to relay\n * @param {string} tokenAddress = 0 - Mainnet address of token to relay. Defaults to ETH which is constants.ADDRESSES.ETH.\n * @param {string} discountPercent = DEFAULT_GAS_DISCOUNT- Percent as a value 0-100 of gas fee discount. 0 means no discount. Typically 25 for a 25% gas fee reduction.\n * No need to override this as the values are hardcoded in the sdk.\n * @returns {Promise<DepositFees>} - Returns the fee parameters to the deposit function on the deposit box contract.\n * These are percentages in wei. For example 50% is represented as 0.5 * 1e18.\n */\nexport async function getDepositFees(\n  ethersProvider: Provider,\n  amountToRelay: BigNumberish,\n  tokenAddress: string = constants.ADDRESSES.ETH,\n  discountPercent: number = constants.DEFAULT_GAS_DISCOUNT\n): Promise<DepositFees> {\n  assert(discountPercent >= 0 && discountPercent <= 100, \"discountPercent must be between 0 and 100 percent\");\n  const slowGas = getSlowGasByAddress(tokenAddress);\n  const slowGasDiscounted = Math.floor((1 - discountPercent / 100) * slowGas);\n  const slowGasFee = await getGasFee(ethersProvider, slowGasDiscounted, tokenAddress);\n\n  const instantGas = getInstantGasByAddress(tokenAddress);\n  const instantGasDiscounted = Math.floor((1 - discountPercent / 100) * instantGas);\n  const instantGasFee = await getGasFee(ethersProvider, instantGasDiscounted, tokenAddress);\n\n  return {\n    slowPct: percent(slowGasFee, amountToRelay).toString(),\n    instantPct: percent(instantGasFee, amountToRelay).toString(),\n  };\n}\n\nexport type DepositFeeDetails = {\n  tokenAddress: string;\n  amountToRelay: string;\n  discountPercent: number;\n  feeLimitPercent?: number;\n  instant: {\n    pct: string;\n    total: string;\n  };\n  slow: {\n    pct: string;\n    total: string;\n  };\n  isAmountTooLow: boolean;\n};\n/**\n * getDepositFeesDetails. Same as deposit fees, but returns more information, useful for a frontend display.\n *\n * @param {Provider} ethersProvider - Read provider on mainnet\n * @param {BigNumberish} amountToRelay - Amount in wei of token to relay\n * @param {string} tokenAddress = 0 - Mainnet address of token to relay, for ETH specify constants.ADDRESSES.ETH\n * @param {number} feeLimitPercent? - Optional, percent as a value 0-100 of how much to limit fees as a percentage of the total relayed. Typically 25 or 25% of fees are acceptable out of the total relay amount.\n * For instance 25 means fees can be up to 25% of the total amount to send, fees above this will cause isAmountTooLow to be true.\n * @param {string} discountPercent = DEFAULT_GAS_DISCOUNT - Percent as a value 0-100 of gas fee discount. 0 means no discount. Typically 25 for a 25% gas fee reduction.\n * No need to override this as the values are hardcoded in the sdk.\n * @returns {DepositFeeDetails}\n */\nexport async function getDepositFeesDetails(\n  ethersProvider: Provider,\n  amountToRelay: BigNumberish,\n  tokenAddress: string = constants.ADDRESSES.ETH,\n  feeLimitPercent?: number,\n  discountPercent: number = constants.DEFAULT_GAS_DISCOUNT\n): Promise<DepositFeeDetails> {\n  const { slowPct, instantPct } = await getDepositFees(ethersProvider, amountToRelay, tokenAddress, discountPercent);\n  const slowTotal = BigNumber.from(slowPct).mul(amountToRelay).div(fixedPointAdjustment).toString();\n  const instantTotal = BigNumber.from(instantPct).mul(amountToRelay).div(fixedPointAdjustment).toString();\n  let isAmountTooLow = false;\n\n  if (feeLimitPercent) {\n    assert(feeLimitPercent >= 0 && feeLimitPercent <= 100, \"feeLimitPercent must be between 0 and 100 percent\");\n    isAmountTooLow = BigNumber.from(slowPct)\n      .add(instantPct)\n      .gt(toBNWei(feeLimitPercent / 100));\n  }\n\n  return {\n    amountToRelay: amountToRelay.toString(),\n    discountPercent,\n    feeLimitPercent,\n    tokenAddress,\n    instant: {\n      pct: instantPct,\n      total: instantTotal,\n    },\n    slow: {\n      pct: slowPct,\n      total: slowTotal,\n    },\n    isAmountTooLow,\n  };\n}\n","import { multicall } from \"./clients\";\nimport { Contract } from \"ethers\";\nimport type { SignerOrProvider } from \".\";\nimport zip from \"lodash/zip\";\n\nexport type Call = {\n  method: string;\n  args?: any[];\n};\n\nexport type Request = {\n  contractInstance: Contract;\n  call: Call;\n};\nexport type EncodedResponse = string;\nexport type EncodedRequest = {\n  target: string;\n  callData: string;\n};\n\nexport interface State<MulticallType> {\n  requests: Request[];\n  multicallClient: MulticallType;\n}\n\n// Multicall class that exposes public functions to the user and recursively chains itself.  Acts immutable\n// if you store reference to the parent intsance. Children will contain mutated state.\nexport class Multicall<MulticallType extends multicall.Instance> implements State<multicall.Instance> {\n  public requests: Request[];\n  public multicallClient: MulticallType;\n  constructor(state: State<MulticallType>) {\n    // make a copy of this so we dont mutate the original\n    this.requests = [...state.requests];\n    this.multicallClient = state.multicallClient;\n  }\n\n  // internally add requests to queue. Only called by parent for chaining.\n  protected push(contractInstance: Contract, call: Call) {\n    this.requests.push({ contractInstance, call });\n  }\n\n  // encode requests to multicall contract\n  protected encodeRequest(request: Request) {\n    const { contractInstance, call } = request;\n    return {\n      target: contractInstance.address,\n      callData: contractInstance.interface.encodeFunctionData(call.method, call.args),\n    };\n  }\n\n  // decode response from multicall contract\n  protected decodeResponse(request: Request, response: EncodedResponse) {\n    const { contractInstance, call } = request;\n    return contractInstance.interface.decodeFunctionResult(call.method, response);\n  }\n\n  // adds a new request to the queue, to be executed when read is called. Returns an instance of this class so you can chain.\n  public add(contractInstance: Contract, call: Call) {\n    const child = new Multicall(this);\n    child.push(contractInstance, call);\n    return child;\n  }\n\n  // adds a list of requests to the queue, to be executed when read is called. Returns an instance of this class so you can chain.\n  public batch(contractInstance: Contract, calls: Call[]) {\n    const child = new Multicall(this);\n    calls.forEach((call: Call) => {\n      child.push(contractInstance, call);\n    });\n    return child;\n  }\n  // reads from the contract, returns the read results in order that requests were queued.\n  public async read(_requests: Request[] = this.requests) {\n    const encodedRequests = _requests.map((request) => this.encodeRequest(request));\n    const { returnData } = await this.multicallClient.callStatic.aggregate(encodedRequests);\n    const zipped = zip(_requests, returnData);\n    return zipped.map(([request, response]) => {\n      if (request && response) return this.decodeResponse(request, response);\n      throw new Error(\"Unable to decode contract response\");\n    });\n  }\n}\n\n// Factory that alters construction of multicall to be more friendly for end user\nexport default class Factory extends Multicall<multicall.Instance> {\n  constructor(address: string, provider: SignerOrProvider) {\n    const multicallClient = multicall.connect(address, provider);\n    super({ multicallClient, requests: [] });\n  }\n}\n","import { multicall2 } from \"./clients\";\nimport { Call, Multicall, Request, State } from \"./multicall\";\nimport zip from \"lodash/zip\";\nimport { SignerOrProvider } from \".\";\nimport { Contract } from \"ethers\";\n\nclass Multicall2 extends Multicall<multicall2.Instance> {\n  constructor(state: State<multicall2.Instance>) {\n    super(state);\n  }\n\n  // reads from the contract, returns the read and error results in order that requests were queued.\n  public async readWithErrors(_requests: Request[] = this.requests) {\n    const encodedRequests = _requests.map((request) => this.encodeRequest(request));\n    const [, , returnData] = await this.multicallClient.callStatic.tryBlockAndAggregate(false, encodedRequests);\n    const zipped = zip(_requests, returnData);\n    return zipped.map(([request, response]) => {\n      if (request && response) {\n        return {\n          success: response.success,\n          result: response.success ? this.decodeResponse(request, response.returnData) : undefined,\n        };\n      }\n      throw new Error(\"Unable to decode contract response\");\n    });\n  }\n\n  // adds a new request to the queue, to be executed when read is called. Returns an instance of this class so you can chain.\n  public add(contractInstance: Contract, call: Call) {\n    return new Multicall2(super.add(contractInstance, call));\n  }\n\n  // adds a list of requests to the queue, to be executed when read is called. Returns an instance of this class so you can chain.\n  public batch(contractInstance: Contract, calls: Call[]) {\n    return new Multicall2(super.batch(contractInstance, calls));\n  }\n}\n\n// Factory that alters construction of multicall2 to be more friendly for end user\nexport default class Multicall2Factory extends Multicall2 {\n  constructor(address: string, provider: SignerOrProvider) {\n    const multicallClient = multicall2.connect(address, provider);\n    super({ multicallClient, requests: [] });\n  }\n}\n","import assert from \"assert\";\nimport { Signer } from \"ethers\";\nimport { TransactionRequest, TransactionReceipt } from \"@ethersproject/abstract-provider\";\n\nfunction makeKey(tx: TransactionRequest) {\n  return JSON.stringify(\n    Object.entries(tx).map(([key, value]) => {\n      return [key, (value || \"\").toString()];\n    })\n  );\n}\n\ntype Config = {\n  confirmations?: number;\n};\nexport type Emit = (event: string, key: string, data: TransactionReceipt | string | TransactionRequest | Error) => void;\nexport default (config: Config, signer: Signer, emit: Emit = () => null) => {\n  assert(signer.provider, \"signer requires a provider, use signer.connect(provider)\");\n  const { confirmations = 3 } = config;\n  const requests = new Map<string, TransactionRequest>();\n  const submissions = new Map<string, string>();\n  const mined = new Map<string, TransactionReceipt>();\n  function request(unsignedTx: TransactionRequest) {\n    // this no longer calls signer.populateTransaction, to allow metamask to fill in missing details instead\n    // use overrides if you want to manually fill in other tx details, including the overrides.customData field.\n    const populated = unsignedTx;\n    const key = makeKey(populated);\n    assert(!requests.has(key), \"Transaction already in progress\");\n    requests.set(key, populated);\n    return key;\n  }\n  async function processRequest(key: string) {\n    const request = requests.get(key);\n    assert(request, \"invalid request\");\n    // always delete request, it should only be submitted once\n    requests.delete(key);\n    try {\n      const sent = await signer.sendTransaction(request);\n      submissions.set(key, sent.hash);\n      emit(\"submitted\", key, sent.hash);\n    } catch (err) {\n      emit(\"error\", key, err as Error);\n    }\n  }\n  async function processSubmission(key: string) {\n    const hash = submissions.get(key);\n    assert(hash, \"invalid submission\");\n    assert(signer.provider, \"signer requires a provider, use signer.connect(provider)\");\n    // we look for this transaction, but it may never find it if its sped up\n    const receipt = await signer.provider.getTransactionReceipt(hash).catch(() => undefined);\n    if (receipt == null) return;\n    if (receipt.confirmations < confirmations) return;\n    submissions.delete(key);\n    mined.set(key, receipt);\n    emit(\"mined\", key, receipt);\n  }\n  async function isMined(key: string) {\n    return mined.get(key);\n  }\n  async function update() {\n    for (const key of requests.keys()) {\n      await processRequest(key);\n    }\n    for (const key of submissions.keys()) {\n      await processSubmission(key);\n    }\n  }\n  return {\n    request,\n    isMined,\n    update,\n  };\n};\n","import assert from \"assert\";\nimport { bridgePool, rateModelStore } from \"../../clients\";\nimport { toBNWei, fixedPointAdjustment, calcPeriodicCompoundInterest, calcApr, BigNumberish, fromWei } from \"../utils\";\nimport { BatchReadWithErrors, loop, exists } from \"../../utils\";\nimport Multicall2 from \"../../multicall2\";\nimport TransactionManager from \"../transactionManager\";\nimport { ethers, Signer, BigNumber } from \"ethers\";\nimport type { Overrides } from \"@ethersproject/contracts\";\nimport { TransactionRequest, TransactionReceipt, Log } from \"@ethersproject/abstract-provider\";\nimport { Provider, Block } from \"@ethersproject/providers\";\nimport set from \"lodash/set\";\nimport get from \"lodash/get\";\nimport has from \"lodash/has\";\nimport { calculateInstantaneousRate } from \"../feeCalculator\";\nimport { SECONDS_PER_YEAR, DEFAULT_BLOCK_DELTA, RateModel, ADDRESSES } from \"../constants\";\nimport { parseAndReturnRateModelFromString } from \"../rateModel\";\n\nexport type { Provider };\nexport type BatchReadWithErrorsType = ReturnType<ReturnType<typeof BatchReadWithErrors>>;\n\nexport type Awaited<T> = T extends PromiseLike<infer U> ? U : T;\n\nexport type Config = {\n  multicall2Address: string;\n  rateModelStoreAddress?: string;\n  confirmations?: number;\n  blockDelta?: number;\n};\nexport type Dependencies = {\n  provider: Provider;\n};\nexport type Pool = {\n  address: string;\n  totalPoolSize: string;\n  l1Token: string;\n  liquidReserves: string;\n  pendingReserves: string;\n  exchangeRateCurrent: string;\n  exchangeRatePrevious: string;\n  estimatedApy: string;\n  estimatedApr: string;\n  blocksElapsed: number;\n  secondsElapsed: number;\n  liquidityUtilizationCurrent: string;\n  utilizedReserves: string;\n  projectedApr: string;\n};\nexport type User = {\n  address: string;\n  poolAddress: string;\n  lpTokens: string;\n  positionValue: string;\n  totalDeposited: string;\n  feesEarned: string;\n};\nexport type Transaction = {\n  id: string;\n  state: \"requested\" | \"submitted\" | \"mined\" | \"error\";\n  toAddress: string;\n  fromAddress: string;\n  type: \"Add Liquidity\" | \"Remove Liquidity\";\n  description: string;\n  request?: TransactionRequest;\n  hash?: string;\n  receipt?: TransactionReceipt;\n  error?: Error;\n};\nexport type Token = {\n  decimals: string;\n  symbol: string;\n  name: string;\n};\nexport type State = {\n  pools: Record<string, Pool>;\n  users: Record<string, Record<string, User>>;\n  transactions: Record<string, Transaction>;\n  error?: Error;\n};\nexport type EmitState = (path: string[], data: any) => void;\n\nclass PoolState {\n  private l1Token: string | undefined = undefined;\n  constructor(\n    private batchRead: BatchReadWithErrorsType,\n    private contract: bridgePool.Instance,\n    private address: string\n  ) {}\n  public async read(latestBlock: number, previousBlock?: number) {\n    if (this.l1Token === undefined) this.l1Token = await this.contract.l1Token();\n    // typechain does not have complete types for call options, so we have to cast blockTag to any\n    const exchangeRatePrevious = await this.contract.callStatic.exchangeRateCurrent({\n      blockTag: previousBlock || latestBlock - 1,\n    } as any);\n\n    return {\n      address: this.address,\n      l1Token: this.l1Token,\n      exchangeRatePrevious,\n      ...(await this.batchRead<{\n        exchangeRateCurrent: BigNumber;\n        liquidityUtilizationCurrent: BigNumber;\n        liquidReserves: BigNumber;\n        pendingReserves: BigNumber;\n        utilizedReserves: BigNumber;\n      }>([\n        // its important exchangeRateCurrent is called first, as it calls _sync under the hood which updates the contract\n        // and gives more accurate values for the following properties.\n        [\"exchangeRateCurrent\"],\n        [\"liquidityUtilizationCurrent\"],\n        [\"liquidReserves\"],\n        [\"pendingReserves\"],\n        [\"utilizedReserves\"],\n      ])),\n    };\n  }\n}\n\ntype EventIdParams = { blockNumber: number; transactionIndex: number; logIndex: number };\nexport class PoolEventState {\n  private seen = new Set<string>();\n  private iface: ethers.utils.Interface;\n  constructor(\n    private contract: bridgePool.Instance,\n    private startBlock = 0,\n    private state: bridgePool.EventState = bridgePool.eventStateDefaults()\n  ) {\n    this.iface = new ethers.utils.Interface(bridgePool.Factory.abi);\n  }\n  private makeId(params: EventIdParams) {\n    return [params.blockNumber, params.transactionIndex, params.logIndex].join(\"!\");\n  }\n  hasEvent(params: EventIdParams) {\n    return this.seen.has(this.makeId(params));\n  }\n  private addEvent(params: EventIdParams) {\n    return this.seen.add(this.makeId(params));\n  }\n  private filterSeen = (params: EventIdParams) => {\n    const seen = this.hasEvent(params);\n    if (!seen) this.addEvent(params);\n    return !seen;\n  };\n  public async read(endBlock: number, userAddress?: string) {\n    if (endBlock <= this.startBlock) return this.state;\n    const events = (\n      await Promise.all([\n        ...(await this.contract.queryFilter(\n          this.contract.filters.LiquidityAdded(undefined, undefined, userAddress),\n          this.startBlock,\n          endBlock\n        )),\n        ...(await this.contract.queryFilter(\n          this.contract.filters.LiquidityRemoved(undefined, undefined, userAddress),\n          this.startBlock,\n          endBlock\n        )),\n      ])\n    )\n      .filter(this.filterSeen)\n      .sort((a, b) => {\n        if (a.blockNumber !== b.blockNumber) return a.blockNumber - b.blockNumber;\n        if (a.transactionIndex !== b.transactionIndex) return a.transactionIndex - b.transactionIndex;\n        if (a.logIndex !== b.logIndex) a.logIndex - b.logIndex;\n        // if everything is the same, return a, ie maintain order of array\n        return -1;\n      });\n    // ethers queries are inclusive [start,end] unless start === end, then exclusive (start,end). we increment to make sure we dont see same event twice\n    this.startBlock = endBlock + 1;\n    this.state = bridgePool.getEventState(events, this.state);\n    return this.state;\n  }\n  makeEventFromLog(log: Log) {\n    const description = this.iface.parseLog(log);\n    return {\n      ...log,\n      ...description,\n      event: description.name,\n      eventSignature: description.signature,\n    };\n  }\n  readTxReceipt(receipt: TransactionReceipt) {\n    const events = receipt.logs\n      .map((log) => {\n        try {\n          return this.makeEventFromLog(log);\n        } catch (err) {\n          // return nothing, this throws a lot because logs from other contracts are included in receipt\n          return;\n        }\n      })\n      // filter out undefined\n      .filter(exists)\n      .filter(this.filterSeen);\n\n    this.state = bridgePool.getEventState(events, this.state);\n    return this.state;\n  }\n}\n\nclass UserState {\n  constructor(private contract: bridgePool.Instance) {}\n  public async read(user: string) {\n    return {\n      address: user,\n      balanceOf: await this.contract.balanceOf(user),\n    };\n  }\n}\n\nexport function calculateRemoval(amountWei: BigNumber, percentWei: BigNumber) {\n  const receive = amountWei.mul(percentWei).div(fixedPointAdjustment);\n  const remain = amountWei.sub(receive);\n  return {\n    recieve: receive.toString(),\n    remain: remain.toString(),\n  };\n}\n// params here mimic the user object type\nexport function previewRemoval(\n  values: { positionValue: BigNumberish; feesEarned: BigNumberish; totalDeposited: BigNumberish },\n  percentFloat: number\n) {\n  const percentWei = toBNWei(percentFloat);\n  return {\n    position: {\n      ...calculateRemoval(BigNumber.from(values.totalDeposited), percentWei),\n    },\n    fees: {\n      ...calculateRemoval(BigNumber.from(values.feesEarned), percentWei),\n    },\n    total: {\n      ...calculateRemoval(BigNumber.from(values.positionValue), percentWei),\n    },\n  };\n}\nfunction joinUserState(\n  poolState: Pool,\n  eventState: bridgePool.EventState,\n  userState: Awaited<ReturnType<UserState[\"read\"]>>\n): User {\n  const positionValue = BigNumber.from(poolState.exchangeRateCurrent)\n    .mul(userState.balanceOf)\n    .div(fixedPointAdjustment);\n  const totalDeposited = BigNumber.from(eventState.tokens[userState.address] || \"0\");\n  const feesEarned = positionValue.sub(totalDeposited);\n  return {\n    address: userState.address,\n    poolAddress: poolState.address,\n    lpTokens: userState.balanceOf.toString(),\n    positionValue: positionValue.toString(),\n    totalDeposited: totalDeposited.toString(),\n    feesEarned: feesEarned.toString(),\n  };\n}\nfunction joinPoolState(\n  poolState: Awaited<ReturnType<PoolState[\"read\"]>>,\n  latestBlock: Block,\n  previousBlock: Block,\n  rateModel?: RateModel\n): Pool {\n  const totalPoolSize = poolState.liquidReserves.add(poolState.utilizedReserves);\n  const secondsElapsed = latestBlock.timestamp - previousBlock.timestamp;\n  const blocksElapsed = latestBlock.number - previousBlock.number;\n  const exchangeRatePrevious = poolState.exchangeRatePrevious.toString();\n  const exchangeRateCurrent = poolState.exchangeRateCurrent.toString();\n\n  const estimatedApy = calcPeriodicCompoundInterest(\n    exchangeRatePrevious,\n    exchangeRateCurrent,\n    secondsElapsed,\n    SECONDS_PER_YEAR\n  );\n  const estimatedApr = calcApr(exchangeRatePrevious, exchangeRateCurrent, secondsElapsed, SECONDS_PER_YEAR);\n  let projectedApr = \"\";\n\n  if (rateModel) {\n    projectedApr = fromWei(\n      calculateInstantaneousRate(rateModel, poolState.liquidityUtilizationCurrent)\n        .mul(poolState.liquidityUtilizationCurrent)\n        .div(fixedPointAdjustment)\n    );\n  }\n\n  return {\n    address: poolState.address,\n    totalPoolSize: totalPoolSize.toString(),\n    l1Token: poolState.l1Token,\n    liquidReserves: poolState.liquidReserves.toString(),\n    pendingReserves: poolState.pendingReserves.toString(),\n    exchangeRateCurrent: poolState.exchangeRateCurrent.toString(),\n    exchangeRatePrevious: poolState.exchangeRatePrevious.toString(),\n    estimatedApy,\n    estimatedApr,\n    blocksElapsed,\n    secondsElapsed,\n    liquidityUtilizationCurrent: poolState.liquidityUtilizationCurrent.toString(),\n    projectedApr,\n    utilizedReserves: poolState.utilizedReserves.toString(),\n  };\n}\nexport class ReadPoolClient {\n  private poolState: PoolState;\n  private multicall: Multicall2;\n  private contract: bridgePool.Instance;\n  private batchRead: BatchReadWithErrorsType;\n  constructor(private address: string, private provider: Provider, private multicallAddress: string) {\n    this.multicall = new Multicall2(multicallAddress, provider);\n    this.contract = bridgePool.connect(address, provider);\n    this.batchRead = BatchReadWithErrors(this.multicall)(this.contract);\n    this.poolState = new PoolState(this.batchRead, this.contract, address);\n  }\n  public async read(latestBlock: number) {\n    return this.poolState.read(latestBlock);\n  }\n}\nexport function validateWithdraw(pool: Pool, user: User, lpTokenAmount: BigNumberish) {\n  const l1TokensToReturn = BigNumber.from(lpTokenAmount).mul(pool.exchangeRateCurrent).div(fixedPointAdjustment);\n  assert(BigNumber.from(l1TokensToReturn).gt(\"0\"), \"Must withdraw amount greater than 0\");\n  assert(\n    BigNumber.from(pool.liquidReserves).gte(l1TokensToReturn.add(pool.pendingReserves)),\n    \"Utilization too high to remove that amount, try lowering withdraw amount\"\n  );\n  assert(BigNumber.from(lpTokenAmount).lte(user.lpTokens), \"You cannot withdraw more than you have\");\n  return { lpTokenAmount, l1TokensToReturn: l1TokensToReturn.toString() };\n}\n\nexport class Client {\n  private poolContracts: Record<string, bridgePool.Instance> = {};\n  private multicall: Multicall2;\n  private transactionManagers: Record<string, ReturnType<typeof TransactionManager>> = {};\n  private state: State = { pools: {}, users: {}, transactions: {} };\n  private batchRead: ReturnType<typeof BatchReadWithErrors>;\n  private poolEvents: Record<string, PoolEventState> = {};\n  private intervalStarted = false;\n  private rateModelInstance: rateModelStore.Instance;\n  constructor(private config: Config, private deps: Dependencies, private emit: EmitState) {\n    this.multicall = new Multicall2(config.multicall2Address, deps.provider);\n    this.batchRead = BatchReadWithErrors(this.multicall);\n    this.rateModelInstance = rateModelStore.connect(config.rateModelStoreAddress || ADDRESSES.RateModel, deps.provider);\n  }\n  private getOrCreatePoolContract(address: string) {\n    if (this.poolContracts[address]) return this.poolContracts[address];\n    const contract = bridgePool.connect(address, this.deps.provider);\n    this.poolContracts[address] = contract;\n    return contract;\n  }\n  private getOrCreatePoolEvents(poolAddress: string) {\n    if (this.poolEvents[poolAddress]) return this.poolEvents[poolAddress];\n    this.poolEvents[poolAddress] = new PoolEventState(this.getOrCreatePoolContract(poolAddress));\n    return this.poolEvents[poolAddress];\n  }\n  private getOrCreateTransactionManager(signer: Signer, address: string) {\n    if (this.transactionManagers[address]) return this.transactionManagers[address];\n    const txman = TransactionManager({ confirmations: this.config.confirmations }, signer, (event, id, data) => {\n      if (event === \"submitted\") {\n        this.state.transactions[id].state = event;\n        this.state.transactions[id].hash = data as string;\n        this.emit([\"transactions\", id], { ...this.state.transactions[id] });\n      }\n      if (event === \"mined\") {\n        const txReceipt = data as TransactionReceipt;\n        this.state.transactions[id].state = event;\n        this.state.transactions[id].receipt = txReceipt;\n        this.emit([\"transactions\", id], { ...this.state.transactions[id] });\n        // trigger pool and user update for a known mined transaction\n        const tx = this.state.transactions[id];\n        this.updatePool(tx.toAddress)\n          .then(() => {\n            return this.updateUserWithTransaction(tx.fromAddress, tx.toAddress, txReceipt);\n          })\n          .catch((err) => {\n            this.emit([\"error\"], err);\n          });\n      }\n      if (event === \"error\") {\n        this.state.transactions[id].state = event;\n        this.state.transactions[id].error = data as Error;\n        this.emit([\"transactions\", id], { ...this.state.transactions[id] });\n      }\n    });\n    this.transactionManagers[address] = txman;\n    return txman;\n  }\n  async addEthLiquidity(signer: Signer, pool: string, l1TokenAmount: BigNumberish, overrides: Overrides = {}) {\n    const userAddress = await signer.getAddress();\n    const contract = this.getOrCreatePoolContract(pool);\n    const txman = this.getOrCreateTransactionManager(signer, userAddress);\n\n    // dont allow override value here\n    const request = await contract.populateTransaction.addLiquidity(l1TokenAmount, {\n      ...overrides,\n      value: l1TokenAmount,\n    });\n    const id = await txman.request(request);\n\n    this.state.transactions[id] = {\n      id,\n      state: \"requested\",\n      toAddress: pool,\n      fromAddress: userAddress,\n      type: \"Add Liquidity\",\n      description: `Adding ETH to pool`,\n      request,\n    };\n    this.emit([\"transactions\", id], { ...this.state.transactions[id] });\n    await txman.update();\n    return id;\n  }\n  async addTokenLiquidity(signer: Signer, pool: string, l1TokenAmount: BigNumberish, overrides: Overrides = {}) {\n    const userAddress = await signer.getAddress();\n    const contract = this.getOrCreatePoolContract(pool);\n    const txman = this.getOrCreateTransactionManager(signer, userAddress);\n\n    const request = await contract.populateTransaction.addLiquidity(l1TokenAmount, overrides);\n    const id = await txman.request(request);\n\n    this.state.transactions[id] = {\n      id,\n      state: \"requested\",\n      toAddress: pool,\n      fromAddress: userAddress,\n      type: \"Add Liquidity\",\n      description: `Adding Tokens to pool`,\n      request,\n    };\n\n    this.emit([\"transactions\", id], { ...this.state.transactions[id] });\n    await txman.update();\n    return id;\n  }\n  async validateWithdraw(poolAddress: string, userAddress: string, lpAmount: BigNumberish) {\n    if (!this.hasPool(poolAddress)) {\n      await this.updatePool(poolAddress);\n    }\n    const poolState = this.getPool(poolAddress);\n    if (!this.hasUser(poolAddress, userAddress)) {\n      await this.updateUser(poolAddress, userAddress);\n    }\n    const userState = this.getUser(poolAddress, userAddress);\n    return validateWithdraw(poolState, userState, lpAmount);\n  }\n  async removeTokenLiquidity(signer: Signer, pool: string, lpTokenAmount: BigNumberish, overrides: Overrides = {}) {\n    const userAddress = await signer.getAddress();\n    await this.validateWithdraw(pool, userAddress, lpTokenAmount);\n    const contract = this.getOrCreatePoolContract(pool);\n    const txman = this.getOrCreateTransactionManager(signer, userAddress);\n\n    const request = await contract.populateTransaction.removeLiquidity(lpTokenAmount, false, overrides);\n    const id = await txman.request(request);\n\n    this.state.transactions[id] = {\n      id,\n      state: \"requested\",\n      toAddress: pool,\n      fromAddress: userAddress,\n      type: \"Remove Liquidity\",\n      description: `Withdrawing Tokens from pool`,\n      request,\n    };\n\n    this.emit([\"transactions\", id], { ...this.state.transactions[id] });\n    await txman.update();\n    return id;\n  }\n  async removeEthliquidity(signer: Signer, pool: string, lpTokenAmount: BigNumberish, overrides: Overrides = {}) {\n    const userAddress = await signer.getAddress();\n    await this.validateWithdraw(pool, userAddress, lpTokenAmount);\n    const contract = this.getOrCreatePoolContract(pool);\n    const txman = this.getOrCreateTransactionManager(signer, userAddress);\n\n    const request = await contract.populateTransaction.removeLiquidity(lpTokenAmount, true, overrides);\n    const id = await txman.request(request);\n\n    this.state.transactions[id] = {\n      id,\n      state: \"requested\",\n      toAddress: pool,\n      fromAddress: userAddress,\n      type: \"Remove Liquidity\",\n      description: `Withdrawing Eth from pool`,\n      request,\n    };\n    this.emit([\"transactions\", id], { ...this.state.transactions[id] });\n    await txman.update();\n    return id;\n  }\n  getPool(poolAddress: string) {\n    return this.state.pools[poolAddress];\n  }\n  hasPool(poolAddress: string) {\n    return Boolean(this.state.pools[poolAddress]);\n  }\n  getUser(poolAddress: string, userAddress: string) {\n    return get(this.state, [\"users\", userAddress, poolAddress]);\n  }\n  hasUser(poolAddress: string, userAddress: string) {\n    return has(this.state, [\"users\", userAddress, poolAddress]);\n  }\n  hasTx(id: string) {\n    return has(this.state, [\"transactions\", id]);\n  }\n  getTx(id: string) {\n    return get(this.state, [\"transactions\", id]);\n  }\n  private async updateUserWithTransaction(userAddress: string, poolAddress: string, txReceipt: TransactionReceipt) {\n    const contract = this.getOrCreatePoolContract(poolAddress);\n    if (!this.hasPool(poolAddress)) {\n      await this.updatePool(poolAddress);\n    }\n    const poolState = this.getPool(poolAddress);\n    const getUserState = new UserState(contract);\n    const getPoolEventState = this.getOrCreatePoolEvents(poolAddress);\n    const userState = await getUserState.read(userAddress);\n    const eventState = await getPoolEventState.readTxReceipt(txReceipt);\n    set(this.state, [\"users\", userAddress, poolAddress], joinUserState(poolState, eventState, userState));\n    this.emit([\"users\", userAddress, poolAddress], this.state.users[userAddress][poolAddress]);\n  }\n  async updateUser(userAddress: string, poolAddress: string) {\n    const contract = this.getOrCreatePoolContract(poolAddress);\n    if (!this.hasPool(poolAddress)) {\n      await this.updatePool(poolAddress);\n    }\n    const poolState = this.getPool(poolAddress);\n    const latestBlock = (await this.deps.provider.getBlock(\"latest\")).number;\n    const getUserState = new UserState(contract);\n    const getPoolEventState = this.getOrCreatePoolEvents(poolAddress);\n    const userState = await getUserState.read(userAddress);\n    const eventState = await getPoolEventState.read(latestBlock, userAddress);\n    set(this.state, [\"users\", userAddress, poolAddress], joinUserState(poolState, eventState, userState));\n    this.emit([\"users\", userAddress, poolAddress], this.state.users[userAddress][poolAddress]);\n  }\n  async updatePool(poolAddress: string) {\n    // default to 100 block delta unless specified otherwise in config\n    const { blockDelta = DEFAULT_BLOCK_DELTA } = this.config;\n    const contract = this.getOrCreatePoolContract(poolAddress);\n    const pool = new PoolState(this.batchRead(contract), contract, poolAddress);\n    const latestBlock = await this.deps.provider.getBlock(\"latest\");\n    const previousBlock = await this.deps.provider.getBlock(latestBlock.number - blockDelta);\n    const state = await pool.read(latestBlock.number, previousBlock.number);\n\n    let rateModel: RateModel | undefined = undefined;\n    try {\n      const rateModelRaw = await this.rateModelInstance.callStatic.l1TokenRateModels(state.l1Token);\n      rateModel = parseAndReturnRateModelFromString(rateModelRaw);\n    } catch (err) {\n      // we could swallow this error or just log it since getting the rate model is optional,\n      // but we will just emit it to the caller and let them decide what to do with it.\n      this.emit([\"error\"], err);\n    }\n\n    this.state.pools[poolAddress] = joinPoolState(state, latestBlock, previousBlock, rateModel);\n    this.emit([\"pools\", poolAddress], this.state.pools[poolAddress]);\n  }\n  async updateTransactions() {\n    for (const txMan of Object.values(this.transactionManagers)) {\n      try {\n        await txMan.update();\n      } catch (err) {\n        this.emit([\"error\"], err);\n      }\n    }\n  }\n  // starts transaction checking intervals, defaults to 30 seconds\n  async startInterval(delayMs = 30000) {\n    assert(!this.intervalStarted, \"Interval already started, try stopping first\");\n    this.intervalStarted = true;\n    loop(async () => {\n      assert(this.intervalStarted, \"Bridgepool Interval Stopped\");\n      await this.updateTransactions();\n    }, delayMs).catch((err) => {\n      this.emit([\"error\"], err);\n    });\n  }\n  // starts transaction checking intervals\n  async stopInterval() {\n    this.intervalStarted = false;\n  }\n}\n","import assert from \"assert\";\nimport { Provider } from \"@ethersproject/providers\";\nimport { Contract, Signer, BigNumber, ContractTransaction } from \"ethers\";\nimport { predeploys, getContractInterface } from \"@eth-optimism/contracts\";\nimport { ERC20Ethers__factory, OptimismL1StandardBridgeEthers__factory } from \"@uma/contracts-node\";\nimport { Watcher } from \"@eth-optimism/core-utils\";\n\nexport const l1Contracts: { Proxy__OVM_L1StandardBridge: { [chainId: number]: string } } = {\n  Proxy__OVM_L1StandardBridge: {\n    1: \"0x99C9fc46f92E8a1c0deC1b1747d010903E884bE1\",\n    42: \"0x22F24361D548e5FaAfb36d1437839f080363982B\",\n  },\n};\n\nexport class OptimismBridgeClient {\n  // Gas limit for the L2 transaction initiated by the Sequencer\n  public readonly L2_DEPOSIT_GAS_LIMIT = 2000000;\n\n  public getL1BridgeAddress(chainId: number): string {\n    const l1StandardBridgeAddress = l1Contracts.Proxy__OVM_L1StandardBridge[chainId];\n    assert(typeof l1StandardBridgeAddress === \"string\", \"Chain not supported\");\n    return l1StandardBridgeAddress;\n  }\n\n  /**\n   * Create a transaction to deposit ERC20 tokens to Optimism\n   * @param l1Signer The L1 wallet provider (signer)\n   * @param l1Erc20Address The L1 token address\n   * @param l2Erc20Address The L2 token address\n   * @param amount The amount to be deposited in wei\n   * @returns The submitted transaction\n   */\n  async depositERC20(l1Signer: Signer, l1Erc20Address: string, l2Erc20Address: string, amount: BigNumber) {\n    const chainId = await l1Signer.getChainId();\n    const l1StandardBridgeAddress = this.getL1BridgeAddress(chainId);\n    const l1StandardBridge = OptimismL1StandardBridgeEthers__factory.connect(l1StandardBridgeAddress, l1Signer);\n    const l1_ERC20 = ERC20Ethers__factory.connect(l1Erc20Address, l1Signer);\n    return l1StandardBridge.depositERC20(l1_ERC20.address, l2Erc20Address, amount, this.L2_DEPOSIT_GAS_LIMIT, \"0x\");\n  }\n\n  /**\n   * Create transaction to deposit ETH to Optimism\n   * @param l1Signer The L1 wallet provider (signer)\n   * @param amount The amount to be deposited in wei\n   * @returns The submitted transaction\n   */\n  async depositEth(l1Signer: Signer, amount: BigNumber) {\n    const chainId = await l1Signer.getChainId();\n    const l1StandardBridgeAddress = this.getL1BridgeAddress(chainId);\n    const l1StandardBridge = OptimismL1StandardBridgeEthers__factory.connect(l1StandardBridgeAddress, l1Signer);\n    return l1StandardBridge.depositETH(this.L2_DEPOSIT_GAS_LIMIT, \"0x\", { value: amount });\n  }\n\n  /**\n   * Wait a L1 transaction to be relayed by the L1 Cross Domain Messenger\n   * @param tx The L1 -> L2 transaction\n   * @param l1RpcProvider Layer 1 RPC provider\n   * @param l2RpcProvider Layer 2 RPC provider\n   * @returns The transaction receipt\n   */\n  async waitRelayToL2(tx: ContractTransaction, l1RpcProvider: Provider, l2RpcProvider: Provider) {\n    const l2Messenger = new Contract(\n      predeploys.L2CrossDomainMessenger,\n      getContractInterface(\"L2CrossDomainMessenger\"),\n      l2RpcProvider\n    );\n    const l1Messenger = new Contract(\n      await l2Messenger.l1CrossDomainMessenger(),\n      getContractInterface(\"L1CrossDomainMessenger\"),\n      l1RpcProvider\n    );\n    // Watch for messages to be relayed between L1 and L2.\n    const watcher = new Watcher({\n      l1: {\n        provider: l1RpcProvider,\n        messengerAddress: l1Messenger.address,\n      },\n      l2: {\n        provider: l2RpcProvider,\n        messengerAddress: l2Messenger.address,\n      },\n    });\n    // Wait for the message to be relayed to L2\n    const [msgHash1] = await watcher.getMessageHashesFromL1Tx(tx.hash);\n    return watcher.getL2TransactionReceipt(msgHash1, true);\n  }\n\n  public async checkAllowance(l1Signer: Signer, l1Erc20Address: string) {\n    const chainId = await l1Signer.getChainId();\n    const l1StandardBridgeAddress = this.getL1BridgeAddress(chainId);\n    const l1_ERC20 = ERC20Ethers__factory.connect(l1Erc20Address, l1Signer);\n    return l1_ERC20.allowance(await l1Signer.getAddress(), l1StandardBridgeAddress);\n  }\n\n  public async approve(l1Signer: Signer, l1Erc20Address: string, amount: BigNumber) {\n    const chainId = await l1Signer.getChainId();\n    const l1StandardBridgeAddress = this.getL1BridgeAddress(chainId);\n    const l1_ERC20 = ERC20Ethers__factory.connect(l1Erc20Address, l1Signer);\n    return l1_ERC20.approve(l1StandardBridgeAddress, amount);\n  }\n}\n","import assert from \"assert\";\nimport { ethers } from \"ethers\";\nimport { Provider } from \"@ethersproject/providers\";\nimport { Signer, BigNumber, ContractTransaction } from \"ethers\";\nimport {\n  ERC20Ethers__factory,\n  OptimismL1StandardBridgeEthers__factory,\n  BobaAddressManagerEthers__factory,\n} from \"@uma/contracts-node\";\nimport { Watcher } from \"@eth-optimism/core-utils\";\nimport { SignerOrProvider } from \"../..\";\n\nexport const l1Contracts: { ADDRESS_MANAGER_ADDRESS: { [chainId: number]: string } } = {\n  ADDRESS_MANAGER_ADDRESS: {\n    // mainnet\n    1: \"0x8376ac6C3f73a25Dd994E0b0669ca7ee0C02F089\",\n    // rinkeby\n    4: \"0x93A96D6A5beb1F661cf052722A1424CDDA3e9418\",\n  },\n};\n\nexport class BobaBridgeClient {\n  // Gas limit for the L2 transaction initiated by the Sequencer\n  public readonly L2_DEPOSIT_GAS_LIMIT = 1300000;\n\n  public async getL1BridgeAddress(chainId: number, l1Provider: SignerOrProvider): Promise<string> {\n    const addressManagerAddress = l1Contracts.ADDRESS_MANAGER_ADDRESS[chainId];\n    assert(typeof addressManagerAddress === \"string\", \"Chain not supported\");\n    const addressManager = BobaAddressManagerEthers__factory.connect(addressManagerAddress, l1Provider);\n    const l1StandardBridgeAddress = await addressManager.getAddress(\"Proxy__OVM_L1StandardBridge\");\n\n    return l1StandardBridgeAddress;\n  }\n\n  /**\n   * Create a transaction to deposit ERC20 tokens to Boba. Mainnet and Rinkeby are currently supported\n   * @param l1Signer The L1 wallet provider (signer)\n   * @param l1Erc20Address The L1 token address\n   * @param l2Erc20Address The L2 token address\n   * @param amount The amount to be deposited in wei\n   * @returns The submitted transaction\n   */\n  async depositERC20(l1Signer: Signer, l1Erc20Address: string, l2Erc20Address: string, amount: BigNumber) {\n    const chainId = await l1Signer.getChainId();\n    const l1StandardBridgeAddress = await this.getL1BridgeAddress(chainId, l1Signer);\n    const l1StandardBridge = OptimismL1StandardBridgeEthers__factory.connect(l1StandardBridgeAddress, l1Signer);\n    const l1_ERC20 = ERC20Ethers__factory.connect(l1Erc20Address, l1Signer);\n    return l1StandardBridge.depositERC20(\n      l1_ERC20.address,\n      l2Erc20Address,\n      amount,\n      this.L2_DEPOSIT_GAS_LIMIT,\n      ethers.utils.formatBytes32String(new Date().getTime().toString())\n    );\n  }\n\n  /**\n   * Create transaction to deposit ETH to Boba\n   * @param l1Signer The L1 wallet provider (signer)\n   * @param amount The amount to be deposited in wei\n   * @returns The submitted transaction\n   */\n  async depositEth(l1Signer: Signer, amount: BigNumber) {\n    const chainId = await l1Signer.getChainId();\n    const l1StandardBridgeAddress = await this.getL1BridgeAddress(chainId, l1Signer);\n    const l1StandardBridge = OptimismL1StandardBridgeEthers__factory.connect(l1StandardBridgeAddress, l1Signer);\n    return l1StandardBridge.depositETH(\n      this.L2_DEPOSIT_GAS_LIMIT,\n      ethers.utils.formatBytes32String(new Date().getTime().toString()),\n      { value: amount }\n    );\n  }\n\n  /**\n   * Wait a L1 transaction to be relayed by the L1 Cross Domain Messenger\n   * @param tx The L1 -> L2 transaction\n   * @param l1RpcProvider Layer 1 RPC provider\n   * @param l2RpcProvider Layer 2 RPC provider\n   * @returns The transaction receipt\n   */\n  async waitRelayToL2(tx: ContractTransaction, l1RpcProvider: Provider, l2RpcProvider: Provider) {\n    const chainId = (await l1RpcProvider.getNetwork()).chainId;\n    const addressManagerAddress = l1Contracts.ADDRESS_MANAGER_ADDRESS[chainId];\n    assert(typeof addressManagerAddress === \"string\", \"Chain not supported\");\n    const addressManager = BobaAddressManagerEthers__factory.connect(addressManagerAddress, l1RpcProvider);\n    const proxyL1CrossDomainMessengerAddress = await addressManager.getAddress(\"Proxy__L1CrossDomainMessenger\");\n    const l2CrossDomainMessenger = await addressManager.getAddress(\"L2CrossDomainMessenger\");\n    // Watch for messages to be relayed between L1 and L2.\n    const watcher = new Watcher({\n      l1: {\n        provider: l1RpcProvider,\n        messengerAddress: proxyL1CrossDomainMessengerAddress,\n      },\n      l2: {\n        provider: l2RpcProvider,\n        messengerAddress: l2CrossDomainMessenger,\n      },\n    });\n    // Wait for the message to be relayed to L2\n    const [msgHash] = await watcher.getMessageHashesFromL1Tx(tx.hash);\n    return watcher.getL2TransactionReceipt(msgHash, true);\n  }\n\n  public async checkAllowance(l1Signer: Signer, l1Erc20Address: string) {\n    const chainId = await l1Signer.getChainId();\n    const l1StandardBridgeAddress = await this.getL1BridgeAddress(chainId, l1Signer);\n    const l1_ERC20 = ERC20Ethers__factory.connect(l1Erc20Address, l1Signer);\n    return l1_ERC20.allowance(await l1Signer.getAddress(), l1StandardBridgeAddress);\n  }\n\n  public async approve(l1Signer: Signer, l1Erc20Address: string, amount: BigNumber) {\n    const chainId = await l1Signer.getChainId();\n    const l1StandardBridgeAddress = await this.getL1BridgeAddress(chainId, l1Signer);\n    const l1_ERC20 = ERC20Ethers__factory.connect(l1Erc20Address, l1Signer);\n    return l1_ERC20.approve(l1StandardBridgeAddress, amount);\n  }\n}\n","import { exists } from \"../utils\";\n\n// This error should be thrown if an expected value does not exist\nexport class ExistenceError extends Error {\n  constructor(message = \"\") {\n    super(message);\n    this.name = \"ExistenceError\";\n    // if this isnt included, we cannot use instanceof to check the type\n    Object.setPrototypeOf(this, ExistenceError.prototype);\n  }\n}\n\n// Special assert which checks for existence and throw existence error\nexport function assertExists<T>(condition: T, message = \"\"): asserts condition is NonNullable<T> {\n  if (!exists(condition)) throw new ExistenceError(message);\n}\n\n// Ignore only existence errors. If thrown properly this can be used to convert a non existent value to undefined.\nexport function ignoreExistenceError<X>(call: () => X): X | undefined {\n  try {\n    return call();\n  } catch (err) {\n    if (err instanceof ExistenceError) return undefined;\n    throw err;\n  }\n}\n\n// same function but for async calls\nexport async function ignoreExistenceErrorAsync<X>(call: () => X): Promise<X | undefined> {\n  try {\n    return await call();\n  } catch (err) {\n    if (err instanceof ExistenceError) return undefined;\n    throw err;\n  }\n}\n","import { JsonRpcSigner, BigNumber, Web3Provider, FallbackProvider } from \"./ethers\";\nimport type { erc20, sortedRequests } from \"../services\";\nimport { Request, OracleInterface } from \"./interfaces\";\nimport type Multicall2 from \"../../multicall2\";\nimport { Context, Memory } from \"./statemachine\";\nimport { RequestState, RequestKey } from \"../../clients/optimisticOracle\";\n\n// create partial picker: https://stackoverflow.com/questions/43159887/make-a-single-property-optional-in-typescript\ntype Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\ntype PartialBy<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;\n\nexport { Context, Memory };\n\nexport type ChainServices = {\n  multicall2: Multicall2;\n  provider: FallbackProvider;\n  erc20s: Record<string, erc20.Erc20>;\n  optimisticOracle: OracleInterface;\n};\n\nexport type Services = {\n  sortedRequests?: sortedRequests.SortedRequests;\n  chains?: Record<number, Partial<ChainServices>>;\n};\n\n// this is required data in order to add a new chain to users wallet\nexport type ChainMetadata = {\n  chainId: number;\n  chainName: string;\n  // require at least 1 url\n  rpcUrls: [string, ...string[]];\n  blockExplorerUrls: [string, ...string[]];\n  nativeCurrency: {\n    name: string;\n    symbol: string;\n    decimals: number;\n  };\n};\n\nexport type ChainConfig = ChainMetadata & {\n  checkTxIntervalSec: number;\n  multicall2Address?: string;\n  optimisticOracleAddress: string;\n  // specify a block number which we do not care about blocks before this. This effectively prevents listing\n  // requests older than this. If not specified, we will lookback to block 0 when considering request history.\n  earliestBlockNumber?: number;\n  maxEventRangeQuery?: number;\n  disableFetchEventBased?: boolean;\n};\n\nexport type InputRequestWithOracleType = InputRequest & { oracleType: OracleType };\nexport type RequestWithOracleType = Request & { oracleType: OracleType };\nexport type RequestsWithOracleType = RequestWithOracleType[];\n// partial config lets user omit some fields which we can infer internally using contracts-frontend\nexport type PartialChainConfig = PartialBy<ChainConfig, \"chainId\" | \"checkTxIntervalSec\" | \"earliestBlockNumber\">;\n\nexport enum OracleType {\n  Optimistic = \"Optimistic\",\n  Skinny = \"Skinny\",\n  OptimisticV2 = \"OptimisticV2\",\n}\n// config definition\nexport type Config = {\n  chains: Record<number, ChainConfig>;\n  oracleType: OracleType;\n};\n\nexport type PartialConfig = {\n  chains: Record<number, PartialChainConfig>;\n};\n\nexport type PartialConfigTable = {\n  [key in OracleType]?: PartialConfig;\n};\nexport type Balances = Record<string, BigNumber>;\n\nexport type User = {\n  address: string;\n  chainId: number;\n  signer: JsonRpcSigner;\n  provider: Web3Provider;\n};\n\nexport enum Flag {\n  MissingRequest = \"MissingRequest\", // the client does not know the request, use client.setActiveRequest\n  MissingUser = \"MissingUser\", // client does not have user data, use client.setUser\n  WrongChain = \"WrongChain\", // user and request chain ids do not match, switch chains with client.switchOrAddChain\n  CanPropose = \"CanPropose\", // The on chain request is in a state where someone could propose, use client.proposePrice\n  CanDispute = \"CanDispute\", // The on chain request is in a state where someone could dispute, use client.disputePrice\n  CanSettle = \"CanSettle\", // The on chain request is in a stae where someone could settle the request.\n  InDvmVote = \"InDvmVote\", // Proposed answer has been disputed and passed to dvm for full vote.\n  RequestSettled = \"RequestSettled\", // Request is finalized, no more changes.\n  InsufficientBalance = \"InsufficientBalance\", // The user does not have enough balance to cover bond collateral for dispute/propose\n  InsufficientApproval = \"InsufficientApproval\", // The oracle contract does not have enough approval to cover bond for dispute/propose, use client.approve\n  ChainChangeInProgress = \"ChainChangeInProgress\", // The user is changing his chain\n  ProposalTxInProgress = \"ProposalTxInProgress\", // The user is sending a proposal tx\n  ApprovalTxInProgress = \"ApprovalTxInProgress\", // The user is sending an approval tx\n  DisputeTxInProgress = \"DisputeTxInProgress\", // The user is sending a dispute tx\n}\nexport type Flags = Record<Flag, boolean>;\n\nexport type InputRequest = RequestKey & { chainId: number };\n\nexport type Inputs = {\n  request: InputRequest;\n  user: Partial<User>;\n};\n\nexport type Erc20Props = {\n  address: string;\n  symbol: string;\n  name: string;\n  decimals: number;\n  totalSupply: BigNumber;\n};\n\nexport type Erc20 = {\n  props: Partial<Erc20Props>;\n  allowances: Record<string, Balances>;\n  balances: Balances;\n};\n\nexport { RequestState };\n\nexport type OptimisticOracle = {\n  address: string;\n  defaultLiveness: BigNumber;\n  requests: Record<string, Request>;\n};\n\nexport type Chain = {\n  erc20s: Record<string, Partial<Erc20>>;\n  optimisticOracle: Partial<OptimisticOracle>;\n  currentTime: BigNumber;\n};\n\nexport type State = Partial<{\n  error: Error;\n  inputs: Partial<Inputs>;\n  chains: Record<number, Partial<Chain>>;\n  config: Config;\n  services: Services;\n  commands: Record<string, Context<unknown, unknown & Memory>>;\n  descendingRequests: Request[];\n}>;\n","import type { ContextClient } from \"../services/statemachines/utils\";\n\n// memory can be any non primitive type or undefined\n// eslint-disable-next-line\nexport type Memory = object | undefined;\n\nexport enum ContextType {\n  setUser = \"setUser\",\n  setActiveRequest = \"setActiveRequest\",\n  approve = \"approve\",\n  clearUser = \"clearUser\",\n  disputePrice = \"disputePrice\",\n  proposePrice = \"proposePrice\",\n  switchOrAddChain = \"switchOrAddChain\",\n  pollActiveRequest = \"pollActiveRequest\",\n  pollActiveUser = \"pollActiveUser\",\n  fetchPastEvents = \"fetchPastEvents\",\n  pollNewEvents = \"pollNewEvents\",\n  setActiveRequestByTransaction = \"setActiveRequestByTransaction\",\n  settle = \"settle\",\n  updateActiveRequest = \"updateActiveRequest\",\n  fetchEventBased = \"fetchEventBased\",\n}\n\nexport type ContextProps = {\n  id: string;\n  user?: string;\n  type: ContextType;\n  state: \"done\" | \"error\" | string;\n  done: boolean;\n  created: number;\n  updated?: number;\n  error?: Error;\n  sleep?: number;\n};\n\nexport type Context<P = undefined, M extends Memory = undefined> = ContextProps & {\n  memory: M;\n  params: P;\n};\n\nexport type Handler<P = undefined, M extends Memory = undefined> = (\n  params: P,\n  memory: M,\n  client: ContextClient\n) => string | undefined | void | Promise<string | undefined | void>;\n\nexport type Handlers<P = undefined, M extends Memory = undefined> = Record<string, Handler<P, M>> & {\n  start: Handler<P, M>;\n};\n\nexport type Step<P = undefined, M extends Memory = undefined> = (\n  context: Context<P, M>,\n  now: number\n) => Promise<Context<P, M>>;\n\nexport type Emit<P = undefined, M extends Memory = undefined> = (context: Context<P, M>) => void;\n","import assert from \"assert\";\nimport { ethers } from \"ethers\";\nimport sortedLastIndexBy from \"lodash/sortedLastIndexBy\";\nimport { ignoreExistenceError } from \"./errors\";\n// this request id does not include chain id\nexport { requestId } from \"../clients/optimisticOracle\";\n\nimport {\n  State,\n  RequestState,\n  Flag,\n  Flags,\n  PartialChainConfig,\n  ChainConfig,\n  PartialConfig,\n  ChainMetadata,\n  Config,\n  OracleType,\n} from \"./types/state\";\nimport type { Provider, TransactionReceipt, BigNumberish } from \"./types/ethers\";\nimport { ContextType } from \"./types/statemachine\";\nimport { Read } from \"./store\";\n\nexport const getAddress = ethers.utils.getAddress;\nexport const hexValue = ethers.utils.hexValue;\n\nexport function initFlags(): Flags {\n  return {\n    [Flag.MissingRequest]: false,\n    [Flag.MissingUser]: false,\n    [Flag.WrongChain]: false,\n    [Flag.CanPropose]: false,\n    [Flag.CanDispute]: false,\n    [Flag.CanSettle]: false,\n    [Flag.InDvmVote]: false,\n    [Flag.RequestSettled]: false,\n    [Flag.InsufficientBalance]: false,\n    [Flag.InsufficientApproval]: false,\n    [Flag.ProposalTxInProgress]: false,\n    [Flag.ApprovalTxInProgress]: false,\n    [Flag.DisputeTxInProgress]: false,\n    [Flag.ChainChangeInProgress]: false,\n  };\n}\n\nexport const nowS = (now = Date.now()): number => Math.floor(now / 1000);\n\n// reduce global state into important UI boolean states. this should never throw errors.\nexport function getFlags(state: State): Record<Flag, boolean> {\n  const read = new Read(state);\n  const flags = initFlags();\n\n  const signer = ignoreExistenceError(read.signer);\n  flags[Flag.MissingUser] = signer ? false : true;\n\n  const inputRequest = ignoreExistenceError(read.inputRequest);\n  flags[Flag.MissingRequest] = inputRequest ? false : true;\n\n  const userChainId = ignoreExistenceError(read.userChainId);\n  const requestChainId = ignoreExistenceError(read.requestChainId);\n  flags[Flag.WrongChain] = userChainId && requestChainId ? userChainId !== requestChainId : false;\n\n  const request = ignoreExistenceError(read.request);\n\n  // these are a bit redundant with request state, but just an alternate way to see current request state\n  flags[Flag.CanPropose] = request?.state === RequestState.Requested;\n  flags[Flag.CanDispute] = request?.state === RequestState.Proposed;\n  flags[Flag.CanSettle] = request?.state === RequestState.Resolved || request?.state === RequestState.Expired;\n  flags[Flag.InDvmVote] = request?.state === RequestState.Disputed;\n  flags[Flag.RequestSettled] = request?.state === RequestState.Settled;\n\n  if (request && request.bond && request.finalFee) {\n    const totalBond = request.bond.add(request.finalFee);\n    const userCollateralBalance = ignoreExistenceError(read.userCollateralBalance);\n    const userCollateralAllowance = ignoreExistenceError(read.userCollateralAllowance);\n    flags[Flag.InsufficientBalance] = userCollateralBalance ? userCollateralBalance.lt(totalBond) : false;\n    flags[Flag.InsufficientApproval] = userCollateralAllowance ? userCollateralAllowance.lt(totalBond) : false;\n  }\n\n  const userAddress = ignoreExistenceError(read.userAddress);\n  const commands = ignoreExistenceError(() => read.filterCommands({ done: false, user: userAddress }));\n  if (userAddress && commands) {\n    commands.forEach((command) => {\n      if (!flags[Flag.ProposalTxInProgress] && command.type === ContextType.proposePrice) {\n        flags[Flag.ProposalTxInProgress] = true;\n      }\n      if (!flags[Flag.DisputeTxInProgress] && command.type === ContextType.disputePrice) {\n        flags[Flag.DisputeTxInProgress] = true;\n      }\n      if (!flags[Flag.ApprovalTxInProgress] && command.type === ContextType.approve) {\n        flags[Flag.ApprovalTxInProgress] = true;\n      }\n      if (!flags[Flag.ChainChangeInProgress] && command.type === ContextType.switchOrAddChain) {\n        flags[Flag.ChainChangeInProgress] = true;\n      }\n    });\n  }\n\n  return flags;\n}\n\nexport function getMulticall2Address(chainId: number): string {\n  switch (chainId.toString()) {\n    case \"1\":\n      return getAddress(\"0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696\");\n    case \"4\":\n      return getAddress(\"0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696\");\n    case \"5\":\n      return getAddress(\"0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696\");\n    case \"42\":\n      return getAddress(\"0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696\");\n    default:\n      throw new Error(`No address found for deployment Multicall2 on chainId ${chainId}`);\n  }\n}\ntype AddressGetter = (chainId: number) => string;\ninterface AddressGetters {\n  getMulticall2Address: AddressGetter;\n}\n\nexport const DefaultChainConfig = ({ getMulticall2Address }: AddressGetters) => (\n  chainId: number,\n  chainConfig: PartialChainConfig\n): ChainConfig => {\n  let multicall2Address = chainConfig.multicall2Address;\n  try {\n    multicall2Address = multicall2Address || getMulticall2Address(chainId);\n  } catch (err) {\n    // ignore, multicall optional\n  }\n\n  const checkTxIntervalSec = chainConfig.checkTxIntervalSec || 5;\n\n  return {\n    ...chainConfig,\n    chainId,\n    multicall2Address,\n    checkTxIntervalSec,\n  };\n};\n\nexport const DefaultConfig = (getters: AddressGetters) => (config: PartialConfig, oracleType: OracleType): Config => {\n  return Object.entries(config.chains).reduce(\n    (config: Config, [chainId, chainConfig]) => {\n      config.chains[Number(chainId)] = DefaultChainConfig(getters)(Number(chainId), chainConfig);\n      return config;\n    },\n    { ...config, chains: {}, oracleType }\n  );\n};\n\nexport class TransactionConfirmer {\n  constructor(private provider: Provider) {}\n  async getReceipt(hash: string): Promise<TransactionReceipt> {\n    return this.provider.getTransactionReceipt(hash);\n  }\n  async isConfirmed(hash: string, confirmations = 1): Promise<false | TransactionReceipt> {\n    try {\n      const receipt = await this.getReceipt(hash);\n      if (receipt.confirmations >= confirmations) return receipt;\n    } catch (err) {\n      // do nothing\n    }\n    return false;\n  }\n}\n\nexport function chainConfigToChainMetadata(config: ChainConfig): ChainMetadata {\n  const {\n    // remove extra fields\n    checkTxIntervalSec,\n    multicall2Address,\n    optimisticOracleAddress,\n    earliestBlockNumber,\n    maxEventRangeQuery,\n    ...chainMetadata\n  } = config;\n  return chainMetadata;\n}\n\n// This state is meant for adjusting a start/end block when querying events. Some apis will fail if the range\n// is too big, so the following functions will adjust range dynamically.\nexport type RangeState = {\n  startBlock: number;\n  endBlock: number;\n  maxRange: number;\n  currentRange: number;\n  currentStart: number; // This is the start value you want for your query.\n  currentEnd: number; // this is the end value you want for your query.\n  done: boolean; // Signals we successfully queried the entire range.\n  multiplier?: number; // Multiplier increases or decreases range by this value, depending on success or failure\n};\n\n/**\n * rangeStart. This starts a new range query and sets defaults for state.  Use this as the first call before starting your queries\n *\n * @param {Pick} state\n * @returns {RangeState}\n */\nexport function rangeStart(\n  state: Pick<RangeState, \"startBlock\" | \"endBlock\" | \"multiplier\"> & { maxRange?: number }\n): RangeState {\n  const { startBlock, endBlock, multiplier = 2 } = state;\n  if (state.maxRange && state.maxRange > 0) {\n    const range = endBlock - startBlock;\n    assert(range > 0, \"End block must be higher than start block\");\n    const currentRange = Math.min(state.maxRange, range);\n    const currentStart = endBlock - currentRange;\n    const currentEnd = endBlock;\n    return {\n      done: false,\n      startBlock,\n      endBlock,\n      maxRange: state.maxRange,\n      currentRange,\n      currentStart,\n      currentEnd,\n      multiplier,\n    };\n  } else {\n    // the largest range we can have, since this is the users query for start and end\n    const maxRange = endBlock - startBlock;\n    assert(maxRange > 0, \"End block must be higher than start block\");\n    const currentStart = startBlock;\n    const currentEnd = endBlock;\n    const currentRange = maxRange;\n\n    return {\n      done: false,\n      startBlock,\n      endBlock,\n      maxRange,\n      currentRange,\n      currentStart,\n      currentEnd,\n      multiplier,\n    };\n  }\n}\n/**\n * rangeSuccessDescending. We have 2 ways of querying events, from oldest to newest, or newest to oldest. Typically we want them in order, from\n * oldest to newest, but for this particular case we want them newest to oldest, ie descending ( larger timestamp to smaller timestamp).\n * This function will increase the range between start/end block and return a new start/end to use since by calling this you are signalling\n * that the last range ended in a successful query.\n *\n * @param {RangeState} state\n * @returns {RangeState}\n */\nexport function rangeSuccessDescending(state: RangeState): RangeState {\n  const { startBlock, currentStart, maxRange, currentRange, multiplier = 2 } = state;\n  // we are done if we succeeded querying where the currentStart matches are initial start block\n  const done = currentStart <= startBlock;\n  // increase range up to max range for every successful query\n  const nextRange = Math.min(Math.ceil(currentRange * multiplier), maxRange);\n  // move our end point to the previously successful start, ie moving from newest to oldest\n  const nextEnd = currentStart;\n  // move our start block to the next range down\n  const nextStart = Math.max(nextEnd - nextRange, startBlock);\n  return {\n    ...state,\n    currentStart: nextStart,\n    currentEnd: nextEnd,\n    currentRange: nextRange,\n    done,\n  };\n}\n/**\n * rangeFailureDescending. Like the previous function, this will decrease the range between start/end for your query, because you are signalling\n * that the last query failed. It will also keep the end of your range the same, while moving the start range up. This is why\n * its considered descending, it will attempt to move from end to start, rather than start to end.\n *\n * @param {RangeState} state\n * @returns {RangeState}\n */\nexport function rangeFailureDescending(state: RangeState): RangeState {\n  const { startBlock, currentEnd, currentRange, multiplier = 2 } = state;\n  const nextRange = Math.floor(currentRange / multiplier);\n  // this will eventually throw an error if you keep calling this function, which protects us against re-querying a broken api in a loop\n  assert(nextRange > 0, \"Range must be above 0\");\n  // we stay at the same end block\n  const nextEnd = currentEnd;\n  // move our start block closer to the end block, shrinking the range\n  const nextStart = Math.max(nextEnd - nextRange, startBlock);\n  return {\n    ...state,\n    currentStart: nextStart,\n    currentEnd: nextEnd,\n    currentRange: nextRange,\n  };\n}\n\n/**\n * eventKey. Make a unique and sortable identifier string for an event\n *\n * @param {Event} event\n * @returns {string} - the unique id\n */\nexport function eventKey(event: {\n  blockNumber: BigNumberish;\n  transactionIndex: BigNumberish;\n  logIndex: BigNumberish;\n}): string {\n  return [\n    // we pad these because numbers of varying lengths will not sort correctly, ie \"10\" will incorrectly sort before \"9\", but \"09\" will be correct.\n    event.blockNumber.toString().padStart(16, \"0\"),\n    event.transactionIndex.toString().padStart(16, \"0\"),\n    event.logIndex?.toString().padStart(16, \"0\"),\n    // ~ is the last printable ascii char, so it does not interfere with sorting\n  ].join(\"~\");\n}\n/**\n * insertOrdered. Inserts items in an array maintaining sorted order, in this case lowest to highest. Does not check duplicates.\n * Mainly used for caching all known events, in order of oldest to newest.\n *\n * @param {T[]} array\n * @param {T} element\n * @param {Function} orderBy\n */\nexport function insertOrderedAscending<T>(array: T[], element: T, orderBy: (element: T) => string | number): T[] {\n  const index = sortedLastIndexBy(array, element, orderBy);\n  array.splice(index, 0, element);\n  return array;\n}\nexport function isUnique<T>(array: T[], element: T, id: (element: T) => string | number): boolean {\n  const elementId = id(element);\n  const found = array.find((next: T) => {\n    return id(next) === elementId;\n  });\n  return found === undefined;\n}\n\nexport function isSupportedOracleType(oracleType: string): oracleType is OracleType {\n  return oracleType in OracleType;\n}\n","import { erc20 } from \"../../clients\";\nimport Multicall2 from \"../../multicall2\";\nimport { BatchReadWithErrors, BatchReadWithErrorsType, Calls } from \"../../utils\";\nimport { Provider, Signer, BigNumberish, TransactionResponse } from \"../types/ethers\";\nimport { Erc20Props } from \"../types/state\";\n\nconst batchProps: Calls = [[\"symbol\"], [\"name\"], [\"decimals\"], [\"totalSupply\"]];\nexport class Erc20 {\n  public contract: erc20.Instance;\n  constructor(protected provider: Provider, public readonly address: string) {\n    this.contract = erc20.connect(address, provider);\n  }\n  async approve(signer: Signer, spender: string, amount: BigNumberish): Promise<TransactionResponse> {\n    const contract = erc20.connect(this.address, signer);\n    return contract.approve(spender, amount);\n  }\n  async getProps(): Promise<Erc20Props> {\n    const { contract } = this;\n    return {\n      address: this.address,\n      symbol: await contract.callStatic.symbol(),\n      name: await contract.callStatic.name(),\n      decimals: await contract.callStatic.decimals(),\n      totalSupply: await contract.callStatic.totalSupply(),\n    };\n  }\n}\nexport class Erc20Multicall extends Erc20 {\n  private batchRead: BatchReadWithErrorsType;\n  constructor(provider: Provider, address: string, private multicall2: Multicall2) {\n    super(provider, address);\n    this.batchRead = BatchReadWithErrors(multicall2)(this.contract);\n  }\n  async getProps(): Promise<Erc20Props> {\n    return {\n      ...(await this.batchRead<Erc20Props>(batchProps)),\n      address: this.address,\n    };\n  }\n}\nexport function factory(provider: Provider, address: string, multicall2?: Multicall2): Erc20 {\n  if (!multicall2) return new Erc20(provider, address);\n  return new Erc20Multicall(provider, address, multicall2);\n}\n","import type * as ethersTypes from \"../types/ethers\";\nimport * as state from \"../types/state\";\nimport * as statemachine from \"../types/statemachine\";\n\nimport { requestId } from \"../utils\";\nimport { factory as Erc20Factory } from \"../services/erc20\";\nimport Multicall2 from \"../../multicall2\";\nimport { SortedRequests } from \"../services/sortedRequests\";\nimport type { OracleInterface, Request, Requests } from \"../types/interfaces\";\n\n// This file contains composable and type safe state writers which mirror the state in types/state.\n// Each component takes in 1 parameters, state and you can include any number of functions to operate on the state.\n// Some things to consider:\n// 1. State can be nested, but it should strictly one direction, each class should ideally only operate on its direct state object.\n// 2. The parent can return new components, but its responsible for initializing the state for the child.\n// 3. You can modify this.state in the component thanks to immer, but you cannot set this.state to a new object, only its properties.\n\nexport class User {\n  constructor(private state: Partial<state.User>) {}\n  set(data: Partial<state.User>): void {\n    // note that this is done because we cannot replace this.state = data or immer loses visibility to the change.\n    if (data.chainId) this.chainId(data.chainId);\n    if (data.address) this.address(data.address);\n    if (data.signer) this.signer(data.signer);\n    if (data.provider) this.provider(data.provider);\n  }\n  clear(): void {\n    delete this.state.chainId;\n    delete this.state.address;\n    delete this.state.signer;\n    delete this.state.provider;\n  }\n  chainId(chainId: number): void {\n    this.state.chainId = chainId;\n  }\n  address(address: string): void {\n    this.state.address = address;\n  }\n  signer(signer: ethersTypes.JsonRpcSigner): void {\n    this.state.signer = signer;\n  }\n  provider(provider: ethersTypes.Web3Provider): void {\n    this.state.provider = provider;\n  }\n}\nexport class Balances {\n  constructor(private state: Partial<state.Balances>) {}\n  set(address: string, amount: ethersTypes.BigNumber): void {\n    this.state[address] = amount;\n  }\n}\nexport class Erc20 {\n  constructor(private state: Partial<state.Erc20>) {}\n  props(data: state.Erc20[\"props\"]): void {\n    this.state.props = data;\n  }\n  balance(account: string, amount: ethersTypes.BigNumber): void {\n    if (!this.state.balances) this.state.balances = {};\n    new Balances(this.state.balances).set(account, amount);\n  }\n  allowance(account: string, spender: string, amount: ethersTypes.BigNumber): void {\n    if (!this.state.allowances) this.state.allowances = {};\n    if (!this.state.allowances[spender]) this.state.allowances[spender] = {};\n    new Balances(this.state.allowances[spender]).set(account, amount);\n  }\n}\nexport class OptimisticOracle {\n  constructor(private state: Partial<state.OptimisticOracle>) {}\n  address(address: string): void {\n    this.state.address = address;\n  }\n  request(request: Request): void {\n    const id = requestId(request);\n    if (!this.state.requests) this.state.requests = {};\n    // merge data in rather than replace\n    this.state.requests[id] = { ...this.state.requests[id], ...request };\n  }\n  defaultLiveness(defaultLiveness: ethersTypes.BigNumber): void {\n    this.state.defaultLiveness = defaultLiveness;\n  }\n}\nexport class Chain {\n  constructor(private state: Partial<state.Chain>) {}\n  erc20s(address: string): Erc20 {\n    if (!this.state?.erc20s) this.state.erc20s = {};\n    if (!this.state.erc20s?.[address]) this.state.erc20s[address] = {};\n    return new Erc20(this.state.erc20s[address]);\n  }\n  optimisticOracle(): OptimisticOracle {\n    if (!this.state?.optimisticOracle) this.state.optimisticOracle = {};\n    return new OptimisticOracle(this.state.optimisticOracle);\n  }\n  currentTime(currentTime: ethersTypes.BigNumber): void {\n    this.state.currentTime = currentTime;\n  }\n}\nexport class Inputs {\n  constructor(private state: Partial<state.Inputs>) {}\n  request(params: state.Inputs[\"request\"]): void {\n    this.state.request = params;\n  }\n  user(): User {\n    if (!this.state.user) this.state.user = {};\n    return new User(this.state.user);\n  }\n}\n\nexport class Services {\n  constructor(private state: Partial<state.ChainServices>) {}\n  provider(provider: ethersTypes.FallbackProvider): void {\n    this.state.provider = provider;\n  }\n  erc20s(address: string): void {\n    if (!this.state?.provider) return;\n    if (!this.state?.erc20s) this.state.erc20s = {};\n    // only add this once\n    if (this.state?.erc20s[address]) return;\n    this.state.erc20s[address] = Erc20Factory(this.state.provider, address, this.state.multicall2);\n  }\n  optimisticOracle(optimisticOracle: OracleInterface): void {\n    if (this.state.optimisticOracle) return;\n    this.state.optimisticOracle = optimisticOracle;\n  }\n  multicall2(multicall2Address?: string): void {\n    if (!multicall2Address) return;\n    if (this.state.multicall2) return;\n    if (!this.state.provider) return;\n    this.state.multicall2 = new Multicall2(multicall2Address, this.state.provider);\n  }\n}\n\n/**\n * Write. The main writer class for this applications global state object. Composes classes that initialize, validate\n * and simplify changes to the global state. This class modifies state directly, and really is only useful in combination with immer.\n */\nexport default class Write {\n  constructor(private state: state.State) {}\n  chains(chainId: number): Chain {\n    if (!this.state?.chains) this.state.chains = {};\n    if (!this.state?.chains?.[chainId]) this.state.chains[chainId] = {};\n    return new Chain(this.state.chains[chainId]);\n  }\n  inputs(): Inputs {\n    if (!this.state.inputs) this.state.inputs = {};\n    return new Inputs(this.state.inputs);\n  }\n  config(config: state.Config): void {\n    this.state.config = config;\n  }\n  services(chainId: number): Services {\n    if (!this.state.services) this.state.services = {};\n    if (!this.state.services.chains) this.state.services.chains = {};\n    if (!this.state.services.chains[chainId]) this.state.services.chains[chainId] = {};\n    return new Services(this.state.services.chains[chainId]);\n  }\n  error(error?: Error): void {\n    this.state.error = error;\n  }\n  command(context: statemachine.Context<unknown, unknown & statemachine.Memory>): void {\n    if (!this.state.commands) this.state.commands = {};\n    this.state.commands[context.id] = context;\n  }\n  sortedRequestsService(sortedRequests: SortedRequests): void {\n    if (this.state?.services?.sortedRequests) return;\n    // only want to add this once\n    this.state.services = { sortedRequests };\n  }\n  descendingRequests(sortedRequests: Requests): void {\n    this.state.descendingRequests = sortedRequests;\n  }\n}\n","import filter from \"lodash/filter\";\n\nimport type {\n  State,\n  Chain,\n  InputRequest,\n  Erc20Props,\n  ChainConfig,\n  Context,\n  Memory,\n  User,\n  OracleType,\n} from \"../types/state\";\nimport type { JsonRpcSigner, BigNumber, Provider } from \"../types/ethers\";\nimport { TransactionConfirmer, requestId } from \"../utils\";\nimport { OracleInterface, Request, Requests } from \"../types/interfaces\";\nimport { Erc20 } from \"../services/erc20\";\nimport { SortedRequests } from \"../services/sortedRequests\";\nimport { assertExists } from \"../errors\";\n\n// This is a typescript compatible way of pulling out values from the global state object, essentially\n// forming a basic API. Most calls are parameterless, requiring first setting state which determines, the\n// user/chain, etc of the query.\n\nexport default class Read {\n  constructor(private state: State) {}\n  chainConfig = (optionalChainId?: number): ChainConfig => {\n    const chainId = optionalChainId || this.requestChainId();\n    const config = this.state?.config?.chains?.[chainId];\n    assertExists(config, \"No config set for chain: \" + chainId);\n    return config;\n  };\n  oracleType = (): OracleType => {\n    const source = this.state?.config?.oracleType;\n    assertExists(source, \"No oracle name set on config\");\n    return source;\n  };\n  requestChainId = (): number => {\n    const chainId = this.state?.inputs?.request?.chainId;\n    assertExists(chainId, \"ChainId is not set on request\");\n    return chainId;\n  };\n  user = (): Partial<User> => {\n    const result = this.state?.inputs?.user;\n    assertExists(result, \"user not set\");\n    return result;\n  };\n  userChainId = (): number => {\n    const chainId = this.state?.inputs?.user?.chainId;\n    assertExists(chainId, \"ChainId is not set\");\n    return chainId;\n  };\n  requestChain = (optionalChainId?: number): Partial<Chain> => {\n    const chainId = optionalChainId || this.requestChainId();\n    const chain = this.state?.chains?.[chainId];\n    assertExists(chain, \"Chain not set\");\n    return chain;\n  };\n  userAddress = (): string => {\n    const address = this.state?.inputs?.user?.address;\n    assertExists(address, \"User address is not set\");\n    return address;\n  };\n  oracleAddress = (optionalChainId?: number): string => {\n    const chain = this.requestChain(optionalChainId);\n    const address = chain?.optimisticOracle?.address;\n    assertExists(address, \"Optimistic oracle address not set\");\n    return address;\n  };\n  signer = (): JsonRpcSigner => {\n    const signer = this.state?.inputs?.user?.signer;\n    assertExists(signer, \"Signer is not set\");\n    return signer;\n  };\n  inputRequest = (): InputRequest => {\n    const input = this.state?.inputs?.request;\n    assertExists(input, \"Input request is not set\");\n    return input;\n  };\n  defaultLiveness = (): BigNumber => {\n    const chain = this.requestChain();\n    const liveness = chain?.optimisticOracle?.defaultLiveness;\n    assertExists(liveness, \"Optimistic oracle defaultLiveness set\");\n    return liveness;\n  };\n  request = (): Request => {\n    const chain = this.requestChain();\n    const input = this.inputRequest();\n    const id = requestId(input);\n    const request = chain?.optimisticOracle?.requests?.[id];\n    assertExists(request, \"Request has not been fetched\");\n    return request;\n  };\n  collateralProps = (): Partial<Erc20Props> => {\n    const request = this.request();\n    assertExists(request.currency, \"Request currency not set\");\n    const chain = this.requestChain();\n    const props = chain.erc20s?.[request.currency]?.props;\n    assertExists(props, \"Props not set on collateral token\");\n    return props;\n  };\n  userCollateralBalance = (): BigNumber => {\n    const request = this.request();\n    assertExists(request.currency, \"Request currency not set\");\n    const chain = this.requestChain();\n    const user = this.userAddress();\n    const balance = chain?.erc20s?.[request.currency]?.balances?.[user];\n    assertExists(balance, \"Balance not set on collateral token for user\");\n    return balance;\n  };\n  userCollateralAllowance = (): BigNumber => {\n    const request = this.request();\n    assertExists(request.currency, \"Request currency not set\");\n    const chain = this.requestChain();\n    const user = this.userAddress();\n    const oracle = this.oracleAddress();\n    const allowance = chain?.erc20s?.[request.currency]?.allowances?.[oracle]?.[user];\n    assertExists(allowance, \"Allowance not set on user on collateral token for oracle\");\n    return allowance;\n  };\n  oracleService = (optionalChainId?: number): OracleInterface => {\n    const chainId = optionalChainId || this.requestChainId();\n    const result = this.state?.services?.chains?.[chainId]?.optimisticOracle;\n    assertExists(result, \"Optimistic Oracle Not found on chain \" + chainId);\n    return result;\n  };\n  collateralService = (): Erc20 => {\n    const chainId = this.requestChainId();\n    const request = this.request();\n    assertExists(request.currency, \"Request currency not set\");\n    const result = this.state?.services?.chains?.[chainId]?.erc20s?.[request.currency];\n    assertExists(result, \"Token not supported on chain \" + chainId);\n    return result;\n  };\n  command = (id: string): Context<unknown, unknown & Memory> => {\n    const result = this.state?.commands?.[id];\n    assertExists(result, \"Unable to find command \" + id);\n    return result;\n  };\n  tokenService = (chainId: number, address: string): Erc20 => {\n    const result = this.state?.services?.chains?.[chainId]?.erc20s?.[address];\n    assertExists(result, \"Token service not found: \" + [chainId, address].join(\".\"));\n    return result;\n  };\n  provider = (chainId: number): Provider => {\n    const result = this.state?.services?.chains?.[chainId]?.provider;\n    assertExists(result, \"Provider not found on chainid: \" + chainId);\n    return result;\n  };\n  transactionService = (chainId: number): TransactionConfirmer => {\n    const provider = this.provider(chainId);\n    return new TransactionConfirmer(provider);\n  };\n  listCommands = (): Context<unknown, unknown & Memory>[] => {\n    return Object.values(this.state?.commands || []);\n  };\n  filterCommands = (search: { user?: string; done?: boolean }): Context<unknown, unknown & Memory>[] => {\n    return filter(this.listCommands(), search) as Context<unknown, unknown & Memory>[];\n  };\n  chain = (optionalChainId?: number): Partial<Chain> => {\n    const chainId = optionalChainId || this.requestChainId();\n    const chain = this.state?.chains?.[chainId];\n    assertExists(chain, \"No chain for chainId: \" + chainId);\n    return chain;\n  };\n  currentTime = (optionalChainId?: number): BigNumber => {\n    const chainId = optionalChainId || this.requestChainId();\n    const chain = this.chain(chainId);\n    const time = chain?.currentTime;\n    assertExists(time, \"Current time not available on chain: \" + chainId);\n    return time;\n  };\n  sortedRequestsService = (): SortedRequests => {\n    const result = this.state?.services?.sortedRequests;\n    assertExists(result, \"Sorted request service not set\");\n    return result;\n  };\n  listChains = (): number[] => {\n    return Object.keys(this.state?.chains || {}).map(Number);\n  };\n  descendingRequests = (): Requests => {\n    return this.state.descendingRequests || [];\n  };\n  filterRequests = (query: Partial<Request>): Requests => {\n    return filter(this.descendingRequests(), query);\n  };\n}\n","// return true only if value is not null or undefined\nimport { exists } from \"../../utils\";\n\n// we only ignore this specific error type explicitly emitted from reader class, meaning value is undefined\nimport { ignoreExistenceError } from \"../errors\";\nimport type { State } from \"../types/state\";\n\nimport Read from \"./read\";\n\n// This class checks for existence for values you could potentially read. It mirrors the read interface but returns bools from functions.\nexport default class Has {\n  private read: Read;\n  constructor(private state: State) {\n    // by design, reads do not mutate or cause side effects\n    this.read = new Read(state);\n  }\n  inputRequest = (): boolean => {\n    // the rule about reads is they will only throw errors if it cant return the value you request.\n    // If no errors are thrown the read was successful.\n    // Reads will never not return a value without throwing an error, enforced by TS.\n    return exists(ignoreExistenceError(this.read.inputRequest));\n  };\n  sortedRequestsService = (): boolean => {\n    return exists(ignoreExistenceError(this.read.sortedRequestsService));\n  };\n  requestChainId = (): boolean => {\n    return exists(ignoreExistenceError(this.read.requestChainId));\n  };\n  userAddress = (): boolean => {\n    return exists(ignoreExistenceError(this.read.userAddress));\n  };\n  request = (): boolean => {\n    return exists(ignoreExistenceError(this.read.request));\n  };\n  collateralProps = (): boolean => {\n    return exists(ignoreExistenceError(this.read.collateralProps));\n  };\n  defaultLiveness = (): boolean => {\n    return exists(ignoreExistenceError(this.read.defaultLiveness));\n  };\n  currentTime = (): boolean => {\n    return exists(ignoreExistenceError(this.read.currentTime));\n  };\n}\n","import produce from \"immer\";\n\nexport type WriteCallback<S> = (state: S) => void;\nexport type Emit<S> = (state: S, prev: S) => void;\n/**\n * Store. The store is meant to provide a global state that conforms to the type in types/state and\n * allow you to read/write and watch for change events. This uses immer, which manages how the nested\n * object gets updated to allow shallow change detection through nested paths.\n */\nexport default class Store<S> {\n  /**\n   * constructor.\n   *\n   * @param {Emit} emit - Change callback, passes you the current and previous state any time theres a state change.\n   * @param {State} state - The full state type which conforms to the state object.\n   */\n  constructor(private emit: Emit<S>, private state: S) {}\n  /**\n   * write. Allows caller to write to state. This wraps the state in \"immer\" which manages nested updates to state\n   * through a proxy interface. When write is complete, an event is emitted with the current and previous state.\n   *\n   * @param {WriteCallback} cb\n   */\n  write(cb: WriteCallback<S>): void {\n    const prevState = this.state;\n\n    // immer's produce method, takes an object, and passes a draft of that object to the callback. Any changes to the draft\n    // will be returned as the new state at the end of the callback. Changes to this object are optimized to be used in state\n    // for React or other front-end state managers.\n    this.state = produce(this.state, cb);\n\n    // Once state is changed, an event is emitted, this is how we get changes out of the client and also allow for change detection.\n    this.emit(this.state, prevState);\n  }\n  // same as write\n  async writeAsync(cb: WriteCallback<S>): Promise<void> {\n    const prevState = this.state;\n    this.state = await produce(this.state, cb);\n    this.emit(this.state, prevState);\n  }\n  read(): S {\n    return this.state;\n  }\n}\n","import Write from \"./write\";\nimport Read from \"./read\";\nimport Has from \"./has\";\n\nimport Store, { Emit as GenericEmit } from \"./store\";\nimport { State } from \"../types/state\";\n\ntype WriteCallback = (write: Write, state: State) => void;\ntype Emit = GenericEmit<State>;\n\nexport { Write, Store, Read, Emit, WriteCallback, Has };\n\n/**\n * OracleStore. Wraps the store with a specific state shape and passes the Write client through to end user.\n */\nexport default class OracleStore {\n  private store: Store<State>;\n  constructor(private emit: Emit = () => undefined, private state: State = {}) {\n    this.store = new Store<State>(emit, state);\n  }\n  /**\n   * write - Function for updating state.\n   *\n   * @param {WriteCallback} cb - Sends a write client to the caller for safer and easier state mutations rather than the raw object.\n   */\n  write = (cb: WriteCallback): void => {\n    this.store.write((state) => cb(new Write(state), state));\n  };\n  /**\n   * read - Function for reading from state. Returns a read client to the user.\n   *\n   * @returns {Read}\n   */\n  read = (): Read => {\n    return new Read(this.store.read());\n  };\n  /**\n   * get - Function for getting access to the raw state object, not wrapped by the reader class.\n   * State should not be modified directly and treated as read only.\n   *\n   * @returns {State}\n   */\n  get = (): State => {\n    return this.store.read();\n  };\n  /**\n   * has. Checks for existence. Mirrors the read interface, but instead of reading values returns true or false.\n   *\n   * @returns {Has}\n   */\n  has = (): Has => {\n    return new Has(this.store.read());\n  };\n}\n","import Store from \"../store\";\nimport { InputRequest } from \"../types/state\";\nimport { TransactionReceipt } from \"../types/ethers\";\n\nexport class Update {\n  private read: Store[\"read\"];\n  private write: Store[\"write\"];\n  constructor(private store: Store) {\n    this.read = store.read;\n    this.write = store.write;\n  }\n  all = async (): Promise<void> => {\n    await this.oracle();\n    await this.request();\n    await this.collateralProps();\n    await this.userCollateralBalance();\n    await this.oracleAllowance();\n  };\n  request = async (params?: InputRequest): Promise<void> => {\n    const request = params || this.read().inputRequest();\n    const chainId = request.chainId;\n    const oo = this.read().oracleService(chainId);\n    // // pull in data from contract on chain\n    const contractRequest = await oo.fetchRequest(request);\n    this.write((write) => {\n      // create the erc20 service to handle currency\n      if (contractRequest.currency) {\n        write.services(chainId).erc20s(contractRequest.currency);\n      }\n      write\n        .chains(chainId)\n        .optimisticOracle()\n        // update request object with all the data we have about it. order is important,\n        // we want to prioritize latest state pulled from contract.\n        .request({ ...contractRequest });\n    });\n    this.sortedRequests(chainId);\n  };\n  oracle = async (): Promise<void> => {\n    const chainId = this.read().requestChainId();\n    const oo = this.read().oracleService();\n    const { defaultLiveness } = await oo.getProps();\n    this.write((write) => write.chains(chainId).optimisticOracle().defaultLiveness(defaultLiveness));\n  };\n  userCollateralBalance = async (): Promise<void> => {\n    const chainId = this.read().requestChainId();\n    const account = this.read().userAddress();\n    const token = this.read().collateralService();\n    const result = await token.contract.balanceOf(account);\n    this.write((write) => write.chains(chainId).erc20s(token.address).balance(account, result));\n  };\n  collateralProps = async (): Promise<void> => {\n    const chainId = this.read().requestChainId();\n    const token = this.read().collateralService();\n    const props = await token.getProps();\n    this.write((write) => write.chains(chainId).erc20s(token.address).props(props));\n  };\n  oracleAllowance = async (): Promise<void> => {\n    const chainId = this.read().requestChainId();\n    const account = this.read().userAddress();\n    const oracleAddress = this.read().oracleAddress();\n    const token = this.read().collateralService();\n    const result = await token.contract.allowance(account, oracleAddress);\n    this.write((write) => write.chains(chainId).erc20s(token.address).allowance(account, oracleAddress, result));\n  };\n  balance = async (chainId: number, token: string, account: string): Promise<void> => {\n    const tokenService = this.read().tokenService(chainId, token);\n    const result = await tokenService.contract.balanceOf(account);\n    this.write((write) => write.chains(chainId).erc20s(token).balance(account, result));\n  };\n  allowance = async (chainId: number, token: string, account: string, spender: string): Promise<void> => {\n    const tokenService = this.read().tokenService(chainId, token);\n    const result = await tokenService.contract.allowance(account, spender);\n    this.write((write) => write.chains(chainId).erc20s(token).allowance(account, spender, result));\n  };\n  isConfirmed = async (chainId: number, hash: string, confirmations: number): Promise<boolean | TransactionReceipt> => {\n    const txService = this.read().transactionService(chainId);\n    return txService.isConfirmed(hash, confirmations);\n  };\n  // update new events from this range query, will accumulate new events\n  oracleEvents = async (chainId: number, startBlock = 0, endBlock?: number): Promise<void> => {\n    const provider = this.read().provider(chainId);\n    const oracle = this.read().oracleService(chainId);\n    endBlock = endBlock || (await provider.getBlockNumber());\n    await oracle.update(startBlock, endBlock);\n  };\n  // takes all known events, decodes them into requests and puts them into a sorted table. then updates the sorted list.\n  sortedRequests = (chainId: number): void => {\n    const sortedRequestsService = this.read().sortedRequestsService();\n    const oracle = this.read().oracleService(chainId);\n    const requests = oracle.listRequests();\n    const oracleType = this.read().oracleType();\n    Object.values(requests).forEach((value) => {\n      // chains can have colliding keys ( mainly testnet forks), so we always need to append chain to to keep key unique across chains otherwise\n      // collisions will cause overwrites, removing ability to list identical requests across chains.\n      sortedRequestsService.setByRequest({ ...value, oracleType });\n    });\n    // query all known requests and update our state with the entire list.\n    // this is expensive, consider optimizing after proven detrimental.\n    const descendingRequests = sortedRequestsService.descending();\n    this.write((w) => {\n      w.descendingRequests(descendingRequests);\n    });\n  };\n  // this updates the current active request object used in the details page, as new properties might come in from events\n  // current request needs access to things like transation hash, only available through events.\n  activeRequestFromEvents = (params?: InputRequest): void => {\n    const request = params || this.read().inputRequest();\n    const chainId = request.chainId;\n    // pull in request data generated from events\n    const requestIndexData = this.read().oracleService().getRequest(request);\n    // we really only care about a handful of props from event based requests. We also dont want to override\n    // any properties that might overlap with the data queried from the contract.\n    const {\n      requestTx,\n      proposeTx,\n      disputeTx,\n      settleTx,\n      requestBlockNumber,\n      proposeBlockNumber,\n      disputeBlockNumber,\n      settleBlockNumber,\n    } = requestIndexData;\n\n    const update = {\n      ...request,\n      requestTx,\n      proposeTx,\n      disputeTx,\n      settleTx,\n      requestBlockNumber,\n      proposeBlockNumber,\n      disputeBlockNumber,\n      settleBlockNumber,\n    };\n\n    this.write((write) => {\n      write.chains(chainId).optimisticOracle().request(update);\n    });\n  };\n}\n","import { Update } from \"../update\";\nimport Store from \"../../store\";\nimport { Handlers as GenericHandlers } from \"../../types/statemachine\";\nimport { User } from \"../../types/state\";\nimport { ignoreExistenceErrorAsync } from \"../../errors\";\n\n// require exports for a new context handler\nexport type Params = Partial<User>;\nexport type Memory = undefined;\n\nexport function initMemory(): Memory {\n  return undefined;\n}\n\nexport function Handlers(store: Store): GenericHandlers<Params, Memory> {\n  const update = new Update(store);\n  return {\n    async start(params: Params) {\n      store.write((write) => write.inputs().user().set(params));\n\n      // ignore erorrs caused by data not existing on reads, pass through other errors\n      await ignoreExistenceErrorAsync(update.userCollateralBalance);\n      await ignoreExistenceErrorAsync(update.oracleAllowance);\n\n      return \"done\";\n    },\n  };\n}\n","import Store from \"../../store\";\nimport { Handlers as GenericHandlers } from \"../../types/statemachine\";\n\n// require exports for a new context handler\nexport type Params = undefined;\nexport type Memory = undefined;\n\nexport function initMemory(): Memory {\n  return undefined;\n}\n\nexport function Handlers(store: Store): GenericHandlers<Params, Memory> {\n  return {\n    async start() {\n      store.write((write) => {\n        write.inputs().user().clear();\n      });\n      return \"done\";\n    },\n  };\n}\n","import Store from \"../../store\";\nimport { Inputs } from \"../../types/state\";\nimport { Handlers as GenericHandlers } from \"../../types/statemachine\";\n\n// required exports for state machine\nexport type Params = Inputs[\"request\"];\nexport type Memory = undefined;\nexport function initMemory(): Memory {\n  return undefined;\n}\nexport function Handlers(store: Store): GenericHandlers<Params, Memory> {\n  return {\n    async start(params: Params) {\n      store.write((write) => write.inputs().request(params));\n      return \"done\";\n    },\n  };\n}\n","import assert from \"assert\";\nimport { Update } from \"../update\";\nimport Store from \"../../store\";\nimport { Signer } from \"../../types/ethers\";\nimport { Handlers as GenericHandlers } from \"../../types/statemachine\";\nimport { ContextClient } from \"./utils\";\n\nexport type Params = {\n  currency: string;\n  chainId: number;\n  signer: Signer;\n  account: string;\n  spender: string;\n  amount: string;\n  confirmations: number;\n  checkTxIntervalSec: number;\n};\n\nexport type Memory = { hash?: string };\n\nexport function initMemory(): Memory {\n  return {};\n}\n\nexport function Handlers(store: Store): GenericHandlers<Params, Memory> {\n  const update = new Update(store);\n  return {\n    async start(params: Params, memory: Memory) {\n      const { chainId, currency, spender, amount, account, signer } = params;\n      assert(chainId === (await signer.getChainId()), \"Signer on wrong chainid\");\n      assert(account === (await signer.getAddress()), \"Signer on wrong account\");\n\n      // create service if it does not exist\n      store.write((w) => w.services(chainId).erc20s(currency));\n      const erc20 = store.read().tokenService(chainId, currency);\n      const tx = await erc20.approve(signer, spender, amount);\n      memory.hash = tx.hash;\n      return \"confirm\";\n    },\n    async confirm(params: Params, memory: Memory, context: ContextClient) {\n      const { chainId, confirmations, checkTxIntervalSec } = params;\n      const { hash } = memory;\n      assert(hash, \"requires hash\");\n      if (await update.isConfirmed(chainId, hash, confirmations)) {\n        return \"update\";\n      }\n      // wait x seconds before running this state again\n      return context.sleep(checkTxIntervalSec * 1000);\n    },\n    async update(params: Params) {\n      const { chainId, currency, spender, account } = params;\n      await update.balance(chainId, currency, account);\n      await update.allowance(chainId, currency, account, spender);\n      return \"done\";\n    },\n  };\n}\n","import assert from \"assert\";\nimport { Update } from \"../update\";\nimport Store from \"../../store\";\nimport { Signer, TransactionReceipt } from \"../../types/ethers\";\nimport { Handlers as GenericHandlers } from \"../../types/statemachine\";\nimport { InputRequest } from \"../../types/state\";\nimport { ContextClient } from \"./utils\";\n\nexport type Params = InputRequest & {\n  signer: Signer;\n  confirmations: number;\n  currency: string;\n  account: string;\n  checkTxIntervalSec: number;\n};\n\nexport type Memory = { hash?: string; receipt?: TransactionReceipt };\n\nexport function initMemory(): Memory {\n  return {};\n}\n\nexport function Handlers(store: Store): GenericHandlers<Params, Memory> {\n  const update = new Update(store);\n  return {\n    async start(params: Params, memory: Memory) {\n      const { requester, identifier, timestamp, ancillaryData, chainId, signer } = params;\n      assert(chainId === (await signer.getChainId()), \"Signer on wrong chainid\");\n\n      const oracle = store.read().oracleService(chainId);\n      const tx = await oracle.disputePrice(signer, { requester, identifier, timestamp, ancillaryData });\n      memory.hash = tx.hash;\n      return \"confirm\";\n    },\n    async confirm(params: Params, memory: Memory, context: ContextClient) {\n      const { chainId, confirmations, checkTxIntervalSec } = params;\n      const { hash } = memory;\n      assert(hash, \"requires hash\");\n      const receipt = await update.isConfirmed(chainId, hash, confirmations);\n      if (receipt) {\n        memory.receipt = receipt as TransactionReceipt;\n        return \"update\";\n      }\n      // wait x seconds before running this state again\n      return context.sleep(checkTxIntervalSec * 1000);\n    },\n    async update(params: Params, memory: Memory) {\n      const { chainId, currency, account } = params;\n      const { receipt } = memory;\n      const oracle = store.read().oracleService(chainId);\n      await update.balance(chainId, currency, account);\n      if (receipt) {\n        oracle.updateFromTransactionReceipt(receipt);\n      }\n      store.write((w) => {\n        w.chains(chainId).optimisticOracle().request(oracle.getRequest(params));\n      });\n      update.sortedRequests(chainId);\n      return \"done\";\n    },\n  };\n}\n","import assert from \"assert\";\nimport { Update } from \"../update\";\nimport Store from \"../../store\";\nimport { Signer, TransactionReceipt } from \"../../types/ethers\";\nimport { Handlers as GenericHandlers } from \"../../types/statemachine\";\nimport { InputRequest } from \"../../types/state\";\nimport { ContextClient } from \"./utils\";\n\nexport type Params = InputRequest & {\n  signer: Signer;\n  confirmations: number;\n  currency: string;\n  account: string;\n  proposedPrice: string;\n  checkTxIntervalSec: number;\n};\n\nexport type Memory = { hash?: string; receipt?: TransactionReceipt };\n\nexport function initMemory(): Memory {\n  return {};\n}\n\nexport function Handlers(store: Store): GenericHandlers<Params, Memory> {\n  const update = new Update(store);\n  return {\n    async start(params: Params, memory: Memory) {\n      const { requester, identifier, timestamp, ancillaryData, chainId, signer, proposedPrice } = params;\n      assert(chainId === (await signer.getChainId()), \"Signer on wrong chainid\");\n      const oracle = store.read().oracleService(chainId);\n      const tx = await oracle.proposePrice(signer, { requester, identifier, timestamp, ancillaryData }, proposedPrice);\n      memory.hash = tx.hash;\n      return \"confirm\";\n    },\n    async confirm(params: Params, memory: Memory, context: ContextClient) {\n      const { chainId, confirmations, checkTxIntervalSec } = params;\n      const { hash } = memory;\n      assert(hash, \"requires hash\");\n      const receipt = await update.isConfirmed(chainId, hash, confirmations);\n      if (receipt) {\n        memory.receipt = receipt as TransactionReceipt;\n        return \"update\";\n      }\n      // wait x seconds before running this state again\n      return context.sleep(checkTxIntervalSec * 1000);\n    },\n    async update(params: Params, memory: Memory) {\n      const { chainId, currency, account } = params;\n      const { receipt } = memory;\n      const oracle = store.read().oracleService(chainId);\n      await update.balance(chainId, currency, account);\n      if (receipt) {\n        oracle.updateFromTransactionReceipt(receipt);\n      }\n      store.write((w) => {\n        w.chains(chainId).optimisticOracle().request(oracle.getRequest(params));\n      });\n      await update.sortedRequests(chainId);\n      return \"done\";\n    },\n  };\n}\n","import Store from \"../../store\";\nimport { Web3Provider } from \"../../types/ethers\";\nimport { Handlers as GenericHandlers } from \"../../types/statemachine\";\nimport { chainConfigToChainMetadata, hexValue } from \"../../utils\";\n\nexport type Params = {\n  chainId: number;\n  provider: Web3Provider;\n};\n\nexport type Memory = undefined;\n\nexport function initMemory(): Memory {\n  return undefined;\n}\n\nexport function Handlers(store: Store): GenericHandlers<Params, Memory> {\n  return {\n    async start(params: Params) {\n      const { provider, chainId } = params;\n      try {\n        await provider.send(\"wallet_switchEthereumChain\", [\n          {\n            chainId: hexValue(chainId),\n          },\n        ]);\n        return \"done\";\n      } catch (err) {\n        const error = (err as unknown) as Error & { code: number };\n        if (error.code === -32603 || error.code === 4902) {\n          return \"addAndSwitch\";\n        }\n        throw error;\n      }\n    },\n    async addAndSwitch(params: Params) {\n      const { chainId, provider } = params;\n      const config = store.read().chainConfig(chainId);\n      const chainMetadata = chainConfigToChainMetadata(config);\n      await provider.send(\"wallet_addEthereumChain\", [\n        {\n          ...chainMetadata,\n          chainId: hexValue(chainId),\n        },\n      ]);\n      await provider.send(\"wallet_switchEthereumChain\", [\n        {\n          chainId: hexValue(chainId),\n        },\n      ]);\n      return \"done\";\n    },\n  };\n}\n","// this should only run as a single instance, will continue updating the active request as needed.\n// this is a single poller for requests on all chains\nimport { Update } from \"../update\";\nimport Store from \"../../store\";\nimport { RequestState } from \"../../types/state\";\nimport { Handlers as GenericHandlers } from \"../../types/statemachine\";\nimport { ContextClient } from \"./utils\";\nimport { ignoreExistenceErrorAsync } from \"../../errors\";\n\n// required exports for state machine\nexport type Params = undefined;\nexport type Memory = { iterations: number };\nexport function initMemory(): Memory {\n  return { iterations: 0 };\n}\nexport function Handlers(store: Store): GenericHandlers<Params, Memory> {\n  const update = new Update(store);\n  return {\n    async start(params: Params, memory: Memory, ctx: ContextClient): Promise<void | undefined> {\n      const request = await ignoreExistenceErrorAsync(store.read().request);\n      // requests can change externally if not already in one of these states\n      const shouldUpdate = request && request.state !== RequestState.Invalid && request.state !== RequestState.Settled;\n\n      if (shouldUpdate) {\n        await update.request();\n        // count how many times we have updated this request as a sanity check\n        memory.iterations++;\n      }\n\n      const { checkTxIntervalSec = 30 } = (await ignoreExistenceErrorAsync(store.read().chainConfig)) || {};\n      return ctx.sleep(checkTxIntervalSec * 1000);\n    },\n  };\n}\n","// this will attempt to fetch all events down to startBlock in descending order. It will try to reduce the\n// range of blocks queried to prevent errors with the provider. This can sometimes lead to really long query times\n// for providers on chains which are very restrictive about block range.\n// Normally you want to query events in order, ie oldest to newest, but in this case we want to prioritize the\n// newest requests first in the case we cant fetch the whole range. Also we will store all events in order and\n// process them on each iteration, so we should always have a consistent view of request with our currently known events.\nimport Store from \"../../store\";\nimport { Handlers as GenericHandlers } from \"../../types/statemachine\";\nimport { ContextClient } from \"./utils\";\nimport { Update } from \"../update\";\nimport { rangeStart, rangeSuccessDescending, rangeFailureDescending, RangeState } from \"../../utils\";\nimport { ignoreExistenceErrorAsync } from \"../../errors\";\n\nexport type Params = {\n  chainId: number;\n  startBlock?: number;\n  endBlock?: number;\n  maxRange?: number;\n};\n\nexport type Memory = { error?: Error; state?: RangeState; iterations: number };\n\nexport function initMemory(): Memory {\n  return { iterations: 0 };\n}\n\nexport function Handlers(store: Store): GenericHandlers<Params, Memory> {\n  const update = new Update(store);\n  return {\n    async start(params: Params, memory: Memory, ctx: ContextClient) {\n      const provider = store.read().provider(params.chainId);\n      const { chainId, startBlock = 0, endBlock = await provider.getBlockNumber(), maxRange } = params;\n\n      memory.error = undefined;\n      // we use this wierd range thing because in the case we cant query the entire block range due to provider error\n      // we want to move start block closer to endblock to reduce the range until it stops erroring. These range functions\n      // will do that for us.\n      const rangeState = memory.state || rangeStart({ startBlock, endBlock, maxRange });\n      const { currentStart, currentEnd } = rangeState;\n\n      try {\n        // this just queries events between start and end\n        await update.oracleEvents(chainId, currentStart, currentEnd);\n        // reprocess all known events and create a table of requests from it\n        await update.sortedRequests(chainId);\n\n        // try to update the active request by event data\n        await ignoreExistenceErrorAsync(update.activeRequestFromEvents);\n\n        // we signal that the current range was a success, now move currentStart, currentEnd accordingly\n        // we set multiplier to 1 so we dont grow the range on success, this tends to create more errors and slow down querying\n        memory.state = rangeSuccessDescending({ ...rangeState, multiplier: 1 });\n      } catch (err) {\n        memory.error = (err as unknown) as Error;\n        // the provider threw an error so we will reduce our range by moving startblock closer to endblock next iteration\n        memory.state = rangeFailureDescending(rangeState);\n      }\n      memory.iterations++;\n      // the range functions will tell us when we have successfully queried the entire range of blocks.\n      if (memory?.state?.done) return \"done\";\n      // sleep to let other contexts run, but just resume right after.\n      return ctx.sleep(100);\n    },\n  };\n}\n","// this statemachine will continue to poll for new events from startBlock ( or latest block if not defined).\n// It will maintain memory of the last block it polled for events up to, and use that as the start block for next\n// iteration, while always querying up to the latest block.\nimport Store from \"../../store\";\nimport { Handlers as GenericHandlers } from \"../../types/statemachine\";\nimport { ContextClient } from \"./utils\";\nimport { Update } from \"../update\";\nimport { ignoreExistenceErrorAsync } from \"../../errors\";\n\nexport type Params = {\n  chainId: number;\n  startBlock?: number;\n  pollRateSec?: number;\n};\n\nexport type Memory = { error?: Error; lastBlock?: number; iterations: number };\n\nexport function initMemory(): Memory {\n  return { iterations: 0 };\n}\n\nexport function Handlers(store: Store): GenericHandlers<Params, Memory> {\n  const update = new Update(store);\n  return {\n    async start(params: Params, memory: Memory, ctx: ContextClient) {\n      // start at the latest block, we have other command to get historical events\n      const { chainId, startBlock, pollRateSec = 50 } = params;\n      const provider = store.read().provider(chainId);\n      const latestBlock = await provider.getBlockNumber();\n      // our current block is the start block, or last known block we have queried up to\n      const currentBlock = memory.lastBlock || startBlock || latestBlock;\n      memory.error = undefined;\n      try {\n        // dont worry about querying if latest and current are the same. This optimization causes wierd effects\n        // during testing, as block number rarely changes unless user moves it manually, giving the impression that events are missed.\n        if (latestBlock !== currentBlock) {\n          // this pulls all events from current to latest block\n          await update.oracleEvents(chainId, currentBlock, latestBlock);\n\n          // we can just try to update the current active request, we dont care if it fails, active request might not be set\n          await ignoreExistenceErrorAsync(update.activeRequestFromEvents);\n\n          // reset our last block seen to the latest (end) block\n          memory.lastBlock = latestBlock;\n          // just count how many successful iterations we do as a kind of sanity check\n          memory.iterations++;\n        } else {\n          // if we dont have a lastblock set, set it to our current block\n          memory.lastBlock = memory.lastBlock || currentBlock;\n        }\n      } catch (err) {\n        // store an error for an iteration if we need to debug. we want to keep polling though.\n        memory.error = (err as unknown) as Error;\n      }\n\n      // update our request table list with all known events\n      // this needs to be done outside the block sorted requests holds requests across different clients\n      await update.sortedRequests(chainId);\n\n      // we dont need to poll these events very fast, so just set to once a min\n      return ctx.sleep(pollRateSec * 1000);\n    },\n  };\n}\n","import assert from \"assert\";\nimport Store from \"../../store\";\nimport { Handlers as GenericHandlers } from \"../../types/statemachine\";\n\n// required exports for state machine\nexport type Params = { chainId: number; transactionHash: string; eventIndex?: number };\nexport type Memory = undefined;\nexport function initMemory(): Memory {\n  return undefined;\n}\nexport function Handlers(store: Store): GenericHandlers<Params, Memory> {\n  return {\n    async start(params: Params) {\n      const { chainId, transactionHash, eventIndex = 0 } = params;\n\n      // search all known requests first\n      const filteredRequests = store\n        .read()\n        .descendingRequests()\n        .filter((request) => {\n          if (request.chainId.toString() !== chainId.toString()) return false;\n          if (\n            ![\n              request?.requestTx?.toLowerCase(),\n              request?.proposeTx?.toLowerCase(),\n              request?.disputeTx?.toLowerCase(),\n              request?.settleTx?.toLowerCase(),\n            ].includes(transactionHash.toLowerCase())\n          )\n            return false;\n          return [\n            request?.requestLogIndex?.toString(),\n            request?.proposeLogIndex?.toString(),\n            request?.disputeLogIndex?.toString(),\n            request?.settleLogIndex?.toString(),\n          ].includes(eventIndex.toString());\n        });\n\n      // if we found a request from known requests, then set it as our selected request\n      if (filteredRequests.length === 1) {\n        const [found] = filteredRequests;\n        // we can parse out the necessary params to kick off fetching the state of the request\n        const requestInput = {\n          timestamp: found.timestamp,\n          requester: found.requester,\n          ancillaryData: found.ancillaryData,\n          identifier: found.identifier,\n          chainId,\n        };\n        store.write((write) => write.inputs().request(requestInput));\n        return \"done\";\n      }\n\n      // have to do all of this to fetch the identifier, ancData, requester and timestamp from the request\n      const provider = store.read().provider(chainId);\n      const receipt = await provider.getTransactionReceipt(transactionHash);\n      assert(receipt, \"Unable to find transaction receipt from hash: \" + transactionHash);\n      const oracle = store.read().oracleService(chainId);\n      const oracleAddress = store.read().oracleAddress(chainId);\n      // filter out logs that originate from oracle contract\n      const oracleLogs = receipt.logs.filter((log) => log.address.toLowerCase() === oracleAddress.toLowerCase());\n      // decode logs using abi\n      const decodedLogs = oracleLogs.map((log) => oracle.parseLog(log));\n\n      // this is the event we care about, we index into the appropriate oracle event generated from this tx\n      // we want to keep backwards compatibility with previous links which were indexed by an array index and not logIndex\n      const log =\n        decodedLogs.find((log) => log?.logIndex?.toString() === eventIndex.toString()) ||\n        decodedLogs[eventIndex] ||\n        decodedLogs[0];\n      // we dont actually know the type of the log, so we need to do some validation before continuing\n      assert(log, `Unable to find optimistic oracle event at ${transactionHash} eventIndex ${eventIndex}`);\n      assert(log.args, `Unable to find optimistic oracle event args at ${transactionHash} eventIndex ${eventIndex}`);\n      assert(\n        log.args.timestamp,\n        `Unable to find optimistic oracle event.timestamp at ${transactionHash} eventIndex ${eventIndex}`\n      );\n      assert(\n        log.args.requester,\n        `Unable to find optimistic oracle event.requester at ${transactionHash} eventIndex ${eventIndex}`\n      );\n      assert(\n        log.args.ancillaryData,\n        `Unable to find optimistic oracle event.ancillaryData at ${transactionHash} eventIndex ${eventIndex}`\n      );\n      assert(\n        log.args.identifier,\n        `Unable to find optimistic oracle event.identifier at ${transactionHash} eventIndex ${eventIndex}`\n      );\n\n      // we can parse out the necessary params to kick off fetching the state of the request\n      const requestInput = {\n        timestamp: log.args.timestamp,\n        requester: log.args.requester,\n        ancillaryData: log.args.ancillaryData,\n        identifier: log.args.identifier,\n        chainId,\n      };\n\n      store.write((write) => write.inputs().request(requestInput));\n      return \"done\";\n    },\n  };\n}\n","import assert from \"assert\";\nimport { Update } from \"../update\";\nimport Store from \"../../store\";\nimport { Signer } from \"../../types/ethers\";\nimport { Handlers as GenericHandlers } from \"../../types/statemachine\";\nimport { InputRequest } from \"../../types/state\";\nimport { ContextClient } from \"./utils\";\n\nexport type Params = InputRequest & {\n  signer: Signer;\n  confirmations: number;\n  currency: string;\n  account: string;\n  checkTxIntervalSec: number;\n};\n\nexport type Memory = { hash?: string };\n\nexport function initMemory(): Memory {\n  return {};\n}\n\nexport function Handlers(store: Store): GenericHandlers<Params, Memory> {\n  const update = new Update(store);\n  return {\n    async start(params: Params, memory: Memory) {\n      const { requester, identifier, timestamp, ancillaryData, chainId, signer } = params;\n      assert(chainId === (await signer.getChainId()), \"Signer on wrong chainid\");\n\n      const oracle = store.read().oracleService(chainId);\n      const tx = await oracle.settle(signer, { requester, identifier, timestamp, ancillaryData });\n      memory.hash = tx.hash;\n      return \"confirm\";\n    },\n    async confirm(params: Params, memory: Memory, context: ContextClient) {\n      const { chainId, confirmations, checkTxIntervalSec } = params;\n      const { hash } = memory;\n      assert(hash, \"requires hash\");\n      if (await update.isConfirmed(chainId, hash, confirmations)) {\n        return \"update\";\n      }\n      // wait x seconds before running this state again\n      return context.sleep(checkTxIntervalSec * 1000);\n    },\n    async update(params: Params) {\n      const { chainId, currency, account } = params;\n      const oracle = store.read().oracleService(chainId);\n      await update.balance(chainId, currency, account);\n      store.write((w) => {\n        w.chains(chainId).optimisticOracle().request(oracle.getRequest(params));\n      });\n      update.sortedRequests(chainId);\n      return \"done\";\n    },\n  };\n}\n","import bluebird from \"bluebird\";\nimport { Update } from \"../update\";\nimport Store from \"../../store\";\nimport { Handlers as GenericHandlers } from \"../../types/statemachine\";\nimport { ContextClient } from \"./utils\";\n\n// required exports for state machine\nexport type Params = {\n  chainId: number;\n  concurrency?: number;\n  pollRateSec?: number;\n};\n\nexport type Memory = undefined;\n\nexport function initMemory(): Memory {\n  return undefined;\n}\n\nexport function Handlers(store: Store): GenericHandlers<Params, Memory> {\n  const update = new Update(store);\n  return {\n    async start(params: Params, memory: Memory, ctx: ContextClient): Promise<void | undefined> {\n      const { chainId, pollRateSec = 15, concurrency = 5 } = params;\n      const oracle = store.read().oracleService(chainId);\n      const requests = oracle.listRequests();\n      const requestsToFetch = requests.filter((request) => request.eventBased === undefined);\n      await bluebird.map(requestsToFetch, (request) => update.request(request), { concurrency });\n      return ctx.sleep(pollRateSec * 1000);\n    },\n  };\n}\n","import assert from \"assert\";\nimport uid from \"lodash/uniqueId\";\n\nimport { Handlers, Memory, Context, Step as StepType, ContextProps, ContextType } from \"../../types/statemachine\";\n\n// client to pass into handlers to allow them to modify context\nexport class ContextClient {\n  constructor(private context: ContextProps) {}\n  sleep(ms?: number): void {\n    this.context.sleep = ms;\n  }\n}\n\nexport const Step = <P = undefined, M extends Memory = undefined>(handlers: Handlers<P, M>): StepType<P, M> => async (\n  context: Context<P, M>,\n  now: number\n): Promise<Context<P, M>> => {\n  assert(!context.done, \"Context has ended\");\n  assert(handlers[context.state], \"No handler for state: \" + context.state);\n  // conext is read only for some reason, have to copy it\n  const copy = Object.assign({}, context);\n\n  try {\n    // remove sleep, assume it should be reset if needed\n    if (copy.sleep) copy.sleep = undefined;\n    const handler = handlers[copy.state];\n    // have to copy this out because memory becomes read only for some reason?\n    const memory = Object.assign({}, copy.memory);\n    // handlers take in params and return a new state or nothin\n    const state = await handler(copy.params, memory, new ContextClient(copy));\n    copy.memory = memory;\n    // update context state\n    if (state) copy.state = state;\n    // check for done\n    if (state === \"done\") copy.done = true;\n  } catch (err) {\n    return {\n      ...copy,\n      error: err as Error,\n      state: \"error\",\n      done: true,\n      updated: now,\n    };\n  }\n  copy.updated = now;\n  return copy;\n};\n\nexport function shouldStep(context: Context<unknown, unknown & Memory> | undefined, now: number): context is Context {\n  if (!context) return false;\n  if (context.done) return false;\n  if (context.updated === undefined) return true;\n  if (!context?.sleep) return true;\n  return now - context.updated >= context.sleep;\n}\n\nexport function create<P, M extends Memory>(\n  type: ContextType,\n  params: P,\n  memory: M,\n  override: Partial<ContextProps> = {},\n  now = Date.now()\n): Context<P, M> {\n  const context: Context<P, M> = {\n    id: uid(type + \"_\"),\n    state: \"start\",\n    done: false,\n    updated: undefined,\n    created: now,\n    type,\n    // override any part of the context, not recommended for most cases\n    ...override,\n    params,\n    memory,\n  };\n  return context;\n}\n\nexport class ContextManager<P, M extends Memory> {\n  constructor(\n    private type: ContextType,\n    private handlers: Handlers<P, M>,\n    private initMemory: (params: P) => M,\n    private emit: (ctx: Context<P, M>) => void\n  ) {}\n  create = (params: P, user?: string): string => {\n    const context = create<P, M>(this.type, params, this.initMemory(params), { user });\n    this.emit(context);\n    return context.id;\n  };\n  // this step function will keep looping until either the state machine is done transitioning, or sleep has been specified\n  async step(context: Context<P, M>, now: number = Date.now(), iterations = 10): Promise<Context<P, M>> {\n    const step = Step<P, M>(this.handlers);\n    let next = context;\n    while (shouldStep(next, now)) {\n      assert(\n        iterations >= 0,\n        \"Infinite loop detected in state machine, make sure it each state transitions to done: \" + context.type\n      );\n      next = await step(next, now);\n      iterations--;\n    }\n    return next;\n  }\n}\n","import { Update } from \"../update\";\nimport Store from \"../../store\";\nimport { Handlers as GenericHandlers } from \"../../types/statemachine\";\nimport { ContextClient } from \"./utils\";\nimport { ignoreExistenceErrorAsync } from \"../../errors\";\n\nexport type Params = undefined;\nexport type Memory = { iterations: number };\n\nexport function initMemory(): Memory {\n  return { iterations: 0 };\n}\n\nexport function Handlers(store: Store): GenericHandlers<Params, Memory> {\n  const update = new Update(store);\n  return {\n    async start(params: Params, memory: Memory, ctx: ContextClient) {\n      await ignoreExistenceErrorAsync(update.userCollateralBalance);\n      await ignoreExistenceErrorAsync(update.oracleAllowance);\n      memory.iterations++;\n      // this is set differently for every chain\n      const { checkTxIntervalSec = 30 } = (await ignoreExistenceErrorAsync(store.read().chainConfig)) || {};\n      return ctx.sleep(checkTxIntervalSec * 1000);\n    },\n  };\n}\n","import { Update } from \"../update\";\nimport Store from \"../../store\";\nimport { Handlers as GenericHandlers } from \"../../types/statemachine\";\nimport { ignoreExistenceErrorAsync } from \"../../errors\";\n\n// required exports for state machine\nexport type Params = undefined;\nexport type Memory = undefined;\nexport function initMemory(): Memory {\n  return undefined;\n}\nexport function Handlers(store: Store): GenericHandlers<Params, Memory> {\n  const update = new Update(store);\n  return {\n    async start() {\n      const has = store.has();\n      // we can ignore errors where reads fail, but all other errors will propogate\n      // this will rerun when user is set.\n      if (!has.defaultLiveness()) {\n        await ignoreExistenceErrorAsync(update.oracle);\n      }\n\n      await ignoreExistenceErrorAsync(update.request);\n\n      if (!has.collateralProps()) {\n        await ignoreExistenceErrorAsync(update.collateralProps);\n      }\n\n      return \"done\";\n    },\n  };\n}\n","import { Context, Memory, ContextType } from \"../../types/statemachine\";\nimport type Store from \"../../store\";\nimport { ContextManager, shouldStep } from \"./utils\";\n\n// context types, import new ones here\nimport * as setUser from \"./setUser\";\nimport * as clearUser from \"./clearUser\";\nimport * as setActiveRequest from \"./setActiveRequest\";\nimport * as approve from \"./approve\";\nimport * as disputePrice from \"./disputePrice\";\nimport * as proposePrice from \"./proposePrice\";\nimport * as switchOrAddChain from \"./switchOrAddChain\";\nimport * as pollActiveRequest from \"./pollActiveRequest\";\nimport * as pollActiveUser from \"./pollActiveUser\";\nimport * as fetchPastEvents from \"./fetchPastEvents\";\nimport * as pollNewEvents from \"./pollNewEvents\";\nimport * as updateActiveRequest from \"./updateActiveRequest\";\nimport * as settle from \"./settle\";\nimport * as setActiveRequestByTransaction from \"./setActiveRequestByTransaction\";\nimport * as fetchEventBased from \"./fetchEventBased\";\n\n/**\n * StateMachine. This class will be used to handle all change requests by the user, including setting state which\n * may require triggering fetching data from chain, or initiating transactions that require tracking.\n *\n * This class is meant to step through states of a Context object. This object can have variable\n * parameters and memory. There are several concepts to understand before using this class:\n *\n * 1. Handlers - This is the state machine state handlers, it is an objected keyed by each state, with a function handler.\n * 2. Params - These are common parameters set by the caller, passed into each handler function.\n * 3. Memory - This is a writing space within the state machine handlers that accumulates through states.\n * 4. Context - This is the sum of all data needed to transition through the state machine states. It includes params, memory and metadata about the runtime.\n * 5. Context.done - This is a special property on context.done which represents that the state machine is done transitioning this context.\n * 6. Context.state = \"done\" - This is a reserved state on context.state, if set to \"done\" its the same thing as done = true.\n * 7. Context.state = \"error\" - This is a reserved state on context.state, if set to \"error\" it means the context is done, but also there is an context.error object.\n * 8. Interval - This is a property on the context which specifies the maximum rate in MS this context will transition, based on the current timestamp.\n */\nexport class StateMachine {\n  private pending: Context<unknown, unknown & Memory>[] = [];\n  // this needs to be updated when adding new context type\n  public types: {\n    [ContextType.setUser]: ContextManager<setUser.Params, setUser.Memory>;\n    [ContextType.clearUser]: ContextManager<clearUser.Params, clearUser.Memory>;\n    [ContextType.setActiveRequest]: ContextManager<setActiveRequest.Params, setActiveRequest.Memory>;\n    [ContextType.approve]: ContextManager<approve.Params, approve.Memory>;\n    [ContextType.disputePrice]: ContextManager<disputePrice.Params, disputePrice.Memory>;\n    [ContextType.proposePrice]: ContextManager<proposePrice.Params, proposePrice.Memory>;\n    [ContextType.switchOrAddChain]: ContextManager<switchOrAddChain.Params, switchOrAddChain.Memory>;\n    [ContextType.pollActiveRequest]: ContextManager<pollActiveRequest.Params, pollActiveRequest.Memory>;\n    [ContextType.pollActiveUser]: ContextManager<pollActiveUser.Params, pollActiveUser.Memory>;\n    [ContextType.fetchPastEvents]: ContextManager<fetchPastEvents.Params, fetchPastEvents.Memory>;\n    [ContextType.pollNewEvents]: ContextManager<pollNewEvents.Params, pollNewEvents.Memory>;\n    [ContextType.setActiveRequestByTransaction]: ContextManager<\n      setActiveRequestByTransaction.Params,\n      setActiveRequestByTransaction.Memory\n    >;\n    [ContextType.settle]: ContextManager<settle.Params, settle.Memory>;\n    [ContextType.updateActiveRequest]: ContextManager<updateActiveRequest.Params, updateActiveRequest.Memory>;\n    [ContextType.fetchEventBased]: ContextManager<fetchEventBased.Params, fetchEventBased.Memory>;\n  };\n  constructor(private store: Store) {\n    // need to initizlie state types here manually for each new context type\n    this.types = {\n      [ContextType.setUser]: new ContextManager<setUser.Params, setUser.Memory>(\n        ContextType.setUser,\n        setUser.Handlers(store),\n        setUser.initMemory,\n        this.handleCreate\n      ),\n      [ContextType.clearUser]: new ContextManager<clearUser.Params, clearUser.Memory>(\n        ContextType.clearUser,\n        clearUser.Handlers(store),\n        clearUser.initMemory,\n        this.handleCreate\n      ),\n      [ContextType.setActiveRequest]: new ContextManager<setActiveRequest.Params, setActiveRequest.Memory>(\n        ContextType.setActiveRequest,\n        setActiveRequest.Handlers(store),\n        setActiveRequest.initMemory,\n        this.handleCreate\n      ),\n      [ContextType.approve]: new ContextManager<approve.Params, approve.Memory>(\n        ContextType.approve,\n        approve.Handlers(store),\n        approve.initMemory,\n        this.handleCreate\n      ),\n      [ContextType.disputePrice]: new ContextManager<disputePrice.Params, disputePrice.Memory>(\n        ContextType.disputePrice,\n        disputePrice.Handlers(store),\n        disputePrice.initMemory,\n        this.handleCreate\n      ),\n      [ContextType.proposePrice]: new ContextManager<proposePrice.Params, proposePrice.Memory>(\n        ContextType.proposePrice,\n        proposePrice.Handlers(store),\n        proposePrice.initMemory,\n        this.handleCreate\n      ),\n      [ContextType.switchOrAddChain]: new ContextManager<switchOrAddChain.Params, switchOrAddChain.Memory>(\n        ContextType.switchOrAddChain,\n        switchOrAddChain.Handlers(store),\n        switchOrAddChain.initMemory,\n        this.handleCreate\n      ),\n      [ContextType.pollActiveRequest]: new ContextManager<pollActiveRequest.Params, pollActiveRequest.Memory>(\n        ContextType.pollActiveRequest,\n        pollActiveRequest.Handlers(store),\n        pollActiveRequest.initMemory,\n        this.handleCreate\n      ),\n      [ContextType.pollActiveUser]: new ContextManager<pollActiveUser.Params, pollActiveUser.Memory>(\n        ContextType.pollActiveUser,\n        pollActiveUser.Handlers(store),\n        pollActiveUser.initMemory,\n        this.handleCreate\n      ),\n      [ContextType.fetchPastEvents]: new ContextManager<fetchPastEvents.Params, fetchPastEvents.Memory>(\n        ContextType.fetchPastEvents,\n        fetchPastEvents.Handlers(store),\n        fetchPastEvents.initMemory,\n        this.handleCreate\n      ),\n      [ContextType.pollNewEvents]: new ContextManager<pollNewEvents.Params, pollNewEvents.Memory>(\n        ContextType.pollNewEvents,\n        pollNewEvents.Handlers(store),\n        pollNewEvents.initMemory,\n        this.handleCreate\n      ),\n      [ContextType.setActiveRequestByTransaction]: new ContextManager<\n        setActiveRequestByTransaction.Params,\n        setActiveRequestByTransaction.Memory\n      >(\n        ContextType.setActiveRequestByTransaction,\n        setActiveRequestByTransaction.Handlers(store),\n        setActiveRequestByTransaction.initMemory,\n        this.handleCreate\n      ),\n      [ContextType.settle]: new ContextManager<settle.Params, settle.Memory>(\n        ContextType.settle,\n        settle.Handlers(store),\n        settle.initMemory,\n        this.handleCreate\n      ),\n      [ContextType.updateActiveRequest]: new ContextManager<updateActiveRequest.Params, updateActiveRequest.Memory>(\n        ContextType.updateActiveRequest,\n        updateActiveRequest.Handlers(store),\n        updateActiveRequest.initMemory,\n        this.handleCreate\n      ),\n      [ContextType.fetchEventBased]: new ContextManager<fetchEventBased.Params, fetchEventBased.Memory>(\n        ContextType.fetchEventBased,\n        fetchEventBased.Handlers(store),\n        fetchEventBased.initMemory,\n        this.handleCreate\n      ),\n    };\n  }\n  private saveContext(context: Context<unknown, unknown & Memory>) {\n    this.store.write((w) => w.command(context));\n  }\n  private handleCreate = (context: Context<unknown, unknown & Memory>) => {\n    this.push(context);\n    this.saveContext(context);\n  };\n\n  // remove element from front of queue\n  private shift(): Context<unknown, unknown & Memory> | undefined {\n    return this.pending.shift();\n  }\n  // remove element from back of queue\n  private pop(): Context<unknown, unknown & Memory> | undefined {\n    return this.pending.pop();\n  }\n  private size(): number {\n    return this.pending.length;\n  }\n  private push(context: Context<unknown, unknown & Memory>): void {\n    this.pending.push(context);\n  }\n  /**\n   * tick. Process all pending contexts, move them to done if needed\n   *\n   * @param {} now - Specify the timestamp this tick is running on.\n   * @returns {Promise<boolean>} - Returns if there are still any pending contexts to run.\n   */\n  tick = async (now = Date.now()): Promise<boolean> => {\n    const context = this.shift();\n    // if this cant step, then push it to back of queue\n    if (!shouldStep(context, now)) {\n      context && !context.done && this.push(context);\n      // if we can step, then step it and push result into queue\n    } else {\n      let next;\n      switch (context.type) {\n        // need to update this function with the new context processor\n        case ContextType.setUser: {\n          next = await this.types[context.type].step(\n            (context as unknown) as Context<setUser.Params, setUser.Memory>,\n            now\n          );\n          break;\n        }\n        case ContextType.clearUser: {\n          next = await this.types[context.type].step(\n            (context as unknown) as Context<clearUser.Params, clearUser.Memory>,\n            now\n          );\n          break;\n        }\n        case ContextType.setActiveRequest: {\n          next = await this.types[context.type].step(\n            (context as unknown) as Context<setActiveRequest.Params, setActiveRequest.Memory>,\n            now\n          );\n          break;\n        }\n        case ContextType.approve: {\n          next = await this.types[context.type].step(\n            (context as unknown) as Context<approve.Params, approve.Memory>,\n            now\n          );\n          break;\n        }\n        case ContextType.disputePrice: {\n          next = await this.types[context.type].step(\n            (context as unknown) as Context<disputePrice.Params, disputePrice.Memory>,\n            now\n          );\n          break;\n        }\n        case ContextType.proposePrice: {\n          next = await this.types[context.type].step(\n            (context as unknown) as Context<proposePrice.Params, proposePrice.Memory>,\n            now\n          );\n          break;\n        }\n        case ContextType.switchOrAddChain: {\n          next = await this.types[context.type].step(\n            (context as unknown) as Context<switchOrAddChain.Params, switchOrAddChain.Memory>,\n            now\n          );\n          break;\n        }\n        case ContextType.pollActiveRequest: {\n          next = await this.types[context.type].step(\n            (context as unknown) as Context<pollActiveRequest.Params, pollActiveRequest.Memory>,\n            now\n          );\n          break;\n        }\n        case ContextType.pollActiveUser: {\n          next = await this.types[context.type].step(\n            (context as unknown) as Context<pollActiveUser.Params, pollActiveUser.Memory>,\n            now\n          );\n          break;\n        }\n        case ContextType.fetchPastEvents: {\n          next = await this.types[context.type].step(\n            (context as unknown) as Context<fetchPastEvents.Params, fetchPastEvents.Memory>,\n            now\n          );\n          break;\n        }\n        case ContextType.pollNewEvents: {\n          next = await this.types[context.type].step(\n            (context as unknown) as Context<pollNewEvents.Params, pollNewEvents.Memory>,\n            now\n          );\n          break;\n        }\n        case ContextType.setActiveRequestByTransaction: {\n          next = await this.types[context.type].step(\n            (context as unknown) as Context<setActiveRequestByTransaction.Params, setActiveRequestByTransaction.Memory>,\n            now\n          );\n          break;\n        }\n        case ContextType.settle: {\n          next = await this.types[context.type].step(\n            (context as unknown) as Context<settle.Params, settle.Memory>,\n            now\n          );\n          break;\n        }\n        case ContextType.updateActiveRequest: {\n          next = await this.types[context.type].step(\n            (context as unknown) as Context<updateActiveRequest.Params, updateActiveRequest.Memory>,\n            now\n          );\n          break;\n        }\n        case ContextType.fetchEventBased: {\n          next = await this.types[context.type].step(\n            (context as unknown) as Context<fetchEventBased.Params, fetchEventBased.Memory>,\n            now\n          );\n          break;\n        }\n        default: {\n          throw new Error(\"Unable to handle type: \" + context.type);\n        }\n      }\n      if (!next.done) {\n        this.push(next);\n      }\n      this.saveContext(next);\n    }\n\n    return this.size() > 0;\n  };\n}\n","import assert from \"assert\";\nimport { ethers } from \"ethers\";\nimport Store, { Emit } from \"./store\";\nimport type { state } from \"./types\";\nimport type { FallbackProvider } from \"./types/ethers\";\nimport { InputRequest, User } from \"./types/state\";\nimport { Update } from \"./services/update\";\nimport { SortedRequests } from \"./services/sortedRequests\";\nimport { StateMachine, setActiveRequestByTransaction } from \"./services/statemachines\";\nimport { loop } from \"../utils\";\nimport { toWei } from \"../across/utils\";\nimport { NewOracle } from \"./types/interfaces\";\n\nexport class Client {\n  private intervalStarted = false;\n  constructor(\n    public readonly store: Store,\n    public readonly update: Update,\n    public readonly sm: StateMachine,\n    public readonly poller: StateMachine\n  ) {}\n  setUser(params: Partial<User>): string {\n    const address = params.address && ethers.utils.getAddress(params.address);\n    return this.sm.types.setUser.create({ ...params, address });\n  }\n  clearUser(): string {\n    return this.sm.types.clearUser.create(undefined);\n  }\n  setActiveRequest(params: InputRequest): string {\n    const requester = ethers.utils.getAddress(params.requester);\n    // these are case and number senstive\n    const ancillaryData = params.ancillaryData.toLowerCase();\n    const identifier = params.identifier.toLowerCase();\n    const chainId = Number(params.chainId);\n    const timestamp = Number(params.timestamp);\n    const result = this.sm.types.setActiveRequest.create({ requester, ancillaryData, identifier, chainId, timestamp });\n    this.sm.types.updateActiveRequest.create(undefined);\n    return result;\n  }\n  setActiveRequestByTransaction(params: setActiveRequestByTransaction.Params): string {\n    const result = this.sm.types.setActiveRequestByTransaction.create(params);\n    this.sm.types.updateActiveRequest.create(undefined);\n    return result;\n  }\n  approveCollateral(): string {\n    const { checkTxIntervalSec } = this.store.read().chainConfig();\n    const request = this.store.read().request();\n    const inputRequest = this.store.read().inputRequest();\n    const user = this.store.read().user();\n    const oracleAddress = this.store.read().oracleAddress();\n    assert(user.address, \"requires a user account address\");\n    assert(user.signer, \"requires a user signer\");\n    assert(user.chainId === inputRequest.chainId, \"On wrong chain\");\n    assert(request.currency, \"Request currency is unknown\");\n    return this.sm.types.approve.create(\n      {\n        currency: request.currency,\n        account: user.address,\n        chainId: inputRequest.chainId,\n        signer: user.signer,\n        spender: oracleAddress,\n        amount: ethers.constants.MaxUint256.toString(),\n        confirmations: 1,\n        checkTxIntervalSec,\n      },\n      user.address\n    );\n  }\n  proposePrice(proposedPriceDecimals: string | number): string {\n    const { checkTxIntervalSec } = this.store.read().chainConfig();\n    const proposedPrice = toWei(proposedPriceDecimals);\n    const inputRequest = this.store.read().inputRequest();\n    const request = this.store.read().request();\n    const user = this.store.read().user();\n    assert(user.address, \"requires a user account address\");\n    assert(user.signer, \"requires a user signer\");\n    assert(user.chainId === inputRequest.chainId, \"On wrong chain\");\n    assert(request.currency, \"Request currency is unknown\");\n    return this.sm.types.proposePrice.create(\n      {\n        ...inputRequest,\n        proposedPrice,\n        signer: user.signer,\n        account: user.address,\n        currency: request.currency,\n        confirmations: 1,\n        checkTxIntervalSec,\n      },\n      user.address\n    );\n  }\n  disputePrice(): string {\n    const { checkTxIntervalSec } = this.store.read().chainConfig();\n    const inputRequest = this.store.read().inputRequest();\n    const user = this.store.read().user();\n    const request = this.store.read().request();\n    assert(user.address, \"requires a user account address\");\n    assert(user.signer, \"requires a user signer\");\n    assert(user.chainId === inputRequest.chainId, \"On wrong chain\");\n    assert(request.currency, \"Request currency is unknown\");\n    return this.sm.types.disputePrice.create(\n      {\n        ...inputRequest,\n        confirmations: 1,\n        signer: user.signer,\n        account: user.address,\n        currency: request.currency,\n        checkTxIntervalSec,\n      },\n      user.address\n    );\n  }\n  settle(): string {\n    const { checkTxIntervalSec } = this.store.read().chainConfig();\n    const inputRequest = this.store.read().inputRequest();\n    const user = this.store.read().user();\n    const request = this.store.read().request();\n    assert(user.address, \"requires a user account address\");\n    assert(user.signer, \"requires a user signer\");\n    assert(user.chainId === inputRequest.chainId, \"On wrong chain\");\n    assert(request.currency, \"Request currency is unknown\");\n    return this.sm.types.settle.create(\n      {\n        ...inputRequest,\n        confirmations: 1,\n        signer: user.signer,\n        account: user.address,\n        currency: request.currency,\n        checkTxIntervalSec,\n      },\n      user.address\n    );\n  }\n  switchOrAddChain(): string {\n    const inputRequest = this.store.read().inputRequest();\n    const user = this.store.read().user();\n    assert(user.provider, \"requires user provider\");\n    assert(user.address, \"requires user address\");\n    assert(inputRequest.chainId, \"requires active request chainId\");\n    return this.sm.types.switchOrAddChain.create(\n      { chainId: inputRequest.chainId, provider: user.provider },\n      user.address\n    );\n  }\n  // runs statemachine step loop pretty fast by default.\n  startInterval(delayMs = 1): void {\n    assert(!this.intervalStarted, \"Interval already started, try stopping first\");\n    this.intervalStarted = true;\n    loop(async () => {\n      assert(this.intervalStarted, \"Interval Stopped\");\n      // it turns out since these 2 state machines share the same immer state, they need to be run serially and\n      // cant be run concurrently or you get wierd state oscillations. For now keep them in the same timing loop.\n      await this.sm.tick();\n      await this.poller.tick();\n    }, delayMs).catch((err) => {\n      console.error(err);\n      this.intervalStarted = false;\n      this.store.write((w) => w.error(err));\n    });\n  }\n  stopInterval(): void {\n    assert(!this.intervalStarted, \"Interval already stopped\");\n    this.intervalStarted = false;\n  }\n}\n\nfunction makeProvider(rpcUrls: string[]): FallbackProvider {\n  const providers = rpcUrls.map((url) => {\n    const provider = ethers.getDefaultProvider(url);\n    // turn off all polling, we will poll manually\n    provider.polling = false;\n    return provider;\n  });\n  const provider = new ethers.providers.FallbackProvider(providers, 1);\n  // turn off all polling, we will poll manually\n  provider.polling = false;\n  return provider;\n}\nexport function factory(\n  config: state.Config,\n  emit: Emit,\n  OptimisticOracle: NewOracle,\n  sortedRequests: SortedRequests\n): Client {\n  const store = new Store(emit);\n  store.write((write) => {\n    write.config(config);\n    // maintains queryable ordered list of requests across all chains\n    write.sortedRequestsService(sortedRequests);\n    for (const chain of Object.values(config.chains)) {\n      const provider = makeProvider(chain.rpcUrls);\n      write.chains(chain.chainId).optimisticOracle().address(chain.optimisticOracleAddress);\n      write.services(chain.chainId).provider(provider);\n      write.services(chain.chainId).multicall2(chain.multicall2Address);\n      write\n        .services(chain.chainId)\n        .optimisticOracle(new OptimisticOracle(provider, chain.optimisticOracleAddress, chain.chainId));\n    }\n  });\n  const update = new Update(store);\n\n  // this first state machine is for user actions\n  const sm = new StateMachine(store);\n  // this one is system actions used for long running commands independent of the user\n  const poller = new StateMachine(store);\n\n  // start the request list checkers\n  for (const [chainId, chainConfig] of Object.entries(config.chains)) {\n    poller.types.fetchPastEvents.create(\n      {\n        chainId: Number(chainId),\n        startBlock: chainConfig.earliestBlockNumber,\n        maxRange: chainConfig.maxEventRangeQuery,\n      },\n      \"poller\"\n    );\n    // long running poller which only looks for new events\n    poller.types.pollNewEvents.create(\n      { chainId: Number(chainId), pollRateSec: chainConfig.checkTxIntervalSec },\n      \"poller\"\n    );\n    // updates event based data on all requests\n    if (!chainConfig.disableFetchEventBased)\n      poller.types.fetchEventBased.create({ chainId: Number(chainId) }, \"poller\");\n  }\n  // create active request poller for all chains. Should only have one of these\n  poller.types.pollActiveRequest.create(undefined, \"poller\");\n  // polls user for balances/approvals on the current chain, in case it changes external to app\n  poller.types.pollActiveUser.create(undefined, \"poller\");\n\n  return new Client(store, update, sm, poller);\n}\n","import { optimisticOracle } from \"../../clients\";\nimport { BigNumberish, Provider, Signer, TransactionResponse, Log, TransactionReceipt } from \"../types/ethers\";\nimport type { OracleInterface, RequestKey, OracleProps, Request } from \"../types/interfaces\";\nimport { requestId, insertOrderedAscending, eventKey, isUnique } from \"../utils\";\n\nimport {\n  RequestPrice,\n  ProposePrice,\n  DisputePrice,\n  Settle,\n  Request as RawRequest,\n} from \"../../clients/optimisticOracle\";\n\nexport type OptimisticOracleEvent = RequestPrice | ProposePrice | DisputePrice | Settle;\n\nexport type { RequestPrice, ProposePrice, DisputePrice, Settle };\n\nexport class OptimisticOracle implements OracleInterface {\n  private readonly contract: optimisticOracle.Instance;\n  private readonly events: OptimisticOracleEvent[] = [];\n  private requests: Record<string, Request> = {};\n  constructor(protected provider: Provider, protected address: string, public readonly chainId: number) {\n    this.contract = optimisticOracle.connect(address, provider);\n  }\n  private upsertRequest = (request: RawRequest): Request => {\n    const id = requestId(request);\n    const cachedRequest = this.requests[id] || {};\n    const update = { ...cachedRequest, ...request, chainId: this.chainId, eventBased: false };\n    this.requests[id] = update;\n    return update;\n  };\n  parseLog = (log: Log) => {\n    const description = this.contract.interface.parseLog(log);\n    return {\n      ...log,\n      ...description,\n      event: description.name,\n      eventSignature: description.signature,\n    };\n  };\n  private setDisputeHash({ requester, identifier, timestamp, ancillaryData }: RequestKey, hash: string): Request {\n    return this.upsertRequest({ requester, identifier, timestamp, ancillaryData, disputeTx: hash });\n  }\n  private setProposeHash({ requester, identifier, timestamp, ancillaryData }: RequestKey, hash: string): Request {\n    return this.upsertRequest({ requester, identifier, timestamp, ancillaryData, proposeTx: hash });\n  }\n  private setSettleHash({ requester, identifier, timestamp, ancillaryData }: RequestKey, hash: string): Request {\n    return this.upsertRequest({ requester, identifier, timestamp, ancillaryData, settleTx: hash });\n  }\n  private updateFromEvents = (events: OptimisticOracleEvent[]) => {\n    events.forEach((event) => {\n      if (isUnique(this.events, event, eventKey)) {\n        insertOrderedAscending(this.events, event, eventKey);\n      }\n    });\n    const { requests = {} } = optimisticOracle.getEventState(this.events);\n    Object.values(requests).map((request) => this.upsertRequest(request));\n  };\n  async fetchRequest({ requester, identifier, timestamp, ancillaryData }: RequestKey): Promise<Request> {\n    const request = await this.contract.callStatic.getRequest(requester, identifier, timestamp, ancillaryData);\n    const state = await this.contract.callStatic.getState(requester, identifier, timestamp, ancillaryData);\n    return this.upsertRequest({ ...request, state, requester, identifier, timestamp, ancillaryData });\n  }\n\n  getRequest(key: RequestKey): Request {\n    const id = requestId(key);\n    const request = this.requests[id] || key;\n    return { ...request };\n  }\n  async disputePrice(\n    signer: Signer,\n    { requester, identifier, timestamp, ancillaryData }: RequestKey\n  ): Promise<TransactionResponse> {\n    const contract = optimisticOracle.connect(this.address, signer);\n    const tx = await contract.disputePrice(requester, identifier, timestamp, ancillaryData);\n    this.setDisputeHash({ requester, identifier, timestamp, ancillaryData }, tx.hash);\n    return tx;\n  }\n  async proposePrice(\n    signer: Signer,\n    { requester, identifier, timestamp, ancillaryData }: RequestKey,\n    price: BigNumberish\n  ): Promise<TransactionResponse> {\n    const contract = optimisticOracle.connect(this.address, signer);\n    const tx = await contract.proposePrice(requester, identifier, timestamp, ancillaryData, price);\n    this.setProposeHash({ requester, identifier, timestamp, ancillaryData }, tx.hash);\n    return tx;\n  }\n  async settle(\n    signer: Signer,\n    { requester, identifier, timestamp, ancillaryData }: RequestKey\n  ): Promise<TransactionResponse> {\n    const contract = optimisticOracle.connect(this.address, signer);\n    const tx = await contract.settle(requester, identifier, timestamp, ancillaryData);\n    this.setSettleHash({ requester, identifier, timestamp, ancillaryData }, tx.hash);\n    return tx;\n  }\n  async update(startBlock = 0, endBlock: number | \"latest\" = \"latest\"): Promise<void> {\n    const events = await this.contract.queryFilter({}, startBlock, endBlock);\n    this.updateFromEvents((events as unknown[]) as OptimisticOracleEvent[]);\n  }\n  async getProps(): Promise<OracleProps> {\n    return {\n      defaultLiveness: await this.contract.defaultLiveness(),\n    };\n  }\n  updateFromTransactionReceipt(receipt: TransactionReceipt): void {\n    const events = receipt.logs.map((log) => this.parseLog(log));\n    this.updateFromEvents((events as unknown[]) as OptimisticOracleEvent[]);\n  }\n  listRequests(): Request[] {\n    return Object.values(this.requests);\n  }\n}\n","// this is a special service that works across all oracles type, chains, etc, to give a combined\n// view of all requests across running instances.\nimport sortedIndex from \"lodash/sortedIndex\";\nimport sortedLastIndex from \"lodash/sortedLastIndex\";\n\nimport { exists } from \"../../utils\";\nimport { requestId } from \"../utils\";\n\nimport { InputRequestWithOracleType, RequestWithOracleType, RequestsWithOracleType } from \"../types/state\";\n\n// this was copied out of store and made to be 1. a class, and 2. sync.  Could not modify old implementation since\n// other services rely on this currently and it causes cascading refactors. This has been copied without modification to logic.\nexport class SortedStore<Id, Data> {\n  private ids: Id[] = [];\n  private map = new Map<Id, Data>();\n  private getStart = (id: Id, inclusive = true): number => {\n    if (inclusive) {\n      return sortedIndex(this.ids, id);\n    } else {\n      return sortedLastIndex(this.ids, id);\n    }\n  };\n  private getEnd = (id: Id, inclusive = false): number => {\n    return this.getStart(id, !inclusive);\n  };\n  private del = (id: Id): Data | undefined => {\n    const index = sortedIndex(this.ids, id);\n    this.ids.splice(index, 1);\n    const result = this.map.get(id);\n    this.map.delete(id);\n    return result;\n  };\n  // keeps typescript from complaining that return values may be undefined\n  private getSafe = (id: Id): Data => {\n    const result = this.map.get(id);\n    if (exists(result)) return result;\n    throw new Error(\"Missing data for index: \" + id);\n  };\n  has = (id: Id): boolean => {\n    return this.map.has(id);\n  };\n  set = (id: Id, data: Data): void => {\n    if (this.map.has(id)) {\n      this.map.set(id, data);\n    } else {\n      const index = sortedIndex(this.ids, id);\n      this.ids.splice(index, 0, id);\n      this.map.set(id, data);\n    }\n  };\n  get = (id: Id): Data | undefined => {\n    return this.map.get(id);\n  };\n  values = (): Data[] => {\n    return this.ids.map(this.getSafe);\n  };\n  entries = (): [Id, Data][] => {\n    return this.ids.map((id) => [id, this.getSafe(id)]);\n  };\n  keys = (): Id[] => {\n    return [...this.ids];\n  };\n  clear = (): void => {\n    this.map.clear();\n    this.ids.length = 0;\n  };\n  size = (): number => {\n    return this.ids.length;\n  };\n  delete = (id: Id): void => {\n    if (!this.map.has(id)) return;\n    this.del(id);\n  };\n  // assume [a,b)\n  between = (a: Id, b: Id): Data[] => {\n    const start = this.getStart(a);\n    const end = this.getEnd(b);\n    return this.ids.slice(start, end).map(this.getSafe);\n  };\n  slice = (id: Id, length: number): Data[] => {\n    const start = this.getStart(id);\n    return this.ids.slice(start, start + length).map(this.getSafe);\n  };\n}\n\n// this sorts requests across all chains and oracles\nexport class SortedRequests extends SortedStore<string, RequestWithOracleType> {\n  setByRequest(value: InputRequestWithOracleType): void {\n    return this.set(this.id(value), value);\n  }\n  descending(): RequestsWithOracleType {\n    // sadly you cannot control lodash sorting descending, so reverse is necessary\n    return this.values().reverse();\n  }\n  ascending(): RequestsWithOracleType {\n    return this.values();\n  }\n  getByRequest(request: InputRequestWithOracleType): RequestWithOracleType {\n    // always return at least the original query data\n    return this.get(this.id(request)) || request;\n  }\n  id(request: InputRequestWithOracleType): string {\n    return requestId(request) + \"!\" + request.chainId + \"!\" + request.oracleType;\n  }\n}\n","import assert from \"assert\";\nimport { skinnyOptimisticOracle as optimisticOracle } from \"../../clients\";\nimport { BigNumberish, Provider, Signer, TransactionResponse, Log, TransactionReceipt } from \"../types/ethers\";\nimport type { OracleInterface, RequestKey, OracleProps, Request } from \"../types/interfaces\";\nimport { requestId, insertOrderedAscending, eventKey, isUnique } from \"../utils\";\n\nimport {\n  RequestPrice,\n  ProposePrice,\n  DisputePrice,\n  Settle,\n  SolidityRequest,\n} from \"../../clients/skinnyOptimisticOracle\";\n\nexport type OptimisticOracleEvent = RequestPrice | ProposePrice | DisputePrice | Settle;\n\nexport type { RequestPrice, ProposePrice, DisputePrice, Settle };\n\nfunction validateSolidityRequest(request: Request): SolidityRequest {\n  assert(request.proposer, \"Missing proposer\");\n  assert(request.disputer, \"Missing disputer\");\n  assert(request.currency, \"Missing currency\");\n  assert(request.settled, \"Missing settled\");\n  assert(request.proposedPrice, \"Missing proposedPrice\");\n  assert(request.resolvedPrice, \"Missing resolvedPrice\");\n  assert(request.expirationTime, \"Missing expirationTime\");\n  assert(request.reward, \"Missing reward\");\n  assert(request.finalFee, \"Missing finalFee\");\n  assert(request.bond, \"Missing bond\");\n  assert(request.customLiveness, \"Missing customLiveness\");\n  return {\n    proposer: request.proposer,\n    disputer: request.disputer,\n    currency: request.currency,\n    settled: request.settled,\n    proposedPrice: request.proposedPrice,\n    resolvedPrice: request.resolvedPrice,\n    expirationTime: request.expirationTime,\n    reward: request.reward,\n    finalFee: request.finalFee,\n    bond: request.bond,\n    customLiveness: request.customLiveness,\n  };\n}\n\nexport class SkinnyOptimisticOracle implements OracleInterface {\n  private readonly contract: optimisticOracle.Instance;\n  private readonly events: OptimisticOracleEvent[] = [];\n  private requests: Record<string, Request> = {};\n  constructor(protected provider: Provider, protected address: string, public readonly chainId: number) {\n    this.contract = optimisticOracle.connect(address, provider);\n  }\n  private upsertRequest = (request: Omit<Request, \"chainId\">): Request => {\n    const id = requestId(request);\n    const cachedRequest = this.requests[id] || {};\n    const update = { ...cachedRequest, ...request, chainId: this.chainId, eventBased: false };\n    this.requests[id] = update;\n    return update;\n  };\n  private setDisputeHash({ requester, identifier, timestamp, ancillaryData }: RequestKey, hash: string): Request {\n    return this.upsertRequest({ requester, identifier, timestamp, ancillaryData, disputeTx: hash });\n  }\n  private setProposeHash({ requester, identifier, timestamp, ancillaryData }: RequestKey, hash: string): Request {\n    return this.upsertRequest({ requester, identifier, timestamp, ancillaryData, proposeTx: hash });\n  }\n  private setSettleHash({ requester, identifier, timestamp, ancillaryData }: RequestKey, hash: string): Request {\n    return this.upsertRequest({ requester, identifier, timestamp, ancillaryData, settleTx: hash });\n  }\n  private updateFromEvents = (events: OptimisticOracleEvent[]) => {\n    events.forEach((event) => {\n      if (isUnique(this.events, event, eventKey)) {\n        insertOrderedAscending(this.events, event, eventKey);\n      }\n    });\n    const { requests = {} } = optimisticOracle.getEventState(this.events);\n    Object.values(requests).map((request) => this.upsertRequest(request));\n  };\n  async fetchRequest(key: RequestKey): Promise<Request> {\n    // skinny oo does not have a way to query request data from contract, can only find this though events.\n    return this.getRequest(key);\n  }\n\n  parseLog = (log: Log) => {\n    const description = this.contract.interface.parseLog(log);\n    return {\n      ...log,\n      ...description,\n      event: description.name,\n      eventSignature: description.signature,\n    };\n  };\n  getRequest(key: RequestKey): Request {\n    const id = requestId(key);\n    const request = this.requests[id] || key;\n    return { ...request };\n  }\n  async disputePrice(\n    signer: Signer,\n    { requester, identifier, timestamp, ancillaryData }: RequestKey\n  ): Promise<TransactionResponse> {\n    const request = validateSolidityRequest(this.getRequest({ requester, identifier, timestamp, ancillaryData }));\n    const contract = optimisticOracle.connect(this.address, signer);\n    const tx = await contract.disputePrice(requester, identifier, timestamp, ancillaryData, request);\n    this.setDisputeHash({ requester, identifier, timestamp, ancillaryData }, tx.hash);\n    return tx;\n  }\n  async proposePrice(\n    signer: Signer,\n    { requester, identifier, timestamp, ancillaryData }: RequestKey,\n    price: BigNumberish\n  ): Promise<TransactionResponse> {\n    const request = validateSolidityRequest(this.getRequest({ requester, identifier, timestamp, ancillaryData }));\n    const contract = optimisticOracle.connect(this.address, signer);\n    const tx = await contract.proposePrice(requester, identifier, timestamp, ancillaryData, request, price);\n    this.setProposeHash({ requester, identifier, timestamp, ancillaryData }, tx.hash);\n    return tx;\n  }\n  async settle(\n    signer: Signer,\n    { requester, identifier, timestamp, ancillaryData }: RequestKey\n  ): Promise<TransactionResponse> {\n    const request = validateSolidityRequest(this.getRequest({ requester, identifier, timestamp, ancillaryData }));\n    const contract = optimisticOracle.connect(this.address, signer);\n    const tx = await contract.settle(requester, identifier, timestamp, ancillaryData, request);\n    this.setSettleHash({ requester, identifier, timestamp, ancillaryData }, tx.hash);\n    return tx;\n  }\n  async update(startBlock = 0, endBlock: number | \"latest\" = \"latest\"): Promise<void> {\n    const events = await this.contract.queryFilter({}, startBlock, endBlock);\n    this.updateFromEvents((events as unknown[]) as OptimisticOracleEvent[]);\n  }\n  async getProps(): Promise<OracleProps> {\n    return {\n      defaultLiveness: await this.contract.defaultLiveness(),\n    };\n  }\n  updateFromTransactionReceipt(receipt: TransactionReceipt): void {\n    const events = receipt.logs.map((log) => this.parseLog(log));\n    this.updateFromEvents((events as unknown[]) as OptimisticOracleEvent[]);\n  }\n  listRequests(): Request[] {\n    return Object.values(this.requests);\n  }\n}\n","// This is almost a direct copy of the OO v1 service, just with updated abis and different contract addresses\nimport { BigNumberish, Provider, Signer, TransactionResponse, Log, TransactionReceipt } from \"../types/ethers\";\nimport type { OracleInterface, RequestKey, OracleProps, Request } from \"../types/interfaces\";\nimport { requestId, insertOrderedAscending, eventKey, isUnique } from \"../utils\";\n\nimport {\n  RequestPrice,\n  ProposePrice,\n  DisputePrice,\n  Settle,\n  connect,\n  Instance,\n  getEventState,\n  Request as RawRequest,\n} from \"../../clients/optimisticOracleV2\";\n\nexport type OptimisticOracleEvent = RequestPrice | ProposePrice | DisputePrice | Settle;\n\nexport type { RequestPrice, ProposePrice, DisputePrice, Settle };\n\nexport class OptimisticOracleV2 implements OracleInterface {\n  private readonly contract: Instance;\n  private readonly events: OptimisticOracleEvent[] = [];\n  private requests: Record<string, Request> = {};\n  constructor(protected provider: Provider, protected address: string, public readonly chainId: number) {\n    this.contract = connect(address, provider);\n  }\n  private upsertRequest = (request: RawRequest): Request => {\n    const id = requestId(request);\n    const cachedRequest = this.requests[id] || {};\n    const update = { ...cachedRequest, ...request, ...(request.requestSettings || {}), chainId: this.chainId };\n    this.requests[id] = update;\n    return update;\n  };\n  private setDisputeHash({ requester, identifier, timestamp, ancillaryData }: RequestKey, hash: string): Request {\n    return this.upsertRequest({ requester, identifier, timestamp, ancillaryData, disputeTx: hash });\n  }\n  private setProposeHash({ requester, identifier, timestamp, ancillaryData }: RequestKey, hash: string): Request {\n    return this.upsertRequest({ requester, identifier, timestamp, ancillaryData, proposeTx: hash });\n  }\n  private setSettleHash({ requester, identifier, timestamp, ancillaryData }: RequestKey, hash: string): Request {\n    return this.upsertRequest({ requester, identifier, timestamp, ancillaryData, settleTx: hash });\n  }\n  private updateFromEvents = (events: OptimisticOracleEvent[]) => {\n    events.forEach((event) => {\n      if (isUnique(this.events, event, eventKey)) {\n        insertOrderedAscending(this.events, event, eventKey);\n      }\n    });\n    const { requests = {} } = getEventState(this.events);\n    Object.values(requests).map((request) => this.upsertRequest(request));\n  };\n  async fetchRequest({ requester, identifier, timestamp, ancillaryData }: RequestKey): Promise<Request> {\n    const request = await this.contract.callStatic.getRequest(requester, identifier, timestamp, ancillaryData);\n    const state = await this.contract.callStatic.getState(requester, identifier, timestamp, ancillaryData);\n    return this.upsertRequest({ ...request, state, requester, identifier, timestamp, ancillaryData });\n  }\n\n  parseLog = (log: Log) => {\n    const description = this.contract.interface.parseLog(log);\n    return {\n      ...log,\n      ...description,\n      event: description.name,\n      eventSignature: description.signature,\n    };\n  };\n  getRequest(key: RequestKey): Request {\n    const id = requestId(key);\n    const request = this.requests[id] || key;\n    return { ...request };\n  }\n  async disputePrice(\n    signer: Signer,\n    { requester, identifier, timestamp, ancillaryData }: RequestKey\n  ): Promise<TransactionResponse> {\n    const contract = connect(this.address, signer);\n    const tx = await contract.disputePrice(requester, identifier, timestamp, ancillaryData);\n    this.setDisputeHash({ requester, identifier, timestamp, ancillaryData }, tx.hash);\n    return tx;\n  }\n  async proposePrice(\n    signer: Signer,\n    { requester, identifier, timestamp, ancillaryData }: RequestKey,\n    price: BigNumberish\n  ): Promise<TransactionResponse> {\n    const contract = connect(this.address, signer);\n    const tx = await contract.proposePrice(requester, identifier, timestamp, ancillaryData, price);\n    this.setProposeHash({ requester, identifier, timestamp, ancillaryData }, tx.hash);\n    return tx;\n  }\n  async settle(\n    signer: Signer,\n    { requester, identifier, timestamp, ancillaryData }: RequestKey\n  ): Promise<TransactionResponse> {\n    const contract = connect(this.address, signer);\n    const tx = await contract.settle(requester, identifier, timestamp, ancillaryData);\n    this.setSettleHash({ requester, identifier, timestamp, ancillaryData }, tx.hash);\n    return tx;\n  }\n  async update(startBlock = 0, endBlock: number | \"latest\" = \"latest\"): Promise<void> {\n    const events = await this.contract.queryFilter({}, startBlock, endBlock);\n    this.updateFromEvents((events as unknown[]) as OptimisticOracleEvent[]);\n  }\n  async getProps(): Promise<OracleProps> {\n    return {\n      defaultLiveness: await this.contract.defaultLiveness(),\n    };\n  }\n  updateFromTransactionReceipt(receipt: TransactionReceipt): void {\n    const events = receipt.logs.map((log) => this.parseLog(log));\n    this.updateFromEvents((events as unknown[]) as OptimisticOracleEvent[]);\n  }\n  listRequests(): Request[] {\n    return Object.values(this.requests);\n  }\n}\n","import { Client, factory } from \"./client\";\nimport { SkinnyOptimisticOracle } from \"./services/skinnyOptimisticOracle\";\nimport { SortedRequests } from \"./services/sortedRequests\";\nimport { DefaultConfig, getMulticall2Address } from \"./utils\";\nimport { state } from \"./types\";\nimport { Emit } from \"./store\";\n\nexport default (\n  config: state.PartialConfig,\n  emit: Emit,\n  sortedRequests: SortedRequests = new SortedRequests()\n): Client => {\n  const fullConfig = DefaultConfig({\n    getMulticall2Address,\n  })({ ...config }, state.OracleType.Skinny);\n  return factory(fullConfig, emit, SkinnyOptimisticOracle, sortedRequests);\n};\n","import { Client, factory } from \"./client\";\nimport { OptimisticOracle } from \"./services/optimisticOracle\";\nimport { SortedRequests } from \"./services/sortedRequests\";\nimport { DefaultConfig, getMulticall2Address } from \"./utils\";\nimport { state } from \"./types\";\nimport { Emit } from \"./store\";\n\nexport default (\n  config: state.PartialConfig,\n  emit: Emit,\n  sortedRequests: SortedRequests = new SortedRequests()\n): Client => {\n  const fullConfig = DefaultConfig({\n    getMulticall2Address,\n  })({ ...config }, state.OracleType.Optimistic);\n  return factory(fullConfig, emit, OptimisticOracle, sortedRequests);\n};\n","import { Client, factory } from \"./client\";\nimport { OptimisticOracleV2 } from \"./services/optimisticOracleV2\";\nimport { SortedRequests } from \"./services/sortedRequests\";\nimport { DefaultConfig, getMulticall2Address } from \"./utils\";\nimport { state } from \"./types\";\nimport { Emit } from \"./store\";\n\nexport default (\n  config: state.PartialConfig,\n  emit: Emit,\n  sortedRequests: SortedRequests = new SortedRequests()\n): Client => {\n  const fullConfig = DefaultConfig({\n    getMulticall2Address,\n  })({ ...config }, state.OracleType.OptimisticV2);\n  return factory(fullConfig, emit, OptimisticOracleV2, sortedRequests);\n};\n","import assert from \"assert\";\nimport { SortedRequests } from \"./services/sortedRequests\";\nimport { ClientTable } from \"./types/interfaces\";\nimport { State, OracleType, PartialConfigTable } from \"./types/state\";\nimport { Emit } from \"./store\";\nimport SkinnyFactory from \"./skinnyFactory\";\nimport OptimisticFactory from \"./optimisticFactory\";\nimport OptimisticV2Factory from \"./optimisticV2Factory\";\n\nexport type PublicEmit = (oracleType: OracleType, state: State, prev: State) => void;\nconst EventHandler = (oracleType: OracleType, publicEmit: PublicEmit): Emit => (state: State, prev: State) =>\n  publicEmit(oracleType, state, prev);\n\nexport default (configTable: PartialConfigTable, emit: PublicEmit): ClientTable => {\n  const sortedRequests = new SortedRequests();\n  return Object.fromEntries(\n    Object.entries(configTable).map(([oracleType, config]) => {\n      assert(config, \"requires config for type: \" + oracleType);\n      switch (oracleType) {\n        case OracleType.Optimistic:\n          return [oracleType, OptimisticFactory(config, EventHandler(oracleType, emit), sortedRequests)];\n        case OracleType.Skinny:\n          return [oracleType, SkinnyFactory(config, EventHandler(oracleType, emit), sortedRequests)];\n        case OracleType.OptimisticV2:\n          return [oracleType, OptimisticV2Factory(config, EventHandler(oracleType, emit), sortedRequests)];\n        default:\n          throw new Error(\"Unknown oracle type: \" + oracleType);\n      }\n    })\n  );\n};\n"],"names":["Factory","RegistryEthers__factory","connect","address","provider","reduceEvents","state","event","_state","_extends2","typedEvent","contractAddress","args","contracts","_extends","getEventState","events","reduce","exists","value","undefined","Balances","balances","create","id","amount","assert","has","set","add","BigNumber","from","getOrCreate","toString","sub","get","ConvertDecimals","fromDecimals","toDecimals","isZero","diff","div","pow","mul","sleep","delay","Promise","res","setTimeout","loop","_x","_x2","_loop","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","fn","_len","_key","_args2","wrap","_callee2$","_context2","prev","next","length","Array","stop","BatchReadWithErrors","multicall2","contract","_ref","_callee","calls","results","_callee$","_context","batch","map","_ref2","method","slice","readWithErrors","sent","abrupt","Object","fromEntries","zip","_ref3","call","result","_x3","averageBlockTimeSeconds","_x4","_averageBlockTimeSeconds","_callee3","chainId","defaultBlockTimeSeconds","_callee3$","_context3","t0","estimateBlocksElapsed","_x5","_x6","_x7","_estimateBlocksElapsed","_callee4","seconds","cushionPercentage","cushionMultiplier","averageBlockTime","_callee4$","_context4","Math","floor","ExpiringMultiPartyEthers__factory","_typedEvent$args","oldSponsor","newSponsor","tokens","collateral","collateralBalance","tokenBalance","_typedEvent$args2","sponsor","collateralAmount","tokenAmount","sponsors","Set","values","_typedEvent3$args","caller","collateralReturned","tokensBurned","expired","_typedEvent4$args","_typedEvent5$args","tokensOutstanding","liquidatedCollateral","_typedEvent6$args","initialState","ERC20Ethers__factory","to","owner","spender","MulticallEthers__factory","Multicall2Ethers__factory","LongShortPairCreatorEthers__factory","longShortPair","eventState","LongShortPairEthers__factory","collateralUsed","tokensMinted","longs","shorts","tokensRedeemed","expiredBy","longTokens","shortTokens","BridgeDepositBoxEthers__factory","newMinimumBridgingDelay","minimumBridgingDelay","l1Token","l2Token","lastBridgeTime","bridgePool","whitelistedTokens","_extends3","_typedEvent2$args","depositsEnabled","_extends4","depositId","l1Recipient","l2Sender","slowRelayFeePct","instantRelayFeePct","quoteTimestamp","deposits","BridgePoolEthers__factory","attach","eventStateDefaults","lpTokens","relays","instantRelays","lpTokensMinted","liquidityProvider","lpTokensBurnt","depositHash","depositData","relay","relayAncillaryDataHash","instantRelayer","oldAdmin","newAdmin","Etherchain","url","_proto","prototype","getGasPrice","_getGasPrice","endpoint","msg","axios","data","Error","RateModelStoreEthers__factory","OptimisticOracleInterfaceEthers__factory","contractInterface","utils","Interface","getOptimisticOracleInterfaceAbi","RequestState","requestId","request","timestamp","identifier","requester","ancillaryData","join","currency","reward","finalFee","requests","Requested","requestTx","transactionHash","requestBlockNumber","blockNumber","requestLogIndex","logIndex","proposer","proposedPrice","expirationTimestamp","expirationTime","Proposed","proposeTx","proposeBlockNumber","proposeLogIndex","disputer","Disputed","disputeTx","disputeBlockNumber","disputeLogIndex","price","payout","Settled","settleTx","settleBlockNumber","settleLogIndex","SkinnyOptimisticOracleEthers__factory","getSkinnyOptimisticOracleAbi","OptimisticOracleV2InterfaceEthers__factory","getOptimisticOracleV2InterfaceAbi","Map","_get","_set","_has","del","_del","entries","_entries","_callee5","_callee5$","_context5","_values","_callee6","_callee6$","_context6","keys","_keys","_callee7","_callee7$","_context7","size","_size","_callee8","_callee8$","_context8","clear","_clear","_callee9","_callee9$","_context9","ids","getStart","inclusive","sortedIndex","sortedLastIndex","getEnd","index","splice","getSafe","_delete","between","a","b","start","end","_context10","_callee10","_context11","_callee11","kind","store","excludeFromIndexes","makeKey","key","_yield$store$get","save","t1","_yield$store$createQu","createQuery","run","KEY","name","_yield$store$createQu2","_yield$store$createQu3","select","_callee10$","highland","runStream","val","_x10","flatMap","collect","toPromise","_slice","_yield$store$createQu4","_callee11$","filter","limit","_x8","_x9","_between","_callee12","_yield$store$createQu5","_callee12$","_context12","Table","config","makeId","type","_create","t2","update","_update","got","number","JsMap","table","BaseTable","prune","_prune","blocks","deleted","_iterator","_step","block","_block$id","_createForOfIteratorHelperLoose","done","push","addSponsors","_addSponsors","concat","setCreatedTimestamp","_setCreatedTimestamp","createdTimestamp","padStart","SortedJsMap","betweenByTimestamp","sliceByTimestamp","hasByTimestamp","getByTimestamp","_getOrCreate","upsert","_upsert","toBN","num","toBNWei","decimals","ethers","parseUnits","toWei","fromWei","formatUnits","min","bna","bnb","lte","max","gte","fixedPointAdjustment","ethToToken","fromAmount","priceWei","toAmount","gasToEth","gas","gasPrice","calculateGasFees","amountEth","percent","numerator","denominator","calcContinuousCompoundInterest","startAmount","endAmount","periodsElapsed","periodsPerYear","years","Decimal","ln","calcPeriodicCompoundInterest","n","A","P","t","one","calcApr","calculateInstantaneousRate","rateModel","utilization","beforeKink","UBar","R1","afterKink","R2","R0","calculateAreaUnderRateCurve","utilizationBeforeKink","rectangle1Area","triangle1Area","utilizationAfter","rectangle2Area","triangle2Area","convertApyToWeeklyFee","apy","weeklyFeePct","plus","dividedBy","minus","times","calculateApyFromUtilization","utilizationBeforeDeposit","utilizationAfterDeposit","eq","areaBeforeDeposit","areaAfterDeposit","calculateRealizedLpFeePct","SLOW_ETH_GAS","SLOW_ERC_GAS","SLOW_UMA_GAS","FAST_ETH_GAS","FAST_ERC_GAS","FAST_UMA_GAS","SPEED_UP_ETH_GAS","SPEED_UP_ERC_GAS","SPEED_UP_UMA_GAS","DEFAULT_GAS_DISCOUNT","expectedRateModelKeys","L2_STATE_COMMITMENT_DELAY_BLOCKS","AddressZero","constants","ADDRESSES","ETH","UMA","WETH","USDC","RateModel","SECONDS_PER_YEAR","DEFAULT_BLOCK_DELTA","RateModelDictionary","_throwIfNotInitialized","rateModelDictionary","updateWithEvents","rateModelEvents","createRateModelEventDictionary","getRateModelForBlockNumber","l1TokenNormalized","getAddress","parseAndReturnRateModelFromString","firstEventBlockNumber","reverse","find","getL1TokensFromRateModel","_this","rateModelString","rateModelFromEvent","JSON","parse","includes","_i","_Object$keys","updatedRateModelEventsForToken","sort","transactionIndex","_iterator2","_step2","updatedRateModelEvent","BlockFinder","requestBlock","getBlockForTimestamp","_getBlockForTimestamp","initialBlock","cushion","incrementDistance","multiplier","distance","_block","Number","getLatestBlock","getBlock","sortedIndexBy","findBlock","_getLatestBlock","_this$blocks$index","_getBlock","_this$blocks$index2","_this$blocks$index3","_findBlock","_startBlock","_endBlock","startBlock","endBlock","totalTimeDifference","totalBlockDistance","blockPercentile","estimatedBlock","newBlock","round","clamp","LpFeeCalculator","blockFinder","bind","getLpFeePct","_getLpFeePct","tokenAddress","bridgePoolAddress","bridgePoolInstance","rateModelStoreAddress","rateModelStoreInstance","targetBlock","blockTag","_yield$Promise$all","currentUt","nextUt","rateModelForBlockHeight","gt","rateModelStore","getNetwork","all","callStatic","liquidityUtilizationCurrent","liquidityUtilizationPostRelay","l1TokenRateModels","Coingecko","host","getHistoricContractPrices","_getHistoricContractPrices","toLowerCase","prices","getContractDetails","_getContractDetails","contract_address","platform_id","getCurrentPriceByContract","_getCurrentPriceByContract","last_updated","getContractPrices","_getContractPrices","addresses","contract_addresses","lookup","last_updated_at","_x11","_x12","getPlatforms","_getPlatforms","_call","path","_x13","getGasFee","_getGasFee","ethersProvider","_yield$ethersProvider","baseFeePerGas","priorityFeePerGas","fastest","priorityFeePerGasWei","coingecko","_yield$coingecko$getC","tokenPrice","erc20Client","erc20Connect","makeSlowGasTable","DEFAULT","makeInstantGasTable","GetGasByAddress","gasTable","getInstantGasByAddress","getSlowGasByAddress","getDepositFees","_getDepositFees","amountToRelay","discountPercent","slowGas","slowGasDiscounted","slowGasFee","instantGas","instantGasDiscounted","instantGasFee","slowPct","instantPct","getDepositFeesDetails","_getDepositFeesDetails","feeLimitPercent","_yield$getDepositFees","slowTotal","instantTotal","isAmountTooLow","instant","pct","total","slow","Multicall","multicallClient","contractInstance","encodeRequest","target","callData","encodeFunctionData","decodeResponse","response","decodeFunctionResult","child","forEach","read","_read","_requests","encodedRequests","aggregate","_yield$this$multicall","returnData","zipped","_Multicall","_inheritsLoose","multicall","Multicall2","_readWithErrors","tryBlockAndAggregate","success","Multicall2Factory","_Multicall2","tx","stringify","signer","emit","_config$confirmations","confirmations","submissions","mined","unsignedTx","populated","processRequest","_processRequest","sendTransaction","hash","processSubmission","_processSubmission","receipt","getTransactionReceipt","isMined","_isMined","PoolState","batchRead","latestBlock","previousBlock","exchangeRatePrevious","exchangeRateCurrent","PoolEventState","params","seen","hasEvent","addEvent","iface","abi","_proto2","_read2","userAddress","queryFilter","filters","LiquidityAdded","LiquidityRemoved","t3","t4","filterSeen","makeEventFromLog","log","description","parseLog","eventSignature","signature","readTxReceipt","logs","_this2","err","UserState","_proto3","_read3","user","balanceOf","calculateRemoval","amountWei","percentWei","receive","remain","recieve","previewRemoval","percentFloat","position","totalDeposited","fees","feesEarned","positionValue","joinUserState","poolState","userState","poolAddress","joinPoolState","totalPoolSize","liquidReserves","utilizedReserves","secondsElapsed","blocksElapsed","estimatedApy","estimatedApr","projectedApr","pendingReserves","ReadPoolClient","multicallAddress","_proto4","_read4","validateWithdraw","pool","lpTokenAmount","l1TokensToReturn","Client","deps","pools","users","transactions","multicall2Address","rateModelInstance","_proto5","getOrCreatePoolContract","poolContracts","getOrCreatePoolEvents","poolEvents","getOrCreateTransactionManager","transactionManagers","txman","TransactionManager","_this3","txReceipt","updatePool","toAddress","then","updateUserWithTransaction","fromAddress","error","addEthLiquidity","_addEthLiquidity","l1TokenAmount","overrides","populateTransaction","addLiquidity","addTokenLiquidity","_addTokenLiquidity","_x14","_validateWithdraw2","lpAmount","hasPool","getPool","hasUser","updateUser","getUser","_x15","_x16","_x17","removeTokenLiquidity","_removeTokenLiquidity","removeLiquidity","_x18","_x19","_x20","_x21","removeEthliquidity","_removeEthliquidity","_x22","_x23","_x24","_x25","Boolean","hasTx","getTx","_updateUserWithTransaction","getUserState","getPoolEventState","_x26","_x27","_x28","_updateUser","_x29","_x30","_updatePool","_this$config$blockDel","blockDelta","rateModelRaw","_x31","updateTransactions","_updateTransactions","_callee13","_Object$values","txMan","_callee13$","_context13","startInterval","_startInterval","_callee15","delayMs","_this4","_callee15$","_context15","intervalStarted","_callee14","_callee14$","_context14","_x32","stopInterval","_stopInterval","_callee16","_callee16$","_context16","l1Contracts","Proxy__OVM_L1StandardBridge","OptimismBridgeClient","getL1BridgeAddress","l1StandardBridgeAddress","depositERC20","_depositERC","l1Signer","l1Erc20Address","l2Erc20Address","l1StandardBridge","l1_ERC20","getChainId","OptimismL1StandardBridgeEthers__factory","L2_DEPOSIT_GAS_LIMIT","depositEth","_depositEth","depositETH","waitRelayToL2","_waitRelayToL","l1RpcProvider","l2RpcProvider","l2Messenger","l1Messenger","watcher","_yield$watcher$getMes","msgHash1","Contract","predeploys","L2CrossDomainMessenger","getContractInterface","l1CrossDomainMessenger","Watcher","l1","messengerAddress","l2","getMessageHashesFromL1Tx","getL2TransactionReceipt","checkAllowance","_checkAllowance","allowance","approve","_approve","ADDRESS_MANAGER_ADDRESS","BobaBridgeClient","_getL1BridgeAddress","l1Provider","addressManagerAddress","addressManager","BobaAddressManagerEthers__factory","formatBytes32String","Date","getTime","proxyL1CrossDomainMessengerAddress","l2CrossDomainMessenger","msgHash","ExistenceError","_Error","message","setPrototypeOf","_assertThisInitialized","_wrapNativeSuper","assertExists","condition","ignoreExistenceError","ignoreExistenceErrorAsync","_ignoreExistenceErrorAsync","OracleType","Flag","ContextType","hexValue","initFlags","MissingRequest","MissingUser","WrongChain","CanPropose","CanDispute","CanSettle","InDvmVote","RequestSettled","InsufficientBalance","InsufficientApproval","ProposalTxInProgress","ApprovalTxInProgress","DisputeTxInProgress","ChainChangeInProgress","nowS","now","getFlags","Read","flags","inputRequest","userChainId","requestChainId","Resolved","Expired","bond","totalBond","userCollateralBalance","userCollateralAllowance","lt","commands","filterCommands","command","proposePrice","disputePrice","switchOrAddChain","getMulticall2Address","DefaultChainConfig","chainConfig","checkTxIntervalSec","DefaultConfig","getters","oracleType","chains","TransactionConfirmer","getReceipt","_getReceipt","isConfirmed","_isConfirmed","chainConfigToChainMetadata","chainMetadata","_objectWithoutPropertiesLoose","_excluded","rangeStart","_state$multiplier","maxRange","range","currentRange","currentStart","currentEnd","rangeSuccessDescending","_state$multiplier2","nextRange","ceil","nextEnd","nextStart","rangeFailureDescending","_state$multiplier3","eventKey","_event$logIndex","insertOrderedAscending","array","element","orderBy","sortedLastIndexBy","isUnique","elementId","found","isSupportedOracleType","batchProps","Erc20","erc20","getProps","_getProps","symbol","totalSupply","Erc20Multicall","_Erc","_getProps2","factory","User","props","balance","account","allowances","OptimisticOracle","defaultLiveness","Chain","erc20s","_this$state","_this$state$erc20s","optimisticOracle","_this$state2","currentTime","Inputs","_proto6","Services","_proto7","_this$state3","_this$state4","_this$state5","Erc20Factory","Write","_proto8","_this$state6","_this$state7","_this$state7$chains","inputs","services","context","sortedRequestsService","sortedRequests","_this$state8","_this$state8$services","descendingRequests","optionalChainId","_this$state$config","_this$state$config$ch","source","_this$state2$config","_this$state3$inputs","_this$state3$inputs$r","_this$state4$inputs","_this$state5$inputs","_this$state5$inputs$u","chain","_this$state6$chains","_this$state7$inputs","_this$state7$inputs$u","requestChain","_chain$optimisticOrac","_this$state8$inputs","_this$state8$inputs$u","input","_this$state9","_this$state9$inputs","liveness","_chain$optimisticOrac2","_chain$optimisticOrac3","_chain$optimisticOrac4","_chain$erc20s","_chain$erc20s$request","_chain$erc20s2","_chain$erc20s2$reques","_chain$erc20s2$reques2","oracle","oracleAddress","_chain$erc20s3","_chain$erc20s3$reques","_chain$erc20s3$reques2","_chain$erc20s3$reques3","_this$state10","_this$state10$service","_this$state10$service2","_this$state10$service3","_this$state11","_this$state11$service","_this$state11$service2","_this$state11$service3","_this$state11$service4","_this$state12","_this$state12$command","_this$state13","_this$state13$service","_this$state13$service2","_this$state13$service3","_this$state13$service4","_this$state14","_this$state14$service","_this$state14$service2","_this$state14$service3","_this$state15","search","listCommands","_this$state16","_this$state16$chains","time","_this$state17","_this$state17$service","_this$state18","query","Has","collateralProps","Store","write","cb","prevState","produce","writeAsync","_writeAsync","OracleStore","Update","oracleAllowance","oo","contractRequest","oracleService","fetchRequest","_yield$oo$getProps","token","collateralService","_ref7","tokenService","_ref8","_ref9","txService","transactionService","_ref10","getBlockNumber","listRequests","setByRequest","descending","w","requestIndexData","getRequest","initMemory","Handlers","memory","t5","t6","t7","confirm","updateFromTransactionReceipt","send","code","addAndSwitch","iterations","ctx","shouldUpdate","Invalid","_ref$checkTxIntervalS","_params$startBlock","_params$endBlock","rangeState","oracleEvents","activeRequestFromEvents","_memory$state","_params$pollRateSec","pollRateSec","currentBlock","lastBlock","_params$eventIndex","eventIndex","filteredRequests","_request$requestTx","_request$proposeTx","_request$disputeTx","_request$settleTx","_request$requestLogIn","_request$proposeLogIn","_request$disputeLogIn","_request$settleLogInd","requestInput","oracleLogs","decodedLogs","_log$logIndex","settle","_params$concurrency","concurrency","requestsToFetch","eventBased","bluebird","ContextClient","ms","Step","handlers","copy","handler","assign","updated","shouldStep","override","uid","created","ContextManager","step","StateMachine","saveContext","shift","setUser","clearUser","setActiveRequest","pollActiveRequest","pollActiveUser","fetchPastEvents","pollNewEvents","setActiveRequestByTransaction","updateActiveRequest","fetchEventBased","types","_this$types","handleCreate","pending","pop","sm","poller","approveCollateral","_this$store$read$chai","MaxUint256","proposedPriceDecimals","_this$store$read$chai2","_this$store$read$chai3","_this$store$read$chai4","tick","console","makeProvider","rpcUrls","providers","getDefaultProvider","polling","FallbackProvider","optimisticOracleAddress","_i2","_Object$entries","_Object$entries$_i","earliestBlockNumber","maxEventRangeQuery","disableFetchEventBased","cachedRequest","_optimisticOracle$get","_optimisticOracle$get2","upsertRequest","setDisputeHash","setProposeHash","setSettleHash","_fetchRequest","_ref4","getState","_disputePrice","_ref5","_proposePrice","_ref6","_settle","updateFromEvents","SortedStore","SortedRequests","_SortedStore","ascending","getByRequest","validateSolidityRequest","settled","resolvedPrice","customLiveness","SkinnyOptimisticOracle","OptimisticOracleV2","requestSettings","_getEventState","_getEventState$reques","fullConfig","Skinny","Optimistic","OptimisticV2","EventHandler","publicEmit","configTable","OptimisticFactory","SkinnyFactory","OptimisticV2Factory"],"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"}