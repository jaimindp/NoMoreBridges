"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.constructSimpleTree = void 0;
const utils_1 = require("../utils/utils");
const consts = __importStar(require("./constants"));
const HubPool_Fixture_1 = require("./fixtures/HubPool.Fixture");
const MerkleLib_utils_1 = require("./MerkleLib.utils");
let hubPool, mockAdapter, weth, dai, mockSpoke, timer;
let owner, dataWorker, liquidityProvider;
let l2Weth, l2Dai;
// Construct the leaves that will go into the merkle tree. For this function create a simple set of leaves that will
// repay two token to one chain Id with simple lpFee, netSend and running balance amounts.
async function constructSimpleTree() {
    const wethToSendToL2 = (0, utils_1.toBNWei)(100);
    const daiToSend = (0, utils_1.toBNWei)(1000);
    const leaves = (0, MerkleLib_utils_1.buildPoolRebalanceLeaves)([consts.repaymentChainId, consts.repaymentChainId], // repayment chain.
    [[weth.address, dai.address], []], // l1Token. We will only be sending WETH and DAI to the associated repayment chain.
    [[(0, utils_1.toBNWei)(1), (0, utils_1.toBNWei)(10)], []], // bundleLpFees. Set to 1 ETH and 10 DAI respectively to attribute to the LPs.
    [[wethToSendToL2, daiToSend], []], // netSendAmounts. Set to 100 ETH and 1000 DAI as the amount to send from L1->L2.
    [[wethToSendToL2, daiToSend], []], // runningBalances. Set to 100 ETH and 1000 DAI.
    [0, 1] // groupIndex. Second leaf should not relay roots to spoke pool.
    );
    const tree = await (0, MerkleLib_utils_1.buildPoolRebalanceLeafTree)(leaves);
    return { wethToSendToL2, daiToSend, leaves, tree };
}
exports.constructSimpleTree = constructSimpleTree;
describe("HubPool Root Bundle Execution", function () {
    beforeEach(async function () {
        [owner, dataWorker, liquidityProvider] = await utils_1.ethers.getSigners();
        ({ weth, dai, hubPool, mockAdapter, mockSpoke, timer, l2Weth, l2Dai } = await (0, HubPool_Fixture_1.hubPoolFixture)());
        await (0, utils_1.seedWallet)(dataWorker, [dai], weth, consts.bondAmount.add(consts.finalFee).mul(2));
        await (0, utils_1.seedWallet)(liquidityProvider, [dai], weth, consts.amountToLp.mul(10));
        await (0, HubPool_Fixture_1.enableTokensForLP)(owner, hubPool, weth, [weth, dai]);
        await weth.connect(liquidityProvider).approve(hubPool.address, consts.amountToLp);
        await hubPool.connect(liquidityProvider).addLiquidity(weth.address, consts.amountToLp);
        await dai.connect(liquidityProvider).approve(hubPool.address, consts.amountToLp.mul(10)); // LP with 10000 DAI.
        await hubPool.connect(liquidityProvider).addLiquidity(dai.address, consts.amountToLp.mul(10));
        await weth.connect(dataWorker).approve(hubPool.address, consts.bondAmount.mul(10));
    });
    it("Executing root bundle correctly produces the relay bundle call and sends repayment actions", async function () {
        const { wethToSendToL2, daiToSend, leaves, tree } = await constructSimpleTree();
        await hubPool.connect(dataWorker).proposeRootBundle([3117, 3118], // bundleEvaluationBlockNumbers used by bots to construct bundles. Length must equal the number of leaves.
        2, // poolRebalanceLeafCount.
        tree.getHexRoot(), // poolRebalanceRoot. Generated from the merkle tree constructed before.
        consts.mockRelayerRefundRoot, // Not relevant for this test.
        consts.mockSlowRelayRoot // Not relevant for this test.
        );
        // Advance time so the request can be executed and execute first leaf.
        await timer.setCurrentTime(Number(await timer.getCurrentTime()) + consts.refundProposalLiveness + 1);
        (0, utils_1.expect)(await hubPool.connect(dataWorker).executeRootBundle(...Object.values(leaves[0]), tree.getHexProof(leaves[0]))).to.emit(hubPool, "RootBundleExecuted");
        // Balances should have updated as expected. Note that pool should still have bond remaining since a leaf
        // is unexecuted.
        (0, utils_1.expect)(await weth.balanceOf(hubPool.address)).to.equal(consts.amountToLp.sub(wethToSendToL2).add(consts.bondAmount.add(consts.finalFee)));
        (0, utils_1.expect)(await weth.balanceOf(await mockAdapter.bridge())).to.equal(wethToSendToL2);
        (0, utils_1.expect)(await dai.balanceOf(hubPool.address)).to.equal(consts.amountToLp.mul(10).sub(daiToSend));
        (0, utils_1.expect)(await dai.balanceOf(await mockAdapter.bridge())).to.equal(daiToSend);
        // Since the mock adapter is delegatecalled, when querying, its address should be the hubPool address.
        const mockAdapterAtHubPool = mockAdapter.attach(hubPool.address);
        // Check the mockAdapter was called with the correct arguments for each method.
        const relayMessageEvents = await mockAdapterAtHubPool.queryFilter(mockAdapterAtHubPool.filters.RelayMessageCalled());
        (0, utils_1.expect)(relayMessageEvents.length).to.equal(1); // Exactly one message sent from L1->L2.
        (0, utils_1.expect)(relayMessageEvents[relayMessageEvents.length - 1].args?.target).to.equal(mockSpoke.address);
        (0, utils_1.expect)(relayMessageEvents[relayMessageEvents.length - 1].args?.message).to.equal(mockSpoke.interface.encodeFunctionData("relayRootBundle", [
            consts.mockRelayerRefundRoot,
            consts.mockSlowRelayRoot,
        ]));
        const relayTokensEvents = await mockAdapterAtHubPool.queryFilter(mockAdapterAtHubPool.filters.RelayTokensCalled());
        (0, utils_1.expect)(relayTokensEvents.length).to.equal(2); // Exactly two token transfers from L1->L2.
        (0, utils_1.expect)(relayTokensEvents[0].args?.l1Token).to.equal(weth.address);
        (0, utils_1.expect)(relayTokensEvents[0].args?.l2Token).to.equal(l2Weth);
        (0, utils_1.expect)(relayTokensEvents[0].args?.amount).to.equal(wethToSendToL2);
        (0, utils_1.expect)(relayTokensEvents[0].args?.to).to.equal(mockSpoke.address);
        (0, utils_1.expect)(relayTokensEvents[1].args?.l1Token).to.equal(dai.address);
        (0, utils_1.expect)(relayTokensEvents[1].args?.l2Token).to.equal(l2Dai);
        (0, utils_1.expect)(relayTokensEvents[1].args?.amount).to.equal(daiToSend);
        (0, utils_1.expect)(relayTokensEvents[1].args?.to).to.equal(mockSpoke.address);
        // Check the leaf count was decremented correctly.
        (0, utils_1.expect)((await hubPool.rootBundleProposal()).unclaimedPoolRebalanceLeafCount).to.equal(1);
    });
    it("Executing two leaves with the same chain ID does not relay root bundle to spoke pool twice", async function () {
        const { leaves, tree } = await constructSimpleTree();
        await hubPool
            .connect(dataWorker)
            .proposeRootBundle([3117, 3118], 2, tree.getHexRoot(), consts.mockRelayerRefundRoot, consts.mockSlowRelayRoot);
        // Advance time so the request can be executed and execute two leaves with same chain ID.
        await timer.setCurrentTime(Number(await timer.getCurrentTime()) + consts.refundProposalLiveness + 1);
        await hubPool.connect(dataWorker).executeRootBundle(...Object.values(leaves[0]), tree.getHexProof(leaves[0]));
        await hubPool.connect(dataWorker).executeRootBundle(...Object.values(leaves[1]), tree.getHexProof(leaves[1]));
        // Since the mock adapter is delegatecalled, when querying, its address should be the hubPool address.
        const mockAdapterAtHubPool = mockAdapter.attach(hubPool.address);
        // Check the mockAdapter was called with the correct arguments for each method. The event counts should be identical
        // to the above test.
        const relayMessageEvents = await mockAdapterAtHubPool.queryFilter(mockAdapterAtHubPool.filters.RelayMessageCalled());
        (0, utils_1.expect)(relayMessageEvents.length).to.equal(1); // Exactly one message sent from L1->L2.
        // and 1 for the initiateRelayerRefund.
        (0, utils_1.expect)(relayMessageEvents[relayMessageEvents.length - 1].args?.target).to.equal(mockSpoke.address);
        (0, utils_1.expect)(relayMessageEvents[relayMessageEvents.length - 1].args?.message).to.equal(mockSpoke.interface.encodeFunctionData("relayRootBundle", [
            consts.mockRelayerRefundRoot,
            consts.mockSlowRelayRoot,
        ]));
    });
    it("Executing all leaves returns bond to proposer", async function () {
        const { leaves, tree } = await constructSimpleTree();
        await hubPool
            .connect(dataWorker)
            .proposeRootBundle([3117, 3118], 2, tree.getHexRoot(), consts.mockRelayerRefundRoot, consts.mockSlowRelayRoot);
        // Advance time so the request can be executed and execute both leaves.
        await timer.setCurrentTime(Number(await timer.getCurrentTime()) + consts.refundProposalLiveness + 1);
        await hubPool.connect(dataWorker).executeRootBundle(...Object.values(leaves[0]), tree.getHexProof(leaves[0]));
        // Second execution sends bond back to data worker.
        const bondAmount = consts.bondAmount.add(consts.finalFee);
        (0, utils_1.expect)(await hubPool.connect(dataWorker).executeRootBundle(...Object.values(leaves[1]), tree.getHexProof(leaves[1]))).to.changeTokenBalances(weth, [dataWorker, hubPool], [bondAmount, bondAmount.mul(-1)]);
    });
    it("Reverts if spoke pool not set for chain ID", async function () {
        const { leaves, tree } = await constructSimpleTree();
        await hubPool
            .connect(dataWorker)
            .proposeRootBundle([3117, 3118], 2, tree.getHexRoot(), consts.mockRelayerRefundRoot, consts.mockSlowRelayRoot);
        // Set spoke pool to address 0x0
        await hubPool.setCrossChainContracts(consts.repaymentChainId, mockAdapter.address, consts.zeroAddress);
        // Advance time so the request can be executed and check that executing the request reverts.
        await timer.setCurrentTime(Number(await timer.getCurrentTime()) + consts.refundProposalLiveness + 1);
        await (0, utils_1.expect)(hubPool.connect(dataWorker).executeRootBundle(...Object.values(leaves[0]), tree.getHexProof(leaves[0]))).to.be.revertedWith("SpokePool not initialized");
    });
    it("Reverts if adapter not set for chain ID", async function () {
        const { leaves, tree } = await constructSimpleTree();
        await hubPool
            .connect(dataWorker)
            .proposeRootBundle([3117, 3118], 2, tree.getHexRoot(), consts.mockRelayerRefundRoot, consts.mockSlowRelayRoot);
        // Set adapter to random address.
        await hubPool.setCrossChainContracts(consts.repaymentChainId, (0, utils_1.randomAddress)(), mockSpoke.address);
        // Advance time so the request can be executed and check that executing the request reverts.
        await timer.setCurrentTime(Number(await timer.getCurrentTime()) + consts.refundProposalLiveness + 1);
        await (0, utils_1.expect)(hubPool.connect(dataWorker).executeRootBundle(...Object.values(leaves[0]), tree.getHexProof(leaves[0]))).to.be.revertedWith("Adapter not initialized");
    });
    it("Reverts if destination token is zero address for a pool rebalance route", async function () {
        const { leaves, tree } = await constructSimpleTree();
        await hubPool.connect(dataWorker).proposeRootBundle([3117], // bundleEvaluationBlockNumbers used by bots to construct bundles. Length must equal the number of leaves.
        1, // poolRebalanceLeafCount. There is exactly one leaf in the bundle (just sending WETH to one address).
        tree.getHexRoot(), // poolRebalanceRoot. Generated from the merkle tree constructed before.
        consts.mockRelayerRefundRoot, // Not relevant for this test.
        consts.mockSlowRelayRoot // Not relevant for this test.
        );
        // Let's set weth pool rebalance route to zero address.
        await hubPool.setPoolRebalanceRoute(consts.repaymentChainId, weth.address, consts.zeroAddress);
        // Advance time so the request can be executed and check that executing the request reverts.
        await timer.setCurrentTime(Number(await timer.getCurrentTime()) + consts.refundProposalLiveness + 1);
        await (0, utils_1.expect)(hubPool.connect(dataWorker).executeRootBundle(...Object.values(leaves[0]), tree.getHexProof(leaves[0]))).to.be.revertedWith("Route not whitelisted");
    });
    it("Execution rejects leaf claim before liveness passed", async function () {
        const { leaves, tree } = await constructSimpleTree();
        await hubPool
            .connect(dataWorker)
            .proposeRootBundle([3117, 3118], 2, tree.getHexRoot(), consts.mockRelayerRefundRoot, consts.mockSlowRelayRoot);
        // Set time 10 seconds before expiration. Should revert.
        await timer.setCurrentTime(Number(await timer.getCurrentTime()) + consts.refundProposalLiveness - 10);
        await (0, utils_1.expect)(hubPool.connect(dataWorker).executeRootBundle(...Object.values(leaves[0]), tree.getHexProof(leaves[0]))).to.be.revertedWith("Not passed liveness");
        // Set time after expiration. Should no longer revert.
        await timer.setCurrentTime(Number(await timer.getCurrentTime()) + 11);
        await hubPool.connect(dataWorker).executeRootBundle(...Object.values(leaves[0]), tree.getHexProof(leaves[0]));
    });
    it("Execution rejects invalid leaves", async function () {
        const { leaves, tree } = await constructSimpleTree();
        await hubPool
            .connect(dataWorker)
            .proposeRootBundle([3117, 3118], 2, tree.getHexRoot(), consts.mockRelayerRefundRoot, consts.mockSlowRelayRoot);
        await timer.setCurrentTime(Number(await timer.getCurrentTime()) + consts.refundProposalLiveness + 1);
        // Take the valid root but change some element within it, such as the chainId. This will change the hash of the leaf
        // and as such the contract should reject it for not being included within the merkle tree for the valid proof.
        const badLeaf = { ...leaves[0], chainId: 13371 };
        await (0, utils_1.expect)(hubPool.connect(dataWorker).executeRootBundle(...Object.values(badLeaf), tree.getHexProof(leaves[0]))).to.be.revertedWith("Bad Proof");
    });
    it("Execution rejects double claimed leaves", async function () {
        const { leaves, tree } = await constructSimpleTree();
        await hubPool
            .connect(dataWorker)
            .proposeRootBundle([3117, 3118], 2, tree.getHexRoot(), consts.mockRelayerRefundRoot, consts.mockSlowRelayRoot);
        await timer.setCurrentTime(Number(await timer.getCurrentTime()) + consts.refundProposalLiveness + 1);
        // First claim should be fine. Second claim should be reverted as you cant double claim a leaf.
        await hubPool.connect(dataWorker).executeRootBundle(...Object.values(leaves[0]), tree.getHexProof(leaves[0]));
        await (0, utils_1.expect)(hubPool.connect(dataWorker).executeRootBundle(...Object.values(leaves[0]), tree.getHexProof(leaves[0]))).to.be.revertedWith("Already claimed");
    });
    it("Cannot execute while paused", async function () {
        const { leaves, tree } = await constructSimpleTree();
        await hubPool
            .connect(dataWorker)
            .proposeRootBundle([3117, 3118], 2, tree.getHexRoot(), consts.mockRelayerRefundRoot, consts.mockSlowRelayRoot);
        // Advance time so the request can be executed and execute the request.
        await timer.setCurrentTime(Number(await timer.getCurrentTime()) + consts.refundProposalLiveness + 1);
        // Should revert while paused.
        await hubPool.setPaused(true);
        await (0, utils_1.expect)(hubPool.connect(dataWorker).executeRootBundle(...Object.values(leaves[0]), tree.getHexProof(leaves[0]))).to.be.reverted;
        // Should not revert after unpaused.
        await hubPool.setPaused(false);
        await (0, utils_1.expect)(hubPool.connect(dataWorker).executeRootBundle(...Object.values(leaves[0]), tree.getHexProof(leaves[0]))).to.not.be.reverted;
    });
});
