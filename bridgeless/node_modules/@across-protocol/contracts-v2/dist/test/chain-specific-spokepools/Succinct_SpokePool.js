"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../../utils/utils");
const utils_hre_1 = require("../../utils/utils.hre");
const HubPool_Fixture_1 = require("../fixtures/HubPool.Fixture");
let succinctSpokePool, weth;
let owner, succinctTargetAmb, rando, hubPool;
const l1ChainId = 45;
describe("Succinct Spoke Pool", function () {
    beforeEach(async function () {
        [hubPool, succinctTargetAmb, rando] = await utils_1.ethers.getSigners();
        ({ weth } = await (0, HubPool_Fixture_1.hubPoolFixture)());
        succinctSpokePool = await utils_hre_1.hre.upgrades.deployProxy(await (0, utils_1.getContractFactory)("Succinct_SpokePool", owner), [l1ChainId, succinctTargetAmb.address, 0, hubPool.address, hubPool.address], { kind: "uups", unsafeAllow: ["delegatecall"], constructorArgs: [weth.address, 60 * 60, 9 * 60 * 60] });
    });
    it("Only correct caller can set the cross domain admin", async function () {
        // Cannot call directly
        await (0, utils_1.expect)(succinctSpokePool.connect(rando).setCrossDomainAdmin(rando.address)).to.be.reverted;
        const setCrossDomainAdminData = succinctSpokePool.interface.encodeFunctionData("setCrossDomainAdmin", [
            rando.address,
        ]);
        // Wrong origin chain id address.
        await (0, utils_1.expect)(succinctSpokePool.connect(succinctTargetAmb).handleTelepathy(44, hubPool.address, setCrossDomainAdminData)).to.be.revertedWith("source chain not hub chain");
        // Wrong rootMessageSender address.
        await (0, utils_1.expect)(succinctSpokePool.connect(succinctTargetAmb).handleTelepathy(l1ChainId, rando.address, setCrossDomainAdminData)).be.revertedWith("sender not hubPool");
        // Wrong calling address.
        await (0, utils_1.expect)(succinctSpokePool.connect(rando).handleTelepathy(l1ChainId, hubPool.address, setCrossDomainAdminData)).to.be.revertedWith("caller not succinct AMB");
        await succinctSpokePool
            .connect(succinctTargetAmb)
            .handleTelepathy(l1ChainId, hubPool.address, setCrossDomainAdminData);
        (0, utils_1.expect)(await succinctSpokePool.crossDomainAdmin()).to.equal(rando.address);
    });
    it("Can upgrade succinct target AMB", async function () {
        // Cannot call directly
        await (0, utils_1.expect)(succinctSpokePool.connect(rando).setSuccinctTargetAmb(rando.address)).to.be.reverted;
        await (0, utils_1.expect)(succinctSpokePool.connect(succinctTargetAmb).setSuccinctTargetAmb(rando.address)).to.be.reverted;
        await (0, utils_1.expect)(succinctSpokePool.connect(hubPool).setSuccinctTargetAmb(rando.address)).to.be.reverted;
        const setSuccinctTargetAmb = succinctSpokePool.interface.encodeFunctionData("setSuccinctTargetAmb", [
            rando.address,
        ]);
        await succinctSpokePool
            .connect(succinctTargetAmb)
            .handleTelepathy(l1ChainId, hubPool.address, setSuccinctTargetAmb);
        (0, utils_1.expect)(await succinctSpokePool.succinctTargetAmb()).to.equal(rando.address);
    });
});
