"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../../utils/utils");
const SpokePool_Fixture_1 = require("../fixtures/SpokePool.Fixture");
const utils_2 = require("./utils");
const constants = __importStar(require("../constants"));
require("dotenv").config();
const bnZero = utils_1.ethers.constants.Zero;
let spokePool, weth, erc20;
let depositor;
// Constants caller can tune to modify gas tests.
const DEPOSIT_COUNT = 10;
const DEPOSIT_AMOUNT = (0, utils_1.toBNWei)("10");
describe("Gas Analytics: SpokePool Deposits", function () {
    before(async function () {
        if (!process.env.GAS_TEST_ENABLED)
            this.skip();
    });
    beforeEach(async function () {
        [depositor] = await utils_1.ethers.getSigners();
        ({ spokePool, weth, erc20 } = await (0, SpokePool_Fixture_1.spokePoolFixture)());
        // mint some fresh tokens and deposit ETH for weth for the depositor.
        // Note: Mint more than needed for this test to simulate production, otherwise reported gas costs
        // will be better because a storage slot is deleted.
        const totalDepositAmount = DEPOSIT_AMOUNT.mul(DEPOSIT_COUNT);
        await (0, utils_1.seedWallet)(depositor, [erc20], weth, totalDepositAmount.mul((0, utils_1.toBN)(100)));
        // Approve spokepool to spend tokens
        await erc20.connect(depositor).approve(spokePool.address, constants.maxUint256);
        await weth.connect(depositor).approve(spokePool.address, constants.maxUint256);
        // "warm" contract with 1 initial deposit to better estimate steady state gas costs of contract.
        await (0, utils_2.warmSpokePool)(spokePool, depositor, depositor, erc20.address, DEPOSIT_AMOUNT, DEPOSIT_AMOUNT, 0);
        await (0, utils_2.warmSpokePool)(spokePool, depositor, depositor, weth.address, DEPOSIT_AMOUNT, DEPOSIT_AMOUNT, 0);
    });
    describe(`ERC20 Deposits`, function () {
        it("1 Deposit", async function () {
            const txn = await (0, utils_2.sendDeposit)(spokePool, depositor, erc20.address, DEPOSIT_AMOUNT);
            const receipt = await txn.wait();
            console.log(`deposit-gasUsed: ${receipt.gasUsed}`);
        });
        it(`${DEPOSIT_COUNT} deposits`, async function () {
            const txns = [];
            for (let i = 0; i < DEPOSIT_COUNT; i++) {
                txns.push(await (0, utils_2.sendDeposit)(spokePool, depositor, erc20.address, DEPOSIT_AMOUNT));
            }
            // Compute average gas costs.
            const receipts = await Promise.all(txns.map((_txn) => _txn.wait()));
            const gasUsed = receipts.map((_receipt) => _receipt.gasUsed).reduce((x, y) => x.add(y));
            console.log(`(average) deposit-gasUsed: ${gasUsed.div(DEPOSIT_COUNT)}`);
        });
        it(`${DEPOSIT_COUNT} deposits using multicall`, async function () {
            const quoteTimestamp = (await spokePool.getCurrentTime()).toNumber();
            const multicallData = Array(DEPOSIT_COUNT).fill(spokePool.interface.encodeFunctionData("deposit", (0, SpokePool_Fixture_1.getDepositParams)({
                recipient: depositor.address,
                destinationChainId: 1,
                originToken: erc20.address,
                relayerFeePct: bnZero,
                quoteTimestamp,
                amount: DEPOSIT_AMOUNT,
            })));
            const receipt = await (await spokePool.connect(depositor).multicall(multicallData)).wait();
            console.log(`(average) deposit-gasUsed: ${receipt.gasUsed.div(DEPOSIT_COUNT)}`);
        });
    });
    describe(`WETH Deposits`, function () {
        it("1 ETH Deposit", async function () {
            const quoteTimestamp = (await spokePool.getCurrentTime()).toNumber();
            const txn = await spokePool.connect(depositor).deposit(...(0, SpokePool_Fixture_1.getDepositParams)({
                recipient: depositor.address,
                destinationChainId: 1,
                originToken: weth.address,
                relayerFeePct: bnZero,
                quoteTimestamp,
                amount: DEPOSIT_AMOUNT,
            }), { value: DEPOSIT_AMOUNT });
            const receipt = await txn.wait();
            console.log(`deposit-gasUsed: ${receipt.gasUsed}`);
        });
    });
});
