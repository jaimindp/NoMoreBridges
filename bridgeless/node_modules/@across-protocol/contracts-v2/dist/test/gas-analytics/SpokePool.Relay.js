"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../../utils/utils");
const utils_2 = require("./utils");
const constants = __importStar(require("../constants"));
const SpokePool_Fixture_1 = require("../fixtures/SpokePool.Fixture");
require("dotenv").config();
let spokePool, weth, erc20;
let depositor, recipient;
// Constants caller can tune to modify gas tests.
const RELAY_COUNT = 10;
const RELAY_AMOUNT = (0, utils_1.toBNWei)("10");
describe("Gas Analytics: SpokePool Relays", function () {
    before(async function () {
        if (!process.env.GAS_TEST_ENABLED)
            this.skip();
    });
    beforeEach(async function () {
        [depositor, recipient] = await utils_1.ethers.getSigners();
        ({ spokePool, weth, erc20 } = await (0, SpokePool_Fixture_1.spokePoolFixture)());
        // mint some fresh tokens and deposit ETH for weth for the relayer.
        // Note: Mint more than needed for this test to simulate production, otherwise reported gas costs
        // will be better because a storage slot is deleted.
        // Note 2: For the same reason as above, seed recipient address with wallet balance to better simulate production.
        const totalRelayAmount = RELAY_AMOUNT.mul(RELAY_COUNT);
        await (0, utils_1.seedWallet)(depositor, [erc20], weth, totalRelayAmount.mul((0, utils_1.toBN)(10)));
        await (0, utils_1.seedWallet)(recipient, [erc20], weth, totalRelayAmount.mul((0, utils_1.toBN)(10)));
        // Approve spokepool to spend tokens
        await erc20.connect(depositor).approve(spokePool.address, constants.maxUint256);
        await weth.connect(depositor).approve(spokePool.address, constants.maxUint256);
        // "warm" contract with 1 initial deposit and relay to better estimate steady state gas costs of contract.
        await (0, utils_2.warmSpokePool)(spokePool, depositor, depositor, erc20.address, RELAY_AMOUNT, RELAY_AMOUNT, 0);
        await (0, utils_2.warmSpokePool)(spokePool, depositor, depositor, weth.address, RELAY_AMOUNT, RELAY_AMOUNT, 0);
    });
    describe(`ERC20 Relays`, function () {
        it("1 Relay", async function () {
            const txn = await (0, utils_2.sendRelay)(spokePool, depositor, depositor.address, recipient.address, erc20.address, RELAY_AMOUNT, 0);
            const receipt = await txn.wait();
            console.log(`fillRelay-gasUsed: ${receipt.gasUsed}`);
        });
        it(`${RELAY_COUNT} Relays`, async function () {
            const txns = [];
            for (let i = 0; i < RELAY_COUNT; i++) {
                txns.push(await (0, utils_2.sendRelay)(spokePool, depositor, depositor.address, recipient.address, erc20.address, RELAY_AMOUNT, i));
            }
            // Compute average gas costs.
            const receipts = await Promise.all(txns.map((_txn) => _txn.wait()));
            const gasUsed = receipts.map((_receipt) => _receipt.gasUsed).reduce((x, y) => x.add(y));
            console.log(`(average) fillRelay-gasUsed: ${gasUsed.div(RELAY_COUNT)}`);
        });
        it(`${RELAY_COUNT} relays using multicall`, async function () {
            const multicallData = [...Array(RELAY_COUNT).keys()].map((i) => {
                return spokePool.interface.encodeFunctionData("fillRelay", (0, utils_2.constructRelayParams)(depositor.address, recipient.address, erc20.address, i, RELAY_AMOUNT));
            });
            const receipt = await (await spokePool.connect(depositor).multicall(multicallData)).wait();
            console.log(`(average) fillRelay-gasUsed: ${receipt.gasUsed.div(RELAY_COUNT)}`);
        });
    });
    describe(`WETH Relays`, function () {
        it("1 Relay", async function () {
            const txn = await (0, utils_2.sendRelay)(spokePool, depositor, depositor.address, recipient.address, weth.address, RELAY_AMOUNT, 0);
            const receipt = await txn.wait();
            console.log(`fillRelay-gasUsed: ${receipt.gasUsed}`);
        });
    });
});
