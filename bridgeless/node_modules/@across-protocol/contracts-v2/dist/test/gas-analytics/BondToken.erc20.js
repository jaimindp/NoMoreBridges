"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("../constants");
const utils_1 = require("../../utils/utils");
const BondToken_Fixture_1 = require("../fixtures/BondToken.Fixture");
const HubPool_Fixture_1 = require("../fixtures/HubPool.Fixture");
require("dotenv").config();
let bondToken, hubPool;
let owner, proposer, disputer;
describe("Gas Analytics: BondToken Transfers", function () {
    before(async function () {
        if (!process.env.GAS_TEST_ENABLED)
            this.skip();
    });
    beforeEach(async function () {
        let collateralWhitelist;
        [owner, proposer, disputer] = await utils_1.ethers.getSigners();
        ({ hubPool, collateralWhitelist } = await (0, HubPool_Fixture_1.hubPoolFixture)());
        ({ bondToken } = await (0, BondToken_Fixture_1.bondTokenFixture)(hubPool));
        await collateralWhitelist.addToWhitelist(bondToken.address);
        // Configure HubPool bond. BondTokenFixture() pre-registers bondToken as accepted OO collateral.
        await hubPool.connect(owner).setBond(bondToken.address, constants_1.bondAmount);
        // Pre-approve the proposer.
        await bondToken.connect(owner).setProposer(proposer.address, true);
        await bondToken.proposers(proposer.address);
        // Handle token approvals.
        for (const signer of [proposer, disputer]) {
            await (0, utils_1.seedWallet)(signer, [], bondToken, constants_1.bondAmount.mul((0, utils_1.toBN)(5)));
            await bondToken.connect(signer).approve(hubPool.address, constants_1.maxUint256);
        }
    });
    describe(`ERC20 Transfers`, function () {
        it("Proposer transfers to HubPool", async function () {
            for (const pass of [1, 2]) {
                const txn = await bondToken.connect(proposer).transferFrom(proposer.address, hubPool.address, constants_1.bondAmount);
                const receipt = await txn.wait();
                console.log(`transferFrom() gasUsed on pass ${pass}: ${receipt.gasUsed}`);
            }
        });
        it("Proposer transfers to Disputer", async function () {
            const txn = await bondToken.connect(proposer).transferFrom(proposer.address, disputer.address, constants_1.bondAmount);
            const receipt = await txn.wait();
            console.log(`transferFrom() gasUsed: ${receipt.gasUsed}`);
        });
        it("Disputer transfers to HubPool", async function () {
            for (const pass of [1, 2]) {
                const txn = await bondToken.connect(disputer).transferFrom(disputer.address, hubPool.address, constants_1.bondAmount);
                const receipt = await txn.wait();
                console.log(`transferFrom() gasUsed on pass ${pass}: ${receipt.gasUsed}`);
            }
        });
    });
});
