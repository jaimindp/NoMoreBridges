"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../../utils/utils");
let mintableErc1155;
let accounts;
let contractCreator;
let otherAccount1;
let otherAccount2;
let recipients;
describe("MintableERC1155", () => {
    beforeEach(async () => {
        accounts = await utils_1.ethers.getSigners();
        [contractCreator, otherAccount1, otherAccount2] = accounts;
        recipients = [otherAccount1.address, otherAccount2.address];
        mintableErc1155 = await (await (0, utils_1.getContractFactory)("MintableERC1155", contractCreator)).deploy();
    });
    describe("#airdrop()", () => {
        const tokenId = 0;
        it("revert if not called by owner", async () => {
            await (0, utils_1.expect)(mintableErc1155.connect(otherAccount1).airdrop(tokenId, recipients, 1)).to.be.revertedWith("Ownable: caller is not the owner");
        });
        it("mint token to recipients", async () => {
            (0, utils_1.expect)(await mintableErc1155.connect(contractCreator).airdrop(tokenId, recipients, 1))
                .to.emit(mintableErc1155, "Airdrop")
                .withArgs(contractCreator.address, tokenId, recipients, 1);
            (0, utils_1.expect)(await mintableErc1155.balanceOf(otherAccount1.address, tokenId)).to.equal(1);
            (0, utils_1.expect)(await mintableErc1155.balanceOf(otherAccount2.address, tokenId)).to.equal(1);
        });
    });
    describe("#setTokenURI() + #uri()", () => {
        it("revert if not called by owner", async () => {
            await (0, utils_1.expect)(mintableErc1155.connect(otherAccount1).setTokenURI(0, "uri")).to.be.revertedWith("Ownable: caller is not the owner");
        });
        it("revert if uri already set", async () => {
            await mintableErc1155.connect(contractCreator).setTokenURI(0, "test");
            await (0, utils_1.expect)(mintableErc1155.connect(contractCreator).setTokenURI(0, "new uri")).to.be.revertedWith("uri already set");
        });
        it("set token uri", async () => {
            (0, utils_1.expect)(await mintableErc1155.connect(contractCreator).setTokenURI(1, "test"))
                .to.emit(mintableErc1155, "URI")
                .withArgs(1, "test");
            (0, utils_1.expect)(await mintableErc1155.uri(1)).to.equal("test");
        });
    });
});
