"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const smock_1 = require("@defi-wonderland/smock");
const constants_1 = require("../constants");
const utils_1 = require("../../utils/utils");
const HubPool_Fixture_1 = require("../fixtures/HubPool.Fixture");
const MerkleLib_utils_1 = require("../MerkleLib.utils");
let hubPool, polygonZkEvmAdapter, weth, dai, timer, mockSpoke;
let l2Weth, l2Dai;
let owner, dataWorker, liquidityProvider;
let polygonZkEvmBridge;
const polygonZkEvmChainId = 1101;
const polygonZkEvmL2NetworkId = 1;
const polygonZkEvmBridgeAbi = [
    {
        inputs: [
            { internalType: "uint32", name: "destinationNetwork", type: "uint32" },
            { internalType: "address", name: "destinationAddress", type: "address" },
            { internalType: "uint256", name: "amount", type: "uint256" },
            { internalType: "address", name: "token", type: "address" },
            { internalType: "bool", name: "forceUpdateGlobalExitRoot", type: "bool" },
            { internalType: "bytes", name: "permitData", type: "bytes" },
        ],
        name: "bridgeAsset",
        outputs: [],
        stateMutability: "payable",
        type: "function",
    },
    {
        inputs: [
            { internalType: "uint32", name: "destinationNetwork", type: "uint32" },
            { internalType: "address", name: "destinationAddress", type: "address" },
            { internalType: "bool", name: "forceUpdateGlobalExitRoot", type: "bool" },
            { internalType: "bytes", name: "metadata", type: "bytes" },
        ],
        name: "bridgeMessage",
        outputs: [],
        stateMutability: "payable",
        type: "function",
    },
];
describe("Polygon zkEVM Chain Adapter", function () {
    beforeEach(async function () {
        [owner, dataWorker, liquidityProvider] = await utils_1.ethers.getSigners();
        ({ weth, dai, l2Weth, l2Dai, hubPool, mockSpoke, timer } = await (0, HubPool_Fixture_1.hubPoolFixture)());
        await (0, utils_1.seedWallet)(dataWorker, [dai], weth, constants_1.amountToLp);
        await (0, utils_1.seedWallet)(liquidityProvider, [dai], weth, constants_1.amountToLp.mul(10));
        await (0, HubPool_Fixture_1.enableTokensForLP)(owner, hubPool, weth, [weth, dai]);
        await weth.connect(liquidityProvider).approve(hubPool.address, constants_1.amountToLp);
        await hubPool.connect(liquidityProvider).addLiquidity(weth.address, constants_1.amountToLp);
        await weth.connect(dataWorker).approve(hubPool.address, constants_1.bondAmount.mul(10));
        await dai.connect(liquidityProvider).approve(hubPool.address, constants_1.amountToLp);
        await hubPool.connect(liquidityProvider).addLiquidity(dai.address, constants_1.amountToLp);
        await dai.connect(dataWorker).approve(hubPool.address, constants_1.bondAmount.mul(10));
        polygonZkEvmBridge = await smock_1.smock.fake(polygonZkEvmBridgeAbi, {
            address: "0x2a3DD3EB832aF982ec71669E178424b10Dca2EDe",
        });
        polygonZkEvmAdapter = await (await (0, utils_1.getContractFactory)("PolygonZkEVM_Adapter", owner)).deploy(weth.address, polygonZkEvmBridge.address);
        // Seed the HubPool some funds so it can send L1->L2 messages.
        await hubPool.connect(liquidityProvider).loadEthForL2Calls({ value: (0, utils_1.toWei)("100000") });
        await hubPool.setCrossChainContracts(polygonZkEvmChainId, polygonZkEvmAdapter.address, mockSpoke.address);
        await hubPool.setPoolRebalanceRoute(polygonZkEvmChainId, weth.address, l2Weth);
        await hubPool.setPoolRebalanceRoute(polygonZkEvmChainId, dai.address, l2Dai);
    });
    it("relayMessage calls spoke pool functions", async function () {
        const newAdmin = (0, utils_1.randomAddress)();
        const functionCallData = mockSpoke.interface.encodeFunctionData("setCrossDomainAdmin", [newAdmin]);
        (0, utils_1.expect)(await hubPool.relaySpokePoolAdminFunction(polygonZkEvmChainId, functionCallData))
            .to.emit(polygonZkEvmAdapter.attach(hubPool.address), "MessageRelayed")
            .withArgs(mockSpoke.address, functionCallData);
        (0, utils_1.expect)(polygonZkEvmBridge.bridgeMessage).to.have.been.calledWith(polygonZkEvmL2NetworkId, mockSpoke.address, true, functionCallData);
        (0, utils_1.expect)(polygonZkEvmBridge.bridgeMessage).to.have.been.calledWithValue(utils_1.BigNumber.from(0));
    });
    it("Correctly calls appropriate bridge functions when making WETH cross chain calls", async function () {
        // Create an action that will send an L1->L2 tokens transfer and bundle. For this, create a relayer repayment bundle
        // and check that at it's finalization the L2 bridge contracts are called as expected.
        const { leaves, tree, tokensSendToL2 } = await (0, MerkleLib_utils_1.constructSingleChainTree)(weth.address, 1, polygonZkEvmChainId);
        await hubPool
            .connect(dataWorker)
            .proposeRootBundle([polygonZkEvmChainId], 1, tree.getHexRoot(), constants_1.mockTreeRoot, constants_1.mockTreeRoot);
        await timer.setCurrentTime(Number(await timer.getCurrentTime()) + constants_1.refundProposalLiveness + 1);
        await hubPool.connect(dataWorker).executeRootBundle(...Object.values(leaves[0]), tree.getHexProof(leaves[0]));
        (0, utils_1.expect)(polygonZkEvmBridge.bridgeAsset).to.have.been.calledWith(polygonZkEvmL2NetworkId, mockSpoke.address, tokensSendToL2, constants_1.zeroAddress, true, "0x");
    });
    it("Correctly calls appropriate bridge functions when making ERC20 cross chain calls", async function () {
        // Create an action that will send an L1->L2 tokens transfer and bundle. For this, create a relayer repayment bundle
        // and check that at it's finalization the L2 bridge contracts are called as expected.
        const { leaves, tree, tokensSendToL2 } = await (0, MerkleLib_utils_1.constructSingleChainTree)(dai.address, 1, polygonZkEvmChainId);
        await hubPool
            .connect(dataWorker)
            .proposeRootBundle([polygonZkEvmChainId], 1, tree.getHexRoot(), constants_1.mockTreeRoot, constants_1.mockTreeRoot);
        await timer.setCurrentTime(Number(await timer.getCurrentTime()) + constants_1.refundProposalLiveness + 1);
        await hubPool.connect(dataWorker).executeRootBundle(...Object.values(leaves[0]), tree.getHexProof(leaves[0]));
        (0, utils_1.expect)(polygonZkEvmBridge.bridgeAsset).to.have.been.calledWith(polygonZkEvmL2NetworkId, mockSpoke.address, tokensSendToL2, dai.address, true, "0x");
    });
});
