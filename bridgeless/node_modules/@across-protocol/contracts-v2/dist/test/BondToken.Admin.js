"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BondToken_Fixture_1 = require("./fixtures/BondToken.Fixture");
const utils_1 = require("../utils/utils");
let bondToken;
let owner, other;
describe("BondToken Admin functions", function () {
    beforeEach(async function () {
        [owner, other] = await utils_1.ethers.getSigners();
        ({ bondToken } = await (0, BondToken_Fixture_1.bondTokenFixture)());
    });
    it("Owner can manage proposers", async function () {
        (0, utils_1.expect)(await bondToken.proposers(owner.address)).to.be.false;
        (0, utils_1.expect)(await bondToken.proposers(other.address)).to.be.false;
        (0, utils_1.expect)(await bondToken.connect(owner).setProposer(other.address, true)).to.emit(bondToken, "ProposerModified");
        (0, utils_1.expect)(await bondToken.proposers(other.address)).to.be.true;
        (0, utils_1.expect)(await bondToken.proposers(other.address)).to.be.true;
        (0, utils_1.expect)(await bondToken.connect(owner).setProposer(other.address, false)).to.emit(bondToken, "ProposerModified");
        (0, utils_1.expect)(await bondToken.proposers(other.address)).to.be.false;
    });
    it("Non-owners can not manage proposers", async function () {
        (0, utils_1.expect)(await bondToken.proposers(other.address)).to.be.false;
        for (const enabled of [true, false, true, false]) {
            await (0, utils_1.expect)(bondToken.connect(other).setProposer(other.address, enabled)).to.be.revertedWith("Ownable: caller is not the owner");
            (0, utils_1.expect)(await bondToken.proposers(other.address)).to.be.false;
        }
    });
});
