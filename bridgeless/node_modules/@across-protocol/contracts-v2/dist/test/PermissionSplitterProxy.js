"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../utils/utils");
const HubPool_Fixture_1 = require("./fixtures/HubPool.Fixture");
let hubPool, weth, usdc, permissionSplitter, hubPoolProxy;
let owner, delegate;
let delegateRole, defaultAdminRole;
const enableTokenSelector = "0xb60c2d7d";
describe("PermissionSplitterProxy", function () {
    beforeEach(async function () {
        [owner, delegate] = await utils_1.ethers.getSigners();
        ({ weth, hubPool, usdc } = await (0, HubPool_Fixture_1.hubPoolFixture)());
        const permissionSplitterFactory = await (0, utils_1.getContractFactory)("PermissionSplitterProxy", owner);
        const hubPoolFactory = await (0, utils_1.getContractFactory)("HubPool", owner);
        permissionSplitter = await permissionSplitterFactory.deploy(hubPool.address);
        hubPoolProxy = hubPoolFactory.attach(permissionSplitter.address);
        delegateRole = utils_1.ethers.utils.keccak256(utils_1.ethers.utils.toUtf8Bytes("DELEGATE_ROLE"));
        permissionSplitter.connect(owner).grantRole(delegateRole, delegate.address);
        defaultAdminRole = utils_1.ethers.utils.hexZeroPad("0x00", 32);
        await hubPool.transferOwnership(permissionSplitter.address);
    });
    it("Cannot run method until whitelisted", async function () {
        await (0, utils_1.expect)(hubPoolProxy.connect(delegate).enableL1TokenForLiquidityProvision(weth.address)).to.be.reverted;
        await permissionSplitter.connect(owner).__setRoleForSelector(enableTokenSelector, delegateRole);
        await hubPoolProxy.connect(delegate).enableL1TokenForLiquidityProvision(weth.address);
        (0, utils_1.expect)((await hubPool.callStatic.pooledTokens(weth.address)).isEnabled).to.equal(true);
    });
    it("Owner can run without whitelisting", async function () {
        await hubPoolProxy.connect(owner).enableL1TokenForLiquidityProvision(weth.address);
        (0, utils_1.expect)((await hubPool.callStatic.pooledTokens(weth.address)).isEnabled).to.equal(true);
    });
    it("Owner can revoke role", async function () {
        await (0, utils_1.expect)(hubPoolProxy.connect(delegate).enableL1TokenForLiquidityProvision(weth.address)).to.be.reverted;
        await permissionSplitter.connect(owner).__setRoleForSelector(enableTokenSelector, delegateRole);
        await hubPoolProxy.connect(delegate).enableL1TokenForLiquidityProvision(weth.address);
        (0, utils_1.expect)((await hubPool.callStatic.pooledTokens(weth.address)).isEnabled).to.equal(true);
        await permissionSplitter.connect(owner).revokeRole(delegateRole, delegate.address);
        await (0, utils_1.expect)(hubPoolProxy.connect(delegate).enableL1TokenForLiquidityProvision(usdc.address)).to.be.reverted;
    });
    it("Owner can revoke selector", async function () {
        await (0, utils_1.expect)(hubPoolProxy.connect(delegate).enableL1TokenForLiquidityProvision(weth.address)).to.be.reverted;
        await permissionSplitter.connect(owner).__setRoleForSelector(enableTokenSelector, delegateRole);
        await hubPoolProxy.connect(delegate).enableL1TokenForLiquidityProvision(weth.address);
        (0, utils_1.expect)((await hubPool.callStatic.pooledTokens(weth.address)).isEnabled).to.equal(true);
        await permissionSplitter.connect(owner).__setRoleForSelector(enableTokenSelector, defaultAdminRole);
        await (0, utils_1.expect)(hubPoolProxy.connect(delegate).enableL1TokenForLiquidityProvision(usdc.address)).to.be.reverted;
    });
});
