"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../utils/utils");
const utils_hre_1 = require("../utils/utils.hre");
const SpokePool_Fixture_1 = require("./fixtures/SpokePool.Fixture");
let spokePool;
let owner, rando;
describe("SpokePool Upgrade Functions", async function () {
    beforeEach(async function () {
        [owner, rando] = await utils_1.ethers.getSigners();
        ({ spokePool } = await (0, SpokePool_Fixture_1.spokePoolFixture)());
    });
    it("Can upgrade", async function () {
        const spokePoolV2 = await utils_hre_1.hre.upgrades.deployImplementation(await utils_1.ethers.getContractFactory("MockSpokePoolV2"), {
            kind: "uups",
            unsafeAllow: ["delegatecall"],
            constructorArgs: [(0, utils_1.randomAddress)()],
        });
        const spokePoolV2Contract = (await utils_1.ethers.getContractFactory("MockSpokePoolV2")).attach(spokePoolV2);
        const newHubPool = (0, utils_1.randomAddress)();
        const reinitializeData = await spokePoolV2Contract.populateTransaction.reinitialize(newHubPool);
        // Only owner can upgrade.
        await (0, utils_1.expect)(spokePool.connect(rando).upgradeToAndCall(spokePoolV2, reinitializeData.data)).to.be.revertedWith("Ownable: caller is not the owner");
        await spokePool.connect(owner).upgradeToAndCall(spokePoolV2, reinitializeData.data);
        // Hub pool should be changed.
        const spokePoolContract = (await utils_1.ethers.getContractFactory("MockSpokePoolV2")).attach(spokePool.address);
        (0, utils_1.expect)(await spokePoolContract.hubPool()).to.equal(newHubPool);
        // Can't reinitialize again.
        (0, utils_1.expect)(spokePoolContract.reinitialize(newHubPool)).to.be.revertedWith("Contract instance has already been initialized");
        // Can call new function.
        (0, utils_1.expect)(() => spokePool.emitEvent()).to.throw(/spokePool.emitEvent is not a function/);
        await (0, utils_1.expect)(spokePoolContract.emitEvent()).to.emit(spokePoolContract, "NewEvent").withArgs(true);
    });
});
