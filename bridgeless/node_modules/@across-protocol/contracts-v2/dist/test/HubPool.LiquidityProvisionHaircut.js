"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../utils/utils");
const consts = __importStar(require("./constants"));
const HubPool_Fixture_1 = require("./fixtures/HubPool.Fixture");
const MerkleLib_utils_1 = require("./MerkleLib.utils");
let hubPool, weth, timer;
let owner, dataWorker, liquidityProvider;
describe("HubPool Liquidity Provision Haircut", function () {
    beforeEach(async function () {
        [owner, dataWorker, liquidityProvider] = await utils_1.ethers.getSigners();
        ({ weth, hubPool, timer } = await (0, HubPool_Fixture_1.hubPoolFixture)());
        await (0, utils_1.seedWallet)(dataWorker, [], weth, consts.bondAmount.add(consts.finalFee).mul(2));
        await (0, utils_1.seedWallet)(liquidityProvider, [], weth, consts.amountToLp.mul(10));
        await (0, HubPool_Fixture_1.enableTokensForLP)(owner, hubPool, weth, [weth]);
        await weth.connect(liquidityProvider).approve(hubPool.address, consts.amountToLp);
        await hubPool.connect(liquidityProvider).addLiquidity(weth.address, consts.amountToLp);
        await weth.connect(dataWorker).approve(hubPool.address, consts.bondAmount.mul(10));
    });
    it("Haircut can correctly offset exchange rate current to encapsulate lossed tokens", async function () {
        const { tokensSendToL2, leaves, tree } = await (0, MerkleLib_utils_1.constructSingleChainTree)(weth.address);
        await hubPool
            .connect(dataWorker)
            .proposeRootBundle([3117], 1, tree.getHexRoot(), consts.mockTreeRoot, consts.mockSlowRelayRoot);
        await timer.setCurrentTime(Number(await timer.getCurrentTime()) + consts.refundProposalLiveness + 1);
        await hubPool.connect(dataWorker).executeRootBundle(...Object.values(leaves[0]), tree.getHexProof(leaves[0]));
        // Exchange rate current right after the refund execution should be the amount deposited, grown by the 100 second
        // liveness period. Of the 10 ETH attributed to LPs, a total of 10*0.0000015*7201=0.108015 was attributed to LPs.
        // The exchange rate is therefore (1000+0.108015)/1000=1.000108015.
        (0, utils_1.expect)(await hubPool.callStatic.exchangeRateCurrent(weth.address)).to.equal((0, utils_1.toWei)(1.000108015));
        // At this point if all LP tokens are attempted to be redeemed at the provided exchange rate the call should fail
        // as the hub pool is currently waiting for funds to come back over the canonical bridge. they are lent out.
        await (0, utils_1.expect)(hubPool.connect(liquidityProvider).removeLiquidity(weth.address, consts.amountToLp, false)).to.be
            .reverted;
        // Now, consider that the funds sent over the bridge (tokensSendToL2) are actually lost due to the L2 breaking.
        // We now need to haircut the LPs be modifying the exchange rate current such that they get a commensurate
        // redemption rate against the lost funds.
        await hubPool.haircutReserves(weth.address, tokensSendToL2);
        await hubPool.sync(weth.address);
        // The exchange rate current should now factor in the loss of funds and should now be less than 1. Taking the amount
        // attributed to LPs in fees from the previous calculation and the 100 lost tokens, the exchangeRateCurrent should be:
        // (1000+0.108015-100)/1000=0.900108015.
        (0, utils_1.expect)(await hubPool.callStatic.exchangeRateCurrent(weth.address)).to.equal((0, utils_1.toWei)(0.900108015));
        // Now, advance time such that all accumulated rewards are accumulated.
        await timer.setCurrentTime(Number(await timer.getCurrentTime()) + 10 * 24 * 60 * 60);
        await hubPool.exchangeRateCurrent(weth.address); // force state sync.
        (0, utils_1.expect)((await hubPool.pooledTokens(weth.address)).undistributedLpFees).to.equal(0);
        // Exchange rate should now be the (LPAmount + fees - lostTokens) / LPTokenSupply = (1000+10-100)/1000=0.91
        (0, utils_1.expect)(await hubPool.callStatic.exchangeRateCurrent(weth.address)).to.equal((0, utils_1.toWei)(0.91));
    });
});
