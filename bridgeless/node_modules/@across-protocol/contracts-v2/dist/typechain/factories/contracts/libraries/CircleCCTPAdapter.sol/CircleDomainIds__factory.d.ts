import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { CircleDomainIds, CircleDomainIdsInterface } from "../../../../contracts/libraries/CircleCCTPAdapter.sol/CircleDomainIds";
declare type CircleDomainIdsConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class CircleDomainIds__factory extends ContractFactory {
    constructor(...args: CircleDomainIdsConstructorParams);
    deploy(overrides?: Overrides & {
        from?: string;
    }): Promise<CircleDomainIds>;
    getDeployTransaction(overrides?: Overrides & {
        from?: string;
    }): TransactionRequest;
    attach(address: string): CircleDomainIds;
    connect(signer: Signer): CircleDomainIds__factory;
    static readonly bytecode = "0x6080806040523461001a5761018e908161001f823930815050f35b5f80fdfe6080806040526004361015610012575f80fd5b5f3560e01c9081631c32a09e14610126575080635ea102b0146100f2578063731f7ec0146100be578063a29256bd1461008b5763abe8bf3614610053575f80fd5b5f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261008757602060405160078152f35b5f80fd5b5f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100875760206040515f8152f35b5f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261008757602060405160038152f35b5f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261008757602060405160068152f35b5f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100875780600260209252f3fea264697066735822122084922d0a84c5ed145385307da02cc87483fc14e7e6ccf07d6982efb8d64aa29264736f6c63430008170033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "Arbitrum";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "Base";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "Ethereum";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "Optimism";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "Polygon";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): CircleDomainIdsInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): CircleDomainIds;
}
export {};
