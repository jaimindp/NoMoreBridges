import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { AcrossMessageHandlerMock, AcrossMessageHandlerMockInterface } from "../../../contracts/test/AcrossMessageHandlerMock";
declare type AcrossMessageHandlerMockConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class AcrossMessageHandlerMock__factory extends ContractFactory {
    constructor(...args: AcrossMessageHandlerMockConstructorParams);
    deploy(overrides?: Overrides & {
        from?: string;
    }): Promise<AcrossMessageHandlerMock>;
    getDeployTransaction(overrides?: Overrides & {
        from?: string;
    }): TransactionRequest;
    attach(address: string): AcrossMessageHandlerMock;
    connect(signer: Signer): AcrossMessageHandlerMock__factory;
    static readonly bytecode = "0x6080806040523461001657610234908161001b8239f35b5f80fdfe60806040526004361015610011575f80fd5b5f3560e01c80630ea1f938146100ac57633a5be8cb1461002f575f80fd5b346100a85760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100a85761006661012e565b5060443573ffffffffffffffffffffffffffffffffffffffff8116036100a85760643567ffffffffffffffff81116100a8576100a6903690600401610151565b005b5f80fd5b346100a85760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100a8576100e361012e565b50604435801515036100a85760643573ffffffffffffffffffffffffffffffffffffffff8116036100a85760843567ffffffffffffffff81116100a8576100a6903690600401610151565b6004359073ffffffffffffffffffffffffffffffffffffffff821682036100a857565b81601f820112156100a85780359067ffffffffffffffff928383116101d15760405193601f84017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168501908111858210176101d157604052828452602083830101116100a857815f926020809301838601378301015290565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffdfea26469706673582212204833ef63e55b8c6cff989b649c42706fd2a901a38234a4e3b21a5d8f1d0494dc64736f6c63430008170033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "tokenSent";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }, {
            readonly internalType: "bool";
            readonly name: "fillCompleted";
            readonly type: "bool";
        }, {
            readonly internalType: "address";
            readonly name: "relayer";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "message";
            readonly type: "bytes";
        }];
        readonly name: "handleAcrossMessage";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "tokenSent";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "relayer";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "message";
            readonly type: "bytes";
        }];
        readonly name: "handleV3AcrossMessage";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): AcrossMessageHandlerMockInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): AcrossMessageHandlerMock;
}
export {};
