"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Signer = exports.BigNumber = exports.hre = exports.ethers = exports.Contract = exports.expect = exports.advanceTime = exports.toBN = exports.fromWei = exports.toWei = exports.getContractFactory = void 0;
const chai_1 = __importStar(require("chai"));
Object.defineProperty(exports, "expect", { enumerable: true, get: function () { return chai_1.expect; } });
const ethereum_waffle_1 = require("ethereum-waffle");
const ethers_1 = require("ethers");
Object.defineProperty(exports, "BigNumber", { enumerable: true, get: function () { return ethers_1.BigNumber; } });
Object.defineProperty(exports, "Signer", { enumerable: true, get: function () { return ethers_1.Signer; } });
Object.defineProperty(exports, "Contract", { enumerable: true, get: function () { return ethers_1.Contract; } });
const hardhat_1 = __importStar(require("hardhat"));
exports.hre = hardhat_1.default;
Object.defineProperty(exports, "ethers", { enumerable: true, get: function () { return hardhat_1.ethers; } });
chai_1.default.use(ethereum_waffle_1.solidity);
async function getContractFactory(name, signerOrFactoryOptions) {
    try {
        // First, try get the artifact from this repo.
        return await hardhat_1.ethers.getContractFactory(name, signerOrFactoryOptions);
    }
    catch (_) {
        throw new Error(`Could not find the artifact for ${name}!`);
    }
}
exports.getContractFactory = getContractFactory;
const toWei = (num) => hardhat_1.ethers.utils.parseEther(num.toString());
exports.toWei = toWei;
const fromWei = (num) => hardhat_1.ethers.utils.formatUnits(num.toString());
exports.fromWei = fromWei;
const toBN = (num) => {
    // If the string version of the num contains a `.` then it is a number which needs to be parsed to a string int.
    if (num.toString().includes("."))
        return ethers_1.BigNumber.from(parseInt(num.toString()));
    return ethers_1.BigNumber.from(num.toString());
};
exports.toBN = toBN;
async function advanceTime(timer, amount) {
    await timer.setCurrentTime(Number(await timer.getCurrentTime()) + amount);
}
exports.advanceTime = advanceTime;
