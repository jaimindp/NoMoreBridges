/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AcrossMerkleDistributor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AcrossMerkleDistributor__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "Multicall",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Multicall__factory>;
    getContractFactory(
      name: "MerkleDistributor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MerkleDistributor__factory>;
    getContractFactory(
      name: "MerkleDistributorInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MerkleDistributorInterface__factory>;
    getContractFactory(
      name: "AcceleratingDistributor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AcceleratingDistributor__factory>;
    getContractFactory(
      name: "AcrossToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AcrossToken__factory>;
    getContractFactory(
      name: "ClaimAndStake",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ClaimAndStake__factory>;
    getContractFactory(
      name: "AcceleratingDistributorTestable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AcceleratingDistributorTestable__factory>;
    getContractFactory(
      name: "MerkleDistributorTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MerkleDistributorTest__factory>;
    getContractFactory(
      name: "Testable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Testable__factory>;
    getContractFactory(
      name: "TestToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestToken__factory>;
    getContractFactory(
      name: "Timer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Timer__factory>;

    getContractAt(
      name: "AcrossMerkleDistributor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AcrossMerkleDistributor>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "Multicall",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Multicall>;
    getContractAt(
      name: "MerkleDistributor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MerkleDistributor>;
    getContractAt(
      name: "MerkleDistributorInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MerkleDistributorInterface>;
    getContractAt(
      name: "AcceleratingDistributor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AcceleratingDistributor>;
    getContractAt(
      name: "AcrossToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AcrossToken>;
    getContractAt(
      name: "ClaimAndStake",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ClaimAndStake>;
    getContractAt(
      name: "AcceleratingDistributorTestable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AcceleratingDistributorTestable>;
    getContractAt(
      name: "MerkleDistributorTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MerkleDistributorTest>;
    getContractAt(
      name: "Testable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Testable>;
    getContractAt(
      name: "TestToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestToken>;
    getContractAt(
      name: "Timer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Timer>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
