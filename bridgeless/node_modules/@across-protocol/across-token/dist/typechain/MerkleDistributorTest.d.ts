/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MerkleDistributorTestInterface extends ethers.utils.Interface {
  functions: {
    "claim((uint256,uint256,uint256,address,bytes32[]))": FunctionFragment;
    "claimFor((uint256,uint256,uint256,address,bytes32[]))": FunctionFragment;
    "claimMulti(tuple[])": FunctionFragment;
    "deleteWindow(uint256)": FunctionFragment;
    "getRewardTokenForWindow(uint256)": FunctionFragment;
    "isClaimed(uint256,uint256)": FunctionFragment;
    "merkleWindows(uint256)": FunctionFragment;
    "nextCreatedIndex()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setWindow(uint256,address,bytes32,string)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "verifyClaim((uint256,uint256,uint256,address,bytes32[]))": FunctionFragment;
    "whitelistClaimer(address,bool)": FunctionFragment;
    "whitelistedClaimers(address)": FunctionFragment;
    "withdrawRewards(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "claim",
    values: [
      {
        windowIndex: BigNumberish;
        amount: BigNumberish;
        accountIndex: BigNumberish;
        account: string;
        merkleProof: BytesLike[];
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimFor",
    values: [
      {
        windowIndex: BigNumberish;
        amount: BigNumberish;
        accountIndex: BigNumberish;
        account: string;
        merkleProof: BytesLike[];
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimMulti",
    values: [
      {
        windowIndex: BigNumberish;
        amount: BigNumberish;
        accountIndex: BigNumberish;
        account: string;
        merkleProof: BytesLike[];
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteWindow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardTokenForWindow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isClaimed",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "merkleWindows",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextCreatedIndex",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setWindow",
    values: [BigNumberish, string, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyClaim",
    values: [
      {
        windowIndex: BigNumberish;
        amount: BigNumberish;
        accountIndex: BigNumberish;
        account: string;
        merkleProof: BytesLike[];
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistClaimer",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistedClaimers",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawRewards",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimMulti", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deleteWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardTokenForWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isClaimed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "merkleWindows",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextCreatedIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setWindow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistClaimer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistedClaimers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRewards",
    data: BytesLike
  ): Result;

  events: {
    "ClaimFor(address,uint256,address,uint256,uint256,address)": EventFragment;
    "Claimed(address,uint256,address,uint256,uint256,address)": EventFragment;
    "CreatedWindow(uint256,uint256,address,address)": EventFragment;
    "DeleteWindow(uint256,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "WhitelistedClaimer(address,bool)": EventFragment;
    "WithdrawRewards(address,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClaimFor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreatedWindow"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeleteWindow"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WhitelistedClaimer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawRewards"): EventFragment;
}

export type ClaimForEvent = TypedEvent<
  [string, BigNumber, string, BigNumber, BigNumber, string] & {
    caller: string;
    windowIndex: BigNumber;
    account: string;
    accountIndex: BigNumber;
    amount: BigNumber;
    rewardToken: string;
  }
>;

export type ClaimedEvent = TypedEvent<
  [string, BigNumber, string, BigNumber, BigNumber, string] & {
    caller: string;
    windowIndex: BigNumber;
    account: string;
    accountIndex: BigNumber;
    amount: BigNumber;
    rewardToken: string;
  }
>;

export type CreatedWindowEvent = TypedEvent<
  [BigNumber, BigNumber, string, string] & {
    windowIndex: BigNumber;
    rewardsDeposited: BigNumber;
    rewardToken: string;
    owner: string;
  }
>;

export type DeleteWindowEvent = TypedEvent<
  [BigNumber, string] & { windowIndex: BigNumber; owner: string }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type WhitelistedClaimerEvent = TypedEvent<
  [string, boolean] & { claimer: string; whitelist: boolean }
>;

export type WithdrawRewardsEvent = TypedEvent<
  [string, BigNumber, string] & {
    owner: string;
    amount: BigNumber;
    currency: string;
  }
>;

export class MerkleDistributorTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MerkleDistributorTestInterface;

  functions: {
    claim(
      _claim: {
        windowIndex: BigNumberish;
        amount: BigNumberish;
        accountIndex: BigNumberish;
        account: string;
        merkleProof: BytesLike[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimFor(
      _claim: {
        windowIndex: BigNumberish;
        amount: BigNumberish;
        accountIndex: BigNumberish;
        account: string;
        merkleProof: BytesLike[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimMulti(
      claims: {
        windowIndex: BigNumberish;
        amount: BigNumberish;
        accountIndex: BigNumberish;
        account: string;
        merkleProof: BytesLike[];
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deleteWindow(
      windowIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRewardTokenForWindow(
      windowIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isClaimed(
      windowIndex: BigNumberish,
      accountIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    merkleWindows(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, string] & {
        merkleRoot: string;
        remainingAmount: BigNumber;
        rewardToken: string;
        ipfsHash: string;
      }
    >;

    nextCreatedIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWindow(
      rewardsToDeposit: BigNumberish,
      rewardToken: string,
      merkleRoot: BytesLike,
      ipfsHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    verifyClaim(
      _claim: {
        windowIndex: BigNumberish;
        amount: BigNumberish;
        accountIndex: BigNumberish;
        account: string;
        merkleProof: BytesLike[];
      },
      overrides?: CallOverrides
    ): Promise<[boolean] & { valid: boolean }>;

    whitelistClaimer(
      newContract: string,
      whitelist: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whitelistedClaimers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    withdrawRewards(
      rewardCurrency: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  claim(
    _claim: {
      windowIndex: BigNumberish;
      amount: BigNumberish;
      accountIndex: BigNumberish;
      account: string;
      merkleProof: BytesLike[];
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimFor(
    _claim: {
      windowIndex: BigNumberish;
      amount: BigNumberish;
      accountIndex: BigNumberish;
      account: string;
      merkleProof: BytesLike[];
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimMulti(
    claims: {
      windowIndex: BigNumberish;
      amount: BigNumberish;
      accountIndex: BigNumberish;
      account: string;
      merkleProof: BytesLike[];
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deleteWindow(
    windowIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRewardTokenForWindow(
    windowIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  isClaimed(
    windowIndex: BigNumberish,
    accountIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  merkleWindows(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string, string] & {
      merkleRoot: string;
      remainingAmount: BigNumber;
      rewardToken: string;
      ipfsHash: string;
    }
  >;

  nextCreatedIndex(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWindow(
    rewardsToDeposit: BigNumberish,
    rewardToken: string,
    merkleRoot: BytesLike,
    ipfsHash: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  verifyClaim(
    _claim: {
      windowIndex: BigNumberish;
      amount: BigNumberish;
      accountIndex: BigNumberish;
      account: string;
      merkleProof: BytesLike[];
    },
    overrides?: CallOverrides
  ): Promise<boolean>;

  whitelistClaimer(
    newContract: string,
    whitelist: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whitelistedClaimers(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  withdrawRewards(
    rewardCurrency: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    claim(
      _claim: {
        windowIndex: BigNumberish;
        amount: BigNumberish;
        accountIndex: BigNumberish;
        account: string;
        merkleProof: BytesLike[];
      },
      overrides?: CallOverrides
    ): Promise<void>;

    claimFor(
      _claim: {
        windowIndex: BigNumberish;
        amount: BigNumberish;
        accountIndex: BigNumberish;
        account: string;
        merkleProof: BytesLike[];
      },
      overrides?: CallOverrides
    ): Promise<void>;

    claimMulti(
      claims: {
        windowIndex: BigNumberish;
        amount: BigNumberish;
        accountIndex: BigNumberish;
        account: string;
        merkleProof: BytesLike[];
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    deleteWindow(
      windowIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getRewardTokenForWindow(
      windowIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    isClaimed(
      windowIndex: BigNumberish,
      accountIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    merkleWindows(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, string] & {
        merkleRoot: string;
        remainingAmount: BigNumber;
        rewardToken: string;
        ipfsHash: string;
      }
    >;

    nextCreatedIndex(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setWindow(
      rewardsToDeposit: BigNumberish,
      rewardToken: string,
      merkleRoot: BytesLike,
      ipfsHash: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    verifyClaim(
      _claim: {
        windowIndex: BigNumberish;
        amount: BigNumberish;
        accountIndex: BigNumberish;
        account: string;
        merkleProof: BytesLike[];
      },
      overrides?: CallOverrides
    ): Promise<boolean>;

    whitelistClaimer(
      newContract: string,
      whitelist: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelistedClaimers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdrawRewards(
      rewardCurrency: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ClaimFor(address,uint256,address,uint256,uint256,address)"(
      caller?: string | null,
      windowIndex?: null,
      account?: string | null,
      accountIndex?: null,
      amount?: null,
      rewardToken?: string | null
    ): TypedEventFilter<
      [string, BigNumber, string, BigNumber, BigNumber, string],
      {
        caller: string;
        windowIndex: BigNumber;
        account: string;
        accountIndex: BigNumber;
        amount: BigNumber;
        rewardToken: string;
      }
    >;

    ClaimFor(
      caller?: string | null,
      windowIndex?: null,
      account?: string | null,
      accountIndex?: null,
      amount?: null,
      rewardToken?: string | null
    ): TypedEventFilter<
      [string, BigNumber, string, BigNumber, BigNumber, string],
      {
        caller: string;
        windowIndex: BigNumber;
        account: string;
        accountIndex: BigNumber;
        amount: BigNumber;
        rewardToken: string;
      }
    >;

    "Claimed(address,uint256,address,uint256,uint256,address)"(
      caller?: string | null,
      windowIndex?: null,
      account?: string | null,
      accountIndex?: null,
      amount?: null,
      rewardToken?: string | null
    ): TypedEventFilter<
      [string, BigNumber, string, BigNumber, BigNumber, string],
      {
        caller: string;
        windowIndex: BigNumber;
        account: string;
        accountIndex: BigNumber;
        amount: BigNumber;
        rewardToken: string;
      }
    >;

    Claimed(
      caller?: string | null,
      windowIndex?: null,
      account?: string | null,
      accountIndex?: null,
      amount?: null,
      rewardToken?: string | null
    ): TypedEventFilter<
      [string, BigNumber, string, BigNumber, BigNumber, string],
      {
        caller: string;
        windowIndex: BigNumber;
        account: string;
        accountIndex: BigNumber;
        amount: BigNumber;
        rewardToken: string;
      }
    >;

    "CreatedWindow(uint256,uint256,address,address)"(
      windowIndex?: BigNumberish | null,
      rewardsDeposited?: null,
      rewardToken?: string | null,
      owner?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, string],
      {
        windowIndex: BigNumber;
        rewardsDeposited: BigNumber;
        rewardToken: string;
        owner: string;
      }
    >;

    CreatedWindow(
      windowIndex?: BigNumberish | null,
      rewardsDeposited?: null,
      rewardToken?: string | null,
      owner?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, string],
      {
        windowIndex: BigNumber;
        rewardsDeposited: BigNumber;
        rewardToken: string;
        owner: string;
      }
    >;

    "DeleteWindow(uint256,address)"(
      windowIndex?: BigNumberish | null,
      owner?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { windowIndex: BigNumber; owner: string }
    >;

    DeleteWindow(
      windowIndex?: BigNumberish | null,
      owner?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { windowIndex: BigNumber; owner: string }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "WhitelistedClaimer(address,bool)"(
      claimer?: string | null,
      whitelist?: boolean | null
    ): TypedEventFilter<
      [string, boolean],
      { claimer: string; whitelist: boolean }
    >;

    WhitelistedClaimer(
      claimer?: string | null,
      whitelist?: boolean | null
    ): TypedEventFilter<
      [string, boolean],
      { claimer: string; whitelist: boolean }
    >;

    "WithdrawRewards(address,uint256,address)"(
      owner?: string | null,
      amount?: null,
      currency?: string | null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { owner: string; amount: BigNumber; currency: string }
    >;

    WithdrawRewards(
      owner?: string | null,
      amount?: null,
      currency?: string | null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { owner: string; amount: BigNumber; currency: string }
    >;
  };

  estimateGas: {
    claim(
      _claim: {
        windowIndex: BigNumberish;
        amount: BigNumberish;
        accountIndex: BigNumberish;
        account: string;
        merkleProof: BytesLike[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimFor(
      _claim: {
        windowIndex: BigNumberish;
        amount: BigNumberish;
        accountIndex: BigNumberish;
        account: string;
        merkleProof: BytesLike[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimMulti(
      claims: {
        windowIndex: BigNumberish;
        amount: BigNumberish;
        accountIndex: BigNumberish;
        account: string;
        merkleProof: BytesLike[];
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deleteWindow(
      windowIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRewardTokenForWindow(
      windowIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isClaimed(
      windowIndex: BigNumberish,
      accountIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    merkleWindows(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nextCreatedIndex(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWindow(
      rewardsToDeposit: BigNumberish,
      rewardToken: string,
      merkleRoot: BytesLike,
      ipfsHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    verifyClaim(
      _claim: {
        windowIndex: BigNumberish;
        amount: BigNumberish;
        accountIndex: BigNumberish;
        account: string;
        merkleProof: BytesLike[];
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whitelistClaimer(
      newContract: string,
      whitelist: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whitelistedClaimers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawRewards(
      rewardCurrency: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claim(
      _claim: {
        windowIndex: BigNumberish;
        amount: BigNumberish;
        accountIndex: BigNumberish;
        account: string;
        merkleProof: BytesLike[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimFor(
      _claim: {
        windowIndex: BigNumberish;
        amount: BigNumberish;
        accountIndex: BigNumberish;
        account: string;
        merkleProof: BytesLike[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimMulti(
      claims: {
        windowIndex: BigNumberish;
        amount: BigNumberish;
        accountIndex: BigNumberish;
        account: string;
        merkleProof: BytesLike[];
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deleteWindow(
      windowIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRewardTokenForWindow(
      windowIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isClaimed(
      windowIndex: BigNumberish,
      accountIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    merkleWindows(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextCreatedIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWindow(
      rewardsToDeposit: BigNumberish,
      rewardToken: string,
      merkleRoot: BytesLike,
      ipfsHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    verifyClaim(
      _claim: {
        windowIndex: BigNumberish;
        amount: BigNumberish;
        accountIndex: BigNumberish;
        account: string;
        merkleProof: BytesLike[];
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelistClaimer(
      newContract: string,
      whitelist: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whitelistedClaimers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawRewards(
      rewardCurrency: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
