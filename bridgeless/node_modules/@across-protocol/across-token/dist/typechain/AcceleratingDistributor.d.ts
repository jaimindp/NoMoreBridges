/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface AcceleratingDistributorInterface extends ethers.utils.Interface {
  functions: {
    "baseRewardPerToken(address)": FunctionFragment;
    "configureStakingToken(address,bool,uint256,uint256,uint256)": FunctionFragment;
    "exit(address)": FunctionFragment;
    "getAverageDepositTimePostDeposit(address,address,uint256)": FunctionFragment;
    "getCumulativeStaked(address)": FunctionFragment;
    "getCurrentTime()": FunctionFragment;
    "getOutstandingRewards(address,address)": FunctionFragment;
    "getTimeSinceAverageDeposit(address,address)": FunctionFragment;
    "getUserRewardMultiplier(address,address)": FunctionFragment;
    "getUserStake(address,address)": FunctionFragment;
    "multicall(bytes[])": FunctionFragment;
    "owner()": FunctionFragment;
    "recoverToken(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardToken()": FunctionFragment;
    "stake(address,uint256)": FunctionFragment;
    "stakeFor(address,uint256,address)": FunctionFragment;
    "stakingTokens(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unstake(address,uint256)": FunctionFragment;
    "withdrawReward(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "baseRewardPerToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "configureStakingToken",
    values: [string, boolean, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "exit", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getAverageDepositTimePostDeposit",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCumulativeStaked",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOutstandingRewards",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTimeSinceAverageDeposit",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserRewardMultiplier",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserStake",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recoverToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeFor",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingTokens",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawReward",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "baseRewardPerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configureStakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAverageDepositTimePostDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCumulativeStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOutstandingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimeSinceAverageDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserRewardMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recoverToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakeFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakingTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawReward",
    data: BytesLike
  ): Result;

  events: {
    "Exit(address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RecoverToken(address,uint256)": EventFragment;
    "RewardsWithdrawn(address,address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "Stake(address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "TokenConfiguredForStaking(address,bool,uint256,uint256,uint256,uint256)": EventFragment;
    "Unstake(address,address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Exit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RecoverToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Stake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenConfiguredForStaking"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unstake"): EventFragment;
}

export type ExitEvent = TypedEvent<
  [string, string, BigNumber] & {
    token: string;
    user: string;
    tokenCumulativeStaked: BigNumber;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type RecoverTokenEvent = TypedEvent<
  [string, BigNumber] & { token: string; amount: BigNumber }
>;

export type RewardsWithdrawnEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
    token: string;
    user: string;
    rewardsToSend: BigNumber;
    tokenLastUpdateTime: BigNumber;
    tokenRewardPerTokenStored: BigNumber;
    userRewardsOutstanding: BigNumber;
    userRewardsPaidPerToken: BigNumber;
  }
>;

export type StakeEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
    token: string;
    user: string;
    amount: BigNumber;
    averageDepositTime: BigNumber;
    cumulativeBalance: BigNumber;
    tokenCumulativeStaked: BigNumber;
  }
>;

export type TokenConfiguredForStakingEvent = TypedEvent<
  [string, boolean, BigNumber, BigNumber, BigNumber, BigNumber] & {
    token: string;
    enabled: boolean;
    baseEmissionRate: BigNumber;
    maxMultiplier: BigNumber;
    secondsToMaxMultiplier: BigNumber;
    lastUpdateTime: BigNumber;
  }
>;

export type UnstakeEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber] & {
    token: string;
    user: string;
    amount: BigNumber;
    remainingCumulativeBalance: BigNumber;
    tokenCumulativeStaked: BigNumber;
  }
>;

export class AcceleratingDistributor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AcceleratingDistributorInterface;

  functions: {
    baseRewardPerToken(
      stakedToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    configureStakingToken(
      stakedToken: string,
      enabled: boolean,
      baseEmissionRate: BigNumberish,
      maxMultiplier: BigNumberish,
      secondsToMaxMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exit(
      stakedToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAverageDepositTimePostDeposit(
      stakedToken: string,
      account: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCumulativeStaked(
      stakedToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCurrentTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    getOutstandingRewards(
      stakedToken: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTimeSinceAverageDeposit(
      stakedToken: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUserRewardMultiplier(
      stakedToken: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUserStake(
      stakedToken: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          cumulativeBalance: BigNumber;
          averageDepositTime: BigNumber;
          rewardsAccumulatedPerToken: BigNumber;
          rewardsOutstanding: BigNumber;
        }
      ]
    >;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    recoverToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<[string]>;

    stake(
      stakedToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakeFor(
      stakedToken: string,
      amount: BigNumberish,
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakingTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        enabled: boolean;
        baseEmissionRate: BigNumber;
        maxMultiplier: BigNumber;
        secondsToMaxMultiplier: BigNumber;
        cumulativeStaked: BigNumber;
        rewardPerTokenStored: BigNumber;
        lastUpdateTime: BigNumber;
      }
    >;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unstake(
      stakedToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawReward(
      stakedToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  baseRewardPerToken(
    stakedToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  configureStakingToken(
    stakedToken: string,
    enabled: boolean,
    baseEmissionRate: BigNumberish,
    maxMultiplier: BigNumberish,
    secondsToMaxMultiplier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exit(
    stakedToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAverageDepositTimePostDeposit(
    stakedToken: string,
    account: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCumulativeStaked(
    stakedToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

  getOutstandingRewards(
    stakedToken: string,
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTimeSinceAverageDeposit(
    stakedToken: string,
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserRewardMultiplier(
    stakedToken: string,
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserStake(
    stakedToken: string,
    account: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      cumulativeBalance: BigNumber;
      averageDepositTime: BigNumber;
      rewardsAccumulatedPerToken: BigNumber;
      rewardsOutstanding: BigNumber;
    }
  >;

  multicall(
    data: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  recoverToken(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardToken(overrides?: CallOverrides): Promise<string>;

  stake(
    stakedToken: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakeFor(
    stakedToken: string,
    amount: BigNumberish,
    beneficiary: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakingTokens(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      enabled: boolean;
      baseEmissionRate: BigNumber;
      maxMultiplier: BigNumber;
      secondsToMaxMultiplier: BigNumber;
      cumulativeStaked: BigNumber;
      rewardPerTokenStored: BigNumber;
      lastUpdateTime: BigNumber;
    }
  >;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unstake(
    stakedToken: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawReward(
    stakedToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    baseRewardPerToken(
      stakedToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    configureStakingToken(
      stakedToken: string,
      enabled: boolean,
      baseEmissionRate: BigNumberish,
      maxMultiplier: BigNumberish,
      secondsToMaxMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    exit(stakedToken: string, overrides?: CallOverrides): Promise<void>;

    getAverageDepositTimePostDeposit(
      stakedToken: string,
      account: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCumulativeStaked(
      stakedToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

    getOutstandingRewards(
      stakedToken: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTimeSinceAverageDeposit(
      stakedToken: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserRewardMultiplier(
      stakedToken: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserStake(
      stakedToken: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        cumulativeBalance: BigNumber;
        averageDepositTime: BigNumber;
        rewardsAccumulatedPerToken: BigNumber;
        rewardsOutstanding: BigNumber;
      }
    >;

    multicall(data: BytesLike[], overrides?: CallOverrides): Promise<string[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    recoverToken(token: string, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardToken(overrides?: CallOverrides): Promise<string>;

    stake(
      stakedToken: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeFor(
      stakedToken: string,
      amount: BigNumberish,
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stakingTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        enabled: boolean;
        baseEmissionRate: BigNumber;
        maxMultiplier: BigNumber;
        secondsToMaxMultiplier: BigNumber;
        cumulativeStaked: BigNumber;
        rewardPerTokenStored: BigNumber;
        lastUpdateTime: BigNumber;
      }
    >;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unstake(
      stakedToken: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawReward(
      stakedToken: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Exit(address,address,uint256)"(
      token?: string | null,
      user?: string | null,
      tokenCumulativeStaked?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { token: string; user: string; tokenCumulativeStaked: BigNumber }
    >;

    Exit(
      token?: string | null,
      user?: string | null,
      tokenCumulativeStaked?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { token: string; user: string; tokenCumulativeStaked: BigNumber }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "RecoverToken(address,uint256)"(
      token?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; amount: BigNumber }
    >;

    RecoverToken(
      token?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; amount: BigNumber }
    >;

    "RewardsWithdrawn(address,address,uint256,uint256,uint256,uint256,uint256)"(
      token?: string | null,
      user?: string | null,
      rewardsToSend?: null,
      tokenLastUpdateTime?: null,
      tokenRewardPerTokenStored?: null,
      userRewardsOutstanding?: null,
      userRewardsPaidPerToken?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        token: string;
        user: string;
        rewardsToSend: BigNumber;
        tokenLastUpdateTime: BigNumber;
        tokenRewardPerTokenStored: BigNumber;
        userRewardsOutstanding: BigNumber;
        userRewardsPaidPerToken: BigNumber;
      }
    >;

    RewardsWithdrawn(
      token?: string | null,
      user?: string | null,
      rewardsToSend?: null,
      tokenLastUpdateTime?: null,
      tokenRewardPerTokenStored?: null,
      userRewardsOutstanding?: null,
      userRewardsPaidPerToken?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        token: string;
        user: string;
        rewardsToSend: BigNumber;
        tokenLastUpdateTime: BigNumber;
        tokenRewardPerTokenStored: BigNumber;
        userRewardsOutstanding: BigNumber;
        userRewardsPaidPerToken: BigNumber;
      }
    >;

    "Stake(address,address,uint256,uint256,uint256,uint256)"(
      token?: string | null,
      user?: string | null,
      amount?: null,
      averageDepositTime?: null,
      cumulativeBalance?: null,
      tokenCumulativeStaked?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        token: string;
        user: string;
        amount: BigNumber;
        averageDepositTime: BigNumber;
        cumulativeBalance: BigNumber;
        tokenCumulativeStaked: BigNumber;
      }
    >;

    Stake(
      token?: string | null,
      user?: string | null,
      amount?: null,
      averageDepositTime?: null,
      cumulativeBalance?: null,
      tokenCumulativeStaked?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        token: string;
        user: string;
        amount: BigNumber;
        averageDepositTime: BigNumber;
        cumulativeBalance: BigNumber;
        tokenCumulativeStaked: BigNumber;
      }
    >;

    "TokenConfiguredForStaking(address,bool,uint256,uint256,uint256,uint256)"(
      token?: string | null,
      enabled?: null,
      baseEmissionRate?: null,
      maxMultiplier?: null,
      secondsToMaxMultiplier?: null,
      lastUpdateTime?: null
    ): TypedEventFilter<
      [string, boolean, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        token: string;
        enabled: boolean;
        baseEmissionRate: BigNumber;
        maxMultiplier: BigNumber;
        secondsToMaxMultiplier: BigNumber;
        lastUpdateTime: BigNumber;
      }
    >;

    TokenConfiguredForStaking(
      token?: string | null,
      enabled?: null,
      baseEmissionRate?: null,
      maxMultiplier?: null,
      secondsToMaxMultiplier?: null,
      lastUpdateTime?: null
    ): TypedEventFilter<
      [string, boolean, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        token: string;
        enabled: boolean;
        baseEmissionRate: BigNumber;
        maxMultiplier: BigNumber;
        secondsToMaxMultiplier: BigNumber;
        lastUpdateTime: BigNumber;
      }
    >;

    "Unstake(address,address,uint256,uint256,uint256)"(
      token?: string | null,
      user?: string | null,
      amount?: null,
      remainingCumulativeBalance?: null,
      tokenCumulativeStaked?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber],
      {
        token: string;
        user: string;
        amount: BigNumber;
        remainingCumulativeBalance: BigNumber;
        tokenCumulativeStaked: BigNumber;
      }
    >;

    Unstake(
      token?: string | null,
      user?: string | null,
      amount?: null,
      remainingCumulativeBalance?: null,
      tokenCumulativeStaked?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber],
      {
        token: string;
        user: string;
        amount: BigNumber;
        remainingCumulativeBalance: BigNumber;
        tokenCumulativeStaked: BigNumber;
      }
    >;
  };

  estimateGas: {
    baseRewardPerToken(
      stakedToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    configureStakingToken(
      stakedToken: string,
      enabled: boolean,
      baseEmissionRate: BigNumberish,
      maxMultiplier: BigNumberish,
      secondsToMaxMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exit(
      stakedToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAverageDepositTimePostDeposit(
      stakedToken: string,
      account: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCumulativeStaked(
      stakedToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

    getOutstandingRewards(
      stakedToken: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTimeSinceAverageDeposit(
      stakedToken: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserRewardMultiplier(
      stakedToken: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserStake(
      stakedToken: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    recoverToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    stake(
      stakedToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakeFor(
      stakedToken: string,
      amount: BigNumberish,
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakingTokens(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unstake(
      stakedToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawReward(
      stakedToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    baseRewardPerToken(
      stakedToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    configureStakingToken(
      stakedToken: string,
      enabled: boolean,
      baseEmissionRate: BigNumberish,
      maxMultiplier: BigNumberish,
      secondsToMaxMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exit(
      stakedToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAverageDepositTimePostDeposit(
      stakedToken: string,
      account: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCumulativeStaked(
      stakedToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOutstandingRewards(
      stakedToken: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTimeSinceAverageDeposit(
      stakedToken: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserRewardMultiplier(
      stakedToken: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserStake(
      stakedToken: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recoverToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stake(
      stakedToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakeFor(
      stakedToken: string,
      amount: BigNumberish,
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakingTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unstake(
      stakedToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawReward(
      stakedToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
