"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const MsgBase_1 = require("../../MsgBase");
const snakecase_keys_1 = __importDefault(require("snakecase-keys"));
const core_proto_ts_1 = require("@injectivelabs/core-proto-ts");
/**
 * @category Messages
 */
class MsgSubmitProposalExpiryFuturesMarketLaunch extends MsgBase_1.MsgBase {
    static fromJSON(params) {
        return new MsgSubmitProposalExpiryFuturesMarketLaunch(params);
    }
    toProto() {
        const { params } = this;
        const depositParams = core_proto_ts_1.CosmosBaseV1Beta1Coin.Coin.create();
        depositParams.denom = params.deposit.denom;
        depositParams.amount = params.deposit.amount;
        const content = this.getContent();
        const proposalType = '/injective.exchange.v1beta1.ExpiryFuturesMarketLaunchProposal';
        const contentAny = core_proto_ts_1.GoogleProtobufAny.Any.create();
        contentAny.value =
            core_proto_ts_1.InjectiveExchangeV1Beta1Tx.ExpiryFuturesMarketLaunchProposal.encode(content).finish();
        contentAny.typeUrl = proposalType;
        const message = core_proto_ts_1.CosmosGovV1Beta1Tx.MsgSubmitProposal.create();
        message.content = contentAny;
        message.proposer = params.proposer;
        message.initialDeposit = [depositParams];
        return core_proto_ts_1.CosmosGovV1Beta1Tx.MsgSubmitProposal.fromPartial(message);
    }
    toData() {
        const proto = this.toProto();
        return Object.assign({ '@type': '/cosmos.gov.v1beta1.MsgSubmitProposal' }, proto);
    }
    toAmino() {
        const { params } = this;
        const content = this.getContent();
        const proposalType = 'exchange/ExpiryFuturesMarketLaunchProposal';
        const message = {
            content,
            proposer: params.proposer,
        };
        const messageWithProposalType = (0, snakecase_keys_1.default)(Object.assign(Object.assign({}, message), { content: {
                value: message.content,
                type: proposalType,
            } }));
        return {
            type: 'cosmos-sdk/MsgSubmitProposal',
            value: messageWithProposalType,
        };
    }
    toWeb3() {
        const amino = this.toAmino();
        const { value } = amino;
        const proposalType = '/injective.exchange.v1beta1.ExpiryFuturesMarketLaunchProposal';
        const messageWithProposalType = Object.assign(Object.assign({}, value), { content: Object.assign(Object.assign({}, value.content.value), { '@type': proposalType }) });
        return Object.assign({ '@type': '/cosmos.gov.v1beta1.MsgSubmitProposal' }, messageWithProposalType);
    }
    toDirectSign() {
        const proto = this.toProto();
        return {
            type: '/cosmos.gov.v1beta1.MsgSubmitProposal',
            message: proto,
        };
    }
    toBinary() {
        return core_proto_ts_1.CosmosGovV1Beta1Tx.MsgSubmitProposal.encode(this.toProto()).finish();
    }
    getContent() {
        const { params } = this;
        const content = core_proto_ts_1.InjectiveExchangeV1Beta1Tx.ExpiryFuturesMarketLaunchProposal.create();
        content.title = params.market.title;
        content.description = params.market.description;
        content.quoteDenom = params.market.quoteDenom;
        content.ticker = params.market.ticker;
        content.initialMarginRatio = params.market.initialMarginRatio;
        content.maintenanceMarginRatio = params.market.maintenanceMarginRatio;
        content.makerFeeRate = params.market.makerFeeRate;
        content.takerFeeRate = params.market.takerFeeRate;
        content.oracleBase = params.market.oracleBase;
        content.oracleQuote = params.market.oracleQuote;
        content.oracleScaleFactor = params.market.oracleScaleFactor;
        content.oracleType = params.market.oracleType;
        content.expiry = params.market.expiry.toString();
        content.minPriceTickSize = params.market.minPriceTickSize;
        content.minQuantityTickSize = params.market.minQuantityTickSize;
        return core_proto_ts_1.InjectiveExchangeV1Beta1Tx.ExpiryFuturesMarketLaunchProposal.fromPartial(content);
    }
}
exports.default = MsgSubmitProposalExpiryFuturesMarketLaunch;
//# sourceMappingURL=MsgSubmitProposalExpiryFuturesMarketLaunch.js.map