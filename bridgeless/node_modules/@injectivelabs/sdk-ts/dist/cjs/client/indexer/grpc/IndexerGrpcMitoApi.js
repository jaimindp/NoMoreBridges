"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IndexerGrpcMitoApi = void 0;
const transformers_1 = require("../transformers");
const types_1 = require("../types");
const exceptions_1 = require("@injectivelabs/exceptions");
const indexer_proto_ts_1 = require("@injectivelabs/indexer-proto-ts");
const BaseIndexerGrpcWebConsumer_1 = require("../../BaseIndexerGrpcWebConsumer");
const mito_proto_ts_1 = require("@injectivelabs/mito-proto-ts");
/**
 * @category Indexer Grpc API
 */
class IndexerGrpcMitoApi {
    constructor(endpoint) {
        this.module = types_1.IndexerModule.Mito;
        this.client = new mito_proto_ts_1.MitoApi.MitoAPIClientImpl((0, BaseIndexerGrpcWebConsumer_1.getGrpcIndexerWebImpl)(endpoint));
    }
    fetchVault({ contractAddress, slug, }) {
        return __awaiter(this, void 0, void 0, function* () {
            const request = mito_proto_ts_1.MitoApi.GetVaultRequest.create();
            if (contractAddress) {
                request.contractAddress = contractAddress;
            }
            if (slug) {
                request.slug = slug;
            }
            try {
                const response = yield this.client.GetVault(request);
                return transformers_1.IndexerGrpcMitoTransformer.vaultResponseToVault(response);
            }
            catch (e) {
                if (e instanceof indexer_proto_ts_1.InjectiveMetaRpc.GrpcWebError) {
                    throw new exceptions_1.GrpcUnaryRequestException(new Error(e.toString()), {
                        code: e.code,
                        contextModule: this.module,
                    });
                }
                throw new exceptions_1.GrpcUnaryRequestException(e, {
                    code: exceptions_1.UnspecifiedErrorCode,
                    contextModule: this.module,
                });
            }
        });
    }
    fetchVaults({ pageSize, pageIndex, codeId, }) {
        return __awaiter(this, void 0, void 0, function* () {
            const request = mito_proto_ts_1.MitoApi.GetVaultsRequest.create();
            if (pageSize) {
                request.pageSize = pageSize;
            }
            if (pageIndex) {
                request.pageIndex = pageIndex;
            }
            if (codeId) {
                request.codeId = codeId;
            }
            try {
                const response = yield this.client.GetVaults(request);
                return transformers_1.IndexerGrpcMitoTransformer.vaultsResponseToVaults(response);
            }
            catch (e) {
                if (e instanceof indexer_proto_ts_1.InjectiveMetaRpc.GrpcWebError) {
                    throw new exceptions_1.GrpcUnaryRequestException(new Error(e.toString()), {
                        code: e.code,
                        contextModule: this.module,
                    });
                }
                throw new exceptions_1.GrpcUnaryRequestException(e, {
                    code: exceptions_1.UnspecifiedErrorCode,
                    contextModule: this.module,
                });
            }
        });
    }
    fetchLpTokenPriceChart({ vaultAddress, from, to, }) {
        return __awaiter(this, void 0, void 0, function* () {
            const request = mito_proto_ts_1.MitoApi.LPTokenPriceChartRequest.create();
            request.vaultAddress = vaultAddress;
            if (from) {
                request.fromTime = from;
            }
            if (to) {
                request.toTime = to;
            }
            try {
                const response = yield this.client.LPTokenPriceChart(request);
                return transformers_1.IndexerGrpcMitoTransformer.LPTokenPriceChartResponseToLPTokenPriceChart(response);
            }
            catch (e) {
                if (e instanceof indexer_proto_ts_1.InjectiveMetaRpc.GrpcWebError) {
                    throw new exceptions_1.GrpcUnaryRequestException(new Error(e.toString()), {
                        code: e.code,
                        contextModule: this.module,
                    });
                }
                throw new exceptions_1.GrpcUnaryRequestException(e, {
                    code: exceptions_1.UnspecifiedErrorCode,
                    contextModule: this.module,
                });
            }
        });
    }
    fetchTVLChartRequest({ vaultAddress, from, to, }) {
        return __awaiter(this, void 0, void 0, function* () {
            const request = mito_proto_ts_1.MitoApi.TVLChartRequest.create();
            request.vaultAddress = vaultAddress;
            if (from) {
                request.fromTime = from;
            }
            if (to) {
                request.toTime = to;
            }
            try {
                const response = yield this.client.TVLChart(request);
                return transformers_1.IndexerGrpcMitoTransformer.LPTokenPriceChartResponseToLPTokenPriceChart(response);
            }
            catch (e) {
                if (e instanceof indexer_proto_ts_1.InjectiveMetaRpc.GrpcWebError) {
                    throw new exceptions_1.GrpcUnaryRequestException(new Error(e.toString()), {
                        code: e.code,
                        contextModule: this.module,
                    });
                }
                throw new exceptions_1.GrpcUnaryRequestException(e, {
                    code: exceptions_1.UnspecifiedErrorCode,
                    contextModule: this.module,
                });
            }
        });
    }
    fetchVaultsByHolderAddress({ pageSize, pageIndex, holderAddress, vaultAddress, }) {
        return __awaiter(this, void 0, void 0, function* () {
            const request = mito_proto_ts_1.MitoApi.VaultsByHolderAddressRequest.create();
            request.holderAddress = holderAddress;
            if (vaultAddress) {
                request.vaultAddress = vaultAddress;
            }
            if (pageSize) {
                request.pageSize = pageSize;
            }
            if (pageIndex) {
                request.pageIndex = pageIndex;
            }
            try {
                const response = yield this.client.VaultsByHolderAddress(request);
                return transformers_1.IndexerGrpcMitoTransformer.VaultsByHolderAddressResponseToVaultsByHolderAddress(response);
            }
            catch (e) {
                if (e instanceof indexer_proto_ts_1.InjectiveMetaRpc.GrpcWebError) {
                    throw new exceptions_1.GrpcUnaryRequestException(new Error(e.toString()), {
                        code: e.code,
                        contextModule: this.module,
                    });
                }
                throw new exceptions_1.GrpcUnaryRequestException(e, {
                    code: exceptions_1.UnspecifiedErrorCode,
                    contextModule: this.module,
                });
            }
        });
    }
    fetchLPHolders({ pageSize, pageIndex, vaultAddress, }) {
        return __awaiter(this, void 0, void 0, function* () {
            const request = mito_proto_ts_1.MitoApi.LPHoldersRequest.create();
            request.vaultAddress = vaultAddress;
            if (pageSize) {
                request.pageSize = pageSize;
            }
            if (pageIndex) {
                request.pageIndex = pageIndex;
            }
            try {
                const response = yield this.client.LPHolders(request);
                return transformers_1.IndexerGrpcMitoTransformer.LPHoldersResponseToLPHolders(response);
            }
            catch (e) {
                if (e instanceof indexer_proto_ts_1.InjectiveMetaRpc.GrpcWebError) {
                    throw new exceptions_1.GrpcUnaryRequestException(new Error(e.toString()), {
                        code: e.code,
                        contextModule: this.module,
                    });
                }
                throw new exceptions_1.GrpcUnaryRequestException(e, {
                    code: exceptions_1.UnspecifiedErrorCode,
                    contextModule: this.module,
                });
            }
        });
    }
    fetchHolderPortfolio(holderAddress) {
        return __awaiter(this, void 0, void 0, function* () {
            const request = mito_proto_ts_1.MitoApi.PortfolioRequest.create();
            request.holderAddress = holderAddress;
            try {
                const response = yield this.client.Portfolio(request);
                return transformers_1.IndexerGrpcMitoTransformer.PortfolioResponseToPortfolio(response);
            }
            catch (e) {
                if (e instanceof indexer_proto_ts_1.InjectiveMetaRpc.GrpcWebError) {
                    throw new exceptions_1.GrpcUnaryRequestException(new Error(e.toString()), {
                        code: e.code,
                        contextModule: this.module,
                    });
                }
                throw new exceptions_1.GrpcUnaryRequestException(e, {
                    code: exceptions_1.UnspecifiedErrorCode,
                    contextModule: this.module,
                });
            }
        });
    }
    fetchLeaderboard(epochId) {
        return __awaiter(this, void 0, void 0, function* () {
            const request = mito_proto_ts_1.MitoApi.LeaderboardRequest.create();
            if (epochId) {
                request.epochId = epochId;
            }
            try {
                const response = yield this.client.Leaderboard(request);
                return transformers_1.IndexerGrpcMitoTransformer.LeaderboardResponseToLeaderboard(response);
            }
            catch (e) {
                if (e instanceof indexer_proto_ts_1.InjectiveMetaRpc.GrpcWebError) {
                    throw new exceptions_1.GrpcUnaryRequestException(new Error(e.toString()), {
                        code: e.code,
                        contextModule: this.module,
                    });
                }
                throw new exceptions_1.GrpcUnaryRequestException(e, {
                    code: exceptions_1.UnspecifiedErrorCode,
                    contextModule: this.module,
                });
            }
        });
    }
    fetchTransferHistory({ vault, account, pageSize, toNumber, fromNumber, }) {
        return __awaiter(this, void 0, void 0, function* () {
            const request = mito_proto_ts_1.MitoApi.TransfersHistoryRequest.create();
            if (vault) {
                request.vault = vault;
            }
            if (account) {
                request.account = account;
            }
            if (pageSize) {
                request.pageSize = pageSize;
            }
            if (toNumber) {
                request.toNumber = toNumber;
            }
            if (fromNumber) {
                request.fromNumber = fromNumber;
            }
            try {
                const response = yield this.client.TransfersHistory(request);
                return transformers_1.IndexerGrpcMitoTransformer.TransferHistoryResponseToTransfer(response);
            }
            catch (e) {
                if (e instanceof indexer_proto_ts_1.InjectiveMetaRpc.GrpcWebError) {
                    throw new exceptions_1.GrpcUnaryRequestException(new Error(e.toString()), {
                        code: e.code,
                        contextModule: this.module,
                    });
                }
                throw new exceptions_1.GrpcUnaryRequestException(e, {
                    code: exceptions_1.UnspecifiedErrorCode,
                    contextModule: this.module,
                });
            }
        });
    }
    fetchLeaderboardEpochs({ pageSize, toEpochId, fromEpochId, }) {
        return __awaiter(this, void 0, void 0, function* () {
            const request = mito_proto_ts_1.MitoApi.LeaderboardEpochsRequest.create();
            if (pageSize) {
                request.pageSize = pageSize;
            }
            if (toEpochId) {
                request.toEpochId = toEpochId;
            }
            if (fromEpochId) {
                request.fromEpochId = fromEpochId;
            }
            try {
                const response = yield this.client.LeaderboardEpochs(request);
                return transformers_1.IndexerGrpcMitoTransformer.LeaderboardEpochsResponseToLeaderboardEpochs(response);
            }
            catch (e) {
                if (e instanceof indexer_proto_ts_1.InjectiveMetaRpc.GrpcWebError) {
                    throw new exceptions_1.GrpcUnaryRequestException(new Error(e.toString()), {
                        code: e.code,
                        contextModule: this.module,
                    });
                }
                throw new exceptions_1.GrpcUnaryRequestException(e, {
                    code: exceptions_1.UnspecifiedErrorCode,
                    contextModule: this.module,
                });
            }
        });
    }
}
exports.IndexerGrpcMitoApi = IndexerGrpcMitoApi;
//# sourceMappingURL=IndexerGrpcMitoApi.js.map