"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IndexerGrpcOracleApi = void 0;
const IndexerGrpcOracleTransformer_1 = require("../transformers/IndexerGrpcOracleTransformer");
const types_1 = require("../types");
const exceptions_1 = require("@injectivelabs/exceptions");
const BaseIndexerGrpcWebConsumer_1 = require("../../BaseIndexerGrpcWebConsumer");
const indexer_proto_ts_1 = require("@injectivelabs/indexer-proto-ts");
/**
 * @category Indexer Grpc API
 */
class IndexerGrpcOracleApi {
    constructor(endpoint) {
        this.module = types_1.IndexerModule.Oracle;
        this.client = new indexer_proto_ts_1.InjectiveOracleRpc.InjectiveOracleRPCClientImpl((0, BaseIndexerGrpcWebConsumer_1.getGrpcIndexerWebImpl)(endpoint));
    }
    fetchOracleList() {
        return __awaiter(this, void 0, void 0, function* () {
            const request = indexer_proto_ts_1.InjectiveOracleRpc.OracleListRequest.create();
            try {
                const response = yield this.client.OracleList(request);
                return IndexerGrpcOracleTransformer_1.IndexerGrpcOracleTransformer.oraclesResponseToOracles(response);
            }
            catch (e) {
                if (e instanceof indexer_proto_ts_1.InjectiveOracleRpc.GrpcWebError) {
                    throw new exceptions_1.GrpcUnaryRequestException(new Error(e.toString()), {
                        code: e.code,
                        contextModule: this.module,
                    });
                }
                throw new exceptions_1.GrpcUnaryRequestException(e, {
                    code: exceptions_1.UnspecifiedErrorCode,
                    contextModule: this.module,
                });
            }
        });
    }
    fetchOraclePrice({ baseSymbol, quoteSymbol, oracleScaleFactor, oracleType, }) {
        return __awaiter(this, void 0, void 0, function* () {
            const request = indexer_proto_ts_1.InjectiveOracleRpc.PriceRequest.create();
            request.baseSymbol = baseSymbol;
            request.quoteSymbol = quoteSymbol;
            request.oracleType = oracleType;
            if (oracleScaleFactor) {
                request.oracleScaleFactor = oracleScaleFactor;
            }
            try {
                const response = yield this.client.Price(request);
                return response;
            }
            catch (e) {
                if (e instanceof indexer_proto_ts_1.InjectiveOracleRpc.GrpcWebError) {
                    throw new exceptions_1.GrpcUnaryRequestException(new Error(e.toString()), {
                        code: e.code,
                        contextModule: this.module,
                    });
                }
                throw new exceptions_1.GrpcUnaryRequestException(e, {
                    code: exceptions_1.UnspecifiedErrorCode,
                    contextModule: this.module,
                });
            }
        });
    }
    fetchOraclePriceNoThrow({ baseSymbol, quoteSymbol, oracleScaleFactor, oracleType, }) {
        return __awaiter(this, void 0, void 0, function* () {
            const request = indexer_proto_ts_1.InjectiveOracleRpc.PriceRequest.create();
            request.baseSymbol = baseSymbol;
            request.quoteSymbol = quoteSymbol;
            request.oracleType = oracleType;
            if (oracleScaleFactor) {
                request.oracleScaleFactor = oracleScaleFactor;
            }
            try {
                const response = yield this.client.Price(request);
                return response;
            }
            catch (e) {
                if (e.message.includes('object not found')) {
                    return {
                        price: '0',
                    };
                }
                if (e instanceof indexer_proto_ts_1.InjectiveOracleRpc.GrpcWebError) {
                    throw new exceptions_1.GrpcUnaryRequestException(new Error(e.toString()), {
                        code: e.code,
                        contextModule: this.module,
                    });
                }
                throw new exceptions_1.GrpcUnaryRequestException(e, {
                    code: exceptions_1.UnspecifiedErrorCode,
                    contextModule: this.module,
                });
            }
        });
    }
}
exports.IndexerGrpcOracleApi = IndexerGrpcOracleApi;
//# sourceMappingURL=IndexerGrpcOracleApi.js.map