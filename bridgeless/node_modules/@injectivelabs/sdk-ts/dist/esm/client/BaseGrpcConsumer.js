import { grpc } from '@injectivelabs/grpc-web';
import { GrpcUnaryRequestException } from '@injectivelabs/exceptions';
import { isBrowser } from '../utils/helpers';
import { getGrpcTransport } from '../utils/grpc';
if (!isBrowser()) {
    grpc.setDefaultTransport(getGrpcTransport());
}
/**
 * @hidden
 */
export default class BaseGrpcConsumer {
    module = '';
    endpoint;
    constructor(endpoint) {
        this.endpoint = endpoint;
    }
    request(request, service) {
        return new Promise((resolve, reject) => {
            grpc.unary(service, {
                request,
                host: this.endpoint,
                onEnd: (res) => {
                    const { statusMessage, status, message } = res;
                    if (status === grpc.Code.OK && message) {
                        return resolve(message);
                    }
                    return reject(new GrpcUnaryRequestException(new Error(statusMessage || 'The request failed.'), {
                        code: status,
                        context: this.endpoint,
                        contextModule: this.module,
                    }));
                },
            });
        });
    }
}
//# sourceMappingURL=BaseGrpcConsumer.js.map