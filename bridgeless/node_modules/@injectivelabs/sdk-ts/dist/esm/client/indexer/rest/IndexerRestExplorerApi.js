import BaseRestConsumer from '../../BaseRestConsumer';
import { HttpRequestException, UnspecifiedErrorCode, } from '@injectivelabs/exceptions';
import { IndexerRestExplorerTransformer } from '../transformers';
import { IndexerModule } from '../types';
const explorerEndpointSuffix = 'api/explorer/v1';
/**
 * @category Indexer Rest API
 */
export class IndexerRestExplorerApi extends BaseRestConsumer {
    constructor(endpoint) {
        super(endpoint.includes(explorerEndpointSuffix)
            ? endpoint
            : `${endpoint}/${explorerEndpointSuffix}`);
    }
    async fetchBlock(blockHashHeight) {
        try {
            const response = (await this.get(`blocks/${blockHashHeight}`));
            return IndexerRestExplorerTransformer.blockWithTxToBlockWithTx(response.data.data);
        }
        catch (e) {
            if (e instanceof HttpRequestException) {
                throw e;
            }
            throw new HttpRequestException(new Error(e.message), {
                code: UnspecifiedErrorCode,
                contextModule: IndexerModule.Explorer,
            });
        }
    }
    async fetchBlocks(params) {
        try {
            const { before, limit } = params || { limit: 12 };
            const response = (await this.get('blocks', {
                before,
                limit,
            }));
            const { paging, data } = response.data;
            return {
                paging,
                blocks: IndexerRestExplorerTransformer.blocksToBlocks(data),
            };
        }
        catch (e) {
            if (e instanceof HttpRequestException) {
                throw e;
            }
            throw new HttpRequestException(new Error(e.message), {
                code: UnspecifiedErrorCode,
                contextModule: IndexerModule.Explorer,
            });
        }
    }
    async fetchBlocksWithTx(params) {
        try {
            const { before, limit } = params || { limit: 12 };
            const response = (await this.get('blocks', {
                before,
                limit,
            }));
            const { paging, data } = response.data;
            return {
                paging,
                blocks: data
                    ? IndexerRestExplorerTransformer.blocksWithTxsToBlocksWithTxs(data)
                    : [],
            };
        }
        catch (e) {
            if (e instanceof HttpRequestException) {
                throw e;
            }
            throw new HttpRequestException(new Error(e.message), {
                code: UnspecifiedErrorCode,
                contextModule: IndexerModule.Explorer,
            });
        }
    }
    async fetchTransactions(params) {
        try {
            const { fromNumber, before, after, limit, toNumber, endTime, skip, startTime, status, type, } = params || {
                limit: 12,
            };
            const response = (await this.get('txs', {
                limit,
                after,
                before,
                from_number: fromNumber,
                to_number: toNumber,
                skip,
                status,
                type: type ? type.join(',') : undefined,
                end_time: endTime,
                start_time: startTime,
            }));
            const { paging, data } = response.data;
            return {
                paging,
                transactions: data
                    ? IndexerRestExplorerTransformer.transactionsToTransactions(data)
                    : [],
            };
        }
        catch (e) {
            if (e instanceof HttpRequestException) {
                throw e;
            }
            throw new HttpRequestException(new Error(e.message), {
                code: UnspecifiedErrorCode,
                contextModule: IndexerModule.Explorer,
            });
        }
    }
    async fetchAccountTransactions({ account, params, }) {
        try {
            const { fromNumber, before, after, limit, skip, toNumber, endTime, startTime, status, type, } = params || {
                limit: 12,
            };
            const response = (await this.get(`accountTxs/${account}`, {
                skip,
                limit,
                after,
                before,
                from_number: fromNumber,
                to_number: toNumber,
                status,
                type: type ? type.join(',') : undefined,
                end_time: endTime,
                start_time: startTime,
            }));
            const { paging, data } = response.data;
            return {
                paging,
                transactions: data
                    ? IndexerRestExplorerTransformer.transactionsToTransactions(data)
                    : [],
            };
        }
        catch (e) {
            if (e instanceof HttpRequestException) {
                throw e;
            }
            throw new HttpRequestException(new Error(e.message), {
                code: UnspecifiedErrorCode,
                contextModule: IndexerModule.Explorer,
            });
        }
    }
    async fetchTransaction(hash) {
        try {
            const response = (await this.get(`txs/${hash}`));
            return IndexerRestExplorerTransformer.transactionToTransaction(response.data.data);
        }
        catch (e) {
            if (e instanceof HttpRequestException) {
                throw e;
            }
            throw new HttpRequestException(new Error(e.message), {
                code: UnspecifiedErrorCode,
                contextModule: IndexerModule.Explorer,
            });
        }
    }
    async fetchValidators() {
        try {
            const response = (await this.get(`validators`));
            if (!response.data || !response.data.data) {
                return [];
            }
            return IndexerRestExplorerTransformer.validatorExplorerToValidator(response.data.data);
        }
        catch (e) {
            if (e instanceof HttpRequestException) {
                throw e;
            }
            throw new HttpRequestException(new Error(e.message), {
                code: UnspecifiedErrorCode,
                contextModule: IndexerModule.Explorer,
            });
        }
    }
    async fetchValidatorUptime(validatorConsensusAddress) {
        try {
            const response = (await this.get(`validator_uptime/${validatorConsensusAddress}`));
            if (!response.data || !response.data.data) {
                return [];
            }
            return IndexerRestExplorerTransformer.validatorUptimeToExplorerValidatorUptime(response.data.data);
        }
        catch (e) {
            if (e instanceof HttpRequestException) {
                throw e;
            }
            throw new HttpRequestException(new Error(e.message), {
                code: UnspecifiedErrorCode,
                contextModule: IndexerModule.Explorer,
            });
        }
    }
    async fetchContract(contractAddress) {
        try {
            const response = (await this.get(`/wasm/contracts/${contractAddress}`));
            return IndexerRestExplorerTransformer.contractToExplorerContract(response.data);
        }
        catch (e) {
            if (e instanceof HttpRequestException) {
                throw e;
            }
            throw new HttpRequestException(new Error(e.message), {
                code: UnspecifiedErrorCode,
                contextModule: IndexerModule.Explorer,
            });
        }
    }
    async fetchContracts(params) {
        try {
            const { assetsOnly, fromNumber, limit, skip } = params || { limit: 12 };
            const response = (await this.get('/wasm/contracts', {
                skip,
                limit,
                assets_only: assetsOnly,
                from_number: fromNumber,
            }));
            const { paging, data } = response.data;
            return {
                paging,
                contracts: data
                    ? data.map(IndexerRestExplorerTransformer.contractToExplorerContract)
                    : [],
            };
        }
        catch (e) {
            if (e instanceof HttpRequestException) {
                throw e;
            }
            throw new HttpRequestException(new Error(e.message), {
                code: UnspecifiedErrorCode,
                contextModule: IndexerModule.Explorer,
            });
        }
    }
    async fetchContractTransactions({ contractAddress, params, }) {
        try {
            const { fromNumber, limit, skip, toNumber } = params || { limit: 12 };
            const response = (await this.get(`/contractTxs/${contractAddress}`, {
                skip,
                limit,
                to_number: toNumber,
                from_number: fromNumber,
            }));
            const { paging, data } = response.data;
            return {
                paging,
                transactions: data
                    ? data.map(IndexerRestExplorerTransformer.contractTransactionToExplorerContractTransaction)
                    : [],
            };
        }
        catch (e) {
            if (e instanceof HttpRequestException) {
                throw e;
            }
            throw new HttpRequestException(new Error(e.message), {
                code: UnspecifiedErrorCode,
                contextModule: IndexerModule.Explorer,
            });
        }
    }
    async fetchWasmCode(codeId) {
        try {
            const response = (await this.get(`/wasm/codes/${codeId}`));
            return IndexerRestExplorerTransformer.wasmCodeToExplorerWasmCode(response.data);
        }
        catch (e) {
            if (e instanceof HttpRequestException) {
                throw e;
            }
            throw new HttpRequestException(new Error(e.message), {
                code: UnspecifiedErrorCode,
                contextModule: IndexerModule.Explorer,
            });
        }
    }
    async fetchWasmCodes(params) {
        try {
            const { fromNumber, limit, toNumber } = params || { limit: 12 };
            const response = (await this.get('/wasm/codes', {
                limit,
                from_number: fromNumber,
                to_number: toNumber,
            }));
            const { paging, data } = response.data;
            return {
                paging,
                wasmCodes: data
                    ? data.map(IndexerRestExplorerTransformer.wasmCodeToExplorerWasmCode)
                    : [],
            };
        }
        catch (e) {
            if (e instanceof HttpRequestException) {
                throw e;
            }
            throw new HttpRequestException(new Error(e.message), {
                code: UnspecifiedErrorCode,
                contextModule: IndexerModule.Explorer,
            });
        }
    }
    async fetchCW20Balances(address) {
        try {
            const response = (await this.get(`/wasm/${address}/cw20-balance`));
            if (response.data.length === 0) {
                return [];
            }
            return response.data.map(IndexerRestExplorerTransformer.CW20BalanceToExplorerCW20Balance);
        }
        catch (e) {
            if (e instanceof HttpRequestException) {
                throw e;
            }
            throw new HttpRequestException(new Error(e.message), {
                code: UnspecifiedErrorCode,
                contextModule: IndexerModule.Explorer,
            });
        }
    }
    async fetchCW20BalancesNoThrow(address) {
        try {
            const response = (await this.get(`/wasm/${address}/cw20-balance`));
            if (response.data.length === 0) {
                return [];
            }
            return response.data.map(IndexerRestExplorerTransformer.CW20BalanceToExplorerCW20Balance);
        }
        catch (e) {
            const error = e;
            if (error.message.includes(404) || error.message.includes(500)) {
                return [];
            }
            if (e instanceof HttpRequestException) {
                throw e;
            }
            throw new HttpRequestException(new Error(e.message), {
                code: UnspecifiedErrorCode,
                contextModule: IndexerModule.Explorer,
            });
        }
    }
}
//# sourceMappingURL=IndexerRestExplorerApi.js.map