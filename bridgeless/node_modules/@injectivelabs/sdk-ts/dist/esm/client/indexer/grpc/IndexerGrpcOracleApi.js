import { IndexerGrpcOracleTransformer } from '../transformers/IndexerGrpcOracleTransformer';
import { IndexerModule } from '../types';
import { GrpcUnaryRequestException, UnspecifiedErrorCode, } from '@injectivelabs/exceptions';
import { getGrpcIndexerWebImpl } from '../../BaseIndexerGrpcWebConsumer';
import { InjectiveOracleRpc } from '@injectivelabs/indexer-proto-ts';
/**
 * @category Indexer Grpc API
 */
export class IndexerGrpcOracleApi {
    module = IndexerModule.Oracle;
    client;
    constructor(endpoint) {
        this.client = new InjectiveOracleRpc.InjectiveOracleRPCClientImpl(getGrpcIndexerWebImpl(endpoint));
    }
    async fetchOracleList() {
        const request = InjectiveOracleRpc.OracleListRequest.create();
        try {
            const response = await this.client.OracleList(request);
            return IndexerGrpcOracleTransformer.oraclesResponseToOracles(response);
        }
        catch (e) {
            if (e instanceof InjectiveOracleRpc.GrpcWebError) {
                throw new GrpcUnaryRequestException(new Error(e.toString()), {
                    code: e.code,
                    contextModule: this.module,
                });
            }
            throw new GrpcUnaryRequestException(e, {
                code: UnspecifiedErrorCode,
                contextModule: this.module,
            });
        }
    }
    async fetchOraclePrice({ baseSymbol, quoteSymbol, oracleScaleFactor, oracleType, }) {
        const request = InjectiveOracleRpc.PriceRequest.create();
        request.baseSymbol = baseSymbol;
        request.quoteSymbol = quoteSymbol;
        request.oracleType = oracleType;
        if (oracleScaleFactor) {
            request.oracleScaleFactor = oracleScaleFactor;
        }
        try {
            const response = await this.client.Price(request);
            return response;
        }
        catch (e) {
            if (e instanceof InjectiveOracleRpc.GrpcWebError) {
                throw new GrpcUnaryRequestException(new Error(e.toString()), {
                    code: e.code,
                    contextModule: this.module,
                });
            }
            throw new GrpcUnaryRequestException(e, {
                code: UnspecifiedErrorCode,
                contextModule: this.module,
            });
        }
    }
    async fetchOraclePriceNoThrow({ baseSymbol, quoteSymbol, oracleScaleFactor, oracleType, }) {
        const request = InjectiveOracleRpc.PriceRequest.create();
        request.baseSymbol = baseSymbol;
        request.quoteSymbol = quoteSymbol;
        request.oracleType = oracleType;
        if (oracleScaleFactor) {
            request.oracleScaleFactor = oracleScaleFactor;
        }
        try {
            const response = await this.client.Price(request);
            return response;
        }
        catch (e) {
            if (e.message.includes('object not found')) {
                return {
                    price: '0',
                };
            }
            if (e instanceof InjectiveOracleRpc.GrpcWebError) {
                throw new GrpcUnaryRequestException(new Error(e.toString()), {
                    code: e.code,
                    contextModule: this.module,
                });
            }
            throw new GrpcUnaryRequestException(e, {
                code: UnspecifiedErrorCode,
                contextModule: this.module,
            });
        }
    }
}
//# sourceMappingURL=IndexerGrpcOracleApi.js.map