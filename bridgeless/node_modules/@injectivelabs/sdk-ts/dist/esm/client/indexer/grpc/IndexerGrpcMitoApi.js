import { IndexerGrpcMitoTransformer } from '../transformers';
import { IndexerModule } from '../types';
import { UnspecifiedErrorCode, GrpcUnaryRequestException, } from '@injectivelabs/exceptions';
import { InjectiveMetaRpc } from '@injectivelabs/indexer-proto-ts';
import { getGrpcIndexerWebImpl } from '../../BaseIndexerGrpcWebConsumer';
import { MitoApi } from '@injectivelabs/mito-proto-ts';
/**
 * @category Indexer Grpc API
 */
export class IndexerGrpcMitoApi {
    module = IndexerModule.Mito;
    client;
    constructor(endpoint) {
        this.client = new MitoApi.MitoAPIClientImpl(getGrpcIndexerWebImpl(endpoint));
    }
    async fetchVault({ contractAddress, slug, }) {
        const request = MitoApi.GetVaultRequest.create();
        if (contractAddress) {
            request.contractAddress = contractAddress;
        }
        if (slug) {
            request.slug = slug;
        }
        try {
            const response = await this.client.GetVault(request);
            return IndexerGrpcMitoTransformer.vaultResponseToVault(response);
        }
        catch (e) {
            if (e instanceof InjectiveMetaRpc.GrpcWebError) {
                throw new GrpcUnaryRequestException(new Error(e.toString()), {
                    code: e.code,
                    contextModule: this.module,
                });
            }
            throw new GrpcUnaryRequestException(e, {
                code: UnspecifiedErrorCode,
                contextModule: this.module,
            });
        }
    }
    async fetchVaults({ pageSize, pageIndex, codeId, }) {
        const request = MitoApi.GetVaultsRequest.create();
        if (pageSize) {
            request.pageSize = pageSize;
        }
        if (pageIndex) {
            request.pageIndex = pageIndex;
        }
        if (codeId) {
            request.codeId = codeId;
        }
        try {
            const response = await this.client.GetVaults(request);
            return IndexerGrpcMitoTransformer.vaultsResponseToVaults(response);
        }
        catch (e) {
            if (e instanceof InjectiveMetaRpc.GrpcWebError) {
                throw new GrpcUnaryRequestException(new Error(e.toString()), {
                    code: e.code,
                    contextModule: this.module,
                });
            }
            throw new GrpcUnaryRequestException(e, {
                code: UnspecifiedErrorCode,
                contextModule: this.module,
            });
        }
    }
    async fetchLpTokenPriceChart({ vaultAddress, from, to, }) {
        const request = MitoApi.LPTokenPriceChartRequest.create();
        request.vaultAddress = vaultAddress;
        if (from) {
            request.fromTime = from;
        }
        if (to) {
            request.toTime = to;
        }
        try {
            const response = await this.client.LPTokenPriceChart(request);
            return IndexerGrpcMitoTransformer.LPTokenPriceChartResponseToLPTokenPriceChart(response);
        }
        catch (e) {
            if (e instanceof InjectiveMetaRpc.GrpcWebError) {
                throw new GrpcUnaryRequestException(new Error(e.toString()), {
                    code: e.code,
                    contextModule: this.module,
                });
            }
            throw new GrpcUnaryRequestException(e, {
                code: UnspecifiedErrorCode,
                contextModule: this.module,
            });
        }
    }
    async fetchTVLChartRequest({ vaultAddress, from, to, }) {
        const request = MitoApi.TVLChartRequest.create();
        request.vaultAddress = vaultAddress;
        if (from) {
            request.fromTime = from;
        }
        if (to) {
            request.toTime = to;
        }
        try {
            const response = await this.client.TVLChart(request);
            return IndexerGrpcMitoTransformer.LPTokenPriceChartResponseToLPTokenPriceChart(response);
        }
        catch (e) {
            if (e instanceof InjectiveMetaRpc.GrpcWebError) {
                throw new GrpcUnaryRequestException(new Error(e.toString()), {
                    code: e.code,
                    contextModule: this.module,
                });
            }
            throw new GrpcUnaryRequestException(e, {
                code: UnspecifiedErrorCode,
                contextModule: this.module,
            });
        }
    }
    async fetchVaultsByHolderAddress({ pageSize, pageIndex, holderAddress, vaultAddress, }) {
        const request = MitoApi.VaultsByHolderAddressRequest.create();
        request.holderAddress = holderAddress;
        if (vaultAddress) {
            request.vaultAddress = vaultAddress;
        }
        if (pageSize) {
            request.pageSize = pageSize;
        }
        if (pageIndex) {
            request.pageIndex = pageIndex;
        }
        try {
            const response = await this.client.VaultsByHolderAddress(request);
            return IndexerGrpcMitoTransformer.VaultsByHolderAddressResponseToVaultsByHolderAddress(response);
        }
        catch (e) {
            if (e instanceof InjectiveMetaRpc.GrpcWebError) {
                throw new GrpcUnaryRequestException(new Error(e.toString()), {
                    code: e.code,
                    contextModule: this.module,
                });
            }
            throw new GrpcUnaryRequestException(e, {
                code: UnspecifiedErrorCode,
                contextModule: this.module,
            });
        }
    }
    async fetchLPHolders({ pageSize, pageIndex, vaultAddress, }) {
        const request = MitoApi.LPHoldersRequest.create();
        request.vaultAddress = vaultAddress;
        if (pageSize) {
            request.pageSize = pageSize;
        }
        if (pageIndex) {
            request.pageIndex = pageIndex;
        }
        try {
            const response = await this.client.LPHolders(request);
            return IndexerGrpcMitoTransformer.LPHoldersResponseToLPHolders(response);
        }
        catch (e) {
            if (e instanceof InjectiveMetaRpc.GrpcWebError) {
                throw new GrpcUnaryRequestException(new Error(e.toString()), {
                    code: e.code,
                    contextModule: this.module,
                });
            }
            throw new GrpcUnaryRequestException(e, {
                code: UnspecifiedErrorCode,
                contextModule: this.module,
            });
        }
    }
    async fetchHolderPortfolio(holderAddress) {
        const request = MitoApi.PortfolioRequest.create();
        request.holderAddress = holderAddress;
        try {
            const response = await this.client.Portfolio(request);
            return IndexerGrpcMitoTransformer.PortfolioResponseToPortfolio(response);
        }
        catch (e) {
            if (e instanceof InjectiveMetaRpc.GrpcWebError) {
                throw new GrpcUnaryRequestException(new Error(e.toString()), {
                    code: e.code,
                    contextModule: this.module,
                });
            }
            throw new GrpcUnaryRequestException(e, {
                code: UnspecifiedErrorCode,
                contextModule: this.module,
            });
        }
    }
    async fetchLeaderboard(epochId) {
        const request = MitoApi.LeaderboardRequest.create();
        if (epochId) {
            request.epochId = epochId;
        }
        try {
            const response = await this.client.Leaderboard(request);
            return IndexerGrpcMitoTransformer.LeaderboardResponseToLeaderboard(response);
        }
        catch (e) {
            if (e instanceof InjectiveMetaRpc.GrpcWebError) {
                throw new GrpcUnaryRequestException(new Error(e.toString()), {
                    code: e.code,
                    contextModule: this.module,
                });
            }
            throw new GrpcUnaryRequestException(e, {
                code: UnspecifiedErrorCode,
                contextModule: this.module,
            });
        }
    }
    async fetchTransferHistory({ vault, account, pageSize, toNumber, fromNumber, }) {
        const request = MitoApi.TransfersHistoryRequest.create();
        if (vault) {
            request.vault = vault;
        }
        if (account) {
            request.account = account;
        }
        if (pageSize) {
            request.pageSize = pageSize;
        }
        if (toNumber) {
            request.toNumber = toNumber;
        }
        if (fromNumber) {
            request.fromNumber = fromNumber;
        }
        try {
            const response = await this.client.TransfersHistory(request);
            return IndexerGrpcMitoTransformer.TransferHistoryResponseToTransfer(response);
        }
        catch (e) {
            if (e instanceof InjectiveMetaRpc.GrpcWebError) {
                throw new GrpcUnaryRequestException(new Error(e.toString()), {
                    code: e.code,
                    contextModule: this.module,
                });
            }
            throw new GrpcUnaryRequestException(e, {
                code: UnspecifiedErrorCode,
                contextModule: this.module,
            });
        }
    }
    async fetchLeaderboardEpochs({ pageSize, toEpochId, fromEpochId, }) {
        const request = MitoApi.LeaderboardEpochsRequest.create();
        if (pageSize) {
            request.pageSize = pageSize;
        }
        if (toEpochId) {
            request.toEpochId = toEpochId;
        }
        if (fromEpochId) {
            request.fromEpochId = fromEpochId;
        }
        try {
            const response = await this.client.LeaderboardEpochs(request);
            return IndexerGrpcMitoTransformer.LeaderboardEpochsResponseToLeaderboardEpochs(response);
        }
        catch (e) {
            if (e instanceof InjectiveMetaRpc.GrpcWebError) {
                throw new GrpcUnaryRequestException(new Error(e.toString()), {
                    code: e.code,
                    contextModule: this.module,
                });
            }
            throw new GrpcUnaryRequestException(e, {
                code: UnspecifiedErrorCode,
                contextModule: this.module,
            });
        }
    }
}
//# sourceMappingURL=IndexerGrpcMitoApi.js.map