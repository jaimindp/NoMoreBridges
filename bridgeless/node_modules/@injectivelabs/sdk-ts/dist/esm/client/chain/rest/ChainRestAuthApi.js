import { HttpRequestException, UnspecifiedErrorCode, } from '@injectivelabs/exceptions';
import BaseRestConsumer from '../../BaseRestConsumer';
import { ChainModule } from '../types';
/**
 * @category Chain Rest API
 */
export class ChainRestAuthApi extends BaseRestConsumer {
    /**
     * Looks up the account information for the Injective address.
     *
     * @param address address of account to look up
     */
    async fetchAccount(address) {
        try {
            const response = (await this.get(`cosmos/auth/v1beta1/accounts/${address}`));
            return response.data;
        }
        catch (e) {
            if (e instanceof HttpRequestException) {
                throw e;
            }
            throw new HttpRequestException(new Error(e.message), {
                code: UnspecifiedErrorCode,
                contextModule: ChainModule.Auth,
            });
        }
    }
    /**
     * Looks up the account information for any cosmos chain address.
     *
     * @param address address of account to look up
     */
    async fetchCosmosAccount(address) {
        try {
            const isInjectiveAddress = address.startsWith('inj') || address.startsWith('evmos');
            const response = (await this.get(`cosmos/auth/v1beta1/accounts/${address}`));
            const baseAccount = isInjectiveAddress
                ? response.data.account.base_account
                : response.data.account;
            return baseAccount;
        }
        catch (e) {
            if (e instanceof HttpRequestException) {
                throw e;
            }
            throw new HttpRequestException(new Error(e.message), {
                code: UnspecifiedErrorCode,
                contextModule: ChainModule.Auth,
            });
        }
    }
}
//# sourceMappingURL=ChainRestAuthApi.js.map