import { devnetChainInfo, localChainInfo, mainnetChainInfo, testnetChainInfo, } from './chainInfos';
import { oldEndpointsMainnet, oldEndpointsLocal, oldEndpointsTestnet, oldEndpointsTestnetK8s, oldEndpointsTestnetOld, oldEndpointsPublic, oldEndpointsDevnet, oldEndpointsMainnetK8s, oldEndpointsMainnetLB, oldEndpointsStaging, oldEndpointsDevnet1, oldEndpointsDevnet2, } from './old-endpoints';
import { endpointsMainnet, endpointsLocal, endpointsTestnet, endpointsTestnetK8s, endpointsTestnetOld, endpointsPublic, endpointsDevnet, endpointsMainnetK8s, endpointsMainnetLB, endpointsStaging, endpointsDevnet1, endpointsDevnet2, } from './endpoints';
import { Network, } from './types';
/**
 * @deprecated - use networkEndpoints
 */
export const oldNetworkEndpoints = {
    [Network.MainnetK8s]: oldEndpointsMainnetK8s,
    [Network.MainnetLB]: oldEndpointsMainnetLB,
    [Network.Staging]: oldEndpointsStaging,
    [Network.Mainnet]: oldEndpointsMainnet,
    [Network.Public]: oldEndpointsPublic,
    [Network.Devnet]: oldEndpointsDevnet,
    [Network.Devnet1]: oldEndpointsDevnet1,
    [Network.Devnet2]: oldEndpointsDevnet2,
    [Network.Testnet]: oldEndpointsTestnet,
    [Network.TestnetK8s]: oldEndpointsTestnetK8s,
    [Network.TestnetOld]: oldEndpointsTestnetOld,
    [Network.Local]: oldEndpointsLocal,
};
export const networkEndpoints = {
    [Network.MainnetLB]: endpointsMainnetLB,
    [Network.MainnetK8s]: endpointsMainnetK8s,
    [Network.Staging]: endpointsStaging,
    [Network.Mainnet]: endpointsMainnet,
    [Network.Public]: endpointsPublic,
    [Network.Devnet]: endpointsDevnet,
    [Network.Devnet1]: endpointsDevnet1,
    [Network.Devnet2]: endpointsDevnet2,
    [Network.Testnet]: endpointsTestnet,
    [Network.TestnetK8s]: endpointsTestnetK8s,
    [Network.TestnetOld]: endpointsTestnetOld,
    [Network.Local]: endpointsLocal,
};
export const chainInfos = {
    [Network.MainnetLB]: mainnetChainInfo,
    [Network.MainnetK8s]: mainnetChainInfo,
    [Network.Staging]: mainnetChainInfo,
    [Network.Mainnet]: mainnetChainInfo,
    [Network.Public]: mainnetChainInfo,
    [Network.Devnet]: devnetChainInfo,
    [Network.Devnet1]: devnetChainInfo,
    [Network.Devnet2]: devnetChainInfo,
    [Network.Testnet]: testnetChainInfo,
    [Network.TestnetOld]: testnetChainInfo,
    [Network.TestnetK8s]: testnetChainInfo,
    [Network.Local]: localChainInfo,
};
/**
 * @deprecated - use getNetworkEndpoints instead and adjust for the return type change
 * @param network de
 * @returns
 */
export const getEndpointsForNetwork = (network) => oldNetworkEndpoints[network];
export const getNetworkEndpoints = (network) => networkEndpoints[network];
/**
 * @deprecated - use getNetworkChainInfo instead
 * @param network de
 * @returns
 */
export const getChainInfoForNetwork = (network) => chainInfos[network];
export const getNetworkChainInfo = (network) => chainInfos[network];
export const getNetworkInfo = (network) => ({
    ...chainInfos[network],
    ...oldNetworkEndpoints[network],
    ...networkEndpoints[network],
});
export const isDevnet = (network) => [Network.Devnet, Network.Devnet1, Network.Devnet2, Network.Local].includes(network);
export const isTestnet = (network) => [Network.Testnet, Network.TestnetOld, Network.TestnetK8s].includes(network);
export const isTestnetOrDevnet = (network) => isDevnet(network) || isTestnet(network);
//# sourceMappingURL=network.js.map