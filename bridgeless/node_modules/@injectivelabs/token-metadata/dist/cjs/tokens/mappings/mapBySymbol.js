"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMappedTokensBySymbol = void 0;
const getMappedTokensBySymbol = (tokens) => Object.keys(tokens).reduce((result, token) => {
    var _a;
    const tokenMeta = tokens[token];
    const symbolKey = token.toUpperCase();
    const symbol = (_a = tokenMeta.symbol) === null || _a === void 0 ? void 0 : _a.toUpperCase();
    const symbolDiffs = symbol !== symbolKey;
    const existingKeys = Object.keys(result);
    let ibcResults = {};
    let cw20Results = {};
    let splResults = {};
    let evmResults = {};
    let erc20Results = {};
    let cw20sResults = {};
    if (tokenMeta.ibcs) {
        tokenMeta.ibcs.forEach(ibc => {
            if (ibc.baseDenom && !existingKeys.includes(ibc.baseDenom.toUpperCase())) {
                ibcResults[ibc.baseDenom.toUpperCase()] = tokenMeta;
            }
            if (ibc.symbol && !existingKeys.includes(ibc.symbol.toUpperCase())) {
                ibcResults[ibc.symbol.toUpperCase()] = tokenMeta;
            }
        });
    }
    if (tokenMeta.cw20s) {
        const cw20Maps = tokenMeta.cw20s.reduce((result, cw20) => {
            if (existingKeys.includes(cw20.symbol.toUpperCase())) {
                return result;
            }
            return Object.assign(Object.assign({}, result), { [cw20.symbol.toUpperCase()]: tokenMeta });
        }, {});
        cw20sResults = Object.assign({}, cw20Maps);
    }
    if (tokenMeta.evm &&
        tokenMeta.evm.symbol &&
        !existingKeys.includes(tokenMeta.evm.symbol.toUpperCase())) {
        evmResults = {
            [tokenMeta.evm.symbol.toUpperCase()]: tokenMeta,
        };
    }
    if (tokenMeta.erc20 &&
        tokenMeta.erc20.symbol &&
        !existingKeys.includes(tokenMeta.erc20.symbol.toUpperCase())) {
        erc20Results = {
            [tokenMeta.erc20.symbol.toUpperCase()]: tokenMeta,
        };
    }
    return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, result), splResults), evmResults), ibcResults), cw20Results), cw20sResults), erc20Results), (symbol && {
        [symbol.toUpperCase()]: tokenMeta,
    })), (symbolDiffs && {
        [symbolKey.toUpperCase()]: tokenMeta,
    }));
}, {});
exports.getMappedTokensBySymbol = getMappedTokensBySymbol;
//# sourceMappingURL=mapBySymbol.js.map