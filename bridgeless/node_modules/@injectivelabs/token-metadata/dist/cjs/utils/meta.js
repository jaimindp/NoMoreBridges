"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getIbcTokenFromDenomTrace = exports.getTokenInfo = exports.getTokenAddress = exports.getTokenDecimals = exports.getTokenName = exports.getTokenLogo = exports.getTokenSymbol = exports.getTokenTypeFromDenom = void 0;
const utils_1 = require("@injectivelabs/utils");
const types_1 = require("../types");
const helpers_1 = require("./helpers");
const ibc_1 = require("../ibc");
/** @deprecated - use getTokenInfo */
const getTokenTypeFromDenom = (denom) => {
    if (denom === utils_1.INJ_DENOM) {
        return types_1.TokenType.Native;
    }
    if ((0, helpers_1.isCw20ContractAddress)(denom)) {
        return types_1.TokenType.Cw20;
    }
    if (denom.startsWith('ibc')) {
        return types_1.TokenType.Ibc;
    }
    if (denom.startsWith('factory/')) {
        return types_1.TokenType.TokenFactory;
    }
    if (denom.startsWith('peggy')) {
        return types_1.TokenType.Erc20;
    }
    if (denom.startsWith('share')) {
        return types_1.TokenType.InsuranceFund;
    }
    return types_1.TokenType.Cw20;
};
exports.getTokenTypeFromDenom = getTokenTypeFromDenom;
/** @deprecated - use getTokenInfo */
const getTokenSymbol = (token) => {
    var _a, _b;
    if (token.denom.startsWith('factory/')) {
        const [address] = token.denom.split('/').reverse();
        if ((0, helpers_1.isCw20ContractAddress)(address)) {
            const meta = (0, helpers_1.getCw20Meta)(token);
            return (meta === null || meta === void 0 ? void 0 : meta.symbol) || token.symbol;
        }
        const meta = (0, helpers_1.getNativeTokenFactoryMeta)(token);
        return (meta === null || meta === void 0 ? void 0 : meta.symbol) || token.symbol;
    }
    if (token.denom.startsWith('peggy')) {
        return ((_a = token.erc20) === null || _a === void 0 ? void 0 : _a.symbol) || token.symbol;
    }
    if (token.denom.startsWith('ibc')) {
        return ((_b = token.ibc) === null || _b === void 0 ? void 0 : _b.symbol) || token.symbol;
    }
    return token.symbol;
};
exports.getTokenSymbol = getTokenSymbol;
/** @deprecated - use getTokenInfo */
const getTokenLogo = (token) => {
    var _a, _b, _c;
    if ((0, helpers_1.isCw20ContractAddress)(token.denom)) {
        return ((_a = token.cw20) === null || _a === void 0 ? void 0 : _a.name) || token.name;
    }
    if (token.denom.startsWith('factory/')) {
        const [address] = token.denom.split('/').reverse();
        if ((0, helpers_1.isCw20ContractAddress)(address)) {
            const meta = (0, helpers_1.getCw20Meta)(token);
            return (meta === null || meta === void 0 ? void 0 : meta.logo) || token.logo;
        }
        const meta = (0, helpers_1.getNativeTokenFactoryMeta)(token);
        return (meta === null || meta === void 0 ? void 0 : meta.logo) || token.logo;
    }
    if (token.denom.startsWith('peggy')) {
        return ((_b = token.erc20) === null || _b === void 0 ? void 0 : _b.name) || token.name;
    }
    if (token.denom.startsWith('ibc')) {
        return ((_c = token.ibc) === null || _c === void 0 ? void 0 : _c.name) || token.name;
    }
    return token.name;
};
exports.getTokenLogo = getTokenLogo;
/** @deprecated - use getTokenInfo */
const getTokenName = (token) => {
    var _a, _b, _c;
    if ((0, helpers_1.isCw20ContractAddress)(token.denom)) {
        return ((_a = token.cw20) === null || _a === void 0 ? void 0 : _a.name) || token.name;
    }
    if (token.denom.startsWith('factory/')) {
        const [address] = token.denom.split('/').reverse();
        if ((0, helpers_1.isCw20ContractAddress)(address)) {
            const meta = (0, helpers_1.getCw20Meta)(token);
            return (meta === null || meta === void 0 ? void 0 : meta.name) || token.name;
        }
        const meta = (0, helpers_1.getNativeTokenFactoryMeta)(token);
        return (meta === null || meta === void 0 ? void 0 : meta.name) || token.name;
    }
    if (token.denom.startsWith('peggy')) {
        return ((_b = token.erc20) === null || _b === void 0 ? void 0 : _b.name) || token.name;
    }
    if (token.denom.startsWith('ibc')) {
        return ((_c = token.ibc) === null || _c === void 0 ? void 0 : _c.name) || token.name;
    }
    return token.name;
};
exports.getTokenName = getTokenName;
/** @deprecated - use getTokenInfo */
const getTokenDecimals = (token) => {
    var _a;
    if (token.denom === utils_1.INJ_DENOM) {
        return token.decimals;
    }
    if (token.denom.startsWith('factory/')) {
        const [address] = token.denom.split('/').reverse();
        if ((0, helpers_1.isCw20ContractAddress)(address)) {
            const meta = (0, helpers_1.getCw20Meta)(token);
            return (meta === null || meta === void 0 ? void 0 : meta.decimals) || token.decimals;
        }
        const meta = (0, helpers_1.getNativeTokenFactoryMeta)(token);
        return (meta === null || meta === void 0 ? void 0 : meta.decimals) || token.decimals;
    }
    if (token.denom.startsWith('ibc')) {
        const meta = (0, helpers_1.getIbcMeta)(token);
        return (meta === null || meta === void 0 ? void 0 : meta.decimals) || token.decimals;
    }
    if (token.denom.startsWith('peggy')) {
        return ((_a = token.erc20) === null || _a === void 0 ? void 0 : _a.decimals) || token.decimals;
    }
    if (token.denom.startsWith('share')) {
        return token.decimals;
    }
    return token.decimals;
};
exports.getTokenDecimals = getTokenDecimals;
/** @deprecated - use getTokenInfo */
const getTokenAddress = (token) => {
    var _a, _b, _c;
    if (token.denom === utils_1.INJ_DENOM) {
        return (_a = token.erc20) === null || _a === void 0 ? void 0 : _a.address;
    }
    if (token.denom.startsWith('inj')) {
        return (_b = token.cw20) === null || _b === void 0 ? void 0 : _b.address;
    }
    if (token.denom.startsWith('factory/')) {
        const [, , address] = token.denom;
        return address;
    }
    if (token.denom.startsWith('peggy')) {
        return (_c = token.erc20) === null || _c === void 0 ? void 0 : _c.address;
    }
    if (token.denom.startsWith('share')) {
        return '';
    }
    return '';
};
exports.getTokenAddress = getTokenAddress;
const getTokenInfo = (token) => {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5;
    const tokenType = (0, exports.getTokenTypeFromDenom)(token.denom);
    if ((0, helpers_1.isCw20ContractAddress)(token.denom)) {
        const meta = (0, helpers_1.getCw20Meta)(token);
        return {
            symbol: (meta === null || meta === void 0 ? void 0 : meta.symbol) || token.symbol,
            name: (meta === null || meta === void 0 ? void 0 : meta.name) || token.name,
            logo: (meta === null || meta === void 0 ? void 0 : meta.logo) || token.logo,
            decimals: (meta === null || meta === void 0 ? void 0 : meta.decimals) || token.decimals,
            coinGeckoId: (meta === null || meta === void 0 ? void 0 : meta.coinGeckoId) || token.coinGeckoId,
            cw20: meta,
            tokenType,
        };
    }
    if (token.denom.startsWith('factory/')) {
        const [address] = token.denom.split('/').reverse();
        if ((0, helpers_1.isCw20ContractAddress)(address)) {
            const meta = (0, helpers_1.getCw20Meta)(token);
            return {
                symbol: (meta === null || meta === void 0 ? void 0 : meta.symbol) || token.symbol || '',
                name: (meta === null || meta === void 0 ? void 0 : meta.name) || token.name || '',
                logo: (meta === null || meta === void 0 ? void 0 : meta.logo) || token.logo,
                decimals: (meta === null || meta === void 0 ? void 0 : meta.decimals) || token.decimals || 0,
                coinGeckoId: (meta === null || meta === void 0 ? void 0 : meta.coinGeckoId) || token.coinGeckoId,
                cw20: meta,
                tokenType,
            };
        }
        const meta = (0, helpers_1.getNativeTokenFactoryMeta)(token);
        return {
            symbol: (meta === null || meta === void 0 ? void 0 : meta.symbol) || token.symbol || '',
            name: (meta === null || meta === void 0 ? void 0 : meta.name) || token.name || '',
            logo: (meta === null || meta === void 0 ? void 0 : meta.logo) || token.logo || '',
            decimals: (meta === null || meta === void 0 ? void 0 : meta.decimals) || token.decimals || 0,
            coinGeckoId: (meta === null || meta === void 0 ? void 0 : meta.coinGeckoId) || token.coinGeckoId,
            tokenFactory: meta,
            tokenType,
        };
    }
    if (token.denom.startsWith('peggy') || token.denom === utils_1.INJ_DENOM) {
        return {
            symbol: ((_a = token.erc20) === null || _a === void 0 ? void 0 : _a.symbol) || token.symbol || '',
            name: ((_b = token.erc20) === null || _b === void 0 ? void 0 : _b.name) || token.name || '',
            logo: ((_c = token.erc20) === null || _c === void 0 ? void 0 : _c.logo) || token.logo || '',
            decimals: ((_d = token.erc20) === null || _d === void 0 ? void 0 : _d.decimals) || token.decimals || 0,
            coinGeckoId: ((_e = token.erc20) === null || _e === void 0 ? void 0 : _e.coinGeckoId) || token.coinGeckoId,
            tokenType,
        };
    }
    if (token.denom.startsWith('0x') && token.denom.length === 42) {
        return {
            symbol: ((_f = token.erc20) === null || _f === void 0 ? void 0 : _f.symbol) || ((_g = token.evm) === null || _g === void 0 ? void 0 : _g.symbol) || token.symbol || '',
            name: ((_h = token.erc20) === null || _h === void 0 ? void 0 : _h.name) || ((_j = token.evm) === null || _j === void 0 ? void 0 : _j.symbol) || token.name || '',
            logo: ((_k = token.erc20) === null || _k === void 0 ? void 0 : _k.logo) || ((_l = token.evm) === null || _l === void 0 ? void 0 : _l.symbol) || token.logo || '',
            decimals: ((_m = token.erc20) === null || _m === void 0 ? void 0 : _m.decimals) || ((_o = token.evm) === null || _o === void 0 ? void 0 : _o.symbol) || token.decimals || 0,
            coinGeckoId: ((_p = token.erc20) === null || _p === void 0 ? void 0 : _p.coinGeckoId) || ((_q = token.evm) === null || _q === void 0 ? void 0 : _q.coinGeckoId) || token.coinGeckoId,
            tokenType,
        };
    }
    // Including tokens that can be searched by baseDenom symbol
    if (token.denom.startsWith('ibc') || token.ibcs) {
        const meta = (0, helpers_1.getIbcMeta)(token);
        return {
            symbol: (meta === null || meta === void 0 ? void 0 : meta.symbol) || token.symbol || '',
            name: (meta === null || meta === void 0 ? void 0 : meta.name) || token.name || '',
            logo: (meta === null || meta === void 0 ? void 0 : meta.logo) || token.logo || '',
            decimals: (meta === null || meta === void 0 ? void 0 : meta.decimals) || token.decimals || 6,
            coinGeckoId: (meta === null || meta === void 0 ? void 0 : meta.coinGeckoId) || token.coinGeckoId,
            tokenType,
        };
    }
    // Including tokens that can be searched by symbol
    if (token.erc20 || token.evm || token.spl) {
        return {
            symbol: ((_r = token.erc20) === null || _r === void 0 ? void 0 : _r.symbol) ||
                ((_s = token.evm) === null || _s === void 0 ? void 0 : _s.symbol) ||
                ((_t = token.spl) === null || _t === void 0 ? void 0 : _t.symbol) ||
                token.symbol ||
                '',
            name: ((_u = token.erc20) === null || _u === void 0 ? void 0 : _u.name) ||
                ((_v = token.evm) === null || _v === void 0 ? void 0 : _v.name) ||
                ((_w = token.spl) === null || _w === void 0 ? void 0 : _w.name) ||
                token.name ||
                '',
            logo: ((_x = token.erc20) === null || _x === void 0 ? void 0 : _x.logo) ||
                ((_y = token.evm) === null || _y === void 0 ? void 0 : _y.logo) ||
                ((_z = token.spl) === null || _z === void 0 ? void 0 : _z.logo) ||
                token.logo ||
                '',
            decimals: ((_0 = token.erc20) === null || _0 === void 0 ? void 0 : _0.decimals) ||
                ((_1 = token.evm) === null || _1 === void 0 ? void 0 : _1.decimals) ||
                ((_2 = token.spl) === null || _2 === void 0 ? void 0 : _2.decimals) ||
                token.decimals ||
                6,
            coinGeckoId: ((_3 = token.erc20) === null || _3 === void 0 ? void 0 : _3.coinGeckoId) ||
                ((_4 = token.evm) === null || _4 === void 0 ? void 0 : _4.coinGeckoId) ||
                ((_5 = token.spl) === null || _5 === void 0 ? void 0 : _5.coinGeckoId) ||
                token.coinGeckoId ||
                6,
            tokenType,
        };
    }
    return {
        symbol: token.symbol,
        name: token.name,
        logo: token.logo,
        decimals: token.decimals || 0,
        coinGeckoId: token.coinGeckoId || 0,
        tokenType,
    };
};
exports.getTokenInfo = getTokenInfo;
const getIbcTokenFromDenomTrace = ({ denomTrace, token, }) => {
    var _a, _b, _c, _d;
    return Object.assign(Object.assign({}, token), { symbol: ((_a = token.ibc) === null || _a === void 0 ? void 0 : _a.symbol) || token.symbol || '', name: ((_b = token.ibc) === null || _b === void 0 ? void 0 : _b.name) || token.name || '', logo: ((_c = token.ibc) === null || _c === void 0 ? void 0 : _c.logo) || token.logo || '', decimals: ((_d = token.ibc) === null || _d === void 0 ? void 0 : _d.decimals) || token.decimals || 0, tokenType: types_1.TokenType.Ibc, ibc: {
            hash: token.denom.replace('ibc/', ''),
            symbol: denomTrace.baseDenom,
            path: denomTrace.path,
            baseDenom: denomTrace.baseDenom,
            decimals: token.decimals,
            channelId: (0, ibc_1.getChannelIdFromPath)(denomTrace.path),
            isNative: !denomTrace.baseDenom.startsWith('ibc'),
        } });
};
exports.getIbcTokenFromDenomTrace = getIbcTokenFromDenomTrace;
//# sourceMappingURL=meta.js.map