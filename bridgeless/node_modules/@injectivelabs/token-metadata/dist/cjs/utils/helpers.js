"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isCw20ContractAddress = exports.getIbcTokenMetaFromDenomTrace = exports.getUnknownTokenWithSymbol = exports.getUnknownToken = exports.getNativeTokenFactoryMeta = exports.getIbcMeta = exports.getCw20Meta = exports.getCw20FromSymbolOrName = exports.getIbcDenomFromSymbolOrName = exports.getPeggyDenomFromSymbolOrName = exports.getTokenFactoryDenomByAdapter = void 0;
const networks_1 = require("@injectivelabs/networks");
const TokenMetaUtilsFactory_1 = require("../TokenMetaUtilsFactory");
const types_1 = require("../types");
const ibc_1 = require("../ibc");
/**
 * Token factory denoms created by the adapter contract
 */
const getTokenFactoryDenomByAdapter = (cw20address, network = networks_1.Network.Mainnet) => {
    return `factory/${(0, networks_1.getCw20AdapterContractForNetwork)(network)}/${cw20address}`;
};
exports.getTokenFactoryDenomByAdapter = getTokenFactoryDenomByAdapter;
const getPeggyDenomFromSymbolOrName = (symbolOrName, network = networks_1.Network.Mainnet) => {
    var _a;
    const tokenMetaUtils = TokenMetaUtilsFactory_1.TokenMetaUtilsFactory.make(network);
    const metaFromSymbol = tokenMetaUtils.getMetaBySymbol(symbolOrName);
    if (!metaFromSymbol) {
        return;
    }
    if (!(metaFromSymbol === null || metaFromSymbol === void 0 ? void 0 : metaFromSymbol.erc20)) {
        return;
    }
    return `peggy${(_a = metaFromSymbol === null || metaFromSymbol === void 0 ? void 0 : metaFromSymbol.erc20) === null || _a === void 0 ? void 0 : _a.address}`;
};
exports.getPeggyDenomFromSymbolOrName = getPeggyDenomFromSymbolOrName;
const getIbcDenomFromSymbolOrName = ({ symbolOrName, network = networks_1.Network.Mainnet, source, }) => {
    var _a, _b, _c, _d;
    const tokenMetaUtils = TokenMetaUtilsFactory_1.TokenMetaUtilsFactory.make(network);
    const metaFromSymbol = tokenMetaUtils.getMetaBySymbol(symbolOrName);
    if (!metaFromSymbol) {
        return;
    }
    if (!(metaFromSymbol === null || metaFromSymbol === void 0 ? void 0 : metaFromSymbol.ibcs)) {
        return;
    }
    const meta = metaFromSymbol;
    if (source) {
        const ibcHash = (_b = (_a = meta === null || meta === void 0 ? void 0 : meta.ibcs) === null || _a === void 0 ? void 0 : _a.find((ibc) => ibc.source === source)) === null || _b === void 0 ? void 0 : _b.hash;
        return `ibc/${ibcHash}`;
    }
    const defaultIbcHash = (_d = (_c = meta.ibcs) === null || _c === void 0 ? void 0 : _c.find((ibc) => ibc.source === types_1.TokenSource.Cosmos)) === null || _d === void 0 ? void 0 : _d.hash;
    const [ibc] = meta.ibcs || [];
    const ibcHash = defaultIbcHash || (ibc === null || ibc === void 0 ? void 0 : ibc.hash);
    return `ibc/${ibcHash}`;
};
exports.getIbcDenomFromSymbolOrName = getIbcDenomFromSymbolOrName;
const getCw20FromSymbolOrName = (symbolOrName, network = networks_1.Network.Mainnet, source) => {
    var _a;
    const tokenMetaUtils = TokenMetaUtilsFactory_1.TokenMetaUtilsFactory.make(network);
    const metaFromSymbol = tokenMetaUtils.getMetaBySymbol(symbolOrName);
    if (!metaFromSymbol) {
        return;
    }
    if (!(metaFromSymbol === null || metaFromSymbol === void 0 ? void 0 : metaFromSymbol.cw20s)) {
        return;
    }
    const meta = metaFromSymbol;
    if (source) {
        const cw20 = (_a = meta === null || meta === void 0 ? void 0 : meta.cw20s) === null || _a === void 0 ? void 0 : _a.find((cw20) => cw20.source === source);
        return cw20
            ? (0, exports.getTokenFactoryDenomByAdapter)(cw20.address, network)
            : undefined;
    }
    const [cw20] = meta.cw20s || [];
    return (0, exports.getTokenFactoryDenomByAdapter)(cw20.address, network);
};
exports.getCw20FromSymbolOrName = getCw20FromSymbolOrName;
const getCw20Meta = (token) => {
    var _a, _b;
    const denomToLowerCase = token.denom.toLowerCase();
    const cw20MetaFromCw20s = (_a = token.cw20s) === null || _a === void 0 ? void 0 : _a.find((meta) => denomToLowerCase.includes(meta.address.toLowerCase()));
    return cw20MetaFromCw20s || ((_b = token.cw20s) === null || _b === void 0 ? void 0 : _b[0]) || undefined;
};
exports.getCw20Meta = getCw20Meta;
const getIbcMeta = (token) => {
    var _a, _b, _c;
    const denomToLowerCase = token.denom.toLowerCase();
    const ibcMetaFromIbcs = (_a = token.ibcs) === null || _a === void 0 ? void 0 : _a.find((meta) => denomToLowerCase.includes(meta.hash.toLowerCase()));
    const defaultIbcMeta = (_b = token.ibcs) === null || _b === void 0 ? void 0 : _b.find((meta) => meta.source === types_1.TokenSource.Cosmos);
    return ibcMetaFromIbcs || defaultIbcMeta || ((_c = token.ibcs) === null || _c === void 0 ? void 0 : _c[0]) || undefined;
};
exports.getIbcMeta = getIbcMeta;
const getNativeTokenFactoryMeta = (token) => {
    var _a;
    const [, creatorAddress] = token.denom.split('/').reverse();
    return (_a = token.tokenFactories) === null || _a === void 0 ? void 0 : _a.find((meta) => meta.creator.toLowerCase() === creatorAddress);
};
exports.getNativeTokenFactoryMeta = getNativeTokenFactoryMeta;
const getUnknownToken = (denom) => {
    return {
        denom,
        name: denom,
        symbol: denom,
        decimals: 18,
        logo: 'unknown.png',
        coinGeckoId: '',
        tokenType: types_1.TokenType.Unknown,
        tokenVerification: types_1.TokenVerification.Unverified,
    };
};
exports.getUnknownToken = getUnknownToken;
const getUnknownTokenWithSymbol = (denom) => {
    return {
        denom,
        name: denom,
        symbol: 'UNKNOWN',
        decimals: 0,
        logo: 'unknown.png',
        coinGeckoId: '',
        tokenType: types_1.TokenType.Unknown,
        tokenVerification: types_1.TokenVerification.Unverified,
    };
};
exports.getUnknownTokenWithSymbol = getUnknownTokenWithSymbol;
/** @deprecated - use getIbcTokenFromDenomTrace */
const getIbcTokenMetaFromDenomTrace = ({ hash, path, decimals, baseDenom, }) => ({
    symbol: baseDenom,
    hash,
    path,
    baseDenom,
    decimals,
    channelId: (0, ibc_1.getChannelIdFromPath)(path),
    isNative: !baseDenom.startsWith('ibc'),
});
exports.getIbcTokenMetaFromDenomTrace = getIbcTokenMetaFromDenomTrace;
const isCw20ContractAddress = (address) => address.length === 42 && address.startsWith('inj');
exports.isCw20ContractAddress = isCw20ContractAddress;
//# sourceMappingURL=helpers.js.map