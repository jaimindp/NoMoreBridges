import { Network } from '@injectivelabs/networks';
import { Token, TokenBase, TokenSource, IbcTokenMeta, Cw20TokenMeta, IbcTokenMetaWithSource, Cw20TokenMetaWithSource, NativeTokenFactoryMeta } from '../types';
/**
 * Token factory denoms created by the adapter contract
 */
export declare const getTokenFactoryDenomByAdapter: (cw20address: string, network?: Network) => string;
export declare const getPeggyDenomFromSymbolOrName: (symbolOrName: string, network?: Network) => string | undefined;
export declare const getIbcDenomFromSymbolOrName: ({ symbolOrName, network, source, }: {
    symbolOrName: string;
    network?: Network | undefined;
    source?: TokenSource | undefined;
}) => string | undefined;
export declare const getCw20FromSymbolOrName: (symbolOrName: string, network?: Network, source?: TokenSource) => string | undefined;
export declare const getCw20Meta: (token: TokenBase) => Cw20TokenMetaWithSource | Cw20TokenMeta | undefined;
export declare const getIbcMeta: (token: TokenBase) => IbcTokenMetaWithSource | IbcTokenMeta | undefined;
export declare const getNativeTokenFactoryMeta: (token: TokenBase) => NativeTokenFactoryMeta | undefined;
export declare const getUnknownToken: (denom: string) => Token;
export declare const getUnknownTokenWithSymbol: (denom: string) => Token;
/** @deprecated - use getIbcTokenFromDenomTrace */
export declare const getIbcTokenMetaFromDenomTrace: ({ hash, path, decimals, baseDenom, }: {
    decimals: number;
    hash: string;
    path: string;
    baseDenom: string;
}) => IbcTokenMeta;
export declare const isCw20ContractAddress: (address: string) => boolean;
//# sourceMappingURL=helpers.d.ts.map