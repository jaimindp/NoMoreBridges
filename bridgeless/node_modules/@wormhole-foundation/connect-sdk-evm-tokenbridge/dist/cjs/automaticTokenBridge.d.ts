import { AccountAddress, AutomaticTokenBridge, ChainAddress, ChainsConfig, Contracts, NativeAddress, Network, TokenAddress } from '@wormhole-foundation/connect-sdk';
import { EvmChains, EvmPlatformType, EvmUnsignedTransaction } from '@wormhole-foundation/connect-sdk-evm';
import { Provider } from 'ethers';
import { ethers_contracts } from '.';
import '@wormhole-foundation/connect-sdk-evm-core';
export declare class EvmAutomaticTokenBridge<N extends Network, C extends EvmChains> implements AutomaticTokenBridge<N, C> {
    readonly network: N;
    readonly chain: C;
    readonly provider: Provider;
    readonly contracts: Contracts;
    readonly tokenBridgeRelayer: ethers_contracts.TokenBridgeRelayer;
    readonly tokenBridge: ethers_contracts.TokenBridgeContract;
    readonly chainId: bigint;
    private constructor();
    redeem(sender: AccountAddress<C>, vaa: AutomaticTokenBridge.VAA): AsyncGenerator<EvmUnsignedTransaction<N, C>>;
    static fromRpc<N extends Network>(provider: Provider, config: ChainsConfig<N, EvmPlatformType>): Promise<EvmAutomaticTokenBridge<N, EvmChains>>;
    transfer(sender: AccountAddress<C>, recipient: ChainAddress, token: TokenAddress<C>, amount: bigint, nativeGas?: bigint): AsyncGenerator<EvmUnsignedTransaction<N, C>>;
    getRelayerFee(sender: AccountAddress<C>, recipient: ChainAddress, token: TokenAddress<C>): Promise<bigint>;
    nativeTokenAmount(token: TokenAddress<C>, amount: bigint): Promise<bigint>;
    maxSwapAmount(token: TokenAddress<C>): Promise<bigint>;
    getRegisteredTokens(): Promise<NativeAddress<C>[]>;
    isRegisteredToken(token: TokenAddress<C>): Promise<boolean>;
    private tokenAddress;
    private createUnsignedTx;
}
//# sourceMappingURL=automaticTokenBridge.d.ts.map