import { AttestationReceipt, Network, PorticoBridge, Signer, SourceInitiatedTransferReceipt, TokenId, TransactionId, TransferQuote, TransferState } from "../..";
import { ManualRoute } from "../route";
import { Receipt, TransferParams, ValidatedTransferParams, ValidationResult } from "../types";
export declare const SLIPPAGE_BPS = 15n;
export declare const BPS_PER_HUNDRED_PERCENT = 10000n;
export declare namespace PorticoRoute {
    type Options = {};
    interface Quote extends TransferQuote {
        quote: PorticoBridge.Quote;
    }
    type NormalizedParams = {
        amount: bigint;
        canonicalSourceToken: TokenId;
        canonicalDestinationToken: TokenId;
        sourceToken: TokenId;
        destinationToken: TokenId;
    };
    interface ValidatedParams extends ValidatedTransferParams<Options> {
        normalizedParams: NormalizedParams;
        quote?: Quote;
    }
}
type Q = PorticoRoute.Quote;
type OP = PorticoRoute.Options;
type R = Receipt<AttestationReceipt<"PorticoBridge">>;
type VP = PorticoRoute.ValidatedParams;
type VR = ValidationResult<OP>;
type TP = TransferParams<OP>;
export declare class PorticoRoute<N extends Network> extends ManualRoute<N, OP, R, Q> {
    isSupported(): Promise<boolean>;
    getDefaultOptions(): OP;
    validate(params: TP): Promise<VR>;
    quote(params: VP): Promise<Q>;
    initiate(sender: Signer<N>, params: VP): Promise<SourceInitiatedTransferReceipt<"Solana" | "Ethereum" | "Terra" | "Bsc" | "Polygon" | "Avalanche" | "Oasis" | "Algorand" | "Aurora" | "Fantom" | "Karura" | "Acala" | "Klaytn" | "Celo" | "Near" | "Moonbeam" | "Neon" | "Terra2" | "Injective" | "Osmosis" | "Sui" | "Aptos" | "Arbitrum" | "Optimism" | "Gnosis" | "Pythnet" | "Xpla" | "Btc" | "Base" | "Sei" | "Rootstock" | "Wormchain" | "Cosmoshub" | "Evmos" | "Kujira" | "Sepolia" | "ArbitrumSepolia" | "BaseSepolia" | "OptimismSepolia" | "Holesky", "Solana" | "Ethereum" | "Terra" | "Bsc" | "Polygon" | "Avalanche" | "Oasis" | "Algorand" | "Aurora" | "Fantom" | "Karura" | "Acala" | "Klaytn" | "Celo" | "Near" | "Moonbeam" | "Neon" | "Terra2" | "Injective" | "Osmosis" | "Sui" | "Aptos" | "Arbitrum" | "Optimism" | "Gnosis" | "Pythnet" | "Xpla" | "Btc" | "Base" | "Sei" | "Rootstock" | "Wormchain" | "Cosmoshub" | "Evmos" | "Kujira" | "Sepolia" | "ArbitrumSepolia" | "BaseSepolia" | "OptimismSepolia" | "Holesky">>;
    track(receipt: R, timeout?: number): AsyncGenerator<{
        vaa: import("@wormhole-foundation/sdk-definitions/dist/esm/vaa/vaa").VAA<"TokenBridge:TransferWithPayload">;
        parsed: {
            readonly flagSet: {
                readonly recipientChain: number;
                readonly bridgeNonce: number;
                readonly feeTierStart: number;
                readonly feeTierFinish: number;
                readonly padding: Uint8Array;
                readonly bitset: number;
            };
            readonly finalTokenAddress: import("@wormhole-foundation/sdk-definitions/dist/esm/universalAddress").UniversalAddress;
            readonly recipientAddress: import("@wormhole-foundation/sdk-definitions/dist/esm/universalAddress").UniversalAddress;
            readonly cannonAssetAmount: bigint;
            readonly minAmountFinish: bigint;
            readonly relayerFee: bigint;
        };
        state: TransferState.SourceInitiated;
        originTxs: TransactionId<"Solana" | "Ethereum" | "Terra" | "Bsc" | "Polygon" | "Avalanche" | "Oasis" | "Algorand" | "Aurora" | "Fantom" | "Karura" | "Acala" | "Klaytn" | "Celo" | "Near" | "Moonbeam" | "Neon" | "Terra2" | "Injective" | "Osmosis" | "Sui" | "Aptos" | "Arbitrum" | "Optimism" | "Gnosis" | "Pythnet" | "Xpla" | "Btc" | "Base" | "Sei" | "Rootstock" | "Wormchain" | "Cosmoshub" | "Evmos" | "Kujira" | "Sepolia" | "ArbitrumSepolia" | "BaseSepolia" | "OptimismSepolia" | "Holesky">[];
        from: "Solana" | "Ethereum" | "Terra" | "Bsc" | "Polygon" | "Avalanche" | "Oasis" | "Algorand" | "Aurora" | "Fantom" | "Karura" | "Acala" | "Klaytn" | "Celo" | "Near" | "Moonbeam" | "Neon" | "Terra2" | "Injective" | "Osmosis" | "Sui" | "Aptos" | "Arbitrum" | "Optimism" | "Gnosis" | "Pythnet" | "Xpla" | "Btc" | "Base" | "Sei" | "Rootstock" | "Wormchain" | "Cosmoshub" | "Evmos" | "Kujira" | "Sepolia" | "ArbitrumSepolia" | "BaseSepolia" | "OptimismSepolia" | "Holesky";
        to: "Solana" | "Ethereum" | "Terra" | "Bsc" | "Polygon" | "Avalanche" | "Oasis" | "Algorand" | "Aurora" | "Fantom" | "Karura" | "Acala" | "Klaytn" | "Celo" | "Near" | "Moonbeam" | "Neon" | "Terra2" | "Injective" | "Osmosis" | "Sui" | "Aptos" | "Arbitrum" | "Optimism" | "Gnosis" | "Pythnet" | "Xpla" | "Btc" | "Base" | "Sei" | "Rootstock" | "Wormchain" | "Cosmoshub" | "Evmos" | "Kujira" | "Sepolia" | "ArbitrumSepolia" | "BaseSepolia" | "OptimismSepolia" | "Holesky";
    }, void, unknown>;
    complete(signer: Signer<N>, receipt: R): Promise<TransactionId[]>;
    private quoteUniswap;
}
export {};
//# sourceMappingURL=manual.d.ts.map