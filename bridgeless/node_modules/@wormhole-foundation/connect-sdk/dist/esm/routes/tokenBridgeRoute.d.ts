import { Network } from "@wormhole-foundation/sdk-base";
import { Signer, TransactionId } from "@wormhole-foundation/sdk-definitions";
import { TransferReceipt } from "../../wormholeTransfer";
import { ManualRoute, ValidationResult } from "../route";
export declare namespace TokenBridgeRoute {
  type Options = {
    payload?: Uint8Array;
  };
}
export declare class TokenBridgeRoute<N extends Network> extends ManualRoute<
  N,
  TokenBridgeRoute.Options
> {
  isSupported(): Promise<boolean>;
  validate(options: TokenBridgeRoute.Options): Promise<ValidationResult<Error>>;
  getDefaultOptions(): TokenBridgeRoute.Options;
  initiate(
    signer: Signer,
    options: TokenBridgeRoute.Options,
  ): Promise<TransferReceipt<"TokenBridge">>;
  complete(signer: Signer, receipt: TransferReceipt<"TokenBridge">): Promise<TransactionId[]>;
  track(receipt: TransferReceipt<"TokenBridge">): AsyncGenerator<TransferReceipt<"TokenBridge">>;
  private toTransferDetails;
}
//# sourceMappingURL=tokenBridgeRoute.d.ts.map
