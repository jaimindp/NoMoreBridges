import { TransferState, encoding, nativeTokenId, amount, } from "../..";
import { ManualRoute } from "../route";
async function delay(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
}
export class ManualMockRoute extends ManualRoute {
    static meta = {
        name: "ManualFauxBridge",
    };
    static supportedNetworks() {
        return ["Mainnet", "Testnet"];
    }
    static supportedChains(network) {
        return ["Solana", "Ethereum"];
    }
    static async supportedSourceTokens(fromChain) {
        await delay(250);
        return [nativeTokenId(fromChain.chain)];
    }
    static async supportedDestinationTokens(sourceToken, fromChain, toChain) {
        await delay(250);
        return [nativeTokenId(toChain.chain)];
    }
    static isProtocolSupported(chain) {
        return true;
    }
    async validate(params) {
        await delay(250);
        return {
            valid: true,
            params: { ...params, options: this.getDefaultOptions() },
        };
    }
    async quote(params) {
        await delay(1000);
        const fakeQuote = {
            sourceToken: {
                token: this.request.source.id,
                amount: amount.parse(params.amount, this.request.destination.decimals),
            },
            destinationToken: {
                token: this.request.destination.id,
                amount: amount.parse(params.amount, this.request.destination.decimals),
            },
            relayFee: {
                token: this.request.source.id,
                amount: amount.parse("0.01", this.request.source.decimals),
            },
        };
        return fakeQuote;
    }
    async initiate(sender, params) {
        await delay(1000);
        const fakeTxId = this.request.from.chain === "Solana"
            ? encoding.b58.encode(new Uint8Array(64))
            : encoding.hex.encode(new Uint8Array(32));
        const fakeReceipt = {
            from: this.request.from.chain,
            to: this.request.to.chain,
            state: TransferState.SourceInitiated,
            originTxs: [{ chain: sender.chain(), txid: fakeTxId }],
        };
        return fakeReceipt;
    }
    async *track(receipt, timeout) {
        await delay(1000);
        const fakeReceipt = {
            ...receipt,
            state: TransferState.DestinationInitiated,
            attestation: {
                id: {},
            },
        };
        yield fakeReceipt;
    }
    async complete(sender, receipt) {
        return [];
    }
    getDefaultOptions() {
        return {};
    }
}
//# sourceMappingURL=manual.js.map