import { Chain, ChainContext, Network, Signer, TokenId } from "../..";
import { AutomaticRoute, StaticRouteMethods } from "../route";
import { Quote, Receipt, TransferParams, ValidatedTransferParams, ValidationResult } from "../types";
type Op = {};
type R = Receipt;
type Q = Quote;
export declare class AutomaticMockRoute<N extends Network> extends AutomaticRoute<N, Op, R, Q> implements StaticRouteMethods<typeof AutomaticMockRoute> {
    NATIVE_GAS_DROPOFF_SUPPORTED: boolean;
    static meta: {
        name: string;
    };
    static supportedNetworks(): Network[];
    static supportedChains(network: Network): Chain[];
    static supportedSourceTokens(fromChain: ChainContext<Network>): Promise<TokenId[]>;
    static supportedDestinationTokens<N extends Network>(sourceToken: TokenId, fromChain: ChainContext<N>, toChain: ChainContext<N>): Promise<TokenId[]>;
    static isProtocolSupported<N extends Network>(chain: ChainContext<N>): boolean;
    isAvailable(): Promise<boolean>;
    validate(params: TransferParams<Op>): Promise<ValidationResult<Op>>;
    quote(params: ValidatedTransferParams<Op>): Promise<Q>;
    initiate(sender: Signer, params: ValidatedTransferParams<Op>): Promise<R>;
    track(receipt: R, timeout?: number | undefined): AsyncGenerator<R>;
    getDefaultOptions(): {};
}
export {};
//# sourceMappingURL=automatic.d.ts.map