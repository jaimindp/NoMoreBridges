import { Chain, Network, amount } from "@wormhole-foundation/sdk-base";
import { ChainAddress, ChainContext, TokenId } from "@wormhole-foundation/sdk-definitions";
import { TransferQuote } from "../types";
import { Wormhole } from "../wormhole";
import { TokenDetails } from "./token";
import { Quote, ValidatedTransferParams } from "./types";
export declare class RouteTransferRequest<N extends Network> {
    from: ChainAddress;
    to: ChainAddress;
    source: TokenDetails;
    destination: TokenDetails;
    fromChain: ChainContext<N>;
    toChain: ChainContext<N>;
    private constructor();
    parseAmount(amt: string): amount.Amount;
    amountFromBaseUnits(amt: bigint): amount.Amount;
    displayQuote<OP, VP extends ValidatedTransferParams<OP> = ValidatedTransferParams<OP>>(quote: TransferQuote, params: VP, details?: any): Promise<Quote<OP, VP>>;
    static create<N extends Network, FC extends Chain, TC extends Chain>(wh: Wormhole<N>, params: {
        from: ChainAddress<FC>;
        to: ChainAddress<TC>;
        source: TokenId<FC>;
        destination: TokenId<TC>;
    }, fromChain?: ChainContext<N, FC>, toChain?: ChainContext<N, TC>): Promise<RouteTransferRequest<N>>;
}
//# sourceMappingURL=request.d.ts.map