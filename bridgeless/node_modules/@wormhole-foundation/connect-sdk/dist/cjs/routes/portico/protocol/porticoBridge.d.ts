import { ChainContext, Network, Signer, VAA } from "@wormhole-foundation/connect-sdk";
import { EvmChains, EvmUnsignedTransaction } from "@wormhole-foundation/connect-sdk-evm";
import { CreateOrderRequest, CreateOrderResponse, PorticoTransferRequest, UniswapQuote } from "./types";
export declare class PorticoBridge<N extends Network, C extends EvmChains> {
    readonly context: ChainContext<N, "Evm", C>;
    chainId: bigint;
    porticoAddress: string;
    uniswapAddress: string;
    constructor(context: ChainContext<N, "Evm", C>);
    transfer(transfer: PorticoTransferRequest): AsyncGenerator<EvmUnsignedTransaction<N, "Ethereum" | "Bsc" | "Polygon" | "Avalanche" | "Oasis" | "Aurora" | "Fantom" | "Karura" | "Acala" | "Klaytn" | "Celo" | "Moonbeam" | "Neon" | "Arbitrum" | "Optimism" | "Gnosis" | "Base" | "Rootstock" | "Sepolia" | "ArbitrumSepolia" | "BaseSepolia" | "OptimismSepolia" | "Holesky">, void, unknown>;
    createOrder(request: CreateOrderRequest): Promise<CreateOrderResponse>;
    approve<N extends Network>(fromChain: ChainContext<N, "Evm", EvmChains>, token: string, senderAddr: string, amount: bigint, contract: string): AsyncGenerator<EvmUnsignedTransaction<N, "Ethereum" | "Bsc" | "Polygon" | "Avalanche" | "Oasis" | "Aurora" | "Fantom" | "Karura" | "Acala" | "Klaytn" | "Celo" | "Moonbeam" | "Neon" | "Arbitrum" | "Optimism" | "Gnosis" | "Base" | "Rootstock" | "Sepolia" | "ArbitrumSepolia" | "BaseSepolia" | "OptimismSepolia" | "Holesky">, void, unknown>;
    redeem(chain: ChainContext<N, "Evm", EvmChains>, vaa: VAA, signer: Signer<N>): AsyncGenerator<EvmUnsignedTransaction<N, "Ethereum" | "Bsc" | "Polygon" | "Avalanche" | "Oasis" | "Aurora" | "Fantom" | "Karura" | "Acala" | "Klaytn" | "Celo" | "Moonbeam" | "Neon" | "Arbitrum" | "Optimism" | "Gnosis" | "Base" | "Rootstock" | "Sepolia" | "ArbitrumSepolia" | "BaseSepolia" | "OptimismSepolia" | "Holesky">, void, unknown>;
    getUniswapQuote(tokenIn: string, tokenOut: string, amountIn: bigint, fee: number): Promise<UniswapQuote>;
    private createUnsignedTransaction;
}
//# sourceMappingURL=porticoBridge.d.ts.map