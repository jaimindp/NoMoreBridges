import { Network, Signer, TokenId, TransactionId, VAA, Wormhole, routes } from "@wormhole-foundation/connect-sdk";
import { EvmChains } from "@wormhole-foundation/connect-sdk-evm";
import { PorticoBridge } from "./protocol/porticoBridge";
import { PorticoSwapAmounts } from "./protocol/types";
import "@wormhole-foundation/connect-sdk-evm-tokenbridge";
export declare namespace PorticoRoute {
    type Options = {};
    type Quote = {
        swapAmounts: PorticoSwapAmounts;
        relayerFee: string;
    };
    type NormalizedParams = {
        amount: bigint;
        canonicalSourceToken: TokenId;
        canonicalDestinationToken: TokenId;
        sourceToken: TokenId;
        destinationToken: TokenId;
    };
    interface ValidatedParams extends routes.ValidatedTransferParams<Options> {
        normalizedParams: NormalizedParams;
        quote?: Quote;
    }
    type Receipt = {
        txids: TransactionId[];
        vaa?: VAA;
    };
}
type Q = PorticoRoute.Quote;
type OP = PorticoRoute.Options;
type R<N extends Network> = PorticoRoute.Receipt;
type VP = PorticoRoute.ValidatedParams;
type VR = routes.ValidationResult<OP>;
type TP = routes.TransferParams<OP>;
export declare class PorticoRoute<N extends Network> extends routes.ManualRoute<N, OP, R<N>, Q> {
    fromPorticoBridge: PorticoBridge<N, EvmChains>;
    toPorticoBridge: PorticoBridge<N, EvmChains>;
    constructor(wh: Wormhole<N>, request: routes.RouteTransferRequest<N>);
    isSupported(): Promise<boolean>;
    static getDefaultOptions(): OP;
    validate(params: TP): Promise<VR>;
    quote(params: VP): Promise<Q>;
    initiate(sender: Signer<N, EvmChains>, params: VP): Promise<{
        txids: TransactionId[];
    }>;
    track(receipt: R<N>, timeout?: number): AsyncGenerator<{
        vaa: VAA<"TokenBridge:TransferWithPayload">;
        parsed: import("./protocol/types").PorticoPayload;
        txids: TransactionId[];
    }, void, unknown>;
    complete<C extends EvmChains>(sender: Signer<N, C>, receipt: R<N>): Promise<TransactionId[]>;
    private toPorticoTransferRequest;
    private quoteRelayer;
    private quoteUniswap;
}
export {};
//# sourceMappingURL=porticoRoute.d.ts.map