import { ChainAddress, TokenId } from "@wormhole-foundation/connect-sdk";
export interface UniswapQuote {
    amountOut: bigint;
}
export type PorticoTransferRequest = {
    from: ChainAddress;
    to: ChainAddress;
    amount: bigint;
    source: TokenId | "native";
    destination: TokenId | "native";
    swapAmounts: PorticoSwapAmounts;
    relayerFee: string;
};
export interface CreateOrderRequest {
    startingChainId: number;
    destinationChainId: number;
    startingToken: string;
    startingTokenAmount: string;
    destinationToken: string;
    destinationAddress: string;
    relayerFee: string;
    feeTierStart: number;
    feeTierEnd: number;
    minAmountStart: string;
    minAmountEnd: string;
    bridgeNonce: number;
    shouldWrapNative: boolean;
    shouldUnwrapNative: boolean;
    porticoAddress: string;
    destinationPorticoAddress: string;
}
export interface CreateOrderResponse {
    transactionData: string;
    transactionTarget: string;
    transactionValue: string;
    startParameters: string[];
    estimatedAmountOut: string;
}
export interface PorticoSwapAmounts {
    minAmountStart: bigint;
    minAmountFinish: bigint;
    amountFinish: bigint;
}
export interface PorticoTradeParameters {
    flagSet: PorticoFlagSet;
    startTokenAddress: string;
    canonAssetAddress: string;
    finalTokenAddress: string;
    recipientAddress: string;
    destinationPorticoAddress: string;
    amountSpecified: bigint;
    minAmountStart: bigint;
    minAmountFinish: bigint;
    relayerFee: bigint;
}
export interface PorticoFlagSet {
    recipientChain: number;
    bridgeNonce: number;
    feeTierStart: number;
    feeTierFinish: number;
    shouldWrapNative: boolean;
    shouldUnwrapNative: boolean;
}
export interface PorticoPayload {
    flagSet: PorticoFlagSet;
    finalTokenAddress: string;
    recipientAddress: string;
    canonAssetAmount: bigint;
    minAmountFinish: bigint;
    relayerFee: bigint;
}
export interface RelayerQuoteRequest {
    targetChain: number;
    sourceToken: string;
    targetToken: string;
}
export interface RelayerQuoteResponse {
    fee: string;
    validUntil: string;
}
export interface PorticoDestTxInfo {
    receivedTokenKey: string;
    swapFailed?: {
        canonicalTokenAddress: string;
        finalTokenAddress: string;
    };
}
//# sourceMappingURL=types.d.ts.map