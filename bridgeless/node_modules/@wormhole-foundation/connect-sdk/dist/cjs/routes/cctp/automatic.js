"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AutomaticCCTPRoute = void 0;
const sdk_base_1 = require("@wormhole-foundation/sdk-base");
const sdk_definitions_1 = require("@wormhole-foundation/sdk-definitions");
const cctpTransfer_1 = require("../../protocols/cctpTransfer");
const types_1 = require("../../types");
const route_1 = require("../route");
const wormhole_1 = require("../../wormhole");
class AutomaticCCTPRoute extends route_1.AutomaticRoute {
    NATIVE_GAS_DROPOFF_SUPPORTED = true;
    static meta = {
        name: "AutomaticCCTP",
    };
    static supportedNetworks() {
        return ["Mainnet", "Testnet"];
    }
    // get the list of chains this route supports
    static supportedChains(network) {
        if (sdk_base_1.contracts.circleContractChains.has(network)) {
            return sdk_base_1.contracts.circleContractChains.get(network);
        }
        return [];
    }
    // get the list of source tokens that are possible to send
    static async supportedSourceTokens(fromChain) {
        const { network, chain } = fromChain;
        if (!sdk_base_1.circle.usdcContract.has(network, chain))
            return [];
        return [wormhole_1.Wormhole.chainAddress(chain, sdk_base_1.circle.usdcContract.get(network, chain))];
    }
    // get the liist of destination tokens that may be recieved on the destination chain
    static async supportedDestinationTokens(sourceToken, fromChain, toChain) {
        const { network, chain } = toChain;
        if (!sdk_base_1.circle.usdcContract.has(network, chain))
            return [];
        return [
            (0, sdk_definitions_1.nativeTokenId)(chain),
            wormhole_1.Wormhole.chainAddress(chain, sdk_base_1.circle.usdcContract.get(network, chain)),
        ];
    }
    static isProtocolSupported(chain) {
        return chain.supportsAutomaticCircleBridge();
    }
    getDefaultOptions() {
        return {
            nativeGas: 0.0,
        };
    }
    async isAvailable() {
        return true;
    }
    async validate(params) {
        try {
            const options = params.options ?? this.getDefaultOptions();
            const normalizedParams = await this.normalizeTransferParams(params);
            const validatedParams = {
                normalizedParams,
                options,
                ...params,
            };
            return { valid: true, params: validatedParams };
        }
        catch (e) {
            return {
                valid: false,
                params,
                error: e,
            };
        }
    }
    async quote(params) {
        try {
            return this.request.displayQuote(await cctpTransfer_1.CircleTransfer.quoteTransfer(this.request.fromChain, this.request.toChain, this.toTransferDetails(params)), params);
        }
        catch (e) {
            return {
                success: false,
                error: e,
            };
        }
    }
    async normalizeTransferParams(params) {
        const amt = this.request.parseAmount(params.amount);
        const ctb = await this.request.fromChain.getAutomaticCircleBridge();
        const fee = await ctb.getRelayerFee(this.request.to.chain);
        const minAmount = (fee * 105n) / 100n;
        if (sdk_base_1.amount.units(amt) < minAmount) {
            throw new Error(`Minimum amount is ${sdk_base_1.amount.display(this.request.amountFromBaseUnits(minAmount))}`);
        }
        const transferableAmount = sdk_base_1.amount.units(amt) - fee;
        const options = params.options ?? this.getDefaultOptions();
        const nativeGasPerc = options.nativeGas ?? 0.0;
        if (nativeGasPerc > 1.0 || nativeGasPerc < 0.0)
            throw new Error("Native gas must be between 0.0 and 1.0 (0% and 100%)");
        let nativeGasAmount = 0n;
        if (nativeGasPerc > 0.0) {
            const scale = 10000;
            const scaledGas = BigInt(nativeGasPerc * scale);
            nativeGasAmount = (transferableAmount * scaledGas) / BigInt(scale);
        }
        return {
            fee: this.request.amountFromBaseUnits(fee),
            amount: amt,
            nativeGasAmount: this.request.amountFromBaseUnits(nativeGasAmount),
        };
    }
    toTransferDetails(params) {
        return {
            from: this.request.from,
            to: this.request.to,
            amount: sdk_base_1.amount.units(params.normalizedParams.amount),
            automatic: true,
            nativeGas: sdk_base_1.amount.units(params.normalizedParams.nativeGasAmount),
        };
    }
    async initiate(signer, quote) {
        const { params } = quote;
        let transfer = this.toTransferDetails(params);
        let txids = await cctpTransfer_1.CircleTransfer.transfer(this.request.fromChain, transfer, signer);
        const msg = await cctpTransfer_1.CircleTransfer.getTransferMessage(this.request.fromChain, txids[txids.length - 1].txid);
        return {
            from: transfer.from.chain,
            to: transfer.to.chain,
            state: types_1.TransferState.SourceFinalized,
            originTxs: txids,
            attestation: { id: msg.id, attestation: { message: msg.message } },
        };
    }
    async *track(receipt, timeout) {
        yield* cctpTransfer_1.CircleTransfer.track(this.wh, receipt, timeout, this.request.fromChain, this.request.toChain);
    }
}
exports.AutomaticCCTPRoute = AutomaticCCTPRoute;
//# sourceMappingURL=automatic.js.map