import { Chain, Network } from "@wormhole-foundation/sdk-base";
import { Attestation, AttestationId, AutomaticCircleBridge, ChainContext, CircleTransferDetails, Signer, TransactionId, TxHash, WormholeMessageId } from "@wormhole-foundation/sdk-definitions";
import { AttestationReceipt, TransferQuote, TransferReceipt, TransferState } from "../types";
import { Wormhole } from "../wormhole";
import { WormholeTransfer } from "./wormholeTransfer";
type CircleTransferProtocol = "CircleBridge" | "AutomaticCircleBridge";
export type CircleAttestationReceipt = AttestationReceipt<CircleTransferProtocol>;
export type CircleTransferReceipt<SC extends Chain = Chain, DC extends Chain = Chain> = TransferReceipt<CircleAttestationReceipt, SC, DC>;
export declare class CircleTransfer<N extends Network = Network> implements WormholeTransfer<CircleTransferProtocol> {
    private readonly wh;
    fromChain: ChainContext<N, Chain>;
    toChain: ChainContext<N, Chain>;
    private _state;
    transfer: CircleTransferDetails;
    txids: TransactionId[];
    attestations?: AttestationReceipt<CircleTransferProtocol>[];
    private constructor();
    getTransferState(): TransferState;
    static from<N extends Network>(wh: Wormhole<N>, from: CircleTransferDetails, timeout?: number, fromChain?: ChainContext<N, Chain>, toChain?: ChainContext<N, Chain>): Promise<CircleTransfer<N>>;
    static from<N extends Network>(wh: Wormhole<N>, from: WormholeMessageId, timeout?: number, fromChain?: ChainContext<N, Chain>, toChain?: ChainContext<N, Chain>): Promise<CircleTransfer<N>>;
    static from<N extends Network>(wh: Wormhole<N>, from: string, // CircleMessage hex encoded
    timeout?: number, fromChain?: ChainContext<N, Chain>, toChain?: ChainContext<N, Chain>): Promise<CircleTransfer<N>>;
    static from<N extends Network>(wh: Wormhole<N>, from: TransactionId, timeout?: number, fromChain?: ChainContext<N, Chain>, toChain?: ChainContext<N, Chain>): Promise<CircleTransfer<N>>;
    private static fromWormholeMessageId;
    private static fromCircleMessage;
    private static fromTransaction;
    initiateTransfer(signer: Signer): Promise<TxHash[]>;
    static transfer<N extends Network, C extends Chain = Chain>(fromChain: ChainContext<N, C>, transfer: CircleTransferDetails, signer: Signer<N, Chain>): Promise<TransactionId[]>;
    private _fetchWormholeAttestation;
    private _fetchCircleAttestation;
    fetchAttestation(timeout?: number): Promise<AttestationId[]>;
    completeTransfer(signer: Signer): Promise<TxHash[]>;
    static quoteTransfer<N extends Network>(srcChain: ChainContext<N, Chain>, dstChain: ChainContext<N, Chain>, transfer: CircleTransferDetails): Promise<TransferQuote>;
    static isTransferComplete<N extends Network>(toChain: ChainContext<N, Chain>, attestation: Attestation<CircleTransferProtocol>): Promise<boolean>;
    static getTransferVaa<N extends Network>(wh: Wormhole<N>, wormholeMessageId: WormholeMessageId, timeout?: number): Promise<AutomaticCircleBridge.VAA>;
    static getTransferMessage<N extends Network>(fromChain: ChainContext<N, Chain>, txid: TxHash): Promise<import("@wormhole-foundation/sdk-definitions").CircleTransferMessage>;
    static getReceipt<N extends Network>(xfer: CircleTransfer<N>): CircleTransferReceipt;
    static track<N extends Network, SC extends Chain, DC extends Chain>(wh: Wormhole<N>, receipt: CircleTransferReceipt<SC, DC>, timeout?: number, _fromChain?: ChainContext<N, SC>, _toChain?: ChainContext<N, DC>): AsyncGenerator<CircleTransferReceipt<SC, DC>>;
}
export {};
//# sourceMappingURL=cctpTransfer.d.ts.map