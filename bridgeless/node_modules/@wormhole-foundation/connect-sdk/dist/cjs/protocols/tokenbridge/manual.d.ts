import { Chain, Network, Platform } from "@wormhole-foundation/sdk-base";
import { AttestationId, ChainContext, Signer, TokenBridge, TokenTransferDetails, TransactionId, TxHash } from "@wormhole-foundation/sdk-definitions";
import { TransferState } from "../../types";
import { WormholeTransfer } from "../wormholeTransfer";
import { TokenTransfer } from "./tokenTransfer";
type PN = "TokenBridge";
export declare class ManualTokenTransfer<N extends Network> extends TokenTransfer<N, PN> implements WormholeTransfer<PN> {
    getTransferState(): TransferState;
    initiateTransfer(signer: Signer): Promise<TxHash[]>;
    fetchAttestation(timeout?: number): Promise<AttestationId[]>;
    completeTransfer(signer: Signer): Promise<TxHash[]>;
    static transfer<N extends Network>(chainCtx: ChainContext<N, Platform, Chain>, transfer: TokenTransferDetails, signer: Signer<N, Chain>): Promise<TransactionId[]>;
    static redeem<N extends Network>(toChain: ChainContext<N, Platform, Chain>, vaa: TokenBridge.TransferVAA, signer: Signer<N, Chain>): Promise<TransactionId[]>;
}
export {};
//# sourceMappingURL=manual.d.ts.map