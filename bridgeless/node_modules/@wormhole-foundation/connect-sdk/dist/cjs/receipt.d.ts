import { Chain } from "@wormhole-foundation/sdk-base";
import { Attestation, AttestationId, ProtocolName, TransactionId } from "@wormhole-foundation/sdk-definitions";
export type AttestationReceipt<PN extends ProtocolName = ProtocolName> = {
    id: AttestationId<PN>;
    attestation?: Attestation<PN>;
};
export declare enum TransferState {
    Failed = -1,
    Created = 0,
    SourceInitiated = 1,
    SourceFinalized = 2,
    Attested = 3,
    DestinationInitiated = 4,
    DestinationFinalized = 5
}
interface BaseTransferReceipt<T, SC extends Chain, DC extends Chain> {
    from: SC;
    to: DC;
    request: T;
    state: TransferState;
}
export interface CreatedTransferReceipt<PN extends ProtocolName, SC extends Chain = Chain, DC extends Chain = Chain> extends BaseTransferReceipt<PN, SC, DC> {
    state: TransferState.Created;
}
export interface SourceInitiatedTransferReceipt<PN extends ProtocolName, SC extends Chain = Chain, DC extends Chain = Chain> extends BaseTransferReceipt<PN, SC, DC> {
    state: TransferState.SourceInitiated;
    originTxs: TransactionId<SC>[];
}
export interface SourceFinalizedTransferReceipt<PN extends ProtocolName, SC extends Chain = Chain, DC extends Chain = Chain> extends BaseTransferReceipt<PN, SC, DC> {
    state: TransferState.SourceFinalized;
    originTxs: TransactionId<SC>[];
    attestation: AttestationReceipt<PN>;
}
export interface AttestedTransferReceipt<PN extends ProtocolName, SC extends Chain = Chain, DC extends Chain = Chain> extends BaseTransferReceipt<PN, SC, DC> {
    state: TransferState.Attested;
    originTxs: TransactionId<SC>[];
    attestation: Required<AttestationReceipt<PN>>;
}
export interface CompletedTransferReceipt<PN extends ProtocolName, SC extends Chain = Chain, DC extends Chain = Chain> extends BaseTransferReceipt<PN, SC, DC> {
    state: TransferState.DestinationInitiated | TransferState.DestinationFinalized;
    originTxs: TransactionId<SC>[];
    attestation: AttestationReceipt<PN>;
    destinationTxs?: TransactionId<DC>[];
}
export declare function isSourceInitiated<PN extends ProtocolName>(receipt: TransferReceipt<PN, Chain, Chain>): receipt is SourceInitiatedTransferReceipt<PN, Chain, Chain>;
export declare function isSourceFinalized<PN extends ProtocolName>(receipt: TransferReceipt<PN, Chain, Chain>): receipt is SourceFinalizedTransferReceipt<PN, Chain, Chain>;
export declare function isAttested<PN extends ProtocolName>(receipt: TransferReceipt<PN, Chain, Chain>): receipt is AttestedTransferReceipt<PN, Chain, Chain>;
export declare function isCompleted<PN extends ProtocolName>(receipt: TransferReceipt<PN, Chain, Chain>): receipt is CompletedTransferReceipt<PN, Chain, Chain>;
export type TransferReceipt<PN extends ProtocolName, SC extends Chain = Chain, DC extends Chain = Chain> = CreatedTransferReceipt<PN, SC, DC> | SourceInitiatedTransferReceipt<PN, SC, DC> | SourceFinalizedTransferReceipt<PN, SC, DC> | AttestedTransferReceipt<PN, SC, DC> | CompletedTransferReceipt<PN, SC, DC>;
export {};
//# sourceMappingURL=receipt.d.ts.map