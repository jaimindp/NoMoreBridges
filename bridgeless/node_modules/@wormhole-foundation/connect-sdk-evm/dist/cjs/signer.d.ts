import { Network, PlatformNativeSigner, SignOnlySigner, SignedTx, Signer, UnsignedTransaction } from '@wormhole-foundation/connect-sdk';
import { ethers } from 'ethers';
import { EvmChains } from './types';
export declare function getEvmSignerForKey(rpc: ethers.Provider, privateKey: string): Promise<Signer>;
export declare function getEvmSignerForSigner(chain: EvmChains, signer: ethers.Signer): Promise<Signer>;
export declare class EvmNativeSigner<N extends Network, C extends EvmChains = EvmChains> extends PlatformNativeSigner<ethers.Signer, N, C> implements SignOnlySigner<N, C> {
    chain(): C;
    address(): string;
    sign(tx: UnsignedTransaction<N, C>[]): Promise<SignedTx[]>;
}
export declare function isEvmNativeSigner<N extends Network>(signer: Signer<N>): signer is EvmNativeSigner<N>;
//# sourceMappingURL=signer.d.ts.map