import { Address, UniversalAddress } from '@wormhole-foundation/connect-sdk';
import { AnyEvmAddress } from './types';
export declare const EvmZeroAddress: string;
export declare class EvmAddress implements Address {
    static readonly byteSize = 20;
    static readonly platform: "Evm";
    readonly type: string;
    readonly address: string;
    constructor(address: AnyEvmAddress);
    unwrap(): string;
    toString(): string;
    toNative(): this;
    toUint8Array(): Uint8Array;
    toUniversalAddress(): UniversalAddress;
    static isValidAddress(address: string): boolean;
    static instanceof(address: any): address is EvmAddress;
    equals(other: EvmAddress | UniversalAddress): boolean;
}
declare global {
    namespace Wormhole {
        interface PlatformToNativeAddressMapping {
            Evm: EvmAddress;
        }
    }
}
//# sourceMappingURL=address.d.ts.map