"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EvmSigner = exports.getEvmSigner = void 0;
const ethers_1 = require("ethers");
const platform_1 = require("../platform");
// Get a SignOnlySigner for the EVM platform
async function getEvmSigner(rpc, privateKey) {
    const [network, chain] = await platform_1.EvmPlatform.chainFromRpc(rpc);
    return new EvmSigner(chain, rpc, privateKey);
}
exports.getEvmSigner = getEvmSigner;
// EvmSigner implements SignOnlySender
class EvmSigner {
    _chain;
    provider;
    _wallet;
    constructor(_chain, provider, privateKey) {
        this._chain = _chain;
        this.provider = provider;
        this._wallet = new ethers_1.ethers.Wallet(privateKey, provider);
    }
    chain() {
        return this._chain;
    }
    address() {
        return this._wallet.address;
    }
    async sign(tx) {
        const signed = [];
        let nonce = await this.provider.getTransactionCount(this.address());
        // TODO: Better gas estimation/limits
        let gasLimit = 500000n;
        let maxFeePerGas = 1500000000n; // 1.5gwei
        let maxPriorityFeePerGas = 100000000n; // 0.1gwei
        // Celo does not support this call
        if (this._chain !== 'Celo') {
            const feeData = await this.provider.getFeeData();
            maxFeePerGas = feeData.maxFeePerGas ?? maxFeePerGas;
            maxPriorityFeePerGas =
                feeData.maxPriorityFeePerGas ?? maxPriorityFeePerGas;
        }
        for (const txn of tx) {
            const { transaction, description } = txn;
            console.log(`Signing: ${description} for ${this.address()}`);
            const t = {
                ...transaction,
                ...{
                    gasLimit,
                    maxFeePerGas,
                    maxPriorityFeePerGas,
                    nonce,
                },
            };
            // TODO
            // const estimate = await this.provider.estimateGas(t)
            // t.gasLimit = estimate
            signed.push(await this._wallet.signTransaction(t));
            nonce += 1;
        }
        return signed;
    }
}
exports.EvmSigner = EvmSigner;
//# sourceMappingURL=signer.js.map