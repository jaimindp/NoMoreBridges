import { NumSizeToPrimitive } from "./layout";
export type Bitset<B extends readonly (string | undefined)[]> = {
    [K in B[number] as K extends "" | undefined ? never : K]: boolean;
};
type ByteSize = [
    never,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6
];
type BitsizeToBytesize<N extends number> = N extends keyof ByteSize ? ByteSize[N] : number;
export type BitsetItem<B extends readonly (string | undefined)[], S extends number = BitsizeToBytesize<B["length"]>> = {
    binary: "uint";
    size: S;
    custom: {
        to: (encoded: NumSizeToPrimitive<S>) => Bitset<B>;
        from: (obj: Bitset<B>) => NumSizeToPrimitive<S>;
    };
};
export declare const bitsetItem: <const B extends readonly (string | undefined)[], const S extends number = BitsizeToBytesize<B["length"]>>(bitnames: B, size?: S | undefined) => BitsetItem<B, S>;
export {};
//# sourceMappingURL=items.d.ts.map