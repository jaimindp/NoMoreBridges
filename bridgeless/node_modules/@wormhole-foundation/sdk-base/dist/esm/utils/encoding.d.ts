export { bech32 } from "@scure/base";
/** Utility method to strip a given prefix, frequently used to remove '0x' from an address */
export declare const stripPrefix: (prefix: string, str: string) => string;
/** Base16/Hex encoding and decoding utilities */
export declare const hex: {
    valid: (input: string) => boolean;
    decode: (input: string) => Uint8Array;
    encode: (input: string | Uint8Array, prefix?: boolean) => string;
};
/** Base64 encoding and decoding utilities */
export declare const b64: {
    valid: (input: string) => boolean;
    decode: (str: string) => Uint8Array;
    encode: (input: string | Uint8Array) => string;
};
/** Base58 encoding and decoding utilities */
export declare const b58: {
    decode: (str: string) => Uint8Array;
    encode: (input: string | Uint8Array) => string;
};
/** BigInt encoding and decoding utilities */
export declare const bignum: {
    decode: (input: string | Uint8Array) => bigint;
    encode: (input: bigint, prefix?: boolean) => string;
    toString: (input: bigint, prefix?: boolean) => string;
    toBytes: (input: bigint | number, length?: number) => Uint8Array;
};
/** Uint8Array encoding and decoding utilities */
export declare const bytes: {
    encode: (value: string) => Uint8Array;
    decode: (value: Uint8Array) => string;
    equals: (lhs: Uint8Array, rhs: Uint8Array) => boolean;
    zpad: (arr: Uint8Array, length: number, padStart?: boolean) => Uint8Array;
    concat: (...args: Uint8Array[]) => Uint8Array;
};
//# sourceMappingURL=encoding.d.ts.map