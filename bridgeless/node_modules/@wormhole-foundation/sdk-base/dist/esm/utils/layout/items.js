import { numberMaxSize } from "./layout";
export const bitsetItem = (bitnames, size) => ({
    binary: "uint",
    size: (size ?? Math.ceil(bitnames.length / 8)),
    custom: {
        to: (encoded) => {
            const ret = {};
            for (let i = 0; i < bitnames.length; ++i)
                if (bitnames[i]) //skip undefined and empty string
                    //always use bigint for simplicity
                    ret[bitnames[i]] = (BigInt(encoded) & (1n << BigInt(i))) !== 0n;
            return ret;
        },
        from: (obj) => {
            let val = 0n;
            for (let i = 0; i < bitnames.length; ++i)
                if (bitnames[i] && obj[bitnames[i]])
                    val |= 1n << BigInt(i);
            return (bitnames.length > numberMaxSize ? val : Number(val));
        },
    },
});
//# sourceMappingURL=items.js.map