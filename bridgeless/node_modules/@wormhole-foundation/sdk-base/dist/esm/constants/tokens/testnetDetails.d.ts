export declare const testnetTokenDetails: (<K1 extends "ETH" | "WETH" | "USDCeth" | "WBTC" | "USDT" | "DAI" | "WMATIC" | "WBNB" | "WAVAX" | "USDCavax" | "WFTM" | "CELO" | "WGLMR" | "WSOL" | "USDCsol" | "SUI" | "APT" | "WETHarbitrum" | "USDCarbitrum" | "WETHoptimism" | "WETHbase" | "tBTC" | "tBTCpolygon" | "tBTCoptimism" | "tBTCarbitrum" | "tBTCbase" | "wstETH" | "WKLAY" | "USDCpolygon" | "BNB" | "USDCoptimism" | "USDCbase" | "MATIC" | "AVAX" | "FTM" | "GLMR" | "SOL" | "tBTCsol" | "ETHbase" | "ETHarbitrum" | "ETHoptimism" | "OSMO" | "EVMOS" | "KUJI" | "KLAY" | "SEI" | "ATOM" | "ETHsepolia" | "WETHsepolia" | "ETHarbitrum_sepolia" | "WETHarbitrum_sepolia" | "ETHbase_sepolia" | "WETHbase_sepolia" | "ETHoptimism_sepolia" | "WETHoptimism_sepolia">(args_0: K1) => {
    readonly ETH: {
        readonly key: "ETH";
        readonly symbol: "ETH";
        readonly coinGeckoId: "ethereum";
        readonly nativeChain: "Ethereum";
    };
    readonly WETH: {
        readonly key: "WETH";
        readonly symbol: "WETH";
        readonly coinGeckoId: "ethereum";
        readonly nativeChain: "Ethereum";
    };
    readonly USDCeth: {
        readonly key: "USDCeth";
        readonly symbol: "USDC";
        readonly coinGeckoId: "usd-coin";
        readonly nativeChain: "Ethereum";
    };
    readonly WBTC: {
        readonly key: "WBTC";
        readonly symbol: "WBTC";
        readonly coinGeckoId: "wrapped-bitcoin";
        readonly nativeChain: "Ethereum";
    };
    readonly USDT: {
        readonly key: "USDT";
        readonly symbol: "USDT";
        readonly coinGeckoId: "tether";
        readonly nativeChain: "Ethereum";
    };
    readonly DAI: {
        readonly key: "DAI";
        readonly symbol: "DAI";
        readonly coinGeckoId: "dai";
        readonly nativeChain: "Ethereum";
    };
    readonly MATIC: {
        readonly key: "MATIC";
        readonly symbol: "MATIC";
        readonly coinGeckoId: "matic-network";
        readonly nativeChain: "Polygon";
    };
    readonly WMATIC: {
        readonly key: "WMATIC";
        readonly symbol: "WMATIC";
        readonly coinGeckoId: "matic-network";
        readonly nativeChain: "Polygon";
    };
    readonly USDCpolygon: {
        readonly key: "USDCpolygon";
        readonly symbol: "USDC";
        readonly coinGeckoId: "usd-coin";
        readonly nativeChain: "Polygon";
    };
    readonly BNB: {
        readonly key: "BNB";
        readonly symbol: "BNB";
        readonly coinGeckoId: "binancecoin";
        readonly nativeChain: "Bsc";
    };
    readonly WBNB: {
        readonly key: "WBNB";
        readonly symbol: "WBNB";
        readonly coinGeckoId: "binancecoin";
        readonly nativeChain: "Bsc";
    };
    readonly AVAX: {
        readonly key: "AVAX";
        readonly symbol: "AVAX";
        readonly coinGeckoId: "avalanche-2";
        readonly nativeChain: "Avalanche";
    };
    readonly WAVAX: {
        readonly key: "WAVAX";
        readonly symbol: "WAVAX";
        readonly coinGeckoId: "avalanche-2";
        readonly nativeChain: "Avalanche";
    };
    readonly USDCavax: {
        readonly key: "USDCavax";
        readonly symbol: "USDC";
        readonly coinGeckoId: "usd-coin";
        readonly nativeChain: "Avalanche";
    };
    readonly FTM: {
        readonly key: "FTM";
        readonly symbol: "FTM";
        readonly coinGeckoId: "fantom";
        readonly nativeChain: "Fantom";
    };
    readonly WFTM: {
        readonly key: "WFTM";
        readonly symbol: "WFTM";
        readonly coinGeckoId: "fantom";
        readonly nativeChain: "Fantom";
    };
    readonly CELO: {
        readonly key: "CELO";
        readonly symbol: "CELO";
        readonly coinGeckoId: "celo";
        readonly nativeChain: "Celo";
    };
    readonly GLMR: {
        readonly key: "GLMR";
        readonly symbol: "GLMR";
        readonly coinGeckoId: "moonbeam";
        readonly nativeChain: "Moonbeam";
    };
    readonly WGLMR: {
        readonly key: "WGLMR";
        readonly symbol: "WGLMR";
        readonly coinGeckoId: "moonbeam";
        readonly nativeChain: "Moonbeam";
    };
    readonly SOL: {
        readonly key: "SOL";
        readonly symbol: "SOL";
        readonly coinGeckoId: "solana";
        readonly nativeChain: "Solana";
    };
    readonly WSOL: {
        readonly key: "WSOL";
        readonly symbol: "WSOL";
        readonly coinGeckoId: "solana";
        readonly nativeChain: "Solana";
    };
    readonly USDCsol: {
        readonly key: "USDCsol";
        readonly symbol: "USDC";
        readonly coinGeckoId: "usd-coin";
        readonly nativeChain: "Solana";
    };
    readonly SUI: {
        readonly key: "SUI";
        readonly symbol: "SUI";
        readonly coinGeckoId: "sui";
        readonly nativeChain: "Sui";
    };
    readonly APT: {
        readonly key: "APT";
        readonly symbol: "APT";
        readonly coinGeckoId: "aptos";
        readonly nativeChain: "Aptos";
    };
    readonly ETHarbitrum: {
        readonly key: "ETHarbitrum";
        readonly symbol: "ETH";
        readonly displayName: "ETH (Arbitrum)";
        readonly coinGeckoId: "ethereum";
        readonly nativeChain: "Arbitrum";
    };
    readonly WETHarbitrum: {
        readonly key: "WETHarbitrum";
        readonly symbol: "WETH";
        readonly displayName: "WETH (Arbitrum)";
        readonly coinGeckoId: "ethereum";
        readonly nativeChain: "Arbitrum";
    };
    readonly USDCarbitrum: {
        readonly key: "USDCarbitrum";
        readonly symbol: "USDC";
        readonly coinGeckoId: "usd-coin";
        readonly nativeChain: "Arbitrum";
    };
    readonly ETHoptimism: {
        readonly key: "ETHoptimism";
        readonly symbol: "ETH";
        readonly displayName: "ETH (Optimism)";
        readonly coinGeckoId: "ethereum";
        readonly nativeChain: "Optimism";
    };
    readonly WETHoptimism: {
        readonly key: "WETHoptimism";
        readonly symbol: "WETH";
        readonly displayName: "WETH (Optimism)";
        readonly coinGeckoId: "ethereum";
        readonly nativeChain: "Optimism";
    };
    readonly USDCoptimism: {
        readonly key: "USDCoptimism";
        readonly symbol: "USDC";
        readonly coinGeckoId: "usd-coin";
        readonly nativeChain: "Optimism";
    };
    readonly ETHbase: {
        readonly key: "ETHbase";
        readonly symbol: "ETH";
        readonly displayName: "ETH (Base)";
        readonly coinGeckoId: "ethereum";
        readonly nativeChain: "Base";
    };
    readonly WETHbase: {
        readonly key: "WETHbase";
        readonly symbol: "WETH";
        readonly displayName: "WETH (Base)";
        readonly coinGeckoId: "ethereum";
        readonly nativeChain: "Base";
    };
    readonly USDCbase: {
        readonly key: "USDCbase";
        readonly symbol: "USDC";
        readonly coinGeckoId: "usd-coin";
        readonly nativeChain: "Base";
    };
    readonly OSMO: {
        readonly key: "OSMO";
        readonly symbol: "OSMO";
        readonly coinGeckoId: "osmosis";
        readonly nativeChain: "Osmosis";
    };
    readonly tBTC: {
        readonly key: "tBTC";
        readonly symbol: "tBTC";
        readonly coinGeckoId: "tbtc";
        readonly nativeChain: "Ethereum";
    };
    readonly tBTCpolygon: {
        readonly key: "tBTCpolygon";
        readonly symbol: "tBTC";
        readonly coinGeckoId: "tbtc";
        readonly nativeChain: "Polygon";
    };
    readonly tBTCoptimism: {
        readonly key: "tBTCoptimism";
        readonly symbol: "tBTC";
        readonly coinGeckoId: "tbtc";
        readonly nativeChain: "Optimism";
    };
    readonly tBTCarbitrum: {
        readonly key: "tBTCarbitrum";
        readonly symbol: "tBTC";
        readonly coinGeckoId: "tbtc";
        readonly nativeChain: "Arbitrum";
    };
    readonly tBTCbase: {
        readonly key: "tBTCbase";
        readonly symbol: "tBTC";
        readonly coinGeckoId: "tbtc";
        readonly nativeChain: "Base";
    };
    readonly tBTCsol: {
        readonly key: "tBTCsol";
        readonly symbol: "tBTC";
        readonly coinGeckoId: "tbtc";
        readonly nativeChain: "Solana";
    };
    readonly wstETH: {
        readonly key: "wstETH";
        readonly symbol: "wstETH";
        readonly coinGeckoId: "wrapped-steth";
        readonly nativeChain: "Ethereum";
    };
    readonly SEI: {
        readonly key: "SEI";
        readonly symbol: "SEI";
        readonly coinGeckoId: "sei-network";
        readonly nativeChain: "Sei";
    };
    readonly ATOM: {
        readonly key: "ATOM";
        readonly symbol: "ATOM";
        readonly coinGeckoId: "cosmos-hub";
        readonly nativeChain: "Cosmoshub";
    };
    readonly EVMOS: {
        readonly key: "EVMOS";
        readonly symbol: "EVMOS";
        readonly coinGeckoId: "evmos";
        readonly nativeChain: "Evmos";
    };
    readonly KUJI: {
        readonly key: "KUJI";
        readonly symbol: "KUJI";
        readonly coinGeckoId: "kujira";
        readonly nativeChain: "Kujira";
    };
    readonly KLAY: {
        readonly key: "KLAY";
        readonly symbol: "KLAY";
        readonly coinGeckoId: "klay-token";
        readonly nativeChain: "Klaytn";
    };
    readonly WKLAY: {
        readonly key: "WKLAY";
        readonly symbol: "WKLAY";
        readonly displayName: "wKLAY";
        readonly coinGeckoId: "wrapped-klay";
        readonly nativeChain: "Klaytn";
    };
    readonly ETHsepolia: {
        readonly key: "ETHsepolia";
        readonly symbol: "ETH";
        readonly displayName: "ETH (Sepolia)";
        readonly coinGeckoId: "ethereum";
        readonly nativeChain: "Sepolia";
    };
    readonly WETHsepolia: {
        readonly key: "WETHsepolia";
        readonly symbol: "WETH";
        readonly displayName: "WETH (Sepolia)";
        readonly coinGeckoId: "ethereum";
        readonly nativeChain: "Sepolia";
    };
    readonly ETHarbitrum_sepolia: {
        readonly key: "ETHarbitrum_sepolia";
        readonly symbol: "ETH";
        readonly displayName: "ETH (Arbitrum Sepolia)";
        readonly coinGeckoId: "ethereum";
        readonly nativeChain: "ArbitrumSepolia";
    };
    readonly WETHarbitrum_sepolia: {
        readonly key: "WETHarbitrum_sepolia";
        readonly symbol: "WETH";
        readonly displayName: "WETH (Arbitrum Sepolia)";
        readonly coinGeckoId: "ethereum";
        readonly nativeChain: "ArbitrumSepolia";
    };
    readonly ETHbase_sepolia: {
        readonly key: "ETHbase_sepolia";
        readonly symbol: "ETH";
        readonly displayName: "ETH (Base Sepolia)";
        readonly coinGeckoId: "ethereum";
        readonly nativeChain: "BaseSepolia";
    };
    readonly WETHbase_sepolia: {
        readonly key: "WETHbase_sepolia";
        readonly symbol: "WETH";
        readonly displayName: "WETH (Base Sepolia)";
        readonly coinGeckoId: "ethereum";
        readonly nativeChain: "BaseSepolia";
    };
    readonly ETHoptimism_sepolia: {
        readonly key: "ETHoptimism_sepolia";
        readonly symbol: "ETH";
        readonly displayName: "ETH (Optimism Sepolia)";
        readonly coinGeckoId: "ethereum";
        readonly nativeChain: "OptimismSepolia";
    };
    readonly WETHoptimism_sepolia: {
        readonly key: "WETHoptimism_sepolia";
        readonly symbol: "WETH";
        readonly displayName: "WETH (Optimism Sepolia)";
        readonly coinGeckoId: "ethereum";
        readonly nativeChain: "OptimismSepolia";
    };
}[K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1]) & {
    get: (args_0: string) => {
        readonly key: "ETH";
        readonly symbol: "ETH";
        readonly coinGeckoId: "ethereum";
        readonly nativeChain: "Ethereum";
    } | {
        readonly key: "WETH";
        readonly symbol: "WETH";
        readonly coinGeckoId: "ethereum";
        readonly nativeChain: "Ethereum";
    } | {
        readonly key: "USDCeth";
        readonly symbol: "USDC";
        readonly coinGeckoId: "usd-coin";
        readonly nativeChain: "Ethereum";
    } | {
        readonly key: "WBTC";
        readonly symbol: "WBTC";
        readonly coinGeckoId: "wrapped-bitcoin";
        readonly nativeChain: "Ethereum";
    } | {
        readonly key: "USDT";
        readonly symbol: "USDT";
        readonly coinGeckoId: "tether";
        readonly nativeChain: "Ethereum";
    } | {
        readonly key: "DAI";
        readonly symbol: "DAI";
        readonly coinGeckoId: "dai";
        readonly nativeChain: "Ethereum";
    } | {
        readonly key: "MATIC";
        readonly symbol: "MATIC";
        readonly coinGeckoId: "matic-network";
        readonly nativeChain: "Polygon";
    } | {
        readonly key: "WMATIC";
        readonly symbol: "WMATIC";
        readonly coinGeckoId: "matic-network";
        readonly nativeChain: "Polygon";
    } | {
        readonly key: "USDCpolygon";
        readonly symbol: "USDC";
        readonly coinGeckoId: "usd-coin";
        readonly nativeChain: "Polygon";
    } | {
        readonly key: "BNB";
        readonly symbol: "BNB";
        readonly coinGeckoId: "binancecoin";
        readonly nativeChain: "Bsc";
    } | {
        readonly key: "WBNB";
        readonly symbol: "WBNB";
        readonly coinGeckoId: "binancecoin";
        readonly nativeChain: "Bsc";
    } | {
        readonly key: "AVAX";
        readonly symbol: "AVAX";
        readonly coinGeckoId: "avalanche-2";
        readonly nativeChain: "Avalanche";
    } | {
        readonly key: "WAVAX";
        readonly symbol: "WAVAX";
        readonly coinGeckoId: "avalanche-2";
        readonly nativeChain: "Avalanche";
    } | {
        readonly key: "USDCavax";
        readonly symbol: "USDC";
        readonly coinGeckoId: "usd-coin";
        readonly nativeChain: "Avalanche";
    } | {
        readonly key: "FTM";
        readonly symbol: "FTM";
        readonly coinGeckoId: "fantom";
        readonly nativeChain: "Fantom";
    } | {
        readonly key: "WFTM";
        readonly symbol: "WFTM";
        readonly coinGeckoId: "fantom";
        readonly nativeChain: "Fantom";
    } | {
        readonly key: "CELO";
        readonly symbol: "CELO";
        readonly coinGeckoId: "celo";
        readonly nativeChain: "Celo";
    } | {
        readonly key: "GLMR";
        readonly symbol: "GLMR";
        readonly coinGeckoId: "moonbeam";
        readonly nativeChain: "Moonbeam";
    } | {
        readonly key: "WGLMR";
        readonly symbol: "WGLMR";
        readonly coinGeckoId: "moonbeam";
        readonly nativeChain: "Moonbeam";
    } | {
        readonly key: "SOL";
        readonly symbol: "SOL";
        readonly coinGeckoId: "solana";
        readonly nativeChain: "Solana";
    } | {
        readonly key: "WSOL";
        readonly symbol: "WSOL";
        readonly coinGeckoId: "solana";
        readonly nativeChain: "Solana";
    } | {
        readonly key: "USDCsol";
        readonly symbol: "USDC";
        readonly coinGeckoId: "usd-coin";
        readonly nativeChain: "Solana";
    } | {
        readonly key: "SUI";
        readonly symbol: "SUI";
        readonly coinGeckoId: "sui";
        readonly nativeChain: "Sui";
    } | {
        readonly key: "APT";
        readonly symbol: "APT";
        readonly coinGeckoId: "aptos";
        readonly nativeChain: "Aptos";
    } | {
        readonly key: "ETHarbitrum";
        readonly symbol: "ETH";
        readonly displayName: "ETH (Arbitrum)";
        readonly coinGeckoId: "ethereum";
        readonly nativeChain: "Arbitrum";
    } | {
        readonly key: "WETHarbitrum";
        readonly symbol: "WETH";
        readonly displayName: "WETH (Arbitrum)";
        readonly coinGeckoId: "ethereum";
        readonly nativeChain: "Arbitrum";
    } | {
        readonly key: "USDCarbitrum";
        readonly symbol: "USDC";
        readonly coinGeckoId: "usd-coin";
        readonly nativeChain: "Arbitrum";
    } | {
        readonly key: "ETHoptimism";
        readonly symbol: "ETH";
        readonly displayName: "ETH (Optimism)";
        readonly coinGeckoId: "ethereum";
        readonly nativeChain: "Optimism";
    } | {
        readonly key: "WETHoptimism";
        readonly symbol: "WETH";
        readonly displayName: "WETH (Optimism)";
        readonly coinGeckoId: "ethereum";
        readonly nativeChain: "Optimism";
    } | {
        readonly key: "USDCoptimism";
        readonly symbol: "USDC";
        readonly coinGeckoId: "usd-coin";
        readonly nativeChain: "Optimism";
    } | {
        readonly key: "ETHbase";
        readonly symbol: "ETH";
        readonly displayName: "ETH (Base)";
        readonly coinGeckoId: "ethereum";
        readonly nativeChain: "Base";
    } | {
        readonly key: "WETHbase";
        readonly symbol: "WETH";
        readonly displayName: "WETH (Base)";
        readonly coinGeckoId: "ethereum";
        readonly nativeChain: "Base";
    } | {
        readonly key: "USDCbase";
        readonly symbol: "USDC";
        readonly coinGeckoId: "usd-coin";
        readonly nativeChain: "Base";
    } | {
        readonly key: "OSMO";
        readonly symbol: "OSMO";
        readonly coinGeckoId: "osmosis";
        readonly nativeChain: "Osmosis";
    } | {
        readonly key: "tBTC";
        readonly symbol: "tBTC";
        readonly coinGeckoId: "tbtc";
        readonly nativeChain: "Ethereum";
    } | {
        readonly key: "tBTCpolygon";
        readonly symbol: "tBTC";
        readonly coinGeckoId: "tbtc";
        readonly nativeChain: "Polygon";
    } | {
        readonly key: "tBTCoptimism";
        readonly symbol: "tBTC";
        readonly coinGeckoId: "tbtc";
        readonly nativeChain: "Optimism";
    } | {
        readonly key: "tBTCarbitrum";
        readonly symbol: "tBTC";
        readonly coinGeckoId: "tbtc";
        readonly nativeChain: "Arbitrum";
    } | {
        readonly key: "tBTCbase";
        readonly symbol: "tBTC";
        readonly coinGeckoId: "tbtc";
        readonly nativeChain: "Base";
    } | {
        readonly key: "tBTCsol";
        readonly symbol: "tBTC";
        readonly coinGeckoId: "tbtc";
        readonly nativeChain: "Solana";
    } | {
        readonly key: "wstETH";
        readonly symbol: "wstETH";
        readonly coinGeckoId: "wrapped-steth";
        readonly nativeChain: "Ethereum";
    } | {
        readonly key: "SEI";
        readonly symbol: "SEI";
        readonly coinGeckoId: "sei-network";
        readonly nativeChain: "Sei";
    } | {
        readonly key: "ATOM";
        readonly symbol: "ATOM";
        readonly coinGeckoId: "cosmos-hub";
        readonly nativeChain: "Cosmoshub";
    } | {
        readonly key: "EVMOS";
        readonly symbol: "EVMOS";
        readonly coinGeckoId: "evmos";
        readonly nativeChain: "Evmos";
    } | {
        readonly key: "KUJI";
        readonly symbol: "KUJI";
        readonly coinGeckoId: "kujira";
        readonly nativeChain: "Kujira";
    } | {
        readonly key: "KLAY";
        readonly symbol: "KLAY";
        readonly coinGeckoId: "klay-token";
        readonly nativeChain: "Klaytn";
    } | {
        readonly key: "WKLAY";
        readonly symbol: "WKLAY";
        readonly displayName: "wKLAY";
        readonly coinGeckoId: "wrapped-klay";
        readonly nativeChain: "Klaytn";
    } | {
        readonly key: "ETHsepolia";
        readonly symbol: "ETH";
        readonly displayName: "ETH (Sepolia)";
        readonly coinGeckoId: "ethereum";
        readonly nativeChain: "Sepolia";
    } | {
        readonly key: "WETHsepolia";
        readonly symbol: "WETH";
        readonly displayName: "WETH (Sepolia)";
        readonly coinGeckoId: "ethereum";
        readonly nativeChain: "Sepolia";
    } | {
        readonly key: "ETHarbitrum_sepolia";
        readonly symbol: "ETH";
        readonly displayName: "ETH (Arbitrum Sepolia)";
        readonly coinGeckoId: "ethereum";
        readonly nativeChain: "ArbitrumSepolia";
    } | {
        readonly key: "WETHarbitrum_sepolia";
        readonly symbol: "WETH";
        readonly displayName: "WETH (Arbitrum Sepolia)";
        readonly coinGeckoId: "ethereum";
        readonly nativeChain: "ArbitrumSepolia";
    } | {
        readonly key: "ETHbase_sepolia";
        readonly symbol: "ETH";
        readonly displayName: "ETH (Base Sepolia)";
        readonly coinGeckoId: "ethereum";
        readonly nativeChain: "BaseSepolia";
    } | {
        readonly key: "WETHbase_sepolia";
        readonly symbol: "WETH";
        readonly displayName: "WETH (Base Sepolia)";
        readonly coinGeckoId: "ethereum";
        readonly nativeChain: "BaseSepolia";
    } | {
        readonly key: "ETHoptimism_sepolia";
        readonly symbol: "ETH";
        readonly displayName: "ETH (Optimism Sepolia)";
        readonly coinGeckoId: "ethereum";
        readonly nativeChain: "OptimismSepolia";
    } | {
        readonly key: "WETHoptimism_sepolia";
        readonly symbol: "WETH";
        readonly displayName: "WETH (Optimism Sepolia)";
        readonly coinGeckoId: "ethereum";
        readonly nativeChain: "OptimismSepolia";
    } | undefined;
    has: (args_0: string) => boolean;
};
//# sourceMappingURL=testnetDetails.d.ts.map