//import { mainnetTokenDetails } from "./mainnetTokenDetails";
//import { testnetTokenDetails } from "./testnetTokenDetails";
import { mainnetChainTokens } from "./mainnet";
import { testnetChainTokens } from "./testnet";
export * from "./types";
export function getTokenMap(network, chain) {
    if (network === "Devnet")
        return;
    if (network === "Mainnet") {
        if (!mainnetChainTokens.has(chain))
            return;
        const chainTokens = mainnetChainTokens.get(chain);
        return Object.fromEntries(chainTokens.map(([key, token]) => [key, { ...token, chain, key }]));
    }
    if (network === "Testnet") {
        if (!testnetChainTokens.has(chain))
            return;
        const chainTokens = testnetChainTokens.get(chain);
        return Object.fromEntries(chainTokens.map(([key, token]) => [key, { ...token, chain, key }]));
    }
    throw "Unsupported network: " + network;
}
export const isEqualCaseInsensitive = (a, b) => {
    return a.toLowerCase() === b.toLowerCase();
};
export const filters = {
    byAddress: (tokenMap, address) => {
        return Object.values(tokenMap).find((token) => isEqualCaseInsensitive(token.address, address));
    },
    native: (tokenMap) => {
        return filters.byAddress(tokenMap, "native");
    },
    bySymbol: (tokenMap, symbol) => {
        const foundTokens = Object.values(tokenMap).filter((token) => token.symbol === symbol);
        return foundTokens && foundTokens.length > 0 ? foundTokens : undefined;
    },
    byKey: (tokenMap, key) => {
        const foundToken = Object.entries(tokenMap).find(([_key]) => key === _key);
        return foundToken ? foundToken[1] : undefined;
    },
};
// The token that represents the native gas token on a given chain
// also represented as the string 'native' where applicable
export function getNative(network, chain) {
    const tokenMap = getTokenMap(network, chain);
    return tokenMap ? filters.native(tokenMap) : undefined;
}
// Finds the (first) unique token key for a given chain and address
export function getTokenByAddress(network, chain, address) {
    const tokenMap = getTokenMap(network, chain);
    return tokenMap ? filters.byAddress(tokenMap, address) : undefined;
}
export function getTokensBySymbol(network, chain, symbol) {
    const tokenMap = getTokenMap(network, chain);
    return tokenMap ? filters.bySymbol(tokenMap, symbol) : undefined;
}
// Finds the (first) unique token key for a given chain and symbol
export function getTokenByKey(network, chain, key) {
    const tokenMap = getTokenMap(network, chain);
    return tokenMap ? filters.byKey(tokenMap, key) : undefined;
}
// The Canonical token is the token that the input key resolves to
// from its original chain. For example, if the input key is
// USDCeth, the canonical token is USDC on ETH
export function getCanonicalToken(network, chain, key) {
    const token = getTokenByKey(network, chain, key);
    if (!token)
        return;
    if (!token.original)
        return token;
    const original = getTokensBySymbol(network, token.original, token.symbol);
    if (!original)
        return;
    // return the the token with this symbol where no `original` field exists
    return original.find((t) => !t.original);
}
//# sourceMappingURL=index.js.map