import { ChainsConfig, Contracts, Network, TxHash, VAA, WormholeCore, WormholeMessageId } from '@wormhole-foundation/connect-sdk';
import { Provider } from 'ethers';
import { Implementation, ImplementationInterface } from './ethers-contracts';
import { AnyEvmAddress, EvmChains, EvmPlatformType, EvmUnsignedTransaction } from '@wormhole-foundation/connect-sdk-evm';
import { PlatformToChains } from '@wormhole-foundation/sdk-base';
export declare class EvmWormholeCore<N extends Network, C extends PlatformToChains<EvmPlatformType>> implements WormholeCore<N, EvmPlatformType, C> {
    readonly network: N;
    readonly chain: C;
    readonly provider: Provider;
    readonly contracts: Contracts;
    readonly chainId: bigint;
    readonly coreAddress: string;
    readonly core: Implementation;
    readonly coreIface: ImplementationInterface;
    private constructor();
    static fromRpc<N extends Network>(provider: Provider, config: ChainsConfig<N, EvmPlatformType>): Promise<EvmWormholeCore<N, EvmChains>>;
    publishMessage(sender: AnyEvmAddress, message: Uint8Array, nonce: number, consistencyLevel: number): AsyncGenerator<EvmUnsignedTransaction<N, C>, void, unknown>;
    verifyMessage(sender: AnyEvmAddress, vaa: VAA): AsyncGenerator<never, void, unknown>;
    parseTransaction(txid: TxHash): Promise<WormholeMessageId[]>;
    private createUnsignedTx;
}
//# sourceMappingURL=wormholeCore.d.ts.map