import { chainToPlatform, isChain } from "@wormhole-foundation/sdk-base";
const protocolFactory = new Map();
export function registerProtocol(platform, protocol, ctr) {
    let platforms = protocolFactory.get(protocol);
    if (!platforms)
        platforms = new Map();
    if (platforms.has(platform))
        return; //throw new Error(`Protocol ${platform} for protocol ${protocol} has already registered`);
    platforms.set(platform, ctr);
    protocolFactory.set(protocol, platforms);
}
export function protocolIsRegistered(chainOrPlatform, protocol) {
    const platform = isChain(chainOrPlatform)
        ? chainToPlatform.get(chainOrPlatform)
        : chainOrPlatform;
    const platforms = protocolFactory.get(protocol);
    return !!platforms && platforms.has(platform);
}
export function getProtocolInitializer(platform, protocol) {
    const platforms = protocolFactory.get(protocol);
    if (platforms) {
        const pctr = platforms.get(platform);
        if (pctr)
            return pctr;
    }
    throw new Error(`No protocols registered for ${platform}:${protocol}. ` +
        `This may be because the platform specific protocol implementation is not registered (by installing and importing it)` +
        ` or no implementation exists for this platform`);
}
export const create = (platform, protocol, rpc, config) => {
    const pctr = getProtocolInitializer(platform, protocol);
    return pctr.fromRpc(rpc, config);
};
//# sourceMappingURL=protocol.js.map