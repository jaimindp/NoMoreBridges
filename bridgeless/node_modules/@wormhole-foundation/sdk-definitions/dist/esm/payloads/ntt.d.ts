import { Layout, LayoutToType, CustomizableBytes } from "@wormhole-foundation/sdk-base";
import { RegisterPayloadTypes } from "../vaa";
export declare const trimmedAmountLayout: readonly [{
    readonly name: "decimals";
    readonly binary: "uint";
    readonly size: 1;
}, {
    readonly name: "amount";
    readonly binary: "uint";
    readonly size: 8;
}];
export type TrimmedAmount = LayoutToType<typeof trimmedAmountLayout>;
export type Prefix = readonly [number, number, number, number];
export declare const nativeTokenTransferLayout: readonly [{
    readonly name: "prefix";
    readonly binary: "bytes";
    readonly custom: Uint8Array;
    readonly omit: true;
}, {
    readonly name: "trimmedAmount";
    readonly binary: "bytes";
    readonly layout: readonly [{
        readonly name: "decimals";
        readonly binary: "uint";
        readonly size: 1;
    }, {
        readonly name: "amount";
        readonly binary: "uint";
        readonly size: 8;
    }];
}, {
    readonly binary: "bytes";
    readonly size: 32;
    readonly custom: {
        to: (val: Uint8Array) => import("..").UniversalAddress;
        from: (val: import("..").UniversalAddress) => Uint8Array;
    };
    readonly name: "sourceToken";
}, {
    readonly binary: "bytes";
    readonly size: 32;
    readonly custom: {
        to: (val: Uint8Array) => import("..").UniversalAddress;
        from: (val: import("..").UniversalAddress) => Uint8Array;
    };
    readonly name: "recipientAddress";
}, {
    readonly custom: {
        to: (val: number) => "Solana" | "Btc" | "Algorand" | "Sui" | "Aptos" | "Near" | "Acala" | "Arbitrum" | "Aurora" | "Avalanche" | "Base" | "Bsc" | "Celo" | "Ethereum" | "Fantom" | "Gnosis" | "Karura" | "Klaytn" | "Moonbeam" | "Neon" | "Oasis" | "Optimism" | "Polygon" | "Rootstock" | "Sepolia" | "ArbitrumSepolia" | "BaseSepolia" | "OptimismSepolia" | "Holesky" | "Pythnet" | "Cosmoshub" | "Evmos" | "Injective" | "Kujira" | "Osmosis" | "Sei" | "Terra" | "Terra2" | "Wormchain" | "Xpla" | "Dymension" | "Neutron" | "Stargaze" | "Celestia";
        from: (val: "Solana" | "Btc" | "Algorand" | "Sui" | "Aptos" | "Near" | "Acala" | "Arbitrum" | "Aurora" | "Avalanche" | "Base" | "Bsc" | "Celo" | "Ethereum" | "Fantom" | "Gnosis" | "Karura" | "Klaytn" | "Moonbeam" | "Neon" | "Oasis" | "Optimism" | "Polygon" | "Rootstock" | "Sepolia" | "ArbitrumSepolia" | "BaseSepolia" | "OptimismSepolia" | "Holesky" | "Pythnet" | "Cosmoshub" | "Evmos" | "Injective" | "Kujira" | "Osmosis" | "Sei" | "Terra" | "Terra2" | "Wormchain" | "Xpla" | "Dymension" | "Neutron" | "Stargaze" | "Celestia") => number;
    };
    readonly binary: "uint";
    readonly size: 2;
    readonly name: "recipientChain";
}];
export type NativeTokenTransfer = LayoutToType<typeof nativeTokenTransferLayout>;
export declare const transceiverMessageLayout: <const MP extends CustomizableBytes = undefined, const TP extends CustomizableBytes = undefined>(prefix: Prefix, nttManagerPayload?: MP | undefined, transceiverPayload?: TP | undefined) => readonly [{
    readonly name: "prefix";
    readonly binary: "bytes";
    readonly custom: Uint8Array;
    readonly omit: true;
}, {
    readonly binary: "bytes";
    readonly size: 32;
    readonly custom: {
        to: (val: Uint8Array) => import("..").UniversalAddress;
        from: (val: import("..").UniversalAddress) => Uint8Array;
    };
    readonly name: "sourceNttManager";
}, {
    readonly binary: "bytes";
    readonly size: 32;
    readonly custom: {
        to: (val: Uint8Array) => import("..").UniversalAddress;
        from: (val: import("..").UniversalAddress) => Uint8Array;
    };
    readonly name: "recipientNttManager";
}, { [K in "name" | "lengthSize" | keyof (MP extends undefined ? {
    readonly binary: "bytes";
} : MP extends Layout ? {
    readonly binary: "bytes";
    readonly layout: MP;
} : MP extends Uint8Array | import("@wormhole-foundation/sdk-base").FixedConversion<Uint8Array, infer To> | import("@wormhole-foundation/sdk-base").CustomConversion<Uint8Array, infer To> ? {
    readonly binary: "bytes";
    readonly custom: MP;
} : MP extends readonly [Layout, import("@wormhole-foundation/sdk-base").FixedConversion<infer From extends import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").LayoutObject | import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").PrimitiveType, infer To_1> | import("@wormhole-foundation/sdk-base").CustomConversion<infer From extends import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").LayoutObject | import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").PrimitiveType, infer To_1>] ? {
    readonly binary: "bytes";
    readonly layout: MP[0];
    readonly custom: MP[1];
} : never)]: K extends "name" | "lengthSize" ? {
    readonly name: "nttManagerPayload";
    readonly lengthSize: 2;
}[K] : K extends keyof (MP extends undefined ? {
    readonly binary: "bytes";
} : MP extends Layout ? {
    readonly binary: "bytes";
    readonly layout: MP;
} : MP extends Uint8Array | import("@wormhole-foundation/sdk-base").FixedConversion<Uint8Array, infer To> | import("@wormhole-foundation/sdk-base").CustomConversion<Uint8Array, infer To> ? {
    readonly binary: "bytes";
    readonly custom: MP;
} : MP extends readonly [Layout, import("@wormhole-foundation/sdk-base").FixedConversion<infer From extends import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").LayoutObject | import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").PrimitiveType, infer To_1> | import("@wormhole-foundation/sdk-base").CustomConversion<infer From extends import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").LayoutObject | import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").PrimitiveType, infer To_1>] ? {
    readonly binary: "bytes";
    readonly layout: MP[0];
    readonly custom: MP[1];
} : never) ? (MP extends undefined ? {
    readonly binary: "bytes";
} : MP extends Layout ? {
    readonly binary: "bytes";
    readonly layout: MP;
} : MP extends Uint8Array | import("@wormhole-foundation/sdk-base").FixedConversion<Uint8Array, infer To> | import("@wormhole-foundation/sdk-base").CustomConversion<Uint8Array, infer To> ? {
    readonly binary: "bytes";
    readonly custom: MP;
} : MP extends readonly [Layout, import("@wormhole-foundation/sdk-base").FixedConversion<infer From extends import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").LayoutObject | import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").PrimitiveType, infer To_1> | import("@wormhole-foundation/sdk-base").CustomConversion<infer From extends import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").LayoutObject | import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").PrimitiveType, infer To_1>] ? {
    readonly binary: "bytes";
    readonly layout: MP[0];
    readonly custom: MP[1];
} : never)[K] : never; }, { [K_1 in "name" | "lengthSize" | keyof (TP extends undefined ? {
    readonly binary: "bytes";
} : TP extends Layout ? {
    readonly binary: "bytes";
    readonly layout: TP;
} : TP extends Uint8Array | import("@wormhole-foundation/sdk-base").FixedConversion<Uint8Array, infer To> | import("@wormhole-foundation/sdk-base").CustomConversion<Uint8Array, infer To> ? {
    readonly binary: "bytes";
    readonly custom: TP;
} : TP extends readonly [Layout, import("@wormhole-foundation/sdk-base").FixedConversion<infer From extends import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").LayoutObject | import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").PrimitiveType, infer To_1> | import("@wormhole-foundation/sdk-base").CustomConversion<infer From extends import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").LayoutObject | import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").PrimitiveType, infer To_1>] ? {
    readonly binary: "bytes";
    readonly layout: TP[0];
    readonly custom: TP[1];
} : never)]: K_1 extends "name" | "lengthSize" ? {
    readonly name: "transceiverPayload";
    readonly lengthSize: 2;
}[K_1] : K_1 extends keyof (TP extends undefined ? {
    readonly binary: "bytes";
} : TP extends Layout ? {
    readonly binary: "bytes";
    readonly layout: TP;
} : TP extends Uint8Array | import("@wormhole-foundation/sdk-base").FixedConversion<Uint8Array, infer To> | import("@wormhole-foundation/sdk-base").CustomConversion<Uint8Array, infer To> ? {
    readonly binary: "bytes";
    readonly custom: TP;
} : TP extends readonly [Layout, import("@wormhole-foundation/sdk-base").FixedConversion<infer From extends import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").LayoutObject | import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").PrimitiveType, infer To_1> | import("@wormhole-foundation/sdk-base").CustomConversion<infer From extends import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").LayoutObject | import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").PrimitiveType, infer To_1>] ? {
    readonly binary: "bytes";
    readonly layout: TP[0];
    readonly custom: TP[1];
} : never) ? (TP extends undefined ? {
    readonly binary: "bytes";
} : TP extends Layout ? {
    readonly binary: "bytes";
    readonly layout: TP;
} : TP extends Uint8Array | import("@wormhole-foundation/sdk-base").FixedConversion<Uint8Array, infer To> | import("@wormhole-foundation/sdk-base").CustomConversion<Uint8Array, infer To> ? {
    readonly binary: "bytes";
    readonly custom: TP;
} : TP extends readonly [Layout, import("@wormhole-foundation/sdk-base").FixedConversion<infer From extends import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").LayoutObject | import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").PrimitiveType, infer To_1> | import("@wormhole-foundation/sdk-base").CustomConversion<infer From extends import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").LayoutObject | import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").PrimitiveType, infer To_1>] ? {
    readonly binary: "bytes";
    readonly layout: TP[0];
    readonly custom: TP[1];
} : never)[K_1] : never; }];
export type TransceiverMessage<MP extends CustomizableBytes = undefined, TP extends CustomizableBytes = undefined> = LayoutToType<ReturnType<typeof transceiverMessageLayout<MP, TP>>>;
export declare const nttManagerMessageLayout: <const P extends CustomizableBytes = undefined>(customPayload?: P | undefined) => readonly [{
    readonly binary: "uint";
    readonly size: 8;
    readonly name: "sequence";
}, {
    readonly binary: "bytes";
    readonly size: 32;
    readonly custom: {
        to: (val: Uint8Array) => import("..").UniversalAddress;
        from: (val: import("..").UniversalAddress) => Uint8Array;
    };
    readonly name: "sender";
}, { [K in "name" | "lengthSize" | keyof (P extends undefined ? {
    readonly binary: "bytes";
} : P extends Layout ? {
    readonly binary: "bytes";
    readonly layout: P;
} : P extends Uint8Array | import("@wormhole-foundation/sdk-base").FixedConversion<Uint8Array, infer To> | import("@wormhole-foundation/sdk-base").CustomConversion<Uint8Array, infer To> ? {
    readonly binary: "bytes";
    readonly custom: P;
} : P extends readonly [Layout, import("@wormhole-foundation/sdk-base").FixedConversion<infer From extends import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").LayoutObject | import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").PrimitiveType, infer To_1> | import("@wormhole-foundation/sdk-base").CustomConversion<infer From extends import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").LayoutObject | import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").PrimitiveType, infer To_1>] ? {
    readonly binary: "bytes";
    readonly layout: P[0];
    readonly custom: P[1];
} : never)]: K extends "name" | "lengthSize" ? {
    readonly name: "payload";
    readonly lengthSize: 2;
}[K] : K extends keyof (P extends undefined ? {
    readonly binary: "bytes";
} : P extends Layout ? {
    readonly binary: "bytes";
    readonly layout: P;
} : P extends Uint8Array | import("@wormhole-foundation/sdk-base").FixedConversion<Uint8Array, infer To> | import("@wormhole-foundation/sdk-base").CustomConversion<Uint8Array, infer To> ? {
    readonly binary: "bytes";
    readonly custom: P;
} : P extends readonly [Layout, import("@wormhole-foundation/sdk-base").FixedConversion<infer From extends import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").LayoutObject | import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").PrimitiveType, infer To_1> | import("@wormhole-foundation/sdk-base").CustomConversion<infer From extends import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").LayoutObject | import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").PrimitiveType, infer To_1>] ? {
    readonly binary: "bytes";
    readonly layout: P[0];
    readonly custom: P[1];
} : never) ? (P extends undefined ? {
    readonly binary: "bytes";
} : P extends Layout ? {
    readonly binary: "bytes";
    readonly layout: P;
} : P extends Uint8Array | import("@wormhole-foundation/sdk-base").FixedConversion<Uint8Array, infer To> | import("@wormhole-foundation/sdk-base").CustomConversion<Uint8Array, infer To> ? {
    readonly binary: "bytes";
    readonly custom: P;
} : P extends readonly [Layout, import("@wormhole-foundation/sdk-base").FixedConversion<infer From extends import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").LayoutObject | import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").PrimitiveType, infer To_1> | import("@wormhole-foundation/sdk-base").CustomConversion<infer From extends import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").LayoutObject | import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").PrimitiveType, infer To_1>] ? {
    readonly binary: "bytes";
    readonly layout: P[0];
    readonly custom: P[1];
} : never)[K] : never; }];
export type NttManagerMessage<P extends CustomizableBytes = undefined> = LayoutToType<ReturnType<typeof nttManagerMessageLayout<P>>>;
export declare const wormholeTransceiverMessageLayout: <MP extends CustomizableBytes = undefined>(nttManagerPayload?: MP | undefined) => readonly [{
    readonly name: "prefix";
    readonly binary: "bytes";
    readonly custom: Uint8Array;
    readonly omit: true;
}, {
    readonly binary: "bytes";
    readonly size: 32;
    readonly custom: {
        to: (val: Uint8Array) => import("..").UniversalAddress;
        from: (val: import("..").UniversalAddress) => Uint8Array;
    };
    readonly name: "sourceNttManager";
}, {
    readonly binary: "bytes";
    readonly size: 32;
    readonly custom: {
        to: (val: Uint8Array) => import("..").UniversalAddress;
        from: (val: import("..").UniversalAddress) => Uint8Array;
    };
    readonly name: "recipientNttManager";
}, { [K in "name" | "lengthSize" | keyof (MP extends undefined ? {
    readonly binary: "bytes";
} : MP extends Layout ? {
    readonly binary: "bytes";
    readonly layout: MP;
} : MP extends Uint8Array | import("@wormhole-foundation/sdk-base").FixedConversion<Uint8Array, infer To> | import("@wormhole-foundation/sdk-base").CustomConversion<Uint8Array, infer To> ? {
    readonly binary: "bytes";
    readonly custom: MP;
} : MP extends readonly [Layout, import("@wormhole-foundation/sdk-base").FixedConversion<infer From extends import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").LayoutObject | import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").PrimitiveType, infer To_1> | import("@wormhole-foundation/sdk-base").CustomConversion<infer From extends import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").LayoutObject | import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").PrimitiveType, infer To_1>] ? {
    readonly binary: "bytes";
    readonly layout: MP[0];
    readonly custom: MP[1];
} : never)]: K extends "name" | "lengthSize" ? {
    readonly name: "nttManagerPayload";
    readonly lengthSize: 2;
}[K] : K extends keyof (MP extends undefined ? {
    readonly binary: "bytes";
} : MP extends Layout ? {
    readonly binary: "bytes";
    readonly layout: MP;
} : MP extends Uint8Array | import("@wormhole-foundation/sdk-base").FixedConversion<Uint8Array, infer To> | import("@wormhole-foundation/sdk-base").CustomConversion<Uint8Array, infer To> ? {
    readonly binary: "bytes";
    readonly custom: MP;
} : MP extends readonly [Layout, import("@wormhole-foundation/sdk-base").FixedConversion<infer From extends import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").LayoutObject | import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").PrimitiveType, infer To_1> | import("@wormhole-foundation/sdk-base").CustomConversion<infer From extends import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").LayoutObject | import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").PrimitiveType, infer To_1>] ? {
    readonly binary: "bytes";
    readonly layout: MP[0];
    readonly custom: MP[1];
} : never) ? (MP extends undefined ? {
    readonly binary: "bytes";
} : MP extends Layout ? {
    readonly binary: "bytes";
    readonly layout: MP;
} : MP extends Uint8Array | import("@wormhole-foundation/sdk-base").FixedConversion<Uint8Array, infer To> | import("@wormhole-foundation/sdk-base").CustomConversion<Uint8Array, infer To> ? {
    readonly binary: "bytes";
    readonly custom: MP;
} : MP extends readonly [Layout, import("@wormhole-foundation/sdk-base").FixedConversion<infer From extends import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").LayoutObject | import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").PrimitiveType, infer To_1> | import("@wormhole-foundation/sdk-base").CustomConversion<infer From extends import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").LayoutObject | import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").PrimitiveType, infer To_1>] ? {
    readonly binary: "bytes";
    readonly layout: MP[0];
    readonly custom: MP[1];
} : never)[K] : never; }, {
    name: "transceiverPayload";
    custom: Uint8Array;
    binary: "bytes";
    lengthSize: 2;
}];
export type WormholeTransceiverMessage<MP extends CustomizableBytes = undefined> = LayoutToType<ReturnType<typeof wormholeTransceiverMessageLayout<MP>>>;
export declare const namedPayloads: readonly [readonly ["WormholeTransfer", readonly [{
    readonly name: "prefix";
    readonly binary: "bytes";
    readonly custom: Uint8Array;
    readonly omit: true;
}, {
    readonly binary: "bytes";
    readonly size: 32;
    readonly custom: {
        to: (val: Uint8Array) => import("..").UniversalAddress;
        from: (val: import("..").UniversalAddress) => Uint8Array;
    };
    readonly name: "sourceNttManager";
}, {
    readonly binary: "bytes";
    readonly size: 32;
    readonly custom: {
        to: (val: Uint8Array) => import("..").UniversalAddress;
        from: (val: import("..").UniversalAddress) => Uint8Array;
    };
    readonly name: "recipientNttManager";
}, {
    name: "nttManagerPayload";
    layout: readonly [{
        readonly binary: "uint";
        readonly size: 8;
        readonly name: "sequence";
    }, {
        readonly binary: "bytes";
        readonly size: 32;
        readonly custom: {
            to: (val: Uint8Array) => import("..").UniversalAddress;
            from: (val: import("..").UniversalAddress) => Uint8Array;
        };
        readonly name: "sender";
    }, {
        name: "payload";
        layout: readonly [{
            readonly name: "prefix";
            readonly binary: "bytes";
            readonly custom: Uint8Array;
            readonly omit: true;
        }, {
            readonly name: "trimmedAmount";
            readonly binary: "bytes";
            readonly layout: readonly [{
                readonly name: "decimals";
                readonly binary: "uint";
                readonly size: 1;
            }, {
                readonly name: "amount";
                readonly binary: "uint";
                readonly size: 8;
            }];
        }, {
            readonly binary: "bytes";
            readonly size: 32;
            readonly custom: {
                to: (val: Uint8Array) => import("..").UniversalAddress;
                from: (val: import("..").UniversalAddress) => Uint8Array;
            };
            readonly name: "sourceToken";
        }, {
            readonly binary: "bytes";
            readonly size: 32;
            readonly custom: {
                to: (val: Uint8Array) => import("..").UniversalAddress;
                from: (val: import("..").UniversalAddress) => Uint8Array;
            };
            readonly name: "recipientAddress";
        }, {
            readonly custom: {
                to: (val: number) => "Solana" | "Btc" | "Algorand" | "Sui" | "Aptos" | "Near" | "Acala" | "Arbitrum" | "Aurora" | "Avalanche" | "Base" | "Bsc" | "Celo" | "Ethereum" | "Fantom" | "Gnosis" | "Karura" | "Klaytn" | "Moonbeam" | "Neon" | "Oasis" | "Optimism" | "Polygon" | "Rootstock" | "Sepolia" | "ArbitrumSepolia" | "BaseSepolia" | "OptimismSepolia" | "Holesky" | "Pythnet" | "Cosmoshub" | "Evmos" | "Injective" | "Kujira" | "Osmosis" | "Sei" | "Terra" | "Terra2" | "Wormchain" | "Xpla" | "Dymension" | "Neutron" | "Stargaze" | "Celestia";
                from: (val: "Solana" | "Btc" | "Algorand" | "Sui" | "Aptos" | "Near" | "Acala" | "Arbitrum" | "Aurora" | "Avalanche" | "Base" | "Bsc" | "Celo" | "Ethereum" | "Fantom" | "Gnosis" | "Karura" | "Klaytn" | "Moonbeam" | "Neon" | "Oasis" | "Optimism" | "Polygon" | "Rootstock" | "Sepolia" | "ArbitrumSepolia" | "BaseSepolia" | "OptimismSepolia" | "Holesky" | "Pythnet" | "Cosmoshub" | "Evmos" | "Injective" | "Kujira" | "Osmosis" | "Sei" | "Terra" | "Terra2" | "Wormchain" | "Xpla" | "Dymension" | "Neutron" | "Stargaze" | "Celestia") => number;
            };
            readonly binary: "uint";
            readonly size: 2;
            readonly name: "recipientChain";
        }];
        binary: "bytes";
        lengthSize: 2;
    }];
    binary: "bytes";
    lengthSize: 2;
}, {
    name: "transceiverPayload";
    custom: Uint8Array;
    binary: "bytes";
    lengthSize: 2;
}]]];
declare global {
    namespace Wormhole {
        interface PayloadLiteralToLayoutMapping extends RegisterPayloadTypes<"NTT", typeof namedPayloads> {
        }
    }
}
//# sourceMappingURL=ntt.d.ts.map