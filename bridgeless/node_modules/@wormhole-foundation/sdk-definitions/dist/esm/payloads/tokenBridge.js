import { customizableBytes, range, } from "@wormhole-foundation/sdk-base";
import { payloadIdItem, chainItem, universalAddressItem, amountItem } from "../layout-items";
import { registerPayloadTypes } from "../vaa";
const fixedLengthStringItem = {
    binary: "bytes",
    size: 32,
    custom: {
        to: (val) => range(val.byteLength)
            .map((i) => String.fromCharCode(val[i]))
            .join(""),
        from: (str) => new Uint8Array(str.split("").map((c) => c.charCodeAt(0))),
    },
};
const transferCommonLayout = [
    { name: "token", binary: "bytes", layout: [
            { name: "amount", ...amountItem },
            { name: "address", ...universalAddressItem },
            { name: "chain", ...chainItem() },
        ],
    },
    { name: "to", binary: "bytes", layout: [
            { name: "address", ...universalAddressItem },
            { name: "chain", ...chainItem() },
        ],
    },
];
export const transferWithPayloadLayout = (customPayload) => [
    payloadIdItem(3),
    ...transferCommonLayout,
    { name: "from", ...universalAddressItem },
    customizableBytes({ name: "payload" }, customPayload),
];
export const namedPayloads = [
    [
        "AttestMeta",
        [
            payloadIdItem(2),
            {
                name: "token",
                binary: "bytes",
                layout: [
                    { name: "address", ...universalAddressItem },
                    { name: "chain", ...chainItem() },
                ],
            },
            { name: "decimals", binary: "uint", size: 1 },
            { name: "symbol", ...fixedLengthStringItem },
            { name: "name", ...fixedLengthStringItem },
        ],
    ],
    ["Transfer", [payloadIdItem(1), ...transferCommonLayout, { name: "fee", ...amountItem }]],
    ["TransferWithPayload", transferWithPayloadLayout()],
];
registerPayloadTypes("TokenBridge", namedPayloads);
//# sourceMappingURL=tokenBridge.js.map