import { customizableBytes, } from "@wormhole-foundation/sdk-base";
import { universalAddressItem, chainItem, sequenceItem } from "../layout-items";
import { registerPayloadTypes } from "../vaa";
export const trimmedAmountLayout = [
    { name: "decimals", binary: "uint", size: 1 },
    { name: "amount", binary: "uint", size: 8 },
];
const prefixItem = (prefix) => ({ name: "prefix", binary: "bytes", custom: Uint8Array.from(prefix), omit: true });
export const nativeTokenTransferLayout = [
    prefixItem([0x99, 0x4e, 0x54, 0x54]),
    { name: "trimmedAmount", binary: "bytes", layout: trimmedAmountLayout },
    { name: "sourceToken", ...universalAddressItem },
    { name: "recipientAddress", ...universalAddressItem },
    { name: "recipientChain", ...chainItem() }, //TODO restrict to supported chains?
];
export const transceiverMessageLayout = (prefix, nttManagerPayload, transceiverPayload) => [
    prefixItem(prefix),
    { name: "sourceNttManager", ...universalAddressItem },
    { name: "recipientNttManager", ...universalAddressItem },
    customizableBytes({ name: "nttManagerPayload", lengthSize: 2 }, nttManagerPayload),
    customizableBytes({ name: "transceiverPayload", lengthSize: 2 }, transceiverPayload),
];
export const nttManagerMessageLayout = (customPayload) => [
    { name: "sequence", ...sequenceItem },
    { name: "sender", ...universalAddressItem },
    customizableBytes({ name: "payload", lengthSize: 2 }, customPayload),
];
export const wormholeTransceiverMessageLayout = (nttManagerPayload) => transceiverMessageLayout([0x99, 0x45, 0xff, 0x10], nttManagerPayload, new Uint8Array(0));
const wormholeNativeTokenTransferLayout = wormholeTransceiverMessageLayout(nttManagerMessageLayout(nativeTokenTransferLayout));
export const namedPayloads = [
    ["WormholeTransfer", wormholeNativeTokenTransferLayout],
];
registerPayloadTypes("NTT", namedPayloads);
//# sourceMappingURL=ntt.js.map