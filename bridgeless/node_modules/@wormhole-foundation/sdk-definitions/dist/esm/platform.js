import { create } from "./protocol";
/**
 * PlatformContext is an instance of the class that represents a specific Platform
 */
export class PlatformContext {
    network;
    config;
    constructor(network, config) {
        this.network = network;
        this.config = config;
    }
    /** provides access to the static attributes of the PlatformContext class */
    utils() {
        return this.constructor;
    }
    /** Create a new Protocol Client instance by protocol name */
    getProtocol(protocol, rpc) {
        return create(this.utils()._platform, protocol, rpc, this.config);
    }
    /** Look up transaction logs and parse out Wormhole messages */
    async parseWormholeMessages(chain, rpc, txid) {
        const wc = await this.getProtocol("WormholeCore", rpc);
        return wc.parseTransaction(txid);
    }
}
//# sourceMappingURL=platform.js.map