import { Chain, Network, Platform } from "@wormhole-foundation/sdk-base";
import "../payloads/automaticTokenBridge";
import "../payloads/tokenBridge";
import { EmptyPlatformMap } from "../protocol";
import { ProtocolPayload, ProtocolVAA, VAA } from "../vaa";
import { ChainAddress, NativeAddress } from "../address";
import { UnsignedTransaction } from "../unsignedTransaction";
declare global {
    namespace Wormhole {
        interface ProtocolToPlatformMapping {
            NTT: EmptyPlatformMap<Platform, NTT.ProtocolName>;
        }
    }
}
/**
 * @namespace NTT
 */
export declare namespace NTT {
    const _protocol = "NTT";
    /** The compile time type of the NTT protocol */
    export type ProtocolName = typeof _protocol;
    const _payloads: readonly ["WormholeTransfer"];
    export type PayloadNames = (typeof _payloads)[number];
    /** The VAAs emitted from the NTT protocol */
    export type VAA<PayloadName extends PayloadNames = PayloadNames> = ProtocolVAA<ProtocolName, PayloadName>;
    export type Payload<PayloadName extends PayloadNames = PayloadNames> = ProtocolPayload<ProtocolName, PayloadName>;
    export {};
}
export interface NTT<N extends Network, C extends Chain> {
    transfer(sender: NativeAddress<C>, amount: bigint, destination: ChainAddress): AsyncGenerator<UnsignedTransaction<N, C>>;
    redeem(vaa: VAA<"NTT:WormholeTransfer">, sender?: NativeAddress<C>): AsyncGenerator<UnsignedTransaction<N, C>>;
    getCurrentOutboundCapacity(): Promise<string>;
    getCurrentInboundCapacity(fromChain: Chain): Promise<string>;
}
//# sourceMappingURL=ntt.d.ts.map