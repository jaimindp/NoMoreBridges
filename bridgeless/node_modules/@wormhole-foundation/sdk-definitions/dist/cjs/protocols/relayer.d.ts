import { Chain } from "@wormhole-foundation/sdk-base";
import { TokenAddress } from "../types";
import { Platform } from "@wormhole-foundation/sdk-base";
import { EmptyPlatformMap } from "../protocol";
declare global {
    namespace Wormhole {
        interface ProtocolToPlatformMapping {
            Relayer: EmptyPlatformMap<Platform, "Relayer">;
        }
    }
}
export interface Relayer {
    relaySupported(chain: Chain): boolean;
    getRelayerFee(sourceChain: Chain, destChain: Chain, tokenId: TokenAddress<Chain>): Promise<bigint>;
    startTransferWithRelay(token: TokenAddress<Chain>, amount: bigint, toNativeToken: string, sendingChain: Chain, senderAddress: string, recipientChain: Chain, recipientAddress: string, overrides?: any): Promise<any>;
    calculateNativeTokenAmt(destChain: Chain, tokenId: TokenAddress<Chain>, amount: bigint, walletAddress: string): Promise<bigint>;
    calculateMaxSwapAmount(destChain: Chain, tokenId: TokenAddress<Chain>, walletAddress: string): Promise<bigint>;
}
//# sourceMappingURL=relayer.d.ts.map