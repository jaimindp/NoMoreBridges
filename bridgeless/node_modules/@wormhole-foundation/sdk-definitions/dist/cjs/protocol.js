"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.create = exports.getProtocolInitializer = exports.protocolIsRegistered = exports.registerProtocol = void 0;
const sdk_base_1 = require("@wormhole-foundation/sdk-base");
const protocolFactory = new Map();
function registerProtocol(platform, protocol, ctr) {
    let platforms = protocolFactory.get(protocol);
    if (!platforms)
        platforms = new Map();
    if (platforms.has(platform))
        return; //throw new Error(`Protocol ${platform} for protocol ${protocol} has already registered`);
    platforms.set(platform, ctr);
    protocolFactory.set(protocol, platforms);
}
exports.registerProtocol = registerProtocol;
function protocolIsRegistered(chainOrPlatform, protocol) {
    const platform = (0, sdk_base_1.isChain)(chainOrPlatform)
        ? sdk_base_1.chainToPlatform.get(chainOrPlatform)
        : chainOrPlatform;
    const platforms = protocolFactory.get(protocol);
    return !!platforms && platforms.has(platform);
}
exports.protocolIsRegistered = protocolIsRegistered;
function getProtocolInitializer(platform, protocol) {
    const platforms = protocolFactory.get(protocol);
    if (platforms) {
        const pctr = platforms.get(platform);
        if (pctr)
            return pctr;
    }
    throw new Error(`No protocols registered for ${platform}:${protocol}. ` +
        `This may be because the platform specific protocol implementation is not registered (by installing and importing it)` +
        ` or no implementation exists for this platform`);
}
exports.getProtocolInitializer = getProtocolInitializer;
const create = (platform, protocol, rpc, config) => {
    const pctr = getProtocolInitializer(platform, protocol);
    return pctr.fromRpc(rpc, config);
};
exports.create = create;
//# sourceMappingURL=protocol.js.map