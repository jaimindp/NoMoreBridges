import { Layout, CustomizableBytes } from "@wormhole-foundation/sdk-base";
import { RegisterPayloadTypes } from "../vaa";
export declare const depositWithPayloadLayout: <const P extends CustomizableBytes = undefined>(customPayload?: P | undefined) => readonly [{
    readonly name: "payloadId";
    readonly binary: "uint";
    readonly size: 1;
    readonly custom: 1;
    readonly omit: true;
}, {
    readonly name: "token";
    readonly binary: "bytes";
    readonly layout: readonly [{
        readonly binary: "bytes";
        readonly size: 32;
        readonly custom: {
            to: (val: Uint8Array) => import("..").UniversalAddress;
            from: (val: import("..").UniversalAddress) => Uint8Array;
        };
        readonly name: "address";
    }, {
        readonly binary: "uint";
        readonly size: 32;
        readonly name: "amount";
    }];
}, {
    readonly binary: "uint";
    readonly size: 4;
    readonly name: "sourceDomain";
}, {
    readonly binary: "uint";
    readonly size: 4;
    readonly name: "targetDomain";
}, {
    readonly binary: "uint";
    readonly size: 8;
    readonly name: "nonce";
}, {
    readonly binary: "bytes";
    readonly size: 32;
    readonly custom: {
        to: (val: Uint8Array) => import("..").UniversalAddress;
        from: (val: import("..").UniversalAddress) => Uint8Array;
    };
    readonly name: "caller";
}, {
    readonly binary: "bytes";
    readonly size: 32;
    readonly custom: {
        to: (val: Uint8Array) => import("..").UniversalAddress;
        from: (val: import("..").UniversalAddress) => Uint8Array;
    };
    readonly name: "mintRecipient";
}, { [K in "name" | "lengthSize" | keyof (P extends undefined ? {
    readonly binary: "bytes";
} : P extends Layout ? {
    readonly binary: "bytes";
    readonly layout: P;
} : P extends Uint8Array | import("@wormhole-foundation/sdk-base").FixedConversion<Uint8Array, infer To> | import("@wormhole-foundation/sdk-base").CustomConversion<Uint8Array, infer To> ? {
    readonly binary: "bytes";
    readonly custom: P;
} : P extends readonly [Layout, import("@wormhole-foundation/sdk-base").FixedConversion<infer From extends import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").LayoutObject | import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").PrimitiveType, infer To_1> | import("@wormhole-foundation/sdk-base").CustomConversion<infer From extends import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").LayoutObject | import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").PrimitiveType, infer To_1>] ? {
    readonly binary: "bytes";
    readonly layout: P[0];
    readonly custom: P[1];
} : never)]: K extends "name" | "lengthSize" ? {
    readonly name: "payload";
    readonly lengthSize: 2;
}[K] : K extends keyof (P extends undefined ? {
    readonly binary: "bytes";
} : P extends Layout ? {
    readonly binary: "bytes";
    readonly layout: P;
} : P extends Uint8Array | import("@wormhole-foundation/sdk-base").FixedConversion<Uint8Array, infer To> | import("@wormhole-foundation/sdk-base").CustomConversion<Uint8Array, infer To> ? {
    readonly binary: "bytes";
    readonly custom: P;
} : P extends readonly [Layout, import("@wormhole-foundation/sdk-base").FixedConversion<infer From extends import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").LayoutObject | import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").PrimitiveType, infer To_1> | import("@wormhole-foundation/sdk-base").CustomConversion<infer From extends import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").LayoutObject | import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").PrimitiveType, infer To_1>] ? {
    readonly binary: "bytes";
    readonly layout: P[0];
    readonly custom: P[1];
} : never) ? (P extends undefined ? {
    readonly binary: "bytes";
} : P extends Layout ? {
    readonly binary: "bytes";
    readonly layout: P;
} : P extends Uint8Array | import("@wormhole-foundation/sdk-base").FixedConversion<Uint8Array, infer To> | import("@wormhole-foundation/sdk-base").CustomConversion<Uint8Array, infer To> ? {
    readonly binary: "bytes";
    readonly custom: P;
} : P extends readonly [Layout, import("@wormhole-foundation/sdk-base").FixedConversion<infer From extends import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").LayoutObject | import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").PrimitiveType, infer To_1> | import("@wormhole-foundation/sdk-base").CustomConversion<infer From extends import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").LayoutObject | import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").PrimitiveType, infer To_1>] ? {
    readonly binary: "bytes";
    readonly layout: P[0];
    readonly custom: P[1];
} : never)[K] : never; }];
export declare const connectPayload: readonly [{
    readonly name: "payloadId";
    readonly binary: "uint";
    readonly size: 1;
    readonly custom: 1;
    readonly omit: true;
}, {
    readonly binary: "uint";
    readonly size: 32;
    readonly name: "targetRelayerFee";
}, {
    readonly binary: "uint";
    readonly size: 32;
    readonly name: "toNativeTokenAmount";
}, {
    readonly binary: "bytes";
    readonly size: 32;
    readonly custom: {
        to: (val: Uint8Array) => import("..").UniversalAddress;
        from: (val: import("..").UniversalAddress) => Uint8Array;
    };
    readonly name: "targetRecipient";
}];
export declare const namedPayloads: readonly [readonly ["DepositWithPayload", readonly [{
    readonly name: "payloadId";
    readonly binary: "uint";
    readonly size: 1;
    readonly custom: 1;
    readonly omit: true;
}, {
    readonly name: "token";
    readonly binary: "bytes";
    readonly layout: readonly [{
        readonly binary: "bytes";
        readonly size: 32;
        readonly custom: {
            to: (val: Uint8Array) => import("..").UniversalAddress;
            from: (val: import("..").UniversalAddress) => Uint8Array;
        };
        readonly name: "address";
    }, {
        readonly binary: "uint";
        readonly size: 32;
        readonly name: "amount";
    }];
}, {
    readonly binary: "uint";
    readonly size: 4;
    readonly name: "sourceDomain";
}, {
    readonly binary: "uint";
    readonly size: 4;
    readonly name: "targetDomain";
}, {
    readonly binary: "uint";
    readonly size: 8;
    readonly name: "nonce";
}, {
    readonly binary: "bytes";
    readonly size: 32;
    readonly custom: {
        to: (val: Uint8Array) => import("..").UniversalAddress;
        from: (val: import("..").UniversalAddress) => Uint8Array;
    };
    readonly name: "caller";
}, {
    readonly binary: "bytes";
    readonly size: 32;
    readonly custom: {
        to: (val: Uint8Array) => import("..").UniversalAddress;
        from: (val: import("..").UniversalAddress) => Uint8Array;
    };
    readonly name: "mintRecipient";
}, {
    name: "payload";
    binary: "bytes";
    lengthSize: 2;
}]], readonly ["TransferWithRelay", readonly [{
    readonly name: "payloadId";
    readonly binary: "uint";
    readonly size: 1;
    readonly custom: 1;
    readonly omit: true;
}, {
    readonly name: "token";
    readonly binary: "bytes";
    readonly layout: readonly [{
        readonly binary: "bytes";
        readonly size: 32;
        readonly custom: {
            to: (val: Uint8Array) => import("..").UniversalAddress;
            from: (val: import("..").UniversalAddress) => Uint8Array;
        };
        readonly name: "address";
    }, {
        readonly binary: "uint";
        readonly size: 32;
        readonly name: "amount";
    }];
}, {
    readonly binary: "uint";
    readonly size: 4;
    readonly name: "sourceDomain";
}, {
    readonly binary: "uint";
    readonly size: 4;
    readonly name: "targetDomain";
}, {
    readonly binary: "uint";
    readonly size: 8;
    readonly name: "nonce";
}, {
    readonly binary: "bytes";
    readonly size: 32;
    readonly custom: {
        to: (val: Uint8Array) => import("..").UniversalAddress;
        from: (val: import("..").UniversalAddress) => Uint8Array;
    };
    readonly name: "caller";
}, {
    readonly binary: "bytes";
    readonly size: 32;
    readonly custom: {
        to: (val: Uint8Array) => import("..").UniversalAddress;
        from: (val: import("..").UniversalAddress) => Uint8Array;
    };
    readonly name: "mintRecipient";
}, {
    name: "payload";
    layout: readonly [{
        readonly name: "payloadId";
        readonly binary: "uint";
        readonly size: 1;
        readonly custom: 1;
        readonly omit: true;
    }, {
        readonly binary: "uint";
        readonly size: 32;
        readonly name: "targetRelayerFee";
    }, {
        readonly binary: "uint";
        readonly size: 32;
        readonly name: "toNativeTokenAmount";
    }, {
        readonly binary: "bytes";
        readonly size: 32;
        readonly custom: {
            to: (val: Uint8Array) => import("..").UniversalAddress;
            from: (val: import("..").UniversalAddress) => Uint8Array;
        };
        readonly name: "targetRecipient";
    }];
    binary: "bytes";
    lengthSize: 2;
}]]];
declare global {
    namespace Wormhole {
        interface PayloadLiteralToLayoutMapping extends RegisterPayloadTypes<"AutomaticCircleBridge", typeof namedPayloads> {
        }
    }
}
//# sourceMappingURL=automaticCircleBridge.d.ts.map