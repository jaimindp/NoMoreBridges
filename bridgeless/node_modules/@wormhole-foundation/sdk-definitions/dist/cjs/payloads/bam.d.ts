import { Layout, CustomizableBytes } from "@wormhole-foundation/sdk-base";
import { RegisterPayloadTypes } from "../vaa";
export declare const messageLayout: <T extends number, const C extends CustomizableBytes = undefined>(type: T, customContents?: C | undefined) => readonly [{
    readonly name: "magicByte";
    readonly binary: "uint";
    readonly size: 1;
    readonly custom: 187;
    readonly omit: true;
}, {
    readonly name: "version";
    readonly binary: "uint";
    readonly size: 1;
    readonly custom: 0;
    readonly omit: true;
}, {
    readonly name: "type";
    readonly binary: "uint";
    readonly size: 1;
    readonly custom: T;
    readonly omit: true;
}, {
    readonly name: "index";
    readonly binary: "uint";
    readonly size: 8;
}, {
    readonly custom: {
        to: (val: number) => "Solana" | "Btc" | "Algorand" | "Sui" | "Aptos" | "Near" | "Acala" | "Arbitrum" | "Aurora" | "Avalanche" | "Base" | "Bsc" | "Celo" | "Ethereum" | "Fantom" | "Gnosis" | "Karura" | "Klaytn" | "Moonbeam" | "Neon" | "Oasis" | "Optimism" | "Polygon" | "Rootstock" | "Sepolia" | "ArbitrumSepolia" | "BaseSepolia" | "OptimismSepolia" | "Holesky" | "Pythnet" | "Cosmoshub" | "Evmos" | "Injective" | "Kujira" | "Osmosis" | "Sei" | "Terra" | "Terra2" | "Wormchain" | "Xpla" | "Dymension" | "Neutron" | "Stargaze" | "Celestia";
        from: (val: "Solana" | "Btc" | "Algorand" | "Sui" | "Aptos" | "Near" | "Acala" | "Arbitrum" | "Aurora" | "Avalanche" | "Base" | "Bsc" | "Celo" | "Ethereum" | "Fantom" | "Gnosis" | "Karura" | "Klaytn" | "Moonbeam" | "Neon" | "Oasis" | "Optimism" | "Polygon" | "Rootstock" | "Sepolia" | "ArbitrumSepolia" | "BaseSepolia" | "OptimismSepolia" | "Holesky" | "Pythnet" | "Cosmoshub" | "Evmos" | "Injective" | "Kujira" | "Osmosis" | "Sei" | "Terra" | "Terra2" | "Wormchain" | "Xpla" | "Dymension" | "Neutron" | "Stargaze" | "Celestia") => number;
    };
    readonly binary: "uint";
    readonly size: 2;
    readonly name: "targetChain";
}, {
    readonly binary: "bytes";
    readonly lengthSize: 2;
    readonly name: "targetAddress";
}, {
    readonly binary: "bytes";
    readonly lengthSize: 2;
    readonly name: "senderAddress";
}, { [K in "name" | "lengthSize" | keyof (C extends undefined ? {
    readonly binary: "bytes";
} : C extends Layout ? {
    readonly binary: "bytes";
    readonly layout: C;
} : C extends Uint8Array | import("@wormhole-foundation/sdk-base").FixedConversion<Uint8Array, infer To> | import("@wormhole-foundation/sdk-base").CustomConversion<Uint8Array, infer To> ? {
    readonly binary: "bytes";
    readonly custom: C;
} : C extends readonly [Layout, import("@wormhole-foundation/sdk-base").FixedConversion<infer From extends import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").LayoutObject | import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").PrimitiveType, infer To_1> | import("@wormhole-foundation/sdk-base").CustomConversion<infer From extends import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").LayoutObject | import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").PrimitiveType, infer To_1>] ? {
    readonly binary: "bytes";
    readonly layout: C[0];
    readonly custom: C[1];
} : never)]: K extends "name" | "lengthSize" ? {
    readonly name: "contents";
    readonly lengthSize: 2;
}[K] : K extends keyof (C extends undefined ? {
    readonly binary: "bytes";
} : C extends Layout ? {
    readonly binary: "bytes";
    readonly layout: C;
} : C extends Uint8Array | import("@wormhole-foundation/sdk-base").FixedConversion<Uint8Array, infer To> | import("@wormhole-foundation/sdk-base").CustomConversion<Uint8Array, infer To> ? {
    readonly binary: "bytes";
    readonly custom: C;
} : C extends readonly [Layout, import("@wormhole-foundation/sdk-base").FixedConversion<infer From extends import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").LayoutObject | import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").PrimitiveType, infer To_1> | import("@wormhole-foundation/sdk-base").CustomConversion<infer From extends import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").LayoutObject | import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").PrimitiveType, infer To_1>] ? {
    readonly binary: "bytes";
    readonly layout: C[0];
    readonly custom: C[1];
} : never) ? (C extends undefined ? {
    readonly binary: "bytes";
} : C extends Layout ? {
    readonly binary: "bytes";
    readonly layout: C;
} : C extends Uint8Array | import("@wormhole-foundation/sdk-base").FixedConversion<Uint8Array, infer To> | import("@wormhole-foundation/sdk-base").CustomConversion<Uint8Array, infer To> ? {
    readonly binary: "bytes";
    readonly custom: C;
} : C extends readonly [Layout, import("@wormhole-foundation/sdk-base").FixedConversion<infer From extends import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").LayoutObject | import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").PrimitiveType, infer To_1> | import("@wormhole-foundation/sdk-base").CustomConversion<infer From extends import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").LayoutObject | import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").PrimitiveType, infer To_1>] ? {
    readonly binary: "bytes";
    readonly layout: C[0];
    readonly custom: C[1];
} : never)[K] : never; }];
export declare const tokenMessageLayout: <B extends Pick<import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").FixedPrimitiveNum<number, false> | import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").OptionalToFromNum<number, false> | import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").FixedPrimitiveNum<bigint, false> | import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").OptionalToFromNum<bigint, false>, "custom">, A extends Pick<import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").FixedPrimitiveNum<number, false> | import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").OptionalToFromNum<number, false> | import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").FixedPrimitiveNum<bigint, false> | import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").OptionalToFromNum<bigint, false>, "custom">, const C extends CustomizableBytes = undefined>(custom?: {
    contents?: C | undefined;
    bridge?: B | undefined;
    assetIdentifier?: A | undefined;
} | undefined) => readonly [{
    readonly name: "magicByte";
    readonly binary: "uint";
    readonly size: 1;
    readonly custom: 187;
    readonly omit: true;
}, {
    readonly name: "version";
    readonly binary: "uint";
    readonly size: 1;
    readonly custom: 0;
    readonly omit: true;
}, {
    readonly name: "type";
    readonly binary: "uint";
    readonly size: 1;
    readonly custom: 1;
    readonly omit: true;
}, {
    readonly name: "index";
    readonly binary: "uint";
    readonly size: 8;
}, {
    readonly custom: {
        to: (val: number) => "Solana" | "Btc" | "Algorand" | "Sui" | "Aptos" | "Near" | "Acala" | "Arbitrum" | "Aurora" | "Avalanche" | "Base" | "Bsc" | "Celo" | "Ethereum" | "Fantom" | "Gnosis" | "Karura" | "Klaytn" | "Moonbeam" | "Neon" | "Oasis" | "Optimism" | "Polygon" | "Rootstock" | "Sepolia" | "ArbitrumSepolia" | "BaseSepolia" | "OptimismSepolia" | "Holesky" | "Pythnet" | "Cosmoshub" | "Evmos" | "Injective" | "Kujira" | "Osmosis" | "Sei" | "Terra" | "Terra2" | "Wormchain" | "Xpla" | "Dymension" | "Neutron" | "Stargaze" | "Celestia";
        from: (val: "Solana" | "Btc" | "Algorand" | "Sui" | "Aptos" | "Near" | "Acala" | "Arbitrum" | "Aurora" | "Avalanche" | "Base" | "Bsc" | "Celo" | "Ethereum" | "Fantom" | "Gnosis" | "Karura" | "Klaytn" | "Moonbeam" | "Neon" | "Oasis" | "Optimism" | "Polygon" | "Rootstock" | "Sepolia" | "ArbitrumSepolia" | "BaseSepolia" | "OptimismSepolia" | "Holesky" | "Pythnet" | "Cosmoshub" | "Evmos" | "Injective" | "Kujira" | "Osmosis" | "Sei" | "Terra" | "Terra2" | "Wormchain" | "Xpla" | "Dymension" | "Neutron" | "Stargaze" | "Celestia") => number;
    };
    readonly binary: "uint";
    readonly size: 2;
    readonly name: "targetChain";
}, {
    readonly binary: "bytes";
    readonly lengthSize: 2;
    readonly name: "targetAddress";
}, {
    readonly binary: "bytes";
    readonly lengthSize: 2;
    readonly name: "senderAddress";
}, { [K in "name" | "lengthSize" | keyof (C extends undefined ? {
    readonly binary: "bytes";
} : C extends Layout ? {
    readonly binary: "bytes";
    readonly layout: C;
} : C extends Uint8Array | import("@wormhole-foundation/sdk-base").FixedConversion<Uint8Array, infer To> | import("@wormhole-foundation/sdk-base").CustomConversion<Uint8Array, infer To> ? {
    readonly binary: "bytes";
    readonly custom: C;
} : C extends readonly [Layout, import("@wormhole-foundation/sdk-base").FixedConversion<infer From extends import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").LayoutObject | import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").PrimitiveType, infer To_1> | import("@wormhole-foundation/sdk-base").CustomConversion<infer From extends import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").LayoutObject | import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").PrimitiveType, infer To_1>] ? {
    readonly binary: "bytes";
    readonly layout: C[0];
    readonly custom: C[1];
} : never)]: K extends "name" | "lengthSize" ? {
    readonly name: "contents";
    readonly lengthSize: 2;
}[K] : K extends keyof (C extends undefined ? {
    readonly binary: "bytes";
} : C extends Layout ? {
    readonly binary: "bytes";
    readonly layout: C;
} : C extends Uint8Array | import("@wormhole-foundation/sdk-base").FixedConversion<Uint8Array, infer To> | import("@wormhole-foundation/sdk-base").CustomConversion<Uint8Array, infer To> ? {
    readonly binary: "bytes";
    readonly custom: C;
} : C extends readonly [Layout, import("@wormhole-foundation/sdk-base").FixedConversion<infer From extends import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").LayoutObject | import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").PrimitiveType, infer To_1> | import("@wormhole-foundation/sdk-base").CustomConversion<infer From extends import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").LayoutObject | import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").PrimitiveType, infer To_1>] ? {
    readonly binary: "bytes";
    readonly layout: C[0];
    readonly custom: C[1];
} : never) ? (C extends undefined ? {
    readonly binary: "bytes";
} : C extends Layout ? {
    readonly binary: "bytes";
    readonly layout: C;
} : C extends Uint8Array | import("@wormhole-foundation/sdk-base").FixedConversion<Uint8Array, infer To> | import("@wormhole-foundation/sdk-base").CustomConversion<Uint8Array, infer To> ? {
    readonly binary: "bytes";
    readonly custom: C;
} : C extends readonly [Layout, import("@wormhole-foundation/sdk-base").FixedConversion<infer From extends import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").LayoutObject | import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").PrimitiveType, infer To_1> | import("@wormhole-foundation/sdk-base").CustomConversion<infer From extends import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").LayoutObject | import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").PrimitiveType, infer To_1>] ? {
    readonly binary: "bytes";
    readonly layout: C[0];
    readonly custom: C[1];
} : never)[K] : never; }, {
    readonly custom: any;
    readonly name: "bridge";
    readonly binary: "uint";
    readonly size: 1;
} | {
    readonly custom?: undefined;
    readonly name: "bridge";
    readonly binary: "uint";
    readonly size: 1;
}, {
    readonly custom: any;
    readonly name: "assetIdentifier";
    readonly binary: "uint";
    readonly size: 2;
} | {
    readonly custom?: undefined;
    readonly name: "assetIdentifier";
    readonly binary: "uint";
    readonly size: 2;
}, {
    readonly binary: "uint";
    readonly size: 32;
    readonly name: "amount";
}];
export declare const extendedMessageLayout: <const C extends CustomizableBytes = undefined, const R extends CustomizableBytes = undefined>(custom?: {
    contents?: C | undefined;
    relaySignal?: R | undefined;
} | undefined) => readonly [{
    readonly name: "magicByte";
    readonly binary: "uint";
    readonly size: 1;
    readonly custom: 187;
    readonly omit: true;
}, {
    readonly name: "version";
    readonly binary: "uint";
    readonly size: 1;
    readonly custom: 0;
    readonly omit: true;
}, {
    readonly name: "type";
    readonly binary: "uint";
    readonly size: 1;
    readonly custom: 2;
    readonly omit: true;
}, {
    readonly name: "index";
    readonly binary: "uint";
    readonly size: 8;
}, {
    readonly custom: {
        to: (val: number) => "Solana" | "Btc" | "Algorand" | "Sui" | "Aptos" | "Near" | "Acala" | "Arbitrum" | "Aurora" | "Avalanche" | "Base" | "Bsc" | "Celo" | "Ethereum" | "Fantom" | "Gnosis" | "Karura" | "Klaytn" | "Moonbeam" | "Neon" | "Oasis" | "Optimism" | "Polygon" | "Rootstock" | "Sepolia" | "ArbitrumSepolia" | "BaseSepolia" | "OptimismSepolia" | "Holesky" | "Pythnet" | "Cosmoshub" | "Evmos" | "Injective" | "Kujira" | "Osmosis" | "Sei" | "Terra" | "Terra2" | "Wormchain" | "Xpla" | "Dymension" | "Neutron" | "Stargaze" | "Celestia";
        from: (val: "Solana" | "Btc" | "Algorand" | "Sui" | "Aptos" | "Near" | "Acala" | "Arbitrum" | "Aurora" | "Avalanche" | "Base" | "Bsc" | "Celo" | "Ethereum" | "Fantom" | "Gnosis" | "Karura" | "Klaytn" | "Moonbeam" | "Neon" | "Oasis" | "Optimism" | "Polygon" | "Rootstock" | "Sepolia" | "ArbitrumSepolia" | "BaseSepolia" | "OptimismSepolia" | "Holesky" | "Pythnet" | "Cosmoshub" | "Evmos" | "Injective" | "Kujira" | "Osmosis" | "Sei" | "Terra" | "Terra2" | "Wormchain" | "Xpla" | "Dymension" | "Neutron" | "Stargaze" | "Celestia") => number;
    };
    readonly binary: "uint";
    readonly size: 2;
    readonly name: "targetChain";
}, {
    readonly binary: "bytes";
    readonly lengthSize: 2;
    readonly name: "targetAddress";
}, {
    readonly binary: "bytes";
    readonly lengthSize: 2;
    readonly name: "senderAddress";
}, { [K in "name" | "lengthSize" | keyof (C extends undefined ? {
    readonly binary: "bytes";
} : C extends Layout ? {
    readonly binary: "bytes";
    readonly layout: C;
} : C extends Uint8Array | import("@wormhole-foundation/sdk-base").FixedConversion<Uint8Array, infer To> | import("@wormhole-foundation/sdk-base").CustomConversion<Uint8Array, infer To> ? {
    readonly binary: "bytes";
    readonly custom: C;
} : C extends readonly [Layout, import("@wormhole-foundation/sdk-base").FixedConversion<infer From extends import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").LayoutObject | import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").PrimitiveType, infer To_1> | import("@wormhole-foundation/sdk-base").CustomConversion<infer From extends import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").LayoutObject | import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").PrimitiveType, infer To_1>] ? {
    readonly binary: "bytes";
    readonly layout: C[0];
    readonly custom: C[1];
} : never)]: K extends "name" | "lengthSize" ? {
    readonly name: "contents";
    readonly lengthSize: 2;
}[K] : K extends keyof (C extends undefined ? {
    readonly binary: "bytes";
} : C extends Layout ? {
    readonly binary: "bytes";
    readonly layout: C;
} : C extends Uint8Array | import("@wormhole-foundation/sdk-base").FixedConversion<Uint8Array, infer To> | import("@wormhole-foundation/sdk-base").CustomConversion<Uint8Array, infer To> ? {
    readonly binary: "bytes";
    readonly custom: C;
} : C extends readonly [Layout, import("@wormhole-foundation/sdk-base").FixedConversion<infer From extends import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").LayoutObject | import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").PrimitiveType, infer To_1> | import("@wormhole-foundation/sdk-base").CustomConversion<infer From extends import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").LayoutObject | import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").PrimitiveType, infer To_1>] ? {
    readonly binary: "bytes";
    readonly layout: C[0];
    readonly custom: C[1];
} : never) ? (C extends undefined ? {
    readonly binary: "bytes";
} : C extends Layout ? {
    readonly binary: "bytes";
    readonly layout: C;
} : C extends Uint8Array | import("@wormhole-foundation/sdk-base").FixedConversion<Uint8Array, infer To> | import("@wormhole-foundation/sdk-base").CustomConversion<Uint8Array, infer To> ? {
    readonly binary: "bytes";
    readonly custom: C;
} : C extends readonly [Layout, import("@wormhole-foundation/sdk-base").FixedConversion<infer From extends import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").LayoutObject | import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").PrimitiveType, infer To_1> | import("@wormhole-foundation/sdk-base").CustomConversion<infer From extends import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").LayoutObject | import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").PrimitiveType, infer To_1>] ? {
    readonly binary: "bytes";
    readonly layout: C[0];
    readonly custom: C[1];
} : never)[K] : never; }, { [K_1 in "name" | "lengthSize" | keyof (R extends undefined ? {
    readonly binary: "bytes";
} : R extends Layout ? {
    readonly binary: "bytes";
    readonly layout: R;
} : R extends Uint8Array | import("@wormhole-foundation/sdk-base").FixedConversion<Uint8Array, infer To> | import("@wormhole-foundation/sdk-base").CustomConversion<Uint8Array, infer To> ? {
    readonly binary: "bytes";
    readonly custom: R;
} : R extends readonly [Layout, import("@wormhole-foundation/sdk-base").FixedConversion<infer From extends import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").LayoutObject | import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").PrimitiveType, infer To_1> | import("@wormhole-foundation/sdk-base").CustomConversion<infer From extends import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").LayoutObject | import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").PrimitiveType, infer To_1>] ? {
    readonly binary: "bytes";
    readonly layout: R[0];
    readonly custom: R[1];
} : never)]: K_1 extends "name" | "lengthSize" ? {
    readonly name: "relaySignal";
    readonly lengthSize: 2;
}[K_1] : K_1 extends keyof (R extends undefined ? {
    readonly binary: "bytes";
} : R extends Layout ? {
    readonly binary: "bytes";
    readonly layout: R;
} : R extends Uint8Array | import("@wormhole-foundation/sdk-base").FixedConversion<Uint8Array, infer To> | import("@wormhole-foundation/sdk-base").CustomConversion<Uint8Array, infer To> ? {
    readonly binary: "bytes";
    readonly custom: R;
} : R extends readonly [Layout, import("@wormhole-foundation/sdk-base").FixedConversion<infer From extends import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").LayoutObject | import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").PrimitiveType, infer To_1> | import("@wormhole-foundation/sdk-base").CustomConversion<infer From extends import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").LayoutObject | import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").PrimitiveType, infer To_1>] ? {
    readonly binary: "bytes";
    readonly layout: R[0];
    readonly custom: R[1];
} : never) ? (R extends undefined ? {
    readonly binary: "bytes";
} : R extends Layout ? {
    readonly binary: "bytes";
    readonly layout: R;
} : R extends Uint8Array | import("@wormhole-foundation/sdk-base").FixedConversion<Uint8Array, infer To> | import("@wormhole-foundation/sdk-base").CustomConversion<Uint8Array, infer To> ? {
    readonly binary: "bytes";
    readonly custom: R;
} : R extends readonly [Layout, import("@wormhole-foundation/sdk-base").FixedConversion<infer From extends import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").LayoutObject | import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").PrimitiveType, infer To_1> | import("@wormhole-foundation/sdk-base").CustomConversion<infer From extends import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").LayoutObject | import("@wormhole-foundation/sdk-base/dist/esm/utils/layout/layout").PrimitiveType, infer To_1>] ? {
    readonly binary: "bytes";
    readonly layout: R[0];
    readonly custom: R[1];
} : never)[K_1] : never; }];
export declare const namedPayloads: readonly [readonly ["Message", readonly [{
    readonly name: "magicByte";
    readonly binary: "uint";
    readonly size: 1;
    readonly custom: 187;
    readonly omit: true;
}, {
    readonly name: "version";
    readonly binary: "uint";
    readonly size: 1;
    readonly custom: 0;
    readonly omit: true;
}, {
    readonly name: "type";
    readonly binary: "uint";
    readonly size: 1;
    readonly custom: 0;
    readonly omit: true;
}, {
    readonly name: "index";
    readonly binary: "uint";
    readonly size: 8;
}, {
    readonly custom: {
        to: (val: number) => "Solana" | "Btc" | "Algorand" | "Sui" | "Aptos" | "Near" | "Acala" | "Arbitrum" | "Aurora" | "Avalanche" | "Base" | "Bsc" | "Celo" | "Ethereum" | "Fantom" | "Gnosis" | "Karura" | "Klaytn" | "Moonbeam" | "Neon" | "Oasis" | "Optimism" | "Polygon" | "Rootstock" | "Sepolia" | "ArbitrumSepolia" | "BaseSepolia" | "OptimismSepolia" | "Holesky" | "Pythnet" | "Cosmoshub" | "Evmos" | "Injective" | "Kujira" | "Osmosis" | "Sei" | "Terra" | "Terra2" | "Wormchain" | "Xpla" | "Dymension" | "Neutron" | "Stargaze" | "Celestia";
        from: (val: "Solana" | "Btc" | "Algorand" | "Sui" | "Aptos" | "Near" | "Acala" | "Arbitrum" | "Aurora" | "Avalanche" | "Base" | "Bsc" | "Celo" | "Ethereum" | "Fantom" | "Gnosis" | "Karura" | "Klaytn" | "Moonbeam" | "Neon" | "Oasis" | "Optimism" | "Polygon" | "Rootstock" | "Sepolia" | "ArbitrumSepolia" | "BaseSepolia" | "OptimismSepolia" | "Holesky" | "Pythnet" | "Cosmoshub" | "Evmos" | "Injective" | "Kujira" | "Osmosis" | "Sei" | "Terra" | "Terra2" | "Wormchain" | "Xpla" | "Dymension" | "Neutron" | "Stargaze" | "Celestia") => number;
    };
    readonly binary: "uint";
    readonly size: 2;
    readonly name: "targetChain";
}, {
    readonly binary: "bytes";
    readonly lengthSize: 2;
    readonly name: "targetAddress";
}, {
    readonly binary: "bytes";
    readonly lengthSize: 2;
    readonly name: "senderAddress";
}, {
    name: "contents";
    binary: "bytes";
    lengthSize: 2;
}]], readonly ["TokenMessage", readonly [{
    readonly name: "magicByte";
    readonly binary: "uint";
    readonly size: 1;
    readonly custom: 187;
    readonly omit: true;
}, {
    readonly name: "version";
    readonly binary: "uint";
    readonly size: 1;
    readonly custom: 0;
    readonly omit: true;
}, {
    readonly name: "type";
    readonly binary: "uint";
    readonly size: 1;
    readonly custom: 1;
    readonly omit: true;
}, {
    readonly name: "index";
    readonly binary: "uint";
    readonly size: 8;
}, {
    readonly custom: {
        to: (val: number) => "Solana" | "Btc" | "Algorand" | "Sui" | "Aptos" | "Near" | "Acala" | "Arbitrum" | "Aurora" | "Avalanche" | "Base" | "Bsc" | "Celo" | "Ethereum" | "Fantom" | "Gnosis" | "Karura" | "Klaytn" | "Moonbeam" | "Neon" | "Oasis" | "Optimism" | "Polygon" | "Rootstock" | "Sepolia" | "ArbitrumSepolia" | "BaseSepolia" | "OptimismSepolia" | "Holesky" | "Pythnet" | "Cosmoshub" | "Evmos" | "Injective" | "Kujira" | "Osmosis" | "Sei" | "Terra" | "Terra2" | "Wormchain" | "Xpla" | "Dymension" | "Neutron" | "Stargaze" | "Celestia";
        from: (val: "Solana" | "Btc" | "Algorand" | "Sui" | "Aptos" | "Near" | "Acala" | "Arbitrum" | "Aurora" | "Avalanche" | "Base" | "Bsc" | "Celo" | "Ethereum" | "Fantom" | "Gnosis" | "Karura" | "Klaytn" | "Moonbeam" | "Neon" | "Oasis" | "Optimism" | "Polygon" | "Rootstock" | "Sepolia" | "ArbitrumSepolia" | "BaseSepolia" | "OptimismSepolia" | "Holesky" | "Pythnet" | "Cosmoshub" | "Evmos" | "Injective" | "Kujira" | "Osmosis" | "Sei" | "Terra" | "Terra2" | "Wormchain" | "Xpla" | "Dymension" | "Neutron" | "Stargaze" | "Celestia") => number;
    };
    readonly binary: "uint";
    readonly size: 2;
    readonly name: "targetChain";
}, {
    readonly binary: "bytes";
    readonly lengthSize: 2;
    readonly name: "targetAddress";
}, {
    readonly binary: "bytes";
    readonly lengthSize: 2;
    readonly name: "senderAddress";
}, {
    name: "contents";
    binary: "bytes";
    lengthSize: 2;
}, {
    readonly custom: any;
    readonly name: "bridge";
    readonly binary: "uint";
    readonly size: 1;
} | {
    readonly custom?: undefined;
    readonly name: "bridge";
    readonly binary: "uint";
    readonly size: 1;
}, {
    readonly custom: any;
    readonly name: "assetIdentifier";
    readonly binary: "uint";
    readonly size: 2;
} | {
    readonly custom?: undefined;
    readonly name: "assetIdentifier";
    readonly binary: "uint";
    readonly size: 2;
}, {
    readonly binary: "uint";
    readonly size: 32;
    readonly name: "amount";
}]], readonly ["ExtendedMessage", readonly [{
    readonly name: "magicByte";
    readonly binary: "uint";
    readonly size: 1;
    readonly custom: 187;
    readonly omit: true;
}, {
    readonly name: "version";
    readonly binary: "uint";
    readonly size: 1;
    readonly custom: 0;
    readonly omit: true;
}, {
    readonly name: "type";
    readonly binary: "uint";
    readonly size: 1;
    readonly custom: 2;
    readonly omit: true;
}, {
    readonly name: "index";
    readonly binary: "uint";
    readonly size: 8;
}, {
    readonly custom: {
        to: (val: number) => "Solana" | "Btc" | "Algorand" | "Sui" | "Aptos" | "Near" | "Acala" | "Arbitrum" | "Aurora" | "Avalanche" | "Base" | "Bsc" | "Celo" | "Ethereum" | "Fantom" | "Gnosis" | "Karura" | "Klaytn" | "Moonbeam" | "Neon" | "Oasis" | "Optimism" | "Polygon" | "Rootstock" | "Sepolia" | "ArbitrumSepolia" | "BaseSepolia" | "OptimismSepolia" | "Holesky" | "Pythnet" | "Cosmoshub" | "Evmos" | "Injective" | "Kujira" | "Osmosis" | "Sei" | "Terra" | "Terra2" | "Wormchain" | "Xpla" | "Dymension" | "Neutron" | "Stargaze" | "Celestia";
        from: (val: "Solana" | "Btc" | "Algorand" | "Sui" | "Aptos" | "Near" | "Acala" | "Arbitrum" | "Aurora" | "Avalanche" | "Base" | "Bsc" | "Celo" | "Ethereum" | "Fantom" | "Gnosis" | "Karura" | "Klaytn" | "Moonbeam" | "Neon" | "Oasis" | "Optimism" | "Polygon" | "Rootstock" | "Sepolia" | "ArbitrumSepolia" | "BaseSepolia" | "OptimismSepolia" | "Holesky" | "Pythnet" | "Cosmoshub" | "Evmos" | "Injective" | "Kujira" | "Osmosis" | "Sei" | "Terra" | "Terra2" | "Wormchain" | "Xpla" | "Dymension" | "Neutron" | "Stargaze" | "Celestia") => number;
    };
    readonly binary: "uint";
    readonly size: 2;
    readonly name: "targetChain";
}, {
    readonly binary: "bytes";
    readonly lengthSize: 2;
    readonly name: "targetAddress";
}, {
    readonly binary: "bytes";
    readonly lengthSize: 2;
    readonly name: "senderAddress";
}, {
    name: "contents";
    binary: "bytes";
    lengthSize: 2;
}, {
    name: "relaySignal";
    binary: "bytes";
    lengthSize: 2;
}]]];
declare global {
    namespace Wormhole {
        interface PayloadLiteralToLayoutMapping extends RegisterPayloadTypes<"BAM", typeof namedPayloads> {
        }
    }
}
//# sourceMappingURL=bam.d.ts.map