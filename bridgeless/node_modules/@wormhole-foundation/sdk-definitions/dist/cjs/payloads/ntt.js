"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.namedPayloads = exports.wormholeTransceiverMessageLayout = exports.nttManagerMessageLayout = exports.transceiverMessageLayout = exports.nativeTokenTransferLayout = exports.trimmedAmountLayout = void 0;
const sdk_base_1 = require("@wormhole-foundation/sdk-base");
const layout_items_1 = require("../layout-items");
const vaa_1 = require("../vaa");
exports.trimmedAmountLayout = [
    { name: "decimals", binary: "uint", size: 1 },
    { name: "amount", binary: "uint", size: 8 },
];
const prefixItem = (prefix) => ({ name: "prefix", binary: "bytes", custom: Uint8Array.from(prefix), omit: true });
exports.nativeTokenTransferLayout = [
    prefixItem([0x99, 0x4e, 0x54, 0x54]),
    { name: "trimmedAmount", binary: "bytes", layout: exports.trimmedAmountLayout },
    { name: "sourceToken", ...layout_items_1.universalAddressItem },
    { name: "recipientAddress", ...layout_items_1.universalAddressItem },
    { name: "recipientChain", ...(0, layout_items_1.chainItem)() }, //TODO restrict to supported chains?
];
const transceiverMessageLayout = (prefix, nttManagerPayload, transceiverPayload) => [
    prefixItem(prefix),
    { name: "sourceNttManager", ...layout_items_1.universalAddressItem },
    { name: "recipientNttManager", ...layout_items_1.universalAddressItem },
    (0, sdk_base_1.customizableBytes)({ name: "nttManagerPayload", lengthSize: 2 }, nttManagerPayload),
    (0, sdk_base_1.customizableBytes)({ name: "transceiverPayload", lengthSize: 2 }, transceiverPayload),
];
exports.transceiverMessageLayout = transceiverMessageLayout;
const nttManagerMessageLayout = (customPayload) => [
    { name: "sequence", ...layout_items_1.sequenceItem },
    { name: "sender", ...layout_items_1.universalAddressItem },
    (0, sdk_base_1.customizableBytes)({ name: "payload", lengthSize: 2 }, customPayload),
];
exports.nttManagerMessageLayout = nttManagerMessageLayout;
const wormholeTransceiverMessageLayout = (nttManagerPayload) => (0, exports.transceiverMessageLayout)([0x99, 0x45, 0xff, 0x10], nttManagerPayload, new Uint8Array(0));
exports.wormholeTransceiverMessageLayout = wormholeTransceiverMessageLayout;
const wormholeNativeTokenTransferLayout = (0, exports.wormholeTransceiverMessageLayout)((0, exports.nttManagerMessageLayout)(exports.nativeTokenTransferLayout));
exports.namedPayloads = [
    ["WormholeTransfer", wormholeNativeTokenTransferLayout],
];
(0, vaa_1.registerPayloadTypes)("NTT", exports.namedPayloads);
//# sourceMappingURL=ntt.js.map