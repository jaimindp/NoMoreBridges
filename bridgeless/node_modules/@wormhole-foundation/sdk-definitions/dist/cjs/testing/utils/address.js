"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeNativeAddress = exports.makeUniversalAddress = exports.makeUniversalChainAddress = exports.makeChainAddress = exports.makeNativeAddressHexString = void 0;
const sdk_base_1 = require("@wormhole-foundation/sdk-base");
const crypto_1 = __importDefault(require("crypto"));
const __1 = require("../../");
// return a random buffer of length n
function randomBytes(n) {
    const buff = new Uint8Array(n);
    crypto_1.default.getRandomValues(buff);
    return buff;
}
// get a random 20 byte address
function fake20ByteAddress() {
    const buff = randomBytes(20);
    return sdk_base_1.encoding.hex.encode(buff);
}
// get a random 32 byte address
function fake32ByteAddress() {
    const buff = randomBytes(32);
    return sdk_base_1.encoding.hex.encode(buff);
}
// make a random native address for a given chain
function makeNativeAddressHexString(chain) {
    switch ((0, sdk_base_1.chainToPlatform)(chain)) {
        case "Evm":
            return fake20ByteAddress();
        case "Cosmwasm":
            return fake20ByteAddress();
        default:
            return fake32ByteAddress();
    }
}
exports.makeNativeAddressHexString = makeNativeAddressHexString;
// make a random ChainAddress for a given chain
function makeChainAddress(chain) {
    const address = makeUniversalAddress(chain);
    return { chain, address: address.toNative(chain) };
}
exports.makeChainAddress = makeChainAddress;
// make a random ChainAddress for a given chain
function makeUniversalChainAddress(chain) {
    const address = makeUniversalAddress(chain);
    return { chain, address };
}
exports.makeUniversalChainAddress = makeUniversalChainAddress;
function makeUniversalAddress(chain) {
    const nativeAddress = makeNativeAddressHexString(chain);
    return new __1.UniversalAddress("0x" + nativeAddress.padStart(64, "0"));
}
exports.makeUniversalAddress = makeUniversalAddress;
// make a random NativeAddress for a given chain
function makeNativeAddress(chain) {
    let cn;
    if ((0, sdk_base_1.isPlatform)(chain)) {
        // just grab the first one
        cn = (0, sdk_base_1.platformToChains)(chain)[0];
    }
    else {
        cn = chain;
    }
    return (0, __1.toNative)(cn, makeNativeAddressHexString(cn));
}
exports.makeNativeAddress = makeNativeAddress;
//# sourceMappingURL=address.js.map